{"version":3,"file":"index.es.js","sources":["../src/core/contexts/SnackbarContext.tsx","../src/core/contexts/FireCMSContext.tsx","../src/core/contexts/BreacrumbsContext.tsx","../src/core/contexts/ModeState.tsx","../src/core/util/navigation_utils.ts","../src/core/util/navigation_from_path.ts","../src/core/internal/useBuildSideEntityController.tsx","../src/models/entities.ts","../src/core/util/objects.ts","../src/core/util/property_builder.ts","../src/core/utils.ts","../src/core/internal/useBuildNavigationContext.tsx","../src/core/internal/useBuildAuthController.tsx","../src/core/util/storage.tsx","../src/core/FireCMS.tsx","../src/core/components/ErrorView.tsx","../src/preview/components/AsyncPreviewComponent.tsx","../src/core/internal/ErrorBoundary.tsx","../src/core/util/hash.ts","../src/core/util/chip_utils.ts","../src/core/util/enums.ts","../src/preview/components/CustomChip.tsx","../src/preview/components/StringPreview.tsx","../src/preview/components/ArrayOfStringsPreview.tsx","../src/preview/components/ArrayEnumPreview.tsx","../src/preview/components/ArrayPropertyEnumPreview.tsx","../src/preview/components/BooleanPreview.tsx","../src/preview/components/Markdown.tsx","../src/preview/components/EmptyValue.tsx","../src/preview/util.ts","../src/preview/components/ImagePreview.tsx","../src/preview/components/ArrayOfMapsPreview.tsx","../src/preview/components/NumberPreview.tsx","../src/core/util/dates.ts","../src/hooks/useFireCMSContext.tsx","../src/hooks/data/useDataSource.tsx","../src/hooks/data/useCollectionFetch.tsx","../src/hooks/data/useEntityFetch.tsx","../src/hooks/data/save.ts","../src/hooks/data/delete.ts","../src/form/useClearRestoreValue.tsx","../src/hooks/useNavigation.tsx","../src/hooks/useResolvedNavigationFrom.tsx","../src/hooks/useStorageSource.tsx","../src/hooks/useAuthController.tsx","../src/hooks/useSideEntityController.tsx","../src/hooks/useSnackbarController.tsx","../src/hooks/useModeState.tsx","../src/hooks/useClipboard.tsx","../src/preview/components/TimestampPreview.tsx","../src/preview/components/UrlComponentPreview.tsx","../src/preview/components/SkeletonComponent.tsx","../src/preview/components/StorageThumbnail.tsx","../src/preview/components/ArrayOfStorageComponentsPreview.tsx","../src/preview/components/ReferencePreview.tsx","../src/preview/components/ArrayOfReferencesPreview.tsx","../src/preview/components/MapPreview.tsx","../src/preview/components/ArrayPreview.tsx","../src/preview/components/ArrayOneOfPreview.tsx","../src/preview/PreviewComponent.tsx","../src/core/util/property_icons.tsx","../src/core/components/EntityPreview.tsx","../src/core/components/CollectionTable/internal/common.tsx","../src/core/components/CollectionTable/internal/SearchBar.tsx","../src/core/components/CollectionTable/internal/CollectionTableToolbar.tsx","../src/core/components/CollectionTable/internal/CollectionRowActions.tsx","../src/core/components/Table/common.tsx","../src/core/components/Table/TableCell.tsx","../src/form/validation.ts","../src/core/components/CollectionTable/internal/fields/TableInput.tsx","../src/core/components/CollectionTable/internal/fields/TableSelect.tsx","../src/core/components/CollectionTable/internal/fields/TableNumberInput.tsx","../src/core/components/CollectionTable/internal/fields/TableSwitch.tsx","../src/core/components/CollectionTable/internal/fields/TableDateField.tsx","../src/core/components/CollectionTable/internal/fields/TableReferenceField.tsx","../src/core/components/CollectionTable/internal/fields/TableStorageUpload.tsx","../src/core/components/CollectionTable/internal/PropertyTableCell.tsx","../src/core/components/CollectionTable/internal/popup_field/useDraggable.tsx","../src/core/components/CollectionTable/internal/popup_field/useWindowSize.tsx","../src/form/components/ArrayContainer.tsx","../src/form/components/FieldDescription.tsx","../src/form/components/LabelWithIcon.tsx","../src/form/fields/Select.tsx","../src/form/fields/ArrayEnumSelect.tsx","../src/form/fields/StorageUploadField.tsx","../src/form/fields/TextField.tsx","../src/form/fields/SwitchField.tsx","../src/form/fields/DateTimeField.tsx","../src/form/fields/ReferenceField.tsx","../src/form/fields/ArrayDefaultField.tsx","../src/form/fields/ArrayOneOfField.tsx","../src/form/fields/ReadOnlyField.tsx","../src/form/fields/MarkdownField.tsx","../src/form/fields/ArrayOfReferencesField.tsx","../src/form/form_factory.tsx","../src/form/fields/MapField.tsx","../src/form/components/ErrorFocus.tsx","../src/form/components/CustomIdField.tsx","../src/form/EntityForm.tsx","../src/core/components/CollectionTable/internal/popup_field/ElementResizeListener.tsx","../src/core/components/CollectionTable/internal/popup_field/PopupFormField.tsx","../src/core/components/CollectionTable/column_builder.tsx","../src/core/components/CollectionTable/CollectionTable.tsx","../src/core/components/ReferenceDialog.tsx","../src/core/components/CollectionTable/internal/DeleteEntityDialog.tsx","../src/core/util/csv.ts","../src/core/components/CollectionTable/internal/ExportButton.tsx","../src/core/util/permissions.ts","../src/core/components/EntityCollectionView.tsx","../src/core/components/CircularProgressCenter.tsx","../src/core/components/FireCMSHomePage.tsx","../src/core/components/Table/styles.tsx","../src/core/components/Table/filters/StringNumberFilterField.tsx","../src/core/components/Table/filters/BooleanFilterField.tsx","../src/core/components/Table/filters/DateTimeFilterfield.tsx","../src/core/components/Table/TableHeader.tsx","../src/core/components/Table/Table.tsx","../src/hooks/useBreadcrumbsContext.tsx","../src/core/components/NotFoundPage.tsx","../src/core/NavigationRoutes.tsx","../src/core/components/FireCMSLogo.tsx","../src/core/Drawer.tsx","../src/core/internal/FireCMSAppBar.tsx","../src/core/Scaffold.tsx","../src/core/internal/SlideFadeTransition.tsx","../src/core/internal/SideDialogDrawer.tsx","../src/core/internal/common.tsx","../src/core/internal/EntityView.tsx","../src/core/internal/useUnsavedChangesDialog.tsx","../src/core/SideEntityDialogs.tsx","../src/core/theme.ts","../src/core/builders.ts","../src/firebase_app/hooks/useFirebaseAuthDelegate.ts","../src/firebase_app/hooks/useFirestoreDataSource.ts","../src/firebase_app/hooks/useFirebaseStorageSource.ts","../src/firebase_app/hooks/useInitialiseFirebase.ts","../src/firebase_app/components/social_icons.tsx","../src/firebase_app/components/FirebaseLoginView.tsx","../src/firebase_app/FirebaseCMSApp.tsx","../src/firebase_app/models/text_search.ts"],"sourcesContent":["import React, { useState } from \"react\";\nimport { Alert, Snackbar } from \"@mui/material\";\nimport { SnackbarController, SnackbarMessageType } from \"../../hooks\";\n\nconst DEFAULT_STATE = {\n    isOpen: false,\n    close: () => {\n    },\n    open: (props: {\n        type: SnackbarMessageType;\n        message: string;\n    }) => {\n    }\n};\n\nexport const SnackbarContext = React.createContext<SnackbarController>(DEFAULT_STATE);\n\nexport const SnackbarProvider: React.FC = ({ children }) => {\n\n    const [isOpen, setIsOpen] = useState(false);\n    const [title, setTitle] = useState<string | undefined>(undefined);\n    const [message, setMessage] = useState<string | undefined>(undefined);\n    const [type, setType] = useState<SnackbarMessageType | undefined>(undefined);\n\n    const close = () => {\n        setIsOpen(false);\n        setTitle(undefined);\n        setMessage(undefined);\n        setType(undefined);\n    };\n\n    const open = (props: {\n        type: SnackbarMessageType;\n        title?: string;\n        message: string;\n    }) => {\n        const { type, message, title } = props;\n        setType(type);\n        setMessage(message);\n        setTitle(title);\n        setIsOpen(true);\n    };\n\n    return (\n        <SnackbarContext.Provider\n            value={{\n                isOpen,\n                close,\n                open\n            }}\n        >\n\n            {children}\n\n            <Snackbar open={isOpen}\n                      autoHideDuration={3000}\n                      onClose={(_) => close()}>\n                <Alert elevation={1}\n                       variant=\"filled\"\n                       onClose={(_) => close()}\n                       severity={type}>\n\n                    {title && <div>{title}</div>}\n                    {message && <div>{message}</div>}\n\n                </Alert>\n            </Snackbar>\n\n        </SnackbarContext.Provider>\n    );\n};\n","import React from \"react\";\nimport { FireCMSContext } from \"../../models\";\n\n\nexport const FireCMSContextInstance = React.createContext<FireCMSContext>({\n    sideEntityController: {} as any,\n    navigationContext: {} as any,\n    dataSource: {} as any,\n    storageSource: {} as any,\n    authController: {} as any,\n    snackbarController: {} as any\n});\n\n\n/**\n *\n * @category Core\n */\nexport const FireCMSContextProvider: React.FC<React.PropsWithChildren<FireCMSContext>> = ({\n                                                                                              children,\n                                                                                              ...context\n                                                                                          }) => {\n\n    return (\n        <FireCMSContextInstance.Provider\n            value={context}\n        >\n            {children}\n        </FireCMSContextInstance.Provider>\n    );\n};\n","import React, { useState } from \"react\";\nimport {\n    BreadcrumbEntry,\n    BreadcrumbsController\n} from \"../../hooks/useBreadcrumbsContext\";\n\nconst DEFAULT_BREADCRUMBS_CONTROLLER = {\n    breadcrumbs: [],\n    set: (props: {\n        breadcrumbs: BreadcrumbEntry[];\n    }) => {\n    }\n};\n\n\nexport const BreadcrumbContext = React.createContext<BreadcrumbsController>(DEFAULT_BREADCRUMBS_CONTROLLER);\n\n\ninterface BreadcrumbsProviderProps {\n    children: React.ReactNode;\n}\n\nexport const BreadcrumbsProvider: React.FC<BreadcrumbsProviderProps> = ({ children }) => {\n\n    const [breadcrumbs, setBreadcrumbs] = useState<BreadcrumbEntry[]>([]);\n\n    const set = (props: {\n        breadcrumbs: BreadcrumbEntry[];\n    }) => {\n        setBreadcrumbs(props.breadcrumbs);\n    };\n\n    return (\n        <BreadcrumbContext.Provider\n            value={{\n                breadcrumbs,\n                set\n            }}\n        >\n            {children}\n        </BreadcrumbContext.Provider>\n    );\n};\n","import { useMediaQuery } from \"@mui/material\";\nimport React, { useEffect, useState } from \"react\";\nimport { ModeState } from \"../../hooks\";\n\nconst DEFAULT_MODE_STATE: ModeState = {\n    mode: \"light\",\n    setMode: (mode: \"light\" | \"dark\") => {\n    },\n    toggleMode: () => {\n    }\n};\n\n\nexport const ModeStateContext = React.createContext<ModeState>(DEFAULT_MODE_STATE);\n\n\ninterface ModeProviderProps {\n    children: React.ReactNode;\n}\n\nexport const ModeProvider: React.FC<ModeProviderProps> = ({ children }) => {\n\n    const prefersDarkModeQuery = useMediaQuery(\"(prefers-color-scheme: dark)\");\n    const prefersDarkModeStorage: boolean | null = localStorage.getItem(\"prefers-dark-mode\") != null ? localStorage.getItem(\"prefers-dark-mode\") === \"true\" : null;\n    const prefersDarkMode = prefersDarkModeStorage ?? prefersDarkModeQuery;\n    const [mode, setMode] = useState<\"light\" | \"dark\">(prefersDarkMode ? \"dark\" : \"light\");\n\n    useEffect(() => {\n        setMode(prefersDarkMode ? \"dark\" : \"light\");\n    }, [prefersDarkMode]);\n\n    const toggleMode = () => {\n        if (mode === \"light\") {\n            if (!prefersDarkModeQuery)\n                localStorage.setItem(\"prefers-dark-mode\", \"true\");\n            else\n                localStorage.removeItem(\"prefers-dark-mode\");\n            setMode(\"dark\");\n        } else {\n            if (prefersDarkModeQuery)\n                localStorage.setItem(\"prefers-dark-mode\", \"false\");\n            else\n                localStorage.removeItem(\"prefers-dark-mode\");\n            setMode(\"light\");\n        }\n    };\n\n    return (\n        <ModeStateContext.Provider\n            value={{\n                mode,\n                setMode,\n                toggleMode\n            }}\n        >\n            {children}\n        </ModeStateContext.Provider>\n    );\n};\n","import { EntityCollection, NavigationContext } from \"../../models\";\n\nexport function removeInitialAndTrailingSlashes(s: string): string {\n    return removeInitialSlash(removeTrailingSlash(s));\n}\n\nexport function removeInitialSlash(s: string) {\n    if (s.startsWith(\"/\"))\n        return s.slice(1);\n    else return s;\n}\n\nexport function removeTrailingSlash(s: string) {\n    if (s.endsWith(\"/\"))\n        return s.slice(0, -1);\n    else return s;\n}\n\n\nexport function addInitialSlash(s: string) {\n    if (s.startsWith(\"/\"))\n        return s;\n    else return `/${s}`;\n}\n\nexport function getLastSegment(path: string) {\n    const cleanPath = removeInitialAndTrailingSlashes(path);\n    if (cleanPath.includes(\"/\")) {\n        const segments = cleanPath.split(\"/\");\n        return segments[segments.length - 1];\n    }\n    return cleanPath;\n}\n\n\n/**\n * Find the corresponding view at any depth for a given path.\n * @param path\n * @param collections\n */\nexport function getCollectionByPath<M>(path: string, collections?: EntityCollection[]): EntityCollection<M> | undefined {\n\n    if (!collections)\n        return undefined;\n\n    const subpaths = removeInitialAndTrailingSlashes(path).split(\"/\");\n    if (subpaths.length % 2 === 0) {\n        throw Error(`Collection paths must have an odd number of segments: ${path}`);\n    }\n\n    return getCollectionFromCollectionsInternal(removeInitialAndTrailingSlashes(path), collections);\n\n}\n\nfunction getCollectionFromCollectionsInternal<M extends { [Key: string]: any }>(path: string, collectionViews: EntityCollection[]): EntityCollection | undefined {\n\n    const subpaths = removeInitialAndTrailingSlashes(path).split(\"/\");\n    const subpathCombinations = getCollectionPathsCombinations(subpaths);\n\n    let result: EntityCollection | undefined;\n    for (let i = 0; i < subpathCombinations.length; i++) {\n        const subpathCombination = subpathCombinations[i];\n        const navigationEntry = collectionViews && collectionViews.find((entry) => entry.path === subpathCombination);\n\n        if (navigationEntry) {\n\n            if (subpathCombination === path) {\n                result = navigationEntry;\n            } else if (navigationEntry.subcollections) {\n                const newPath = path.replace(subpathCombination, \"\").split(\"/\").slice(2).join(\"/\");\n                if (newPath.length > 0)\n                    result = getCollectionFromCollectionsInternal(newPath, navigationEntry.subcollections);\n            }\n        }\n        if (result) break;\n    }\n    return result;\n}\n\n/**\n * Get the subcollection combinations from a path:\n * \"sites/es/locales\" => [\"sites/es/locales\", \"sites\"]\n * @param subpaths\n */\nexport function getCollectionPathsCombinations(subpaths: string[]): string[] {\n    const entries = subpaths.length > 0 && subpaths.length % 2 === 0 ? subpaths.splice(0, subpaths.length - 1) : subpaths;\n\n    const length = entries.length;\n    const result: string[] = [];\n    for (let i = length; i > 0; i = i - 2) {\n        result.push(entries.slice(0, i).join(\"/\"));\n    }\n    return result;\n\n}\n\nexport interface TopNavigationEntry {\n    url: string;\n    name: string;\n    description?: string;\n    group?: string;\n}\n\nexport type TopNavigationResult = {\n    navigationEntries: TopNavigationEntry[],\n    groups: string[]\n};\n\nexport function computeTopNavigation(\n    navigationContext: NavigationContext,\n    includeHiddenViews: boolean\n): TopNavigationResult {\n\n    const navigation = navigationContext.navigation;\n    if (!navigation)\n        throw Error(\"You can only use `computeTopNavigation` with an initialised navigationContext\");\n\n    const navigationEntries: TopNavigationEntry[] = [\n        ...navigation.collections.map(collection => ({\n            url: navigationContext.buildUrlCollectionPath(collection.path),\n            name: collection.name,\n            description: collection.description,\n            group: collection.group\n        })),\n        ...(navigation.views ?? []).map(view =>\n            includeHiddenViews || !view.hideFromNavigation\n                ? ({\n                    url: navigationContext.buildCMSUrlPath(Array.isArray(view.path) ? view.path[0] : view.path),\n                    name: view.name,\n                    description: view.description,\n                    group: view.group\n                })\n                : undefined)\n            .filter((view) => !!view) as TopNavigationEntry[]\n    ];\n\n    const groups: string[] = Array.from(new Set(\n        Object.values(navigationEntries).map(e => e.group).filter(Boolean) as string[]\n    ).values());\n\n    return { navigationEntries, groups };\n}\n","import { EntityCollection, EntityCustomView } from \"../../models\";\nimport {\n    getCollectionPathsCombinations,\n    removeInitialAndTrailingSlashes\n} from \"./navigation_utils\";\n\nexport type NavigationViewInternal<M> =\n    | NavigationViewEntityInternal<M>\n    | NavigationViewCollectionInternal<M>\n    | NavigationViewEntityCustomInternal<M>;\n\ninterface NavigationViewEntityInternal<M> {\n    type: \"entity\";\n    entityId: string;\n    path: string;\n    parentCollection: EntityCollection<M>;\n}\n\ninterface NavigationViewCollectionInternal<M> {\n    type: \"collection\";\n    path: string;\n    collection: EntityCollection<M>;\n}\n\ninterface NavigationViewEntityCustomInternal<M> {\n    type: \"custom_view\";\n    path: string;\n    view: EntityCustomView<M>;\n}\n\nexport function getNavigationEntriesFromPathInternal<M extends { [Key: string]: any }>(props: {\n    path: string,\n    collections: EntityCollection[],\n    customViews?: EntityCustomView<M>[],\n    currentFullPath?: string\n}): NavigationViewInternal<M> [] {\n\n    const {\n        path,\n        collections,\n        currentFullPath\n    } = props;\n\n    const subpaths = removeInitialAndTrailingSlashes(path).split(\"/\");\n    const subpathCombinations = getCollectionPathsCombinations(subpaths);\n\n    const result: NavigationViewInternal<M> [] = [];\n    for (let i = 0; i < subpathCombinations.length; i++) {\n        const subpathCombination = subpathCombinations[i];\n\n        const collection = collections && collections.find((entry) => entry.path === subpathCombination);\n\n        if (collection) {\n            const collectionPath = currentFullPath && currentFullPath.length > 0\n                ? (currentFullPath + \"/\" + collection.path)\n                : collection.path;\n\n            result.push({\n                type: \"collection\",\n                path: collectionPath,\n                collection\n            });\n            const restOfThePath = removeInitialAndTrailingSlashes(removeInitialAndTrailingSlashes(path).replace(subpathCombination, \"\"));\n            const nextSegments = restOfThePath.length > 0 ? restOfThePath.split(\"/\") : [];\n            if (nextSegments.length > 0) {\n                const entityId = nextSegments[0];\n                const fullPath = collectionPath + \"/\" + entityId;\n                result.push({\n                    type: \"entity\",\n                    entityId: entityId,\n                    path: collectionPath,\n                    parentCollection: collection\n                });\n                if (nextSegments.length > 1) {\n                    const newPath = nextSegments.slice(1).join(\"/\");\n                    const customViews = collection.schema.views;\n                    const customView = customViews && customViews.find((entry) => entry.path === newPath);\n                    if (customView) {\n                        const path = currentFullPath && currentFullPath.length > 0\n                            ? (currentFullPath + \"/\" + customView.path)\n                            : customView.path;\n                        result.push({\n                            type: \"custom_view\",\n                            path: path,\n                            view: customView\n                        });\n                    } else if (collection.subcollections) {\n                        result.push(...getNavigationEntriesFromPathInternal({\n                            path: newPath,\n                            customViews: customViews,\n                            collections: collection.subcollections,\n                            currentFullPath: fullPath\n                        }));\n                    }\n                }\n            }\n            break;\n        }\n\n    }\n    return result;\n}\n","import { useCallback, useEffect, useRef, useState } from \"react\";\nimport {\n    EntityCollection,\n    NavigationContext,\n    SideEntityController,\n    SideEntityPanelProps\n} from \"../../models\";\nimport {\n    getNavigationEntriesFromPathInternal,\n    NavigationViewInternal\n} from \"../util/navigation_from_path\";\nimport { useLocation, useNavigate } from \"react-router-dom\";\nimport { removeInitialAndTrailingSlashes } from \"../util/navigation_utils\";\n\nconst NEW_URL_HASH = \"new\";\n\nexport const useBuildSideEntityController = (navigationContext: NavigationContext): SideEntityController => {\n\n    const location = useLocation();\n    const navigate = useNavigate();\n    const initialised = useRef<boolean>(false);\n    const [sidePanels, setSidePanels] = useState<SideEntityPanelProps[]>([]);\n\n    const collections = navigationContext.navigation?.collections;\n\n    const state = location.state as any;\n    const baseLocation = state && state.base_location ? state.base_location : location;\n\n    const updatePanels = useCallback((newPanels: SideEntityPanelProps[]) => {\n        setSidePanels(newPanels);\n        navigationContext.removeAllOverridesExcept(newPanels);\n    }, []);\n\n    useEffect(() => {\n        if (navigationContext.initialised) {\n            if (location?.state && state.panels) {\n                const statePanel = state.panels as SideEntityPanelProps[];\n                updatePanels(statePanel);\n            } else {\n                updatePanels([]);\n            }\n        }\n    }, [location?.state, navigationContext.initialised]);\n\n    // only on initialisation\n    useEffect(() => {\n        if (collections && !initialised.current) {\n            if (navigationContext.isUrlCollectionPath(location.pathname)) {\n                const newFlag = location.hash === `#${NEW_URL_HASH}`;\n                const entityOrCollectionPath = navigationContext.urlPathToDataPath(location.pathname);\n                const sidePanels = buildSidePanelsFromUrl(entityOrCollectionPath, collections, newFlag);\n                updatePanels(sidePanels);\n            }\n            initialised.current = true;\n        }\n    }, [location, collections, sidePanels]);\n\n    const close = useCallback(() => {\n\n        if (sidePanels.length === 0)\n            return;\n\n        const lastSidePanel = sidePanels[sidePanels.length - 1];\n        const locationPanels = location?.state && state.panels;\n        if (locationPanels && locationPanels.length > 0) {\n            const updatedPanels = [...locationPanels.slice(0, -1)];\n            // setSidePanels(updatedPanels);\n            navigate(-1);\n        } else {\n            const newPath = navigationContext.buildUrlCollectionPath(lastSidePanel.path);\n            // setSidePanels([]);\n            navigate(newPath, { replace: true });\n        }\n\n    }, [sidePanels, location]);\n\n    const open = useCallback(({\n                      path,\n                      entityId,\n                      selectedSubpath,\n                      copy,\n                      width,\n                      ...schemaProps\n                  }: SideEntityPanelProps) => {\n\n        if (copy && !entityId) {\n            throw Error(\"If you want to copy an entity you need to provide an entityId\");\n        }\n\n        if (schemaProps &&\n            (schemaProps.schema !== undefined ||\n                schemaProps.permissions !== undefined ||\n                schemaProps.subcollections !== undefined)) {\n            const permissions = schemaProps.permissions;\n            const schemaOrResolver = schemaProps.schema;\n            const subcollections = schemaProps.subcollections;\n            const overrideSchemaRegistry = schemaProps.overrideSchemaRegistry;\n            navigationContext.setOverride(\n                {\n                    path,\n                    entityId,\n                    schemaConfig: {\n                        permissions,\n                        schema: typeof schemaOrResolver !== \"function\" ? schemaOrResolver : undefined,\n                        schemaResolver: typeof schemaOrResolver === \"function\" ? schemaOrResolver : undefined,\n                        subcollections,\n                        callbacks: schemaProps.callbacks\n                    },\n                    overrideSchemaRegistry\n                }\n            );\n        }\n\n        const cleanPath = removeInitialAndTrailingSlashes(path);\n        const newPath = entityId\n            ? navigationContext.buildUrlCollectionPath(`${cleanPath}/${entityId}/${selectedSubpath || \"\"}`)\n            : navigationContext.buildUrlCollectionPath(`${cleanPath}#${NEW_URL_HASH}`);\n\n        const lastSidePanel = sidePanels.length > 0 ? sidePanels[sidePanels.length - 1] : undefined;\n\n        // If the side dialog is open currently, we update it\n        if (entityId &&\n            lastSidePanel &&\n            lastSidePanel.path === path &&\n            lastSidePanel?.entityId === entityId) {\n\n            const updatedPanel: SideEntityPanelProps = {\n                ...lastSidePanel,\n                selectedSubpath\n            };\n            const updatedPanels = [...sidePanels.slice(0, -1), updatedPanel];\n            updatePanels(updatedPanels);\n            navigate(\n                navigationContext.buildUrlCollectionPath(`${cleanPath}/${entityId}/${selectedSubpath || \"\"}`),\n                {\n                    replace: true,\n                    state: {\n                        base_location: baseLocation,\n                        panels: updatedPanels\n                    }\n                }\n            );\n\n        } else {\n            const newPanel: SideEntityPanelProps = {\n                path,\n                entityId,\n                copy: copy !== undefined && copy,\n                width,\n                selectedSubpath\n            };\n            const updatedPanels = [...sidePanels, newPanel];\n            updatePanels(updatedPanels);\n            navigate(\n                newPath,\n                {\n                    state: {\n                        base_location: baseLocation,\n                        panels: updatedPanels\n                    }\n                }\n            );\n        }\n    }, [sidePanels, location]);\n\n    return {\n        sidePanels,\n        close,\n        open\n    };\n};\n\nfunction buildSidePanelsFromUrl(path: string, collections: EntityCollection[], newFlag: boolean): SideEntityPanelProps[] {\n\n    const navigationViewsForPath: NavigationViewInternal<any>[] = getNavigationEntriesFromPathInternal({\n        path,\n        collections\n    });\n\n    const sidePanels: SideEntityPanelProps[] = [];\n    let lastCollectionPath = \"\";\n    for (let i = 0; i < navigationViewsForPath.length; i++) {\n        const navigationEntry = navigationViewsForPath[i];\n\n        if (navigationEntry.type === \"collection\") {\n            lastCollectionPath = navigationEntry.path;\n        }\n\n        if (i > 0) { // the first collection is handled by the main navigation\n            const previousEntry = navigationViewsForPath[i - 1];\n            if (navigationEntry.type === \"entity\") {\n                if (previousEntry.type === \"collection\") {\n                    sidePanels.push({\n                            path: navigationEntry.path,\n                            entityId: navigationEntry.entityId,\n                            copy: false\n                        }\n                    );\n                }\n            } else if (navigationEntry.type === \"custom_view\") {\n                if (previousEntry.type === \"entity\") {\n                    const lastSidePanel: SideEntityPanelProps = sidePanels[sidePanels.length - 1];\n                    if (lastSidePanel)\n                        lastSidePanel.selectedSubpath = navigationEntry.view.path;\n                }\n            } else if (navigationEntry.type === \"collection\") {\n                if (previousEntry.type === \"entity\") {\n                    const lastSidePanel: SideEntityPanelProps = sidePanels[sidePanels.length - 1];\n                    if (lastSidePanel)\n                        lastSidePanel.selectedSubpath = navigationEntry.collection.path;\n                }\n            }\n        }\n\n    }\n\n    if (newFlag) {\n        sidePanels.push({\n            path: lastCollectionPath,\n            copy: false\n        });\n    }\n\n    return sidePanels;\n}\n","import { EnumValues, Properties, PropertiesOrBuilder } from \"./properties\";\n\n/**\n * Specification for defining an entity\n * @category Models\n */\nexport interface EntitySchema<M extends { [Key: string]: any } = any> {\n\n    /**\n     * Singular name of the entity as displayed in an Add button . E.g. Product\n     */\n    name: string;\n\n    /**\n     * Description of this entity\n     */\n    description?: string;\n\n    /**\n     * If this prop is not set, the ID of the document will be created by the\n     * datasource.\n     *\n     * You can set the value to 'true' to force the users to choose the ID.\n     *\n     * You can set the value to 'optional' to allow the users to choose the ID,\n     * If the ID is empty, an automatic ID will be set.\n     *\n     * You can also pass a set of values (as an {@link EnumValues} object) to\n     * allow users to pick from only those.\n     */\n    customId?: boolean | \"optional\" | EnumValues;\n\n    /**\n     * Set of properties that compose an entity\n     */\n    properties: PropertiesOrBuilder<M>;\n\n    /**\n     * When creating a new entity, set some values as already initialized\n     */\n    defaultValues?: any;\n\n    /**\n     * Array of builders for rendering additional panels in an entity view.\n     * Useful if you need to render custom views\n     */\n    views?: EntityCustomView<M>[];\n\n}\n\n/**\n * @category Models\n */\nexport type EntitySchemaResolverProps<M = any> = {\n    entityId?: string | undefined,\n    values?: Partial<EntityValues<M>>,\n    previousValues?: Partial<EntityValues<M>>,\n};\n\n/**\n * Use to resolve the schema properties for specific path, entity id or values.\n * @category Models\n */\nexport type EntitySchemaResolver<M = any> = ({\n                                                 entityId,\n                                                 values,\n                                                 previousValues\n                                             }: EntitySchemaResolverProps<M>) => ResolvedEntitySchema<M>;\n\n/**\n * This is the same entity schema you define, only all the property builders\n * are resolved to regular `Property` objects.\n * @category Models\n */\nexport type ResolvedEntitySchema<M> =\n    Omit<EntitySchema<M>, \"properties\"> &\n    {\n        properties: Properties<M>,\n        originalSchema: EntitySchema<M>\n    }\n\n/**\n * New or existing status\n * @category Models\n */\nexport type EntityStatus = \"new\" | \"existing\" | \"copy\";\n\n/**\n * Representation of an entity fetched from the datasource\n * @category Models\n */\nexport interface Entity<M extends { [Key: string]: any }> {\n\n    /**\n     * Id of the entity\n     */\n    id: string;\n\n    /**\n     * A string representing the path of the referenced document (relative\n     * to the root of the database).\n     */\n    path: string;\n\n    /**\n     * Current values\n     */\n    values: EntityValues<M>;\n}\n\n/**\n * This type represents a record of key value pairs as described in an\n * entity schema.\n * @category Models\n */\nexport type EntityValues<M> = M;\n\n/**\n * Class used to create a reference to an entity in a different path\n */\nexport class EntityReference {\n    /**\n     * Id of the entity\n     */\n    readonly id: string;\n    /**\n     * A string representing the path of the referenced document (relative\n     * to the root of the database).\n     */\n    readonly path: string;\n\n    constructor(id: string, path: string) {\n        this.id = id;\n        this.path = path;\n    }\n\n    get pathWithId() {\n        return `${this.path}/${this.id}`;\n    }\n}\n\nexport class GeoPoint {\n\n    /**\n     * The latitude of this GeoPoint instance.\n     */\n    readonly latitude: number;\n    /**\n     * The longitude of this GeoPoint instance.\n     */\n    readonly longitude: number;\n\n    constructor(latitude: number, longitude: number) {\n        this.latitude = latitude;\n        this.longitude = longitude;\n    }\n}\n\n/**\n * @ignore\n */\nexport type InferSchemaType<S extends EntitySchema> = S extends EntitySchema<infer M> ? M : never;\n\n/**\n * You can use this builder to render a custom panel in the entity detail view.\n * It gets rendered as a tab.\n * @category Models\n */\nexport type EntityCustomView<M = any> =\n    {\n        path: string,\n        name: string,\n        builder: (extraActionsParams: EntityCustomViewParams<M>) => React.ReactNode\n    }\n\n/**\n * Parameters passed to the builder in charge of rendering a custom panel for\n * an entity view.\n * @category Models\n */\nexport interface EntityCustomViewParams<M extends { [Key: string]: any } = any> {\n\n    /**\n     * Schema used by this entity\n     */\n    schema: ResolvedEntitySchema<M>;\n\n    /**\n     * Entity that this view refers to. It can be undefined if the entity is new\n     */\n    entity?: Entity<M>;\n\n    /**\n     * Modified values in the form that have not been saved yet.\n     * If the entity is not new and the values are not modified, these values\n     * are the same as in `entity`\n     */\n    modifiedValues?: EntityValues<M>;\n}\n\n","import hash from \"object-hash\";\nimport { GeoPoint } from \"../../models\";\n\nexport const pick: <T>(obj: T, ...args: any[]) => T = (obj: any, ...args: any[]) => ({\n    ...args.reduce((res, key) => ({ ...res, [key]: obj[key] }), {})\n});\n\nexport function isObject(item: any) {\n    return (item && typeof item === \"object\" && !Array.isArray(item));\n}\n\nexport function mergeDeep<T>(target: T, source: any): T {\n    const output:T = Object.assign({}, target);\n    if (isObject(target) && isObject(source)) {\n        Object.keys(source).forEach(key => {\n            if (isObject(source[key])) {\n                if (!(key in target))\n                    Object.assign(output, { [key]: source[key] });\n                else\n                    (output as any)[key] = mergeDeep((target as any)[key], source[key]);\n            } else {\n                Object.assign(output, { [key]: source[key] });\n            }\n        });\n    }\n    return output;\n}\n\nexport function getValueInPath(o: object | undefined, path: string): any {\n    if (typeof o === \"object\") {\n        if (path in o) {\n            return (o as any)[path];\n        }\n        if (path.includes(\".\")) {\n            const pathSegments = path.split(\".\");\n            return getValueInPath((o as any)[pathSegments[0]], pathSegments.slice(1).join(\".\"))\n        }\n    }\n    return undefined;\n}\n\nexport function getHashValue<T>(v: T) {\n    if (!v) return null;\n    if (typeof v === \"object\") {\n        if (\"id\" in v)\n            return (v as any).id;\n        else if (v instanceof Date)\n            return v.toLocaleString();\n        else if (v instanceof GeoPoint)\n            return hash(v);\n    }\n    return hash(v, { ignoreUnknown: true });\n}\n","import {\n    CMSType,\n    EntityValues,\n    Property,\n    PropertyOrBuilder\n} from \"../../models\";\nimport { mergeDeep } from \"./objects\";\n\n\nexport function buildPropertyFrom<T extends CMSType, M extends { [Key: string]: any }>\n({\n     propertyOrBuilder,\n     values,\n     previousValues,\n     path,\n     entityId,\n     propertyOverride\n }: {\n     propertyOrBuilder: PropertyOrBuilder<T, M>,\n     values: Partial<EntityValues<M>>,\n     previousValues?: Partial<EntityValues<M>>,\n     path: string,\n     entityId?: string,\n     propertyOverride?: Partial<Property<T>>\n }\n): Property<T> | null {\n    let result: any;\n    if (typeof propertyOrBuilder === \"function\") {\n        result = propertyOrBuilder({ values, previousValues, entityId, path });\n        if (!result) {\n            console.debug(\"Property builder not returning `Property` so it is not rendered\", path, entityId, propertyOrBuilder);\n            return null;\n        }\n    } else {\n        result = propertyOrBuilder;\n    }\n    if (propertyOverride)\n        result = mergeDeep(result, propertyOverride);\n\n    return result;\n}\n","import {\n    Entity,\n    EntityReference,\n    EntitySchema,\n    EntitySchemaResolver,\n    EntityStatus,\n    EntityValues,\n    GeoPoint,\n    Properties,\n    PropertiesOrBuilder,\n    Property,\n    ResolvedEntitySchema\n} from \"../models\";\nimport { buildPropertyFrom } from \"./util/property_builder\";\n\nexport function isReadOnly(property: Property<any>): boolean {\n    if (property.readOnly)\n        return true;\n    if (property.dataType === \"timestamp\") {\n        if (property.autoValue)\n            return true;\n    }\n    if (property.dataType === \"reference\") {\n        return !property.path;\n    }\n    return false;\n}\n\nexport function isHidden(property: Property<any>): boolean {\n    return typeof property.disabled === \"object\" && Boolean(property.disabled.hidden);\n}\n\n\n/**\n *\n * @param schema\n * @param values\n * @param path\n * @param entityId\n * @ignore\n */\nexport function computeSchema<M extends { [Key: string]: any }>(\n    { schemaOrResolver, path, entityId, values, previousValues }: {\n        schemaOrResolver: EntitySchema<M> | ResolvedEntitySchema<M> | EntitySchemaResolver<M>,\n        path: string,\n        entityId?: string | undefined,\n        values?: Partial<EntityValues<M>>,\n        previousValues?: Partial<EntityValues<M>>,\n    }): ResolvedEntitySchema<M> {\n\n    if (typeof schemaOrResolver === \"function\") {\n        return schemaOrResolver({ entityId, values, previousValues });\n    } else {\n\n        const properties = computeProperties({\n            propertiesOrBuilder: schemaOrResolver.properties,\n            path,\n            entityId,\n            values,\n            previousValues\n        });\n\n        return {\n            ...schemaOrResolver,\n            properties,\n            originalSchema: schemaOrResolver\n        };\n    }\n}\n\n/**\n *\n * @param propertiesOrBuilder\n * @param values\n * @param previousValues\n * @param path\n * @param entityId\n * @ignore\n */\nexport function computeProperties<M extends { [Key: string]: any }>(\n    { propertiesOrBuilder, path, entityId, values, previousValues }: {\n        propertiesOrBuilder: PropertiesOrBuilder<M>,\n        path: string,\n        entityId?: string | undefined,\n        values?: Partial<EntityValues<M>>,\n        previousValues?: Partial<EntityValues<M>>,\n    }): Properties<M> {\n    return Object.entries(propertiesOrBuilder)\n        .map(([key, propertyOrBuilder]) => {\n            const property = buildPropertyFrom({\n                propertyOrBuilder,\n                values: values ?? {},\n                previousValues: previousValues ?? values ?? {},\n                path,\n                entityId\n            });\n            if (property === null) return null;\n            return {\n                [key]: property\n            };\n        })\n        .filter((a) => a !== null)\n        .reduce((a, b) => ({ ...a, ...b }), {}) as Properties<M>;\n}\n\n\n\nexport function initWithProperties<M extends { [Key: string]: any }>\n(properties: Properties<M>, defaultValues?: Partial<EntityValues<M>>): EntityValues<M> {\n    return Object.entries(properties)\n        .map(([key, property]) => {\n            const propertyDefaultValue = defaultValues && key in defaultValues ? (defaultValues as any)[key] : undefined;\n            const value = initPropertyValue(key, property as Property, propertyDefaultValue);\n            return value === undefined ? {} : { [key]: value };\n        })\n        .reduce((a, b) => ({ ...a, ...b }), {}) as EntityValues<M>;\n}\n\nfunction initPropertyValue(key: string, property: Property, defaultValue: any) {\n    let value: any;\n    if (property.dataType === \"map\" && property.properties) {\n        value = initWithProperties(property.properties as Properties, defaultValue);\n    } else if (defaultValue !== undefined) {\n        value = defaultValue;\n    } else {\n        value = undefined;\n    }\n    return value;\n}\n\n/**\n * Update the automatic values in an entity before save\n * @category Datasource\n */\n\nexport function updateAutoValues<M extends { [Key: string]: any }>({\n                                                                       inputValues,\n                                                                       properties,\n                                                                       status,\n                                                                       timestampNowValue,\n                                                                       referenceConverter,\n                                                                       geopointConverter\n                                                                   }:\n                                                                       {\n                                                                           inputValues: Partial<EntityValues<M>>,\n                                                                           properties: Properties<M>,\n                                                                           status: EntityStatus,\n                                                                           timestampNowValue: any,\n                                                                           referenceConverter?: (value: EntityReference) => any,\n                                                                           geopointConverter?: (value: GeoPoint) => any\n                                                                       }): EntityValues<M> {\n    return traverseValues(\n        inputValues,\n        properties,\n        (inputValue, property) => {\n            if (property.dataType === \"timestamp\") {\n                if (status === \"existing\" && property.autoValue === \"on_update\") {\n                    return timestampNowValue;\n                } else if ((status === \"new\" || status === \"copy\") &&\n                    (property.autoValue === \"on_update\" || property.autoValue === \"on_create\")) {\n                    return timestampNowValue;\n                } else {\n                    return inputValue;\n                }\n            } else if (referenceConverter && property.dataType === \"reference\") {\n                if (inputValue instanceof EntityReference) {\n                    return referenceConverter(inputValue);\n                }\n            } else if (geopointConverter && property.dataType === \"geopoint\") {\n                if (inputValue instanceof GeoPoint) {\n                    return geopointConverter(inputValue);\n                }\n            } else {\n                return inputValue;\n            }\n        }\n    );\n}\n\n\n/**\n * Add missing required fields, expected in the schema, to the values of an entity\n * @param values\n * @param properties\n * @category Datasource\n */\nexport function sanitizeData<M extends { [Key: string]: any }>\n(\n    values: EntityValues<M>,\n    properties: Properties<M>\n) {\n    const result: any = values;\n    Object.entries(properties)\n        .forEach(([key, property]) => {\n            if (values && values[key] !== undefined) result[key] = values[key];\n            else if ((property as Property).validation?.required) result[key] = null;\n        });\n    return result;\n}\n\nexport function getReferenceFrom(entity: Entity<any>): EntityReference {\n    return new EntityReference(entity.id, entity.path);\n}\n\n\nexport function traverseValues<M extends { [Key: string]: any }>(\n    inputValues: Partial<EntityValues<M>>,\n    properties: Properties<M>,\n    operation: (value: any, property: Property) => any\n): EntityValues<M> {\n    const updatedValues = Object.entries(properties)\n        .map(([key, property]) => {\n            const inputValue = inputValues && (inputValues as any)[key];\n            const updatedValue = traverseValue(inputValue, property as Property, operation);\n            if (updatedValue === undefined) return {};\n            return ({ [key]: updatedValue });\n        })\n        .reduce((a, b) => ({ ...a, ...b }), {}) as EntityValues<M>;\n    return { ...inputValues, ...updatedValues };\n}\n\nexport function traverseValue(inputValue: any,\n                              property: Property,\n                              operation: (value: any, property: Property) => any): any {\n\n    let value;\n    if (property.dataType === \"map\" && property.properties) {\n        value = traverseValues(inputValue, property.properties as Properties, operation);\n    } else if (property.dataType === \"array\") {\n        if (property.of && Array.isArray(inputValue)) {\n            value = inputValue.map((e) => traverseValue(e, property.of as Property, operation));\n        } else if (property.oneOf && Array.isArray(inputValue)) {\n            const typeField = property.oneOf!.typeField ?? \"type\";\n            const valueField = property.oneOf!.valueField ?? \"value\";\n            value = inputValue.map((e) => {\n                if (e === null) return null;\n                if (typeof e !== \"object\") return e;\n                const type = e[typeField];\n                const childProperty = property.oneOf!.properties[type];\n                if (!type || !childProperty) return e;\n                return {\n                    [typeField]: type,\n                    [valueField]: traverseValue(e[valueField], childProperty, operation)\n                };\n            });\n        } else {\n            value = inputValue;\n        }\n    } else {\n        value = operation(inputValue, property);\n    }\n\n    return value;\n}\n\n","import { useCallback, useEffect, useRef, useState } from \"react\";\nimport {\n    AuthController,\n    ConfigurationPersistence,\n    DataSource,\n    EntityCollection,\n    EntityCollectionResolver,\n    EntitySchema,\n    EntitySchemaResolver,\n    EntitySchemaResolverProps,\n    Locale,\n    Navigation,\n    NavigationBuilder,\n    NavigationContext,\n    PartialEntityCollection,\n    PartialEntitySchema,\n    PartialProperties,\n    SchemaOverrideHandler,\n    StorageSource,\n    User\n} from \"../../models\";\nimport {\n    getCollectionByPath,\n    removeInitialAndTrailingSlashes\n} from \"../util/navigation_utils\";\nimport { getValueInPath, mergeDeep } from \"../util/objects\";\nimport { computeProperties } from \"../utils\";\n\nexport function useBuildNavigationContext<UserType>({\n                                                        basePath,\n                                                        baseCollectionPath,\n                                                        authController,\n                                                        navigationOrBuilder,\n                                                        schemaOverrideHandler,\n                                                        dateTimeFormat,\n                                                        locale,\n                                                        dataSource,\n                                                        storageSource,\n                                                        userConfigPersistence\n                                                    }: {\n    basePath: string,\n    baseCollectionPath: string,\n    authController: AuthController<UserType>;\n    navigationOrBuilder: Navigation | NavigationBuilder<UserType> | EntityCollection[];\n    schemaOverrideHandler: SchemaOverrideHandler | undefined;\n    dateTimeFormat?: string;\n    locale?: Locale;\n    dataSource: DataSource;\n    storageSource: StorageSource;\n    userConfigPersistence?: ConfigurationPersistence;\n}): NavigationContext {\n\n    const [navigation, setNavigation] = useState<Navigation | undefined>(undefined);\n    const [navigationLoading, setNavigationLoading] = useState<boolean>(false);\n    const [navigationLoadingError, setNavigationLoadingError] = useState<Error | undefined>(undefined);\n\n    const schemaConfigRecord = useRef<Record<string, Partial<EntityCollectionResolver> & { overrideSchemaRegistry?: boolean }>>({});\n    const cleanBasePath = removeInitialAndTrailingSlashes(basePath);\n    const cleanBaseCollectionPath = removeInitialAndTrailingSlashes(baseCollectionPath);\n\n    const homeUrl = cleanBasePath ? `/${cleanBasePath}` : \"/\";\n\n    const fullCollectionPath = cleanBasePath ? `/${cleanBasePath}/${cleanBaseCollectionPath}` : `/${cleanBaseCollectionPath}`;\n\n    const initialised = navigation?.collections !== undefined;\n\n    useEffect(() => {\n        if (!authController.canAccessMainView) {\n            return;\n        }\n        setNavigationLoading(true);\n        getNavigation({\n            navigationOrCollections: navigationOrBuilder,\n            user: authController.user,\n            authController,\n            dateTimeFormat,\n            locale,\n            dataSource,\n            storageSource\n        }).then((result: Navigation) => {\n            setNavigation(result);\n            setNavigationLoading(false);\n        }).catch(setNavigationLoadingError);\n    }, [authController.user, authController.canAccessMainView, navigationOrBuilder, authController, dateTimeFormat, locale, dataSource, storageSource]);\n\n\n    const getSchemaOverride = useCallback(<M extends any>(path: string): PartialEntitySchema<M> | undefined => {\n        if (!userConfigPersistence)\n            return undefined\n        const collectionOverride = userConfigPersistence.getCollectionConfig<M>(path);\n        return collectionOverride?.schema;\n    }, [userConfigPersistence]);\n\n    const buildSchemaResolver = useCallback(<M extends { [Key: string]: any } = any>({\n                                                                                         schema,\n                                                                                         path\n                                                                                     }: { schema: EntitySchema<M>, path: string }): EntitySchemaResolver<M> =>\n        ({\n             entityId,\n             values,\n             previousValues\n         }: EntitySchemaResolverProps<M>) => {\n\n            const schemaOverride = getSchemaOverride<M>(path);\n            const storedProperties: PartialProperties<M> | undefined = getValueInPath(schemaOverride, \"properties\");\n\n            const properties = computeProperties({\n                propertiesOrBuilder: schema.properties,\n                path,\n                entityId,\n                values: values ?? schema.defaultValues,\n                previousValues\n            });\n\n        return {\n            ...schema,\n            properties: mergeDeep(properties, storedProperties),\n            originalSchema: schema\n        };\n    }, [getSchemaOverride]);\n\n    const getCollectionOverride = useCallback(<M extends any>(path: string): PartialEntityCollection<M> | undefined => {\n        if (!userConfigPersistence)\n            return undefined\n        const dynamicCollectionConfig = { ...userConfigPersistence.getCollectionConfig<M>(path) };\n        delete dynamicCollectionConfig.schema;\n        return dynamicCollectionConfig;\n    }, [userConfigPersistence]);\n\n\n    const getCollectionResolver = useCallback(<M extends { [Key: string]: any }>(path: string, entityId?: string, collection?: EntityCollection<M>): EntityCollectionResolver<M> => {\n\n        const collections = navigation?.collections;\n\n        const baseCollection = collection ?? (collections && getCollectionByPath<M>(removeInitialAndTrailingSlashes(path), collections));\n\n        const collectionOverride = getCollectionOverride(path);\n\n        const resolvedCollection = baseCollection ? mergeDeep(baseCollection, collectionOverride) : undefined;\n\n        const sidePanelKey = getSidePanelKey(path, entityId);\n\n        let result: Partial<EntityCollectionResolver> = {};\n\n        const overriddenProps = schemaConfigRecord.current[sidePanelKey];\n        const resolvedProps: Partial<EntityCollectionResolver> | undefined = schemaOverrideHandler && schemaOverrideHandler({\n            entityId,\n            path: removeInitialAndTrailingSlashes(path)\n        });\n\n        if (resolvedProps)\n            result = resolvedProps;\n\n        if (overriddenProps) {\n            // override schema resolver default to true\n            const shouldOverrideRegistry = overriddenProps.overrideSchemaRegistry === undefined || overriddenProps.overrideSchemaRegistry;\n            if (shouldOverrideRegistry)\n                result = {\n                    ...overriddenProps,\n                    permissions: result.permissions || overriddenProps.permissions,\n                    schemaResolver: result.schemaResolver || overriddenProps.schemaResolver,\n                    subcollections: result.subcollections || overriddenProps.subcollections,\n                    callbacks: result.callbacks || overriddenProps.callbacks\n                };\n            else\n                result = {\n                    ...result,\n                    permissions: overriddenProps.permissions ?? result.permissions,\n                    schemaResolver: overriddenProps.schemaResolver ?? result.schemaResolver,\n                    subcollections: overriddenProps.subcollections ?? result.subcollections,\n                    callbacks: overriddenProps.callbacks ?? result.callbacks\n                };\n\n        }\n        if (resolvedCollection) {\n            const schema = resolvedCollection.schema;\n            const subcollections = resolvedCollection.subcollections;\n            const callbacks = resolvedCollection.callbacks;\n            const permissions = resolvedCollection.permissions;\n            result = {\n                ...result,\n                schemaResolver: result.schemaResolver ?? buildSchemaResolver({\n                    schema,\n                    path\n                }),\n                subcollections: result.subcollections ?? subcollections,\n                callbacks: result.callbacks ?? callbacks,\n                permissions: result.permissions ?? permissions\n            };\n        }\n        if (result && Object.keys(result).length) {\n            if (!result.schemaResolver) {\n                if (!result.schema)\n                    throw Error(`Not able to resolve schema for ${sidePanelKey}`);\n                result.schemaResolver = buildSchemaResolver({\n                    schema: result.schema,\n                    path\n                });\n            }\n        }\n\n        return { ...resolvedCollection, ...(result as EntityCollectionResolver<M>) };\n\n    }, [navigation?.collections, getCollectionOverride, schemaOverrideHandler, buildSchemaResolver]);\n\n    const setOverride = useCallback(({\n                                         path,\n                                         entityId,\n                                         schemaConfig,\n                                         overrideSchemaRegistry\n                                     }: {\n                                         path: string,\n                                         entityId?: string,\n                                         schemaConfig?: Partial<EntityCollectionResolver>\n                                         overrideSchemaRegistry?: boolean\n                                     }\n    ) => {\n\n        const key = getSidePanelKey(path, entityId);\n        if (!schemaConfig) {\n            delete schemaConfigRecord.current[key];\n            return undefined;\n        } else {\n\n            schemaConfigRecord.current[key] = {\n                ...schemaConfig,\n                overrideSchemaRegistry\n            };\n            return key;\n        }\n    }, []);\n\n    const removeAllOverridesExcept = useCallback((entityRefs: {\n        path: string, entityId?: string\n    }[]) => {\n        const keys = entityRefs.map(({\n                                         path,\n                                         entityId\n                                     }) => getSidePanelKey(path, entityId));\n        Object.keys(schemaConfigRecord.current).forEach((currentKey) => {\n            if (!keys.includes(currentKey))\n                delete schemaConfigRecord.current[currentKey];\n        });\n    }, []);\n\n    const isUrlCollectionPath = useCallback(\n        (path: string): boolean => removeInitialAndTrailingSlashes(path + \"/\").startsWith(removeInitialAndTrailingSlashes(fullCollectionPath) + \"/\"),\n        [fullCollectionPath]);\n\n    const urlPathToDataPath = useCallback((path: string): string => {\n        if (path.startsWith(fullCollectionPath))\n            return path.replace(fullCollectionPath, \"\");\n        throw Error(\"Expected path starting with \" + fullCollectionPath);\n    }, [fullCollectionPath]);\n\n    const buildUrlCollectionPath = useCallback((path: string): string => `${baseCollectionPath}/${removeInitialAndTrailingSlashes(path)}`,\n        [baseCollectionPath]);\n\n    const buildCMSUrlPath = useCallback((path: string): string => `/${removeInitialAndTrailingSlashes(path)}`,\n        []);\n\n    const onCollectionModifiedForUser = useCallback(<M extends any>(path: string, partialCollection: PartialEntityCollection<M>) => {\n        if (userConfigPersistence) {\n            const currentStoredConfig = userConfigPersistence.getCollectionConfig(path);\n            userConfigPersistence.onCollectionModified(path, mergeDeep(currentStoredConfig, partialCollection));\n        }\n    }, [userConfigPersistence]);\n\n    return {\n        navigation,\n        loading: navigationLoading,\n        navigationLoadingError,\n        homeUrl,\n        basePath,\n        baseCollectionPath,\n        onCollectionModifiedForUser,\n        initialised,\n        getCollectionResolver,\n        setOverride,\n        removeAllOverridesExcept,\n        isUrlCollectionPath,\n        urlPathToDataPath,\n        buildUrlCollectionPath,\n        buildCMSUrlPath\n    };\n}\n\nconst getNavigation = async <UserType extends any>({\n                                                       navigationOrCollections,\n                                                       user,\n                                                       authController,\n                                                       dateTimeFormat,\n                                                       locale,\n                                                       dataSource,\n                                                       storageSource\n                                                   }:\n                                                       {\n                                                           navigationOrCollections: Navigation | NavigationBuilder<UserType> | EntityCollection[],\n                                                           user: User | null,\n                                                           authController: AuthController<UserType>,\n                                                           dateTimeFormat?: string,\n                                                           locale?: Locale,\n                                                           dataSource: DataSource,\n                                                           storageSource: StorageSource\n                                                       }\n): Promise<Navigation> => {\n\n    if (Array.isArray(navigationOrCollections)) {\n        return {\n            collections: navigationOrCollections\n        };\n    } else if (typeof navigationOrCollections === \"function\") {\n        return navigationOrCollections({\n            user,\n            authController,\n            dateTimeFormat,\n            locale,\n            dataSource,\n            storageSource\n        });\n    } else {\n        return navigationOrCollections;\n    }\n};\n\n\nexport function getSidePanelKey(path: string, entityId?: string) {\n    if (entityId)\n        return `${removeInitialAndTrailingSlashes(path)}/${removeInitialAndTrailingSlashes(entityId)}`;\n    else\n        return removeInitialAndTrailingSlashes(path);\n}\n","import { useCallback, useEffect, useMemo, useState } from \"react\";\nimport {\n    AuthController,\n    AuthDelegate,\n    Authenticator,\n    DataSource,\n    Locale,\n    StorageSource,\n    User\n} from \"../../models\";\n\nexport function useBuildAuthController<UserType>({\n                                           authDelegate,\n                                           authentication,\n                                           dateTimeFormat,\n                                           locale,\n                                           dataSource,\n                                           storageSource\n                                       }: {\n    authDelegate: AuthDelegate,\n    authentication?: boolean | Authenticator<UserType>,\n    dateTimeFormat?: string;\n    locale?: Locale;\n    dataSource: DataSource;\n    storageSource: StorageSource;\n}): AuthController<UserType> {\n\n    const [user, setUser] = useState<User | null>(null);\n    const [authLoading, setAuthLoading] = useState<boolean>(false);\n    const [notAllowedError, setNotAllowedError] = useState<any>(false);\n    const [extra, setExtra] = useState<any>();\n\n    const loginSkipped = authDelegate.loginSkipped;\n\n    const authenticationEnabled = authentication === undefined || !!authentication;\n    const canAccessMainView = (!authenticationEnabled || Boolean(user) || Boolean(loginSkipped)) && !notAllowedError;\n\n    const authController: AuthController<UserType> = useMemo(() => ({\n        user,\n        loginSkipped,\n        canAccessMainView,\n        initialLoading: authDelegate.initialLoading ?? false,\n        authLoading: authLoading,\n        notAllowedError,\n        signOut: authDelegate.signOut,\n        extra,\n        setExtra,\n        authDelegate\n    }), [authDelegate, authLoading, canAccessMainView, extra, loginSkipped, notAllowedError, user]);\n\n    const checkAuthentication = useCallback(async () => {\n        const delegateUser = authDelegate.user;\n        if (authentication instanceof Function && delegateUser) {\n            setAuthLoading(true);\n            try {\n                const allowed = await authentication({\n                    user: delegateUser,\n                    authController,\n                    dateTimeFormat,\n                    locale,\n                    dataSource,\n                    storageSource\n                });\n                if (allowed)\n                    setUser(delegateUser);\n                else\n                    setNotAllowedError(true);\n            } catch (e) {\n                setNotAllowedError(e);\n                authDelegate.signOut();\n            }\n            setAuthLoading(false);\n        } else {\n            setUser(delegateUser);\n        }\n    }, [authDelegate.user]);\n\n    useEffect(() => {\n        checkAuthentication();\n    }, [authDelegate.user, checkAuthentication]);\n\n\n    return authController;\n}\n","import { PartialEntityCollection } from \"../../models\";\nimport { ConfigurationPersistence } from \"../../models/config_persistence\";\n\n/**\n * Remove the entity ids from a given path\n * `products/B44RG6APH/locales` => `products/locales`\n * @param path\n */\nfunction stripCollectionPath(path: string): string {\n    return path\n        .split(\"/\")\n        .filter((e, i) => i % 2 === 0)\n        .reduce((a, b) => `${a}/${b}`);\n}\n\nexport function useBuildStorageConfigurationPersistence(): ConfigurationPersistence {\n    function saveStorageCollectionConfig<M>(path: string, data: PartialEntityCollection<M>) {\n        const storageKey = `collection_config_${stripCollectionPath(path)}`;\n        localStorage.setItem(storageKey, JSON.stringify(data));\n    }\n\n    function getStorageCollectionConfig<M>(path: string): PartialEntityCollection<M> {\n        const storageKey = `collection_config_${stripCollectionPath(path)}`;\n        const item = localStorage.getItem(storageKey);\n        return item ? JSON.parse(item) : {};\n    }\n\n    return {\n        onCollectionModified: saveStorageCollectionConfig,\n        getCollectionConfig: getStorageCollectionConfig\n    }\n}\n\n\n","import React from \"react\";\n\nimport AdapterDateFns from \"@mui/lab/AdapterDateFns\";\nimport LocalizationProvider from \"@mui/lab/LocalizationProvider\";\nimport DateFnsUtils from \"@date-io/date-fns\";\nimport * as locales from \"date-fns/locale\";\n\nimport {\n    AuthDelegate,\n    Authenticator,\n    DataSource,\n    EntityCollection,\n    EntityLinkBuilder,\n    FireCMSContext,\n    Locale,\n    Navigation,\n    NavigationBuilder,\n    SchemaOverrideHandler,\n    StorageSource\n} from \"../models\";\nimport { SnackbarContext, SnackbarProvider } from \"./contexts/SnackbarContext\";\nimport { FireCMSContextProvider } from \"./contexts/FireCMSContext\";\nimport { BreadcrumbsProvider } from \"./contexts/BreacrumbsContext\";\nimport { ModeProvider, ModeStateContext } from \"./contexts/ModeState\";\nimport { useBuildSideEntityController } from \"./internal/useBuildSideEntityController\";\nimport { useBuildNavigationContext } from \"./internal/useBuildNavigationContext\";\nimport { useBuildAuthController } from \"./internal/useBuildAuthController\";\nimport { useBuildStorageConfigurationPersistence } from \"./util/storage\";\n\nconst DEFAULT_COLLECTION_PATH = \"/c\";\n\n/**\n * @category Core\n */\nexport interface FireCMSProps<UserType> {\n\n    /**\n     * Use this function to return the components you want to render under\n     * FireCMS\n     * @param props\n     */\n    children: (props: {\n        /**\n         * Context of the app\n         */\n        context: FireCMSContext;\n        /**\n         * Main color scheme\n         */\n        mode: \"dark\" | \"light\";\n        /**\n         * Is one of the main processes, auth and navigation resolving, currently\n         * loading. If you are building your custom implementation, you probably\n         * want to show a loading indicator if this flag is `true`\n         */\n        loading: boolean;\n    }) => React.ReactNode;\n\n    /**\n     * Use this prop to specify the views that will be generated in the CMS.\n     * You usually will want to create a `Navigation` object that includes\n     * collection views where you specify the path and the schema.\n     * Additionally you can add custom views to the root navigation.\n     * In you need to customize the navigation based on the logged user you\n     * can use a `NavigationBuilder`\n     */\n    navigation: Navigation | NavigationBuilder<UserType> | EntityCollection[];\n\n    /**\n     * Do the users need to log in to access the CMS.\n     * You can specify an Authenticator function to discriminate which users can\n     * access the CMS or not.\n     * If not specified, authentication is enabled but no user restrictions\n     * apply.\n     */\n    authentication?: boolean | Authenticator<UserType>;\n\n    /**\n     * Used to override schemas based on the collection path and entityId.\n     * This resolver allows to override the schema for specific entities, or\n     * specific collections, app wide.\n     *\n     * This overrides schemas **all through the app.**\n     *\n     * You can also override schemas in place, when using {@link useSideEntityController}\n     */\n    schemaOverrideHandler?: SchemaOverrideHandler;\n\n    /**\n     * Format of the dates in the CMS.\n     * Defaults to 'MMMM dd, yyyy, HH:mm:ss'\n     */\n    dateTimeFormat?: string;\n\n    /**\n     * Locale of the CMS, currently only affecting dates\n     */\n    locale?: Locale;\n\n    /**\n     * Connector to your database\n     */\n    dataSource: DataSource;\n\n    /**\n     * Connector to your file upload/fetch implementation\n     */\n    storageSource: StorageSource;\n\n    /**\n     * Delegate for implementing your auth operations.\n     * @see useFirebaseAuthDelegate\n     */\n    authDelegate: AuthDelegate;\n\n    /**\n     * Optional link builder you can add to generate a button in your entity forms.\n     * The function must return a URL that gets opened when the button is clicked\n     */\n    entityLinkBuilder?: EntityLinkBuilder;\n\n    /**\n     * Default path under the navigation routes of the CMS will be created\n     */\n    basePath?: string;\n\n    /**\n     * Default path under the collection routes of the CMS will be created\n     */\n    baseCollectionPath?: string;\n\n}\n\n\n/**\n * If you are using independent components of the CMS\n * you need to wrap them with this main component, so the internal hooks work.\n *\n * @constructor\n * @category Core\n */\nexport function FireCMS<UserType>(props: FireCMSProps<UserType>) {\n\n    const {\n        children,\n        navigation: navigationOrBuilder,\n        entityLinkBuilder,\n        authentication,\n        dateTimeFormat,\n        locale,\n        authDelegate,\n        schemaOverrideHandler,\n        storageSource,\n        dataSource,\n        basePath,\n        baseCollectionPath\n    } = props;\n\n    const usedBasePath = basePath ?? \"/\";\n    const usedBasedCollectionPath = baseCollectionPath ?? DEFAULT_COLLECTION_PATH;\n\n    const dateUtilsLocale = locale ? locales[locale] : undefined;\n    const authController = useBuildAuthController({\n        authDelegate,\n        authentication,\n        dateTimeFormat,\n        locale,\n        dataSource,\n        storageSource\n    });\n\n    const userConfigPersistence = useBuildStorageConfigurationPersistence();\n\n    const navigationContext = useBuildNavigationContext({\n        basePath: usedBasePath,\n        baseCollectionPath: usedBasedCollectionPath,\n        authController,\n        navigationOrBuilder,\n        dateTimeFormat,\n        locale,\n        dataSource,\n        storageSource,\n        schemaOverrideHandler,\n        userConfigPersistence\n    });\n\n    const sideEntityController = useBuildSideEntityController(navigationContext);\n\n    const loading = authController.authLoading || authController.initialLoading || navigationContext.loading;\n\n    if (navigationContext.navigationLoadingError) {\n        return (\n            <div>\n                <p>There was an error while loading your navigation config</p>\n                <p>{navigationContext.navigationLoadingError}</p>\n            </div>\n        );\n    }\n\n    return (\n        <ModeProvider>\n            <SnackbarProvider>\n                <SnackbarContext.Consumer>\n                    {(snackbarController) => {\n\n                        const context: FireCMSContext = {\n                            authController,\n                            sideEntityController,\n                            entityLinkBuilder,\n                            dateTimeFormat,\n                            locale,\n                            navigationContext,\n                            dataSource,\n                            storageSource,\n                            snackbarController\n                        };\n\n                        return (\n                            <FireCMSContextProvider {...context} >\n                                <BreadcrumbsProvider>\n                                    <LocalizationProvider\n                                        dateAdapter={AdapterDateFns}\n                                        utils={DateFnsUtils}\n                                        locale={dateUtilsLocale}>\n                                            <ModeStateContext.Consumer>\n                                                {({ mode }) => {\n                                                    return children({\n                                                        context,\n                                                        mode,\n                                                        loading\n                                                    });\n                                                }}\n                                            </ModeStateContext.Consumer>\n                                    </LocalizationProvider>\n                                </BreadcrumbsProvider>\n                            </FireCMSContextProvider>\n                        );\n                    }}\n                </SnackbarContext.Consumer>\n            </SnackbarProvider>\n        </ModeProvider>\n    );\n\n}\n\n\n\n\n\n\n","import React from \"react\";\nimport clsx from \"clsx\";\nimport ErrorIcon from \"@mui/icons-material/Error\";\nimport { Theme, Tooltip } from \"@mui/material\";\n\nimport createStyles from \"@mui/styles/createStyles\";\nimport makeStyles from \"@mui/styles/makeStyles\";\n\nexport const useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        flexCenter: {\n            display: \"flex\",\n            alignItems: \"center\"\n        },\n        smallMargin: {\n            margin: theme.spacing(1)\n        },\n        text: {\n            paddingLeft: theme.spacing(2)\n        }\n    })\n);\n\n/**\n * @category Components\n */\nexport interface ErrorViewProps {\n    error: string,\n    tooltip?: string\n}\n\n/**\n * Generic error view. Displayed for example when an unexpected value comes\n * from the datasource in a collection view.\n * @param error\n * @param tooltip\n * @constructor\n * @category Components\n */\nexport function ErrorView({\n                              error,\n                              tooltip\n                          }: ErrorViewProps): React.ReactElement {\n    const classes = useStyles();\n    const body = (\n        <div\n            className={clsx(classes.flexCenter, classes.smallMargin)}>\n            <ErrorIcon fontSize={\"small\"} color={\"error\"}/>\n            <div className={classes.text}>{error}</div>\n        </div>\n    );\n\n    if (tooltip) {\n        return (\n            <Tooltip title={tooltip}>\n                {body}\n            </Tooltip>\n        );\n    }\n    return body;\n}\n","import { Skeleton } from \"@mui/material\";\nimport * as React from \"react\";\nimport { useEffect, useState } from \"react\";\n\nexport interface AsyncPreviewComponentProps {\n\n    builder: Promise<React.ReactNode>;\n\n}\n\nfunction AsyncPreviewComponentInternal<M extends { [Key: string]: any }>(\n    {\n        builder\n    }: AsyncPreviewComponentProps): JSX.Element {\n\n    const [loading, setLoading] = useState<boolean>(true);\n    const [result, setResult] = useState<React.ReactNode>(null);\n\n    useEffect(() => {\n        let unmounted = false;\n        builder\n            .then((res) => {\n                if (!unmounted) {\n                    setLoading(false);\n                    setResult(res);\n                }\n            })\n            .catch(error => {\n                setLoading(false);\n                console.error(error);\n            });\n        return () => {\n            unmounted = true;\n        };\n    }, [builder]);\n\n    if (loading)\n        return <Skeleton variant=\"text\"/>;\n\n    return <React.Fragment>{result}</React.Fragment>;\n\n}\n\n/**\n * Utility component used to render the result of an async execution.\n * It shows a loading indicator while at it.\n *\n * @category Preview components\n */\nexport const AsyncPreviewComponent = React.memo(AsyncPreviewComponentInternal) as React.FunctionComponent<AsyncPreviewComponentProps>;\n","import { Box, Typography } from \"@mui/material\";\nimport React, { ErrorInfo } from \"react\";\n\nimport ErrorIcon from \"@mui/icons-material/Error\";\n\n\nexport class ErrorBoundary extends React.Component<{}, { hasError: boolean }> {\n    constructor(props: any) {\n        super(props);\n        this.state = { hasError: false };\n    }\n\n    // eslint-disable-next-line node/handle-callback-err\n    static getDerivedStateFromError(error: Error) {\n        return { hasError: true };\n    }\n\n    // eslint-disable-next-line node/handle-callback-err\n    componentDidCatch(error: Error, errorInfo: ErrorInfo) {\n        // logErrorToMyService(error, errorInfo);\n    }\n\n    render() {\n        if (this.state.hasError) {\n            return (\n                <Box\n                    display={\"flex\"}\n                    flexDirection={\"column\"}\n                    m={0.5}>\n                    <Box\n                        display={\"flex\"}\n                        alignItems={\"center\"}\n                        m={0.5}>\n                        <ErrorIcon color={\"error\"} fontSize={\"small\"}/>\n                        <Box marginLeft={1}>Error</Box>\n                    </Box>\n                    <Typography variant={\"caption\"}>\n                        See the error in the console\n                    </Typography>\n                </Box>\n            );\n        }\n\n        return this.props.children;\n    }\n}\n","export function hashString(str: string): number {\n    let hash = 0; let i; let chr;\n    for (i = 0; i < str.length; i++) {\n        chr = str.charCodeAt(i);\n        hash = ((hash << 5) - hash) + chr;\n        hash |= 0; // Convert to 32bit integer\n    }\n    return Math.abs(hash);\n}\n","import { hashString } from \"./hash\";\nimport { ChipColor } from \"../../models\";\n\nexport interface ChipColorSchema {\n    color: string;\n    text: string;\n}\n\nexport const CHIP_COLORS: Record<string, ChipColorSchema> = {\n    blueLighter: { color: \"#cfdfff\", text: \"#102046\" },\n    cyanLighter: { color: \"#d0f0fd\", text: \"#04283f\" },\n    tealLighter: { color: \"#c2f5e9\", text: \"#012524\" },\n    greenLighter: { color: \"#d1f7c4\", text: \"#0b1d05\" },\n    yellowLighter: { color: \"#ffeab6\", text: \"#3b2501\" },\n    orangeLighter: { color: \"#fee2d5\", text: \"#6b2613\" },\n    redLighter: { color: \"#ffdce5\", text: \"#4c0c1c\" },\n    pinkLighter: { color: \"#ffdaf6\", text: \"#400832\" },\n    purpleLighter: { color: \"#ede2fe\", text: \"#280b42\" },\n    grayLighter: { color: \"#eee\", text: \"#040404\" },\n\n    blueLight: { color: \"#9cc7ff\", text: \"#102046\" },\n    cyanLight: { color: \"#77d1f3\", text: \"#04283f\" },\n    tealLight: { color: \"#72ddc3\", text: \"#012524\" },\n    greenLight: { color: \"#93e088\", text: \"#0b1d05\" },\n    yellowLight: { color: \"#ffd66e\", text: \"#3b2501\" },\n    orangeLight: { color: \"#ffa981\", text: \"#6b2613\" },\n    redLight: { color: \"#ff9eb7\", text: \"#4c0c1c\" },\n    pinkLight: { color: \"#f99de2\", text: \"#400832\" },\n    purpleLight: { color: \"#cdb0ff\", text: \"#280b42\" },\n    grayLight: { color: \"#ccc\", text: \"#040404\" },\n\n    blueDark: { color: \"#2d7ff9\", text: \"#fff\" },\n    cyanDark: { color: \"#18bfff\", text: \"#fff\" },\n    tealDark: { color: \"#20d9d2\", text: \"#fff\" },\n    greenDark: { color: \"#20c933\", text: \"#fff\" },\n    yellowDark: { color: \"#fcb400\", text: \"#fff\" },\n    orangeDark: { color: \"#ff6f2c\", text: \"#fff\" },\n    redDark: { color: \"#f82b60\", text: \"#fff\" },\n    pinkDark: { color: \"#ff08c2\", text: \"#fff\" },\n    purpleDark: { color: \"#8b46ff\", text: \"#fff\" },\n    grayDark: { color: \"#666\", text: \"#fff\" },\n\n    blueDarker: { color: \"#2750ae\", text: \"#cfdfff\" },\n    cyanDarker: { color: \"#0b76b7\", text: \"#d0f0fd\" },\n    tealDarker: { color: \"#06a09b\", text: \"#c2f5e9\" },\n    greenDarker: { color: \"#338a17\", text: \"#d1f7c4\" },\n    yellowDarker: { color: \"#b87503\", text: \"#ffeab6\" },\n    orangeDarker: { color: \"#d74d26\", text: \"#fee2d5\" },\n    redDarker: { color: \"#ba1e45\", text: \"#ffdce5\" },\n    pinkDarker: { color: \"#b2158b\", text: \"#ffdaf6\" },\n    purpleDarker: { color: \"#6b1cb0\", text: \"#ede2fe\" },\n    grayDarker: { color: \"#444\", text: \"#eee\" }\n};\n\nexport function getColorSchemeForSeed(seed: string): ChipColorSchema {\n    const hash: number = hashString(seed);\n    const colorKeys = Object.keys(CHIP_COLORS);\n    const index = hash % colorKeys.length;\n    return CHIP_COLORS[colorKeys[index]];\n}\n\nexport function getColorSchemeForKey(key: ChipColor): ChipColorSchema {\n    return CHIP_COLORS[key];\n}\n\n","import { ChipColor, EnumValueConfig, EnumValues } from \"../../models\";\n\nexport function enumToObjectEntries(enumValues: EnumValues): [string | number, string | EnumValueConfig][] {\n    return enumValues instanceof Map\n        ? Array.from(enumValues.entries())\n        : Object.entries<string | EnumValueConfig>(enumValues);\n}\n\nexport function getLabelOrConfigFrom(enumValues: EnumValues, key: string | number): string | EnumValueConfig | undefined {\n    return enumValues instanceof Map\n        ? enumValues.get(key)\n        : enumValues[key];\n}\n\nexport function getColorSchemaKey(enumValues: EnumValues, key: string | number): ChipColor | undefined {\n    const labelOrConfig = getLabelOrConfigFrom(enumValues, key);\n    if (typeof labelOrConfig === \"object\" && \"color\" in labelOrConfig) {\n        return labelOrConfig.color;\n    }\n    return undefined;\n}\n\nexport function isEnumValueDisabled(labelOrConfig?: string | EnumValueConfig) {\n    return typeof labelOrConfig === \"object\" && (labelOrConfig as EnumValueConfig).disabled;\n}\n\n\nexport function buildEnumLabel(\n    labelOrConfig?: string | EnumValueConfig\n): string | undefined {\n    if (labelOrConfig === undefined)\n        return undefined;\n    if (typeof labelOrConfig === \"object\") {\n        return labelOrConfig.label;\n    } else {\n        return labelOrConfig;\n    }\n}\n\n","import { Chip, Theme } from \"@mui/material\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport makeStyles from \"@mui/styles/makeStyles\";\nimport React, { useMemo } from \"react\";\nimport {\n    ChipColorSchema,\n    getColorSchemeForKey,\n    getColorSchemeForSeed\n} from \"../../core/util/chip_utils\";\nimport { ChipColor, EnumValues } from \"../../models\";\nimport {\n    buildEnumLabel,\n    getColorSchemaKey,\n    getLabelOrConfigFrom\n} from \"../../core/util/enums\";\n\nconst useStyles = makeStyles<Theme, { schema: ChipColorSchema, error: any }>((theme: Theme) =>\n    createStyles({\n        root: {\n            maxWidth: \"100%\",\n            backgroundColor: ({\n                                  schema,\n                                  error\n                              }) => error ? \"#eee\" : schema.color\n        },\n        label: {\n            color: ({ schema, error }) => error ? \"red\" : schema.text,\n            fontWeight: theme.typography.fontWeightRegular\n        }\n    })\n);\n\n\ninterface EnumValuesChipProps {\n    enumValues: EnumValues;\n    enumKey: any;\n    small: boolean;\n}\n\n/**\n * @category Preview components\n */\nexport function EnumValuesChip({\n                                   enumValues,\n                                   enumKey,\n                                   small\n                               }: EnumValuesChipProps) {\n    const enumValue = enumKey !== undefined ? getLabelOrConfigFrom(enumValues, enumKey.toString()) : undefined;\n    const label = buildEnumLabel(enumValue);\n    const colorSchemaKey = getColorSchemaKey(enumValues, enumKey.toString());\n    return <CustomChip\n        colorSeed={`${enumKey}`}\n        colorSchemaKey={colorSchemaKey}\n        label={label !== undefined ? label : enumKey}\n        error={!label}\n        outlined={false}\n        small={small}/>;\n}\n\n\ninterface EnumChipProps {\n    colorSeed: string;\n    colorSchemaKey?: ChipColor;\n    label: string;\n    error?: boolean;\n    outlined?: boolean;\n    small: boolean;\n}\n\n/**\n * @category Preview components\n */\nexport function CustomChip({\n                               colorSeed,\n                               label,\n                               colorSchemaKey,\n                               error,\n                               outlined,\n                               small\n                           }: EnumChipProps) {\n\n    const schema = useMemo(() =>\n        colorSchemaKey\n            ? getColorSchemeForKey(colorSchemaKey)\n            : getColorSchemeForSeed(colorSeed), [colorSeed, colorSchemaKey]);\n    const classes = useStyles({ schema, error });\n\n    return (\n        <Chip\n            classes={{\n                root: classes.root,\n                label: classes.label\n            }}\n            size={small ? \"small\" : \"medium\"}\n            variant={outlined ? \"outlined\" : \"filled\"}\n            label={label}\n        />\n    );\n}\n","import React from \"react\";\n\nimport { ErrorBoundary } from \"../../core/internal/ErrorBoundary\";\nimport { CustomChip, EnumValuesChip } from \"./CustomChip\";\nimport { PreviewComponentProps } from \"../internal\";\n\n/**\n * @category Preview components\n */\nexport function StringPreview({\n                                  name,\n                                  value,\n                                  property,\n                                  size\n                              }: PreviewComponentProps<string>): React.ReactElement {\n\n    if (property.config?.enumValues) {\n        const enumKey = value;\n        const enumValues = property.config.enumValues;\n        return <EnumValuesChip\n            enumKey={enumKey}\n            enumValues={enumValues}\n            small={size !== \"regular\"}/>;\n    } else if (property.config?.previewAsTag) {\n        return (\n            <ErrorBoundary>\n                <CustomChip\n                    colorSeed={name ?? \"\"}\n                    label={value}\n                    small={size !== \"regular\"}\n                />\n            </ErrorBoundary>);\n    } else {\n        return <>\n            {value && (value.includes(\"\\n\")\n                ? value.split(\"\\n\").map((str, index) =>\n                    <div key={`string_preview_${index}`}>{str}</div>)\n                : value)}\n        </>;\n    }\n}\n","import React from \"react\";\nimport { StringProperty } from \"../../models\";\nimport { PreviewComponentProps } from \"../internal\";\n\nimport { ErrorBoundary } from \"../../core/internal/ErrorBoundary\";\nimport { StringPreview } from \"./StringPreview\";\nimport { Theme } from \"@mui/material\";\n\nimport createStyles from \"@mui/styles/createStyles\";\nimport makeStyles from \"@mui/styles/makeStyles\";\n\nexport const useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        array: {\n            display: \"flex\",\n            flexDirection: \"column\"\n        },\n        arrayWrap: {\n            display: \"flex\",\n            flexWrap: \"wrap\"\n        },\n        arrayItem: {\n            margin: theme.spacing(0.5)\n        }\n    })\n);\n\n/**\n * @category Preview components\n */\nexport function ArrayOfStringsPreview({\n                                          name,\n                                          value,\n                                          property,\n                                          size\n                                      }: PreviewComponentProps<string[]>) {\n\n    const classes = useStyles();\n\n    if (!property.of || property.dataType !== \"array\" || property.of.dataType !== \"string\")\n        throw Error(\"Picked wrong preview component ArrayOfStringsPreview\");\n\n    if (value && !Array.isArray(value)) {\n        return <div>{`Unexpected value: ${value}`}</div>;\n    }\n    const stringProperty = property.of as StringProperty;\n\n    return (\n        <div className={classes.array}>\n            {value &&\n            value.map((v, index) =>\n                <div className={classes.arrayItem}\n                     key={`preview_array_strings_${name}_${index}`}>\n                    <ErrorBoundary>\n                        <StringPreview name={name}\n                                       property={stringProperty}\n                                       value={v}\n                                       size={size}/>\n                    </ErrorBoundary>\n                </div>\n            )}\n        </div>\n    );\n}\n","import { EnumValues } from \"../../models\";\n\nimport React from \"react\";\n\nimport { ErrorBoundary } from \"../../core/internal/ErrorBoundary\";\nimport { EnumValuesChip } from \"./CustomChip\";\nimport { Theme } from \"@mui/material\";\n\nimport createStyles from \"@mui/styles/createStyles\";\nimport makeStyles from \"@mui/styles/makeStyles\";\n\nexport const useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        arrayWrap: {\n            display: \"flex\",\n            flexWrap: \"wrap\"\n        },\n        arrayItem: {\n            margin: theme.spacing(0.5)\n        }\n    })\n);\n\n/**\n * @category Preview components\n */\nexport function ArrayEnumPreview({\n                                     name,\n                                     value,\n                                     enumValues,\n                                     size\n                                 }: {\n    value: string[] | number[],\n    name: string | undefined,\n    enumValues: EnumValues,\n    size: \"regular\" | \"small\" | \"tiny\"\n}) {\n\n    const classes = useStyles();\n\n    return (\n        <div className={classes.arrayWrap}>\n            {value &&\n            (value as any[]).map((enumKey, index) => {\n                    return (\n                        <div className={classes.arrayItem}\n                             key={`preview_array_ref_${name}_${index}`}>\n                            <ErrorBoundary>\n                                <EnumValuesChip\n                                    enumKey={enumKey}\n                                    enumValues={enumValues}\n                                    small={size !== \"regular\"}/>\n                            </ErrorBoundary>\n                        </div>\n                    );\n                }\n            )}\n        </div>\n    );\n}\n","import { PreviewComponentProps } from \"../internal\";\nimport { NumberProperty, StringProperty } from \"../../models\";\nimport { ArrayEnumPreview } from \"./ArrayEnumPreview\";\n\n/**\n * @category Preview components\n */\nexport function ArrayPropertyEnumPreview({\n                                             name,\n                                             value,\n                                             property,\n                                             size\n                                         }: PreviewComponentProps<string[] | number[]>) {\n\n    if (property.dataType !== \"array\")\n        throw Error(\"Picked wrong preview component ArrayEnumPreview\");\n\n    const ofProperty = property.of as StringProperty | NumberProperty;\n    if (!ofProperty.config?.enumValues)\n        throw Error(\"Picked wrong preview component ArrayEnumPreview\");\n\n    if (!value) return null;\n\n    const enumValues = ofProperty.config?.enumValues;\n\n    return <ArrayEnumPreview name={name}\n                             value={value}\n                             enumValues={enumValues}\n                             size={size}/>;\n}\n","import React from \"react\";\nimport { CheckBox, CheckBoxOutlineBlank } from \"@mui/icons-material\";\nimport { PreviewComponentProps } from \"../internal\";\n\n/**\n * @category Preview components\n */\nexport function BooleanPreview({\n                                   name,\n                                   value,\n                                   property,\n                                   size\n                               }: PreviewComponentProps<boolean>): React.ReactElement {\n\n    return value\n        ? <CheckBox color=\"secondary\"/>\n        : <CheckBoxOutlineBlank color=\"disabled\"/>;\n}\n","import React from \"react\";\n\nimport MarkdownPreview from \"@uiw/react-markdown-preview\";\n\ninterface MarkdownProps {\n    source: string\n}\n\n/**\n * @category Preview components\n */\nexport function Markdown({\n                             source\n                         }: MarkdownProps) {\n    return <MarkdownPreview source={typeof source === \"string\" ? source : \"\"}\n                            style={{\n                                fontSize: \"inherit\",\n                                lineHeight: \"inherit\",\n                                fontFamily: \"inherit\"\n                            }}\n                            components={{\n                                a: (props) => <a {...props}\n                                                 onClick={(e) => e.stopPropagation()}\n                                                 target=\"_blank\">{props.children}</a>\n                            }}\n    />;\n}\n\n","import React from \"react\";\nimport { Theme } from \"@mui/material\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport makeStyles from \"@mui/styles/makeStyles\";\n\nconst useStyles = makeStyles<Theme>(theme => createStyles({\n        root: {\n            borderRadius: \"9999px\",\n            backgroundColor: \"rgba(128,128,128,0.1)\",\n            width: \"18px\",\n            height: \"6px\",\n            display: \"inline-block\"\n        }\n    })\n);\n\n/**\n * @category Preview components\n */\nexport function EmptyValue() {\n    const classes = useStyles();\n    return (\n        <div className={classes.root}/>\n    );\n}\n","import { CollectionSize } from \"../models\";\nimport { PreviewSize } from \"../preview\";\n\nexport const TINY_THUMBNAIL = 40;\nexport const SMALL_THUMBNAIL = 100;\nexport const REGULAR_THUMBNAIL = 200;\n\nexport function getThumbnailMeasure(size: PreviewSize): number {\n    if (size === \"tiny\")\n        return TINY_THUMBNAIL;\n    else if (size === \"small\")\n        return SMALL_THUMBNAIL;\n    else if (size === \"regular\")\n        return REGULAR_THUMBNAIL;\n    else throw Error(\"Thumbnail size not mapped\");\n}\n\nexport function getPreviewSizeFrom(size: CollectionSize): PreviewSize {\n    switch (size) {\n        case \"xs\":\n        case \"s\":\n            return \"tiny\";\n        case \"m\":\n            return \"small\";\n        case \"l\":\n        case \"xl\":\n            return \"regular\";\n        default:\n            throw Error(\"Missing mapping value in getPreviewSizeFrom\");\n    }\n}\n","import React, { CSSProperties, useMemo, useState } from \"react\";\nimport clsx from \"clsx\";\nimport { IconButton, Theme, Tooltip } from \"@mui/material\";\nimport ContentPasteIcon from \"@mui/icons-material/ContentPaste\";\nimport OpenInNewIcon from \"@mui/icons-material/OpenInNew\";\n\nimport { PreviewSize } from \"../../preview\";\nimport { getThumbnailMeasure } from \"../util\";\n\nimport createStyles from \"@mui/styles/createStyles\";\nimport makeStyles from \"@mui/styles/makeStyles\";\n\n\nconst useStyles = makeStyles<Theme, { imageSize: number }>(theme => createStyles({\n        image: {\n            maxWidth: \"100%\",\n            maxHeight: \"100%\",\n            borderRadius: \"4px\"\n        },\n        imageWrap: {\n            position: \"relative\",\n            maxWidth: \"100%\",\n            maxHeight: \"100%\",\n            display: \"flex\",\n            alignItems: \"center\",\n            justifyContent: \"center\",\n            width: ({ imageSize }) => imageSize,\n            height: ({ imageSize }) => imageSize\n        },\n        imageTiny: {\n            position: \"relative\",\n            objectFit: \"cover\",\n            width: ({ imageSize }) => imageSize,\n            height: ({ imageSize }) => imageSize,\n            borderRadius: \"4px\",\n            maxHeight: \"100%\"\n        },\n        copyIcon: {\n            borderRadius: \"9999px\",\n            position: \"absolute\",\n            bottom: -4,\n            right: 32,\n            backgroundColor: theme.palette.common.white\n        },\n        previewIcon: {\n            borderRadius: \"9999px\",\n            position: \"absolute\",\n            bottom: -4,\n            right: -4,\n            backgroundColor: theme.palette.common.white\n        }\n    })\n);\n\n/**\n * @category Preview components\n */\nexport interface ImagePreviewProps {\n    size: PreviewSize,\n    url: string\n}\n\n/**\n * @category Preview components\n */\nexport function ImagePreview({ size, url }: ImagePreviewProps) {\n\n    const [onHover, setOnHover] = useState(false);\n\n    const imageSize = useMemo(() => getThumbnailMeasure(size), [size]);\n    const classes = useStyles({ imageSize });\n\n    if (size === \"tiny\") {\n        return (\n            <img src={url}\n                 key={\"tiny_image_preview_\" + url}\n                 className={classes.imageTiny}/>\n        );\n    }\n\n    const imageStyle: CSSProperties =\n        {\n            maxWidth: \"100%\",\n            maxHeight: \"100%\",\n            borderRadius: \"4px\"\n        };\n\n    return (\n        <div\n            className={classes.imageWrap}\n            key={\"image_preview_\" + url}\n            onMouseEnter={() => setOnHover(true)}\n            onMouseMove={() => setOnHover(true)}\n            onMouseLeave={() => setOnHover(false)}>\n\n            <img src={url}\n                 className={classes.image}\n                 style={imageStyle}/>\n\n            {onHover && (\n                <>\n                    <Tooltip title=\"Copy url to clipboard\">\n                        <div className={classes.copyIcon}>\n                            <IconButton\n                                size={\"small\"}\n                                onClick={(e) => {\n                                    e.stopPropagation();\n                                    navigator.clipboard.writeText(url);\n                                }}>\n                                <ContentPasteIcon htmlColor={\"#666\"} fontSize={\"small\"} />\n                            </IconButton>\n                        </div>\n                    </Tooltip>\n                    <Tooltip title=\"Open image in new tab\">\n                        <a\n                            className={classes.previewIcon}\n                            href={url}\n                            rel=\"noopener noreferrer\"\n                            target=\"_blank\">\n                            <IconButton\n                                size={\"small\"}\n                                onClick={(e) => e.stopPropagation()}>\n                                <OpenInNewIcon htmlColor={\"#666\"} fontSize={\"small\"} />\n                            </IconButton>\n                        </a>\n                    </Tooltip>\n                </>\n            )}\n        </div>\n\n    );\n}\n","import React from \"react\";\nimport { ArrayProperty, MapProperty } from \"../../models\";\nimport { ErrorBoundary } from \"../../core/internal/ErrorBoundary\";\n\nimport { Table, TableBody, TableCell, TableRow } from \"@mui/material\";\nimport { PreviewComponent, PreviewComponentProps } from \"../internal\";\n\n/**\n * @category Preview components\n */\nexport function ArrayOfMapsPreview({\n                                          name,\n                                          value,\n                                          property,\n                                          size\n                                      }: PreviewComponentProps<object[]>) {\n\n    if (property.dataType !== \"array\" || !property.of || property.of.dataType !== \"map\")\n        throw Error(\"Picked wrong preview component ArrayOfMapsPreview\");\n\n    const properties = ((property as ArrayProperty).of as MapProperty).properties;\n    if (!properties) {\n        throw Error(`You need to specify a 'properties' prop (or specify a custom field) in your map property ${name}`);\n    }\n    const values = value;\n    const previewProperties = ((property as ArrayProperty).of as MapProperty).previewProperties;\n\n    if (!values) return null;\n\n\n    let mapProperties = previewProperties;\n    if (!mapProperties || !mapProperties.length) {\n        mapProperties = Object.keys(properties);\n        if (size)\n            mapProperties = mapProperties.slice(0, 3);\n    }\n\n    return (\n        <Table size=\"small\">\n            <TableBody>\n                {values &&\n                values.map((v, index) => {\n                    return (\n                        <TableRow key={`table_${v}_${index}`}\n                                  sx={{\n                                      \"&:last-child th, &:last-child td\": {\n                                          borderBottom: 0\n                                      }\n                                  }}>\n                            {mapProperties && mapProperties.map(\n                                (key) => (\n                                    <TableCell\n                                        key={`table-cell-${key as string}`}\n                                        component=\"th\"\n                                    >\n                                        <ErrorBoundary>\n                                            <PreviewComponent\n                                                name={key as string}\n                                                value={(v as any)[key]}\n                                                property={properties[key as string]}\n                                                size={\"small\"}/>\n                                        </ErrorBoundary>\n                                    </TableCell>\n                                )\n                            )}\n                        </TableRow>\n                    );\n                })}\n            </TableBody>\n        </Table>\n    );\n}\n","import React from \"react\";\n\nimport { EnumValuesChip } from \"./CustomChip\";\nimport { PreviewComponentProps } from \"../internal\";\n\n/**\n * @category Preview components\n */\nexport function NumberPreview({\n                                  name,\n                                  value,\n                                  property,\n                                  size\n                              }: PreviewComponentProps<number>): React.ReactElement {\n\n    if (property.config?.enumValues) {\n        const enumKey = value;\n        const enumValues = property.config.enumValues;\n        return <EnumValuesChip\n            enumKey={enumKey}\n            enumValues={enumValues}\n            small={size !== \"regular\"}/>;\n    } else {\n        return <>{value}</>;\n    }\n}\n","export const defaultDateFormat = \"MMMM dd, yyyy, HH:mm:ss\";\n","import { useContext } from \"react\";\nimport { FireCMSContextInstance } from \"../core/contexts/FireCMSContext\";\n\n/**\n * Hook to retrieve the {@link FireCMSContext}.\n *\n * Consider that in order to use this hook you need to have a parent\n * `FireCMS` component.\n *\n * @see FireCMSContext\n * @category Hooks and utilities\n */\nexport const useFireCMSContext = () => useContext(FireCMSContextInstance);\n","import { DataSource } from \"../../models\";\nimport { useFireCMSContext } from \"../useFireCMSContext\";\n\n/**\n * Use this hook to get the datasource being used\n * @category Hooks and utilities\n */\nexport function useDataSource(): DataSource {\n    const context = useFireCMSContext();\n    return context.dataSource;\n}\n","import { useCallback, useEffect, useMemo, useState } from \"react\";\nimport { Entity, EntitySchemaResolver, FilterValues } from \"../../models\";\nimport { useDataSource } from \"./useDataSource\";\n\n/**\n * @category Hooks and utilities\n */\nexport interface CollectionFetchProps<M extends { [Key: string]: any }> {\n\n    /**\n     * Absolute collection path\n     */\n    path: string;\n\n    /**\n     * Schema of the entity displayed by this collection\n     */\n    schemaResolver: EntitySchemaResolver<M>;\n\n    /**\n     * Number of entities to fetch\n     */\n    itemCount?: number;\n\n    /**\n     * List of entities that will be displayed on top, no matter the ordering.\n     * This is used for reference fields selection\n     */\n    entitiesDisplayedFirst?: Entity<M>[];\n\n    /**\n     * Filter the fetched data by the property\n     */\n    filterValues?: FilterValues<M>;\n\n    /**\n     * Sort the results by\n     */\n    sortBy?: [Extract<keyof M, string>, \"asc\" | \"desc\"];\n\n    /**\n     * Search string\n     */\n    searchString?: string;\n}\n\n/**\n * @category Hooks and utilities\n */\nexport interface CollectionFetchResult<M extends { [Key: string]: any }> {\n    data: Entity<M>[]\n    dataLoading: boolean,\n    noMoreToLoad: boolean,\n    dataLoadingError?: Error\n}\n\n/**\n * This hook is used to fetch collections using a given schema\n * @param path\n * @param schemaResolver\n * @param filterValues\n * @param sortBy\n * @param itemCount\n * @param searchString\n * @param entitiesDisplayedFirst\n * @category Hooks and utilities\n */\nexport function useCollectionFetch<M>(\n    {\n        path,\n        schemaResolver,\n        filterValues,\n        sortBy,\n        itemCount,\n        searchString,\n        entitiesDisplayedFirst\n    }: CollectionFetchProps<M>): CollectionFetchResult<M> {\n\n    const sortByProperty = sortBy ? sortBy[0] : undefined;\n    const currentSort = sortBy ? sortBy[1] : undefined;\n\n    const dataSource = useDataSource();\n    const initialEntities = useMemo(() => entitiesDisplayedFirst ? entitiesDisplayedFirst.filter(e => !!e.values) : [], [entitiesDisplayedFirst]);\n    const [data, setData] = useState<Entity<M>[]>(initialEntities);\n\n    const [dataLoading, setDataLoading] = useState<boolean>(false);\n    const [dataLoadingError, setDataLoadingError] = useState<Error | undefined>();\n    const [noMoreToLoad, setNoMoreToLoad] = useState<boolean>(false);\n\n    const updateData = useCallback((entities: Entity<M>[]) => {\n        if (!initialEntities) {\n            setData(entities);\n        } else {\n            const displayedFirstId = new Set(initialEntities.map((e) => e.id));\n            setData([...initialEntities, ...entities.filter((e) => !displayedFirstId.has(e.id))]);\n        }\n    }, [initialEntities]);\n\n    useEffect(() => {\n\n        setDataLoading(true);\n\n        const onEntitiesUpdate = (entities: Entity<M>[]) => {\n            setDataLoading(false);\n            setDataLoadingError(undefined);\n            updateData(entities);\n            setNoMoreToLoad(!itemCount || entities.length < itemCount);\n        };\n\n        const onError = (error: Error) => {\n            console.error(\"ERROR\", error);\n            setDataLoading(false);\n            setData([]);\n            setDataLoadingError(error);\n        };\n\n        if (dataSource.listenCollection) {\n            return dataSource.listenCollection<M>({\n                path: path,\n                schema: schemaResolver,\n                onUpdate: onEntitiesUpdate,\n                onError,\n                searchString,\n                filter: filterValues,\n                limit: itemCount,\n                startAfter: undefined,\n                orderBy: sortByProperty,\n                order: currentSort\n            });\n        } else {\n            dataSource.fetchCollection<M>({\n                path: path,\n                schema: schemaResolver,\n                searchString,\n                filter: filterValues,\n                limit: itemCount,\n                startAfter: undefined,\n                orderBy: sortByProperty,\n                order: currentSort\n            })\n                .then(onEntitiesUpdate)\n                .catch(onError);\n            return () => {\n            };\n        }\n    }, [path, itemCount, currentSort, sortByProperty, filterValues, searchString]);\n\n    return {\n        data,\n        dataLoading,\n        dataLoadingError,\n        noMoreToLoad\n    };\n\n}\n","import { useEffect, useState } from \"react\";\nimport { Entity, EntitySchema, EntitySchemaResolver } from \"../../models\";\nimport { useDataSource } from \"./useDataSource\";\n\n/**\n * @category Hooks and utilities\n */\nexport interface EntityFetchProps<M extends { [Key: string]: any }> {\n    path?: string;\n    entityId?: string;\n    schema?: EntitySchema<M> | EntitySchemaResolver<M>;\n    useCache?: boolean;\n}\n\n/**\n * @category Hooks and utilities\n */\nexport interface EntityFetchResult<M extends { [Key: string]: any }> {\n    entity?: Entity<M>,\n    dataLoading: boolean,\n    dataLoadingError?: Error\n}\n\nconst CACHE:Record<string, Entity<any>| undefined> = {};\n\n/**\n * This hook is used to fetch an entity.\n * It gives real time updates if the datasource supports it.\n * @param path\n * @param schema\n * @param entityId\n * @param useCache\n * @category Hooks and utilities\n */\n\nexport function useEntityFetch<M extends { [Key: string]: any }>(\n    {\n        path,\n        entityId,\n        schema,\n        useCache = false\n    }: EntityFetchProps<M>): EntityFetchResult<M> {\n\n    const dataSource = useDataSource();\n    const [entity, setEntity] = useState<Entity<M> | undefined>();\n    const [dataLoading, setDataLoading] = useState<boolean>(true);\n    const [dataLoadingError, setDataLoadingError] = useState<Error | undefined>();\n\n    useEffect(() => {\n\n        setDataLoading(true);\n\n        const onEntityUpdate = (updatedEntity: Entity<M> | undefined) => {\n            CACHE[`${path}/${entityId}`] = updatedEntity;\n            setEntity(updatedEntity);\n            setDataLoading(false);\n            setDataLoadingError(undefined);\n        };\n\n        const onError = (error: Error) => {\n            console.error(\"ERROR fetching entity\", error);\n            setDataLoading(false);\n            setEntity(undefined);\n            setDataLoadingError(error);\n        };\n\n        if (useCache && CACHE[`${path}/${entityId}`]) {\n            setEntity(CACHE[`${path}/${entityId}`]);\n            setDataLoading(false);\n            setDataLoadingError(undefined);\n            return () => {\n            };\n        } else if (entityId && path && schema) {\n            if (dataSource.listenEntity) {\n                return dataSource.listenEntity<M>({\n                    path,\n                    entityId,\n                    schema,\n                    onUpdate: onEntityUpdate,\n                    onError\n                });\n            } else {\n                dataSource.fetchEntity<M>({\n                    path,\n                    entityId,\n                    schema\n                })\n                    .then(onEntityUpdate)\n                    .catch(onError);\n                return () => {\n                };\n            }\n        }\n        // if no entityId is provided we do nothing\n        else {\n            onEntityUpdate(undefined);\n            return () => {\n            };\n        }\n    }, [entityId, path]);\n\n    return {\n        entity,\n        dataLoading,\n        dataLoadingError\n    };\n\n}\n","import {\n    DataSource,\n    Entity,\n    EntityCallbacks,\n    EntityValues,\n    FireCMSContext,\n    SaveEntityProps\n} from \"../../models\";\nimport { useDataSource } from \"./useDataSource\";\nimport { computeSchema } from \"../../core/utils\";\n\n/**\n * @category Hooks and utilities\n */\nexport type SaveEntityWithCallbacksProps<M> =\n    SaveEntityProps<M> &\n    {\n        callbacks?: EntityCallbacks<M>;\n        onSaveSuccess?: (updatedEntity: Entity<M>) => void,\n        onSaveFailure?: (e: Error) => void,\n        onPreSaveHookError?: (e: Error) => void,\n        onSaveSuccessHookError?: (e: Error) => void\n    }\n\n/**\n * This function is in charge of saving an entity to the datasource.\n * It will run all the save callbacks specified in the schema.\n * It is also possible to attach callbacks on save success or error, and callback\n * errors.\n *\n * If you just want to save the data without running the `onSaveSuccess`,\n * `onSaveFailure` and `onPreSave` callbacks, you can use the `saveEntity` method\n * in the datasource ({@link useDataSource}).\n *\n * @param schema\n * @param path\n * @param entityId\n * @param callbacks\n * @param values\n * @param previousValues\n * @param status\n * @param dataSource\n * @param context\n * @param onSaveSuccess\n * @param onSaveFailure\n * @param onPreSaveHookError\n * @param onSaveSuccessHookError\n * @see useDataSource\n * @category Hooks and utilities\n */\nexport async function saveEntityWithCallbacks<M, UserType>({\n                                                               schema,\n                                                               path,\n                                                               entityId,\n                                                               callbacks,\n                                                               values,\n                                                               previousValues,\n                                                               status,\n                                                               dataSource,\n                                                               context,\n                                                               onSaveSuccess,\n                                                               onSaveFailure,\n                                                               onPreSaveHookError,\n                                                               onSaveSuccessHookError\n                                                           }: SaveEntityWithCallbacksProps<M> & {\n                                                               dataSource: DataSource,\n                                                               context: FireCMSContext<UserType>,\n                                                           }\n): Promise<void> {\n\n    let updatedValues: Partial<EntityValues<M>>;\n\n    if (callbacks?.onPreSave) {\n        try {\n            const resolvedSchema = computeSchema({\n                values: previousValues as EntityValues<M>,\n                entityId,\n                schemaOrResolver: schema,\n                path\n            });\n            updatedValues = await callbacks.onPreSave({\n                schema: resolvedSchema,\n                path,\n                entityId,\n                values,\n                previousValues,\n                status,\n                context\n            });\n        } catch (e: any) {\n            console.error(e);\n            if (onPreSaveHookError)\n                onPreSaveHookError(e);\n            return;\n        }\n    } else {\n        updatedValues = values;\n    }\n\n    return dataSource.saveEntity({\n        schema,\n        path,\n        entityId,\n        values: updatedValues,\n        previousValues,\n        status\n    }).then((entity) => {\n        try {\n            if (callbacks?.onSaveSuccess) {\n                const resolvedSchema = computeSchema({\n                    values: updatedValues as EntityValues<M>,\n                    entityId,\n                    schemaOrResolver: schema,\n                    path\n                });\n                callbacks.onSaveSuccess({\n                    schema: resolvedSchema,\n                    path,\n                    entityId: entity.id,\n                    values: updatedValues,\n                    previousValues,\n                    status,\n                    context\n                });\n            }\n        } catch (e: any) {\n            if (onSaveSuccessHookError)\n                onSaveSuccessHookError(e);\n        }\n        if (onSaveSuccess)\n            onSaveSuccess(entity);\n    })\n        .catch((e) => {\n            if (callbacks?.onSaveFailure) {\n                const resolvedSchema = computeSchema({\n                    values: updatedValues as EntityValues<M>,\n                    entityId,\n                    schemaOrResolver: schema,\n                    path\n                });\n                callbacks.onSaveFailure({\n                    schema: resolvedSchema,\n                    path,\n                    entityId,\n                    values: updatedValues,\n                    previousValues,\n                    status,\n                    context\n                });\n            }\n            if (onSaveFailure) onSaveFailure(e);\n        });\n}\n","import {\n    DataSource,\n    DeleteEntityProps,\n    Entity,\n    EntityCallbacks,\n    EntityOnDeleteProps,\n    FireCMSContext,\n    ResolvedEntitySchema\n} from \"../../models\";\n\n/**\n * @category Hooks and utilities\n */\nexport type DeleteEntityWithCallbacksProps<M> =\n    DeleteEntityProps<M>\n    & {\n    callbacks?: EntityCallbacks<M>;\n    onDeleteSuccess?: (entity: Entity<M>) => void;\n    onDeleteFailure?: (entity: Entity<M>, e: Error) => void;\n    onPreDeleteHookError?: (entity: Entity<M>, e: Error) => void;\n    onDeleteSuccessHookError?: (entity: Entity<M>, e: Error) => void;\n}\n\n/**\n * This function is in charge of deleting an entity in the datasource.\n * It will run all the delete callbacks specified in the schema.\n * It is also possible to attach callbacks on save success or error, and callback\n * errors.\n *\n * If you just want to delete the data without running the `onPreDelete`,\n * and `onDelete` callbacks, you can use the `deleteEntity` method\n * in the datasource ({@link useDataSource}).\n *\n * @param dataSource\n * @param entity\n * @param schema\n * @param callbacks\n * @param onDeleteSuccess\n * @param onDeleteFailure\n * @param onPreDeleteHookError\n * @param onDeleteSuccessHookError\n * @param context\n * @category Hooks and utilities\n */\nexport async function deleteEntityWithCallbacks<M, UserType>({\n                                                                 dataSource,\n                                                                 entity,\n                                                                 schema,\n                                                                 callbacks,\n                                                                 onDeleteSuccess,\n                                                                 onDeleteFailure,\n                                                                 onPreDeleteHookError,\n                                                                 onDeleteSuccessHookError,\n                                                                 context\n                                                             }: DeleteEntityWithCallbacksProps<M> & {\n                                                                 schema: ResolvedEntitySchema<M>,\n                                                                 dataSource: DataSource,\n                                                                 context: FireCMSContext<UserType>\n                                                             }\n): Promise<boolean> {\n\n    console.debug(\"Deleting entity\", entity.path, entity.id);\n\n    const entityDeleteProps: EntityOnDeleteProps<M> = {\n        entity,\n        schema,\n        entityId: entity.id,\n        path: entity.path,\n        context\n    };\n\n    if (callbacks?.onPreDelete) {\n        try {\n            await callbacks.onPreDelete(entityDeleteProps);\n        } catch (e: any) {\n            console.error(e);\n            if (onPreDeleteHookError)\n                onPreDeleteHookError(entity, e);\n            return false;\n        }\n    }\n    return dataSource.deleteEntity({\n        entity\n    }).then(() => {\n        onDeleteSuccess && onDeleteSuccess(entity);\n        try {\n            if (callbacks?.onDelete) {\n                callbacks.onDelete(entityDeleteProps);\n            }\n            return true;\n        } catch (e: any) {\n            if (onDeleteSuccessHookError)\n                onDeleteSuccessHookError(entity, e);\n            return false;\n        }\n    }).catch((e) => {\n        if (onDeleteFailure) onDeleteFailure(entity, e);\n        return false;\n    });\n}\n","import { useEffect, useRef } from \"react\";\nimport { CMSType, Property } from \"../models\";\n\n/**\n * Hook we use to restore a value after it has been cleared\n * @param property\n * @param value\n * @param setValue\n * @ignore\n */\nexport function useClearRestoreValue<T extends CMSType>({\n                                                            property,\n                                                            value,\n                                                            setValue\n                                                        }:\n                                                            {\n                                                                property: Property<T>,\n                                                                value: T,\n                                                                setValue: (value: T | null, shouldValidate?: boolean) => void\n                                                            }) {\n\n    const clearedValueRef = useRef<T | null>(null);\n    useEffect(() => {\n        const shouldClearValueIfDisabled = typeof property.disabled === \"object\" && Boolean(property.disabled.clearOnDisabled);\n        if (shouldClearValueIfDisabled) {\n            if (value != null) {\n                clearedValueRef.current = value;\n                setValue(null);\n            }\n        } else if (clearedValueRef.current) {\n            setValue(clearedValueRef.current);\n            clearedValueRef.current = null;\n        }\n    }, [property]);\n}\n","import { NavigationContext } from \"../models\";\nimport { useFireCMSContext } from \"./useFireCMSContext\";\n\n\n/**\n * Use this hook to get the navigation of the app.\n * Note that if can be undefined if the navigation has not yet been\n * resolved (you used a {@link NavigationBuilder} and the user is not\n * authenticated.\n *\n * @category Hooks and utilities\n */\nexport function useNavigation(): NavigationContext {\n    const context = useFireCMSContext();\n    return context.navigationContext;\n}\n","import {\n    Entity,\n    EntityCollection,\n    EntityCustomView,\n    FireCMSContext\n} from \"../models\";\nimport { useEffect, useState } from \"react\";\nimport { getNavigationEntriesFromPathInternal } from \"../core/util/navigation_from_path\";\nimport { useFireCMSContext } from \"./useFireCMSContext\";\n\n/**\n * @see resolveNavigationFrom\n * @category Hooks and utilities\n */\nexport type ResolvedNavigationEntry<M> =\n    | ResolvedNavigationEntity<M>\n    | ResolvedNavigationCollection<M>\n    | ResolvedNavigationEntityCustom<M>;\n\n/**\n * @see resolveNavigationFrom\n * @category Hooks and utilities\n */\nexport interface ResolvedNavigationEntity<M> {\n    type: \"entity\";\n    entity: Entity<M>;\n    entityId: string;\n    path: string;\n    parentCollection: EntityCollection<M>;\n}\n\n/**\n * @see resolveNavigationFrom\n * @category Hooks and utilities\n */\nexport interface ResolvedNavigationCollection<M> {\n    type: \"collection\";\n    path: string;\n    collection: EntityCollection<M>;\n}\n\n/**\n * @see resolveNavigationFrom\n * @category Hooks and utilities\n */\ninterface ResolvedNavigationEntityCustom<M> {\n    type: \"custom_view\";\n    path: string;\n    view: EntityCustomView<M>;\n}\n\n/**\n * Use this function to retrieve an array of navigation entries (resolved\n * collection, entity or entity custom_view) for the given path. You need to pass the app context\n * that you receive in different callbacks, such as the save hooks.\n *\n * It will take into account the `navigation` provided at the `FireCMS` level, as\n * well as a `schemaResolver` if provided.\n *\n * @param path\n * @param context\n * @category Hooks and utilities\n */\nexport function resolveNavigationFrom<M, UserType>({\n                                             path,\n                                             context\n                                         }: { path: string, context: FireCMSContext<UserType> }): Promise<ResolvedNavigationEntry<M>[]> {\n\n\n    const dataSource = context.dataSource;\n    const navigationContext = context.navigationContext;\n    const navigation = context.navigationContext.navigation;\n\n    if (!navigation) {\n        throw Error(\"Calling getNavigationFrom, but main navigation has not yet been initialised\");\n    }\n\n\n    const navigationEntries = getNavigationEntriesFromPathInternal({\n        path,\n        collections: navigation.collections\n    });\n\n    const resultPromises: Promise<ResolvedNavigationEntry<any>>[] = navigationEntries.map((entry) => {\n        if (entry.type === \"collection\") {\n            return Promise.resolve(entry);\n        } else if (entry.type === \"entity\") {\n            const entityCollectionResolver = navigationContext.getCollectionResolver(entry.path, entry.entityId);\n            if (!entityCollectionResolver?.schemaResolver) {\n                throw Error(`No schema defined in the navigation for the entity with path ${entry.path}`);\n            }\n\n            return dataSource.fetchEntity({\n                path: entry.path,\n                entityId: entry.entityId,\n                schema: entityCollectionResolver?.schemaResolver\n            })\n                .then((entity) => {\n                    return { ...entry, entity };\n                });\n        } else if (entry.type === \"custom_view\") {\n            return Promise.resolve(entry);\n        } else {\n            throw Error(\"Unmapped element in useEntitiesFromPath\");\n        }\n    });\n\n    return Promise.all(resultPromises);\n}\n\n/**\n * @category Hooks and utilities\n */\nexport interface NavigationFromProps {\n    path: string;\n}\n\n/**\n * @category Hooks and utilities\n */\nexport interface NavigationFrom<M> {\n    data?: ResolvedNavigationEntry<M>[]\n    dataLoading: boolean,\n    dataLoadingError?: Error\n}\n\n/**\n * Use this hook to retrieve an array of navigation entries (resolved\n * collection or entity) for the given path. You can use this hook\n * in any React component that lives under `FireCMS`\n * @category Hooks and utilities\n */\nexport function useResolvedNavigationFrom<M, UserType>(\n    {\n        path\n    }: NavigationFromProps): NavigationFrom<M> {\n\n    const context: FireCMSContext<UserType> = useFireCMSContext();\n\n    const [data, setData] = useState<ResolvedNavigationEntry<M>[] | undefined>();\n    const [dataLoading, setDataLoading] = useState<boolean>(false);\n    const [dataLoadingError, setDataLoadingError] = useState<Error | undefined>();\n\n    useEffect(() => {\n\n        const navigation = context.navigationContext.navigation;\n        if (navigation) {\n            setDataLoading(true);\n            setDataLoadingError(undefined);\n            resolveNavigationFrom<M, UserType>({ path, context })\n                .then((res) => {\n                    setData(res);\n                })\n                .catch((e) => setDataLoadingError(e))\n                .finally(() => setDataLoading(false));\n        }\n\n    }, [path, context]);\n\n    if (!context.navigationContext.navigation) {\n        return { dataLoading: true };\n    }\n\n    return { data, dataLoading, dataLoadingError };\n}\n","import { StorageSource } from \"../models\";\nimport { useFireCMSContext } from \"./useFireCMSContext\";\n\n/**\n * Use this hook to get the storage source being used\n * @category Hooks and utilities\n */\nexport function useStorageSource(): StorageSource {\n    const context = useFireCMSContext();\n    return context.storageSource;\n}\n","import { AuthController, User } from \"../models\";\nimport { useFireCMSContext } from \"./useFireCMSContext\";\n\n/**\n * Hook to retrieve the AuthContext.\n *\n * Consider that in order to use this hook you need to have a parent\n * `FireCMS`\n *\n * @see AuthController\n * @category Hooks and utilities\n */\nexport function useAuthController<UserType extends User = User>(): AuthController<UserType> {\n    const context = useFireCMSContext();\n    return context.authController;\n}\n","import { AuthController, SideEntityController } from \"../models\";\nimport { useFireCMSContext } from \"./useFireCMSContext\";\n\n/**\n * Hook to retrieve the side entity controller.\n *\n * Consider that in order to use this hook you need to have a parent\n * `FireCMS`\n *\n * @see AuthController\n * @category Hooks and utilities\n */\nexport function useSideEntityController(): SideEntityController {\n    const context = useFireCMSContext();\n    return context.sideEntityController;\n}\n","import { useContext } from \"react\";\nimport { SnackbarContext } from \"../core/contexts/SnackbarContext\";\n\n/**\n * Possible snackbar types\n * @category Hooks and utilities\n */\nexport type SnackbarMessageType = \"success\" | \"info\" | \"warning\" | \"error\";\n\n/**\n * Controller to display snackbars\n * @category Hooks and utilities\n */\nexport interface SnackbarController {\n    /**\n     * Is there currently an open snackbar\n     */\n    isOpen: boolean;\n\n    /**\n     * Close the currently open snackbar\n     */\n    close: () => void;\n\n    /**\n     * Display a new snackbar. You need to specify the type and message.\n     * You can optionally specify a title\n     */\n    open: (props: {\n        type: SnackbarMessageType;\n        title?: string;\n        message: string;\n    }) => void;\n}\n\n/**\n * Hook to retrieve the SnackbarContext.\n *\n * Consider that in order to use this hook you need to have a parent\n * `FireCMS`\n *\n * @see SnackbarController\n * @category Hooks and utilities\n */\nexport const useSnackbarController = () => useContext<SnackbarController>(SnackbarContext);\n","import { ModeStateContext } from \"../core/contexts/ModeState\";\nimport { useContext } from \"react\";\n\n/**\n * @category Hooks and utilities\n */\nexport interface ModeState {\n    mode: \"light\" | \"dark\";\n    setMode: (mode: \"light\" | \"dark\") => void;\n    toggleMode: () => void;\n}\n\n/**\n * Hook to retrieve the current mode (\"light\" | \"dark\"), and `setMode`\n * or `toggle` functions to change it.\n *\n * Consider that in order to use this hook you need to have a parent\n * `FireCMS`\n *\n * @see ModeState\n * @category Hooks and utilities\n */\nexport const useModeState = () => useContext(ModeStateContext);\n","// FORKED FROM https://github.com/fayeed/use-clipboard\n\nimport {\n    MutableRefObject,\n    useCallback,\n    useEffect,\n    useRef,\n    useState\n} from \"react\";\n\n\nexport interface UseClipboardProps {\n    /**\n     * It's callback function that is called after the `copy` command\n     * is executed.\n     *\n     * @param text: The selected clipboard text.\n     */\n    onSuccess?: (text: string) => void;\n\n    /**\n     * Triggers when the hook encounters an error.\n     * If passed hook won't throw an error.\n     *\n     * @param error: cause of the error\n     */\n    onError?: (error: string) => void;\n\n    /**\n     * Disables the new clipboard API `navigator.clipboard` even if\n     * it is supported.\n     */\n    disableClipboardAPI?: boolean;\n\n    /**\n     * revert back the isCopied flag to false again if a value is set.\n     */\n    copiedDuration?: number;\n}\n\nexport interface useClipboardReturnType {\n    /**\n     * Use ref to pull the text content from.\n     */\n    ref: MutableRefObject<any>;\n\n    /**\n     * Use it to perform the copy operation\n     */\n    copy: (text?: string) => void;\n\n    /**\n     * Use it to perform the cut operation\n     */\n    cut: () => void;\n\n    /**\n     * Indicates wheater the content was successfully copied or not.\n     */\n    isCoppied: boolean;\n\n    /**\n     * Current selected clipboard content.\n     */\n    clipboard: string;\n\n    /**\n     * Clears the user clipboard.\n     */\n    clearClipboard: () => void;\n\n    /**\n     * Check to see if the browser supports the new `navigator.clipboard` API.\n     */\n    isSupported: () => boolean;\n}\n\nexport const useClipboard = (\n    options?: UseClipboardProps\n): useClipboardReturnType => {\n    const { onSuccess, onError, disableClipboardAPI = false, copiedDuration } =\n    options || {};\n    const ref = useRef<any>(null);\n    const [isCoppied, setIsCoppied] = useState(false);\n    const [clipboard, setClipbaord] = useState(\"\");\n\n    useEffect(() => {\n        if (copiedDuration) setTimeout(() => setIsCoppied(false), copiedDuration);\n    }, [isCoppied]);\n\n    const isSupported = () => navigator.clipboard !== undefined;\n\n    const handleError = useCallback((error: string) => {\n        if (onError) onError(error);\n        else throw new Error(error);\n    }, [onError]);\n\n    const handleSuccess = useCallback((text: string) => {\n        if (onSuccess) onSuccess(text);\n        setIsCoppied(true);\n        setClipbaord(text);\n    }, [onSuccess]);\n\n    const copyToClipboard = useCallback((text: string) => {\n        navigator.clipboard\n            .writeText(text)\n            .then(() => handleSuccess(text))\n            .catch((err) => {\n                handleError(err);\n                setIsCoppied(false);\n            });\n    }, [handleError, handleSuccess]);\n\n    const clearClipboard = () => {\n        if (isSupported()) {\n            navigator.clipboard.writeText(\"\");\n        }\n    };\n\n    const copy = (text?: string) =>\n        action(\"copy\", typeof text === \"object\" ? undefined : text);\n\n    const cut = () => action(\"cut\");\n\n    const action = useCallback(\n        (operation = \"copy\", text?: string) => {\n            const element = ref.current as HTMLElement;\n\n            const isInput =\n                element &&\n                (element.tagName === \"INPUT\" || element.tagName === \"TEXTAREA\");\n\n            const input = ref.current as HTMLInputElement;\n\n            if (isSupported() && !disableClipboardAPI) {\n                if (text) {\n                    copyToClipboard(text);\n                } else if (element) {\n                    if (isInput) {\n                        copyToClipboard(input.value);\n\n                        if (operation === \"cut\") {\n                            input.value = \"\";\n                        }\n                    } else {\n                        copyToClipboard(element.innerText);\n                    }\n                } else {\n                    handleError(\"Both the ref & text were undefined\");\n                }\n            }\n        },\n        [disableClipboardAPI, copyToClipboard, handleError]\n    );\n\n    return {\n        ref,\n        isCoppied,\n        clipboard,\n        clearClipboard,\n        isSupported,\n        copy,\n        cut\n    };\n};\n","import { PreviewComponentProps } from \"../internal\";\nimport React from \"react\";\n\nimport format from \"date-fns/format\";\nimport * as locales from \"date-fns/locale\";\nimport { defaultDateFormat } from \"../../core/util/dates\";\nimport { FireCMSContext } from \"../../models\";\nimport { useFireCMSContext } from \"../../hooks\";\n\n/**\n * @category Preview components\n */\nexport function TimestampPreview({\n                                     name,\n                                     value,\n                                     property,\n                                     size\n                                 }: PreviewComponentProps<Date>): React.ReactElement {\n\n\n    const appConfig: FireCMSContext<any> | undefined = useFireCMSContext();\n    const dateUtilsLocale = appConfig?.locale ? locales[appConfig?.locale] : undefined;\n    const dateFormat: string = appConfig?.dateTimeFormat ?? defaultDateFormat;\n    const formattedDate = value ? format(value, dateFormat, { locale: dateUtilsLocale }) : \"\";\n\n    return (\n        <>\n            {formattedDate}\n        </>\n    );\n}\n","import React from \"react\";\nimport { CardMedia, Link, Theme } from \"@mui/material\";\n\nimport DescriptionOutlinedIcon from \"@mui/icons-material/DescriptionOutlined\";\nimport OpenInNewIcon from \"@mui/icons-material/OpenInNew\";\n\nimport { MediaType } from \"../../models\";\nimport { PreviewComponentProps } from \"../internal\";\nimport { ImagePreview } from \"./ImagePreview\";\nimport { getThumbnailMeasure } from \"../util\";\n\nimport createStyles from \"@mui/styles/createStyles\";\nimport makeStyles from \"@mui/styles/makeStyles\";\n\nexport const useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        flexCenter: {\n            display: \"flex\",\n            alignItems: \"center\",\n            justifyContent: \"center\"\n        },\n        smallMargin: {\n            margin: theme.spacing(1)\n        },\n        arrayWrap: {\n            display: \"flex\",\n            flexWrap: \"wrap\"\n        },\n        array: {\n            display: \"flex\",\n            flexDirection: \"column\"\n        },\n        arrayItem: {\n            margin: theme.spacing(0.5)\n        },\n        arrayItemBig: {\n            margin: theme.spacing(1)\n        },\n        link: {\n            display: \"flex\",\n            wordBreak: \"break-word\",\n            fontWeight: theme.typography.fontWeightMedium\n        }\n    })\n);\n\n/**\n * @category Preview components\n */\nexport function UrlComponentPreview({\n                                        value,\n                                        property,\n                                        size\n                                    }: PreviewComponentProps<string>): React.ReactElement {\n\n    const classes = useStyles();\n\n    if (!value) return <div/>;\n    const url = value;\n    if (typeof property.config?.url === \"boolean\" && property.config.url) {\n        return (\n            <Link className={classes.link}\n                  href={url}\n                  onMouseDown={(e: React.MouseEvent) => {\n                      e.preventDefault();\n                  }}\n                  target=\"_blank\">\n                <OpenInNewIcon style={{ marginRight: 8 }} fontSize={\"small\"}/>\n                {url}\n            </Link>\n        );\n    }\n\n    const mediaType: MediaType = property.config?.url as MediaType ||\n        property.config?.storageMeta?.mediaType;\n    if (mediaType === \"image\") {\n        return <ImagePreview key={`image_preview_${url}_${size}`}\n                             url={url}\n                             size={size}/>;\n    } else if (mediaType === \"audio\") {\n        return <audio controls\n                      src={url}\n                      key={`audio_preview_${url}_${size}`}>\n            Your browser does not support the\n            <code>audio</code> element.\n        </audio>;\n    } else if (mediaType === \"video\") {\n        return <CardMedia\n            key={`video_preview_${url}_${size}`}\n            style={{ maxWidth: size === \"small\" ? 300 : 500 }}\n            component=\"video\"\n            controls\n            image={url}\n        />;\n    } else {\n        return <a\n            key={`link_preview_${url}_${size}`}\n            href={url}\n            rel=\"noopener noreferrer\"\n            target=\"_blank\"\n            onClick={(e) => e.stopPropagation()}>\n            <div className={classes.flexCenter}\n                 style={{\n                     width: getThumbnailMeasure(size),\n                     height: getThumbnailMeasure(size)\n                 }}>\n                <DescriptionOutlinedIcon/>\n            </div>\n        </a>;\n    }\n}\n","import {\n    ArrayProperty,\n    MapProperty,\n    Properties,\n    Property,\n    StringProperty\n} from \"../../models\";\nimport React from \"react\";\nimport {\n    Box,\n    Grid,\n    List,\n    ListItem,\n    Skeleton,\n    Table,\n    TableBody,\n    TableCell,\n    TableRow\n} from \"@mui/material\";\nimport { PreviewSize } from \"../../preview\";\nimport { getThumbnailMeasure } from \"../util\";\n\nexport interface SkeletonComponentProps {\n    property: Property,\n    size: PreviewSize\n}\n\n/**\n * @category Preview components\n */\nexport function SkeletonComponent({\n                                         property,\n                                         size\n                                     }: SkeletonComponentProps\n) {\n\n    if (!property) {\n        console.error(\"No property assigned for skeleton component\", property, size);\n    }\n\n    let content: JSX.Element | any;\n    if (property.dataType === \"string\") {\n        const stringProperty = property as StringProperty;\n        if (stringProperty.config?.url) {\n            content = renderUrlComponent(stringProperty, size);\n        } else if (stringProperty.config?.storageMeta) {\n            content = renderSkeletonImageThumbnail(size);\n        } else {\n            content = renderSkeletonText();\n        }\n    } else if (property.dataType === \"array\") {\n        const arrayProperty = property as ArrayProperty;\n\n        if (arrayProperty.of) {\n            if (arrayProperty.of.dataType === \"map\" && arrayProperty.of.properties) {\n                content = renderArrayOfMaps(arrayProperty.of.properties, size, arrayProperty.of.previewProperties);\n            } else if (arrayProperty.of.dataType === \"string\") {\n                if (arrayProperty.of.config?.enumValues) {\n                    content = renderArrayEnumTableCell();\n                } else if (arrayProperty.of.config?.storageMeta) {\n                    content = renderGenericArrayCell(arrayProperty.of);\n                } else {\n                    content = renderArrayOfStrings();\n                }\n            } else {\n                content = renderGenericArrayCell(arrayProperty.of);\n            }\n        }\n\n    } else if (property.dataType === \"map\") {\n        content = renderMap(property as MapProperty, size);\n    } else if (property.dataType === \"timestamp\") {\n        content = renderSkeletonText();\n    } else if (property.dataType === \"reference\") {\n        content = renderReference();\n    } else if (property.dataType === \"boolean\") {\n        content = renderSkeletonText();\n    } else {\n        content = renderSkeletonText();\n    }\n    return (content || null);\n}\n\nfunction renderMap<T extends object>(property: MapProperty<T>, size: PreviewSize) {\n\n    if (!property.properties)\n        return <></>;\n\n    let mapProperties: string[];\n    if (!size) {\n        mapProperties = Object.keys(property.properties);\n    } else {\n        if (property.previewProperties)\n            mapProperties = property.previewProperties as string[];\n        else\n            mapProperties = Object.keys(property.properties).slice(0, 3);\n    }\n\n    if (size)\n        return (\n            <List>\n                {mapProperties && mapProperties.map((key: string) => (\n                    <ListItem key={property.title + key}>\n                        <SkeletonComponent\n                            property={(property.properties as any)[key]}\n                            size={\"small\"}/>\n                    </ListItem>\n                ))}\n            </List>\n        );\n\n    return (\n        <Table size={\"small\"}>\n            <TableBody>\n                {mapProperties &&\n                mapProperties.map((key, index) => {\n                    return (\n                        <TableRow key={`table_${property.title}_${index}`}\n                                  sx={{\n                                      \"&:last-child th, &:last-child td\": {\n                                          borderBottom: 0\n                                      }\n                                  }}>\n                            <TableCell key={`table-cell-title-${key}`}\n                                       component=\"th\">\n                                <Skeleton variant=\"text\"/>\n                            </TableCell>\n                            <TableCell key={`table-cell-${key}`} component=\"th\">\n                                <SkeletonComponent\n                                    property={(property.properties as any)[key]}\n                                    size={\"small\"}/>\n                            </TableCell>\n                        </TableRow>\n                    );\n                })}\n            </TableBody>\n        </Table>\n    );\n\n}\n\nfunction renderArrayOfMaps<M>(properties: Properties<M>, size: PreviewSize, previewProperties?: string[]) {\n    let tableProperties = previewProperties;\n    if (!tableProperties || !tableProperties.length) {\n        tableProperties = Object.keys(properties) as string[];\n        if (size)\n            tableProperties = tableProperties.slice(0, 3);\n    }\n\n    return (\n        <Table size={\"small\"}>\n            <TableBody>\n                {\n                    [0, 1, 2].map((value, index) => {\n                        return (\n                            <TableRow key={`table_${value}_${index}`}>\n                                {tableProperties && tableProperties.map(\n                                    (key) => (\n                                        <TableCell\n                                            key={`table-cell-${key}`}\n                                            component=\"th\"\n                                        >\n                                            <SkeletonComponent\n                                                property={(properties as any)[key]}\n                                                size={\"small\"}/>\n                                        </TableCell>\n                                    )\n                                )}\n                            </TableRow>\n                        );\n                    })}\n            </TableBody>\n        </Table>\n    );\n}\n\nfunction renderArrayOfStrings() {\n    return (\n        <Grid>\n            {\n                [0, 1].map((value, index) => (\n                    renderSkeletonText(index)\n                ))}\n        </Grid>\n    );\n}\n\nfunction renderArrayEnumTableCell() {\n    return (\n        <Grid>\n            {\n                [0, 1].map((value, index) =>\n                    <>\n                        {renderSkeletonText(index)}\n                    </>\n                )}\n        </Grid>\n    );\n}\n\nfunction renderGenericArrayCell(\n    property: Property\n) {\n    return (\n        <Grid>\n\n            {\n                [0, 1].map((value, index) =>\n                    <>\n                        <SkeletonComponent property={property}\n                                           size={\"small\"}/>\n                    </>\n                )}\n        </Grid>\n    );\n}\n\nfunction renderUrlAudioComponent() {\n    return (\n        <Skeleton variant=\"rectangular\"\n                  width={300}\n                  height={100}/>\n    );\n}\n\nexport function renderSkeletonImageThumbnail(size: PreviewSize) {\n    const imageSize = size === \"tiny\" ? 40 : size === \"small\" ? 100 : 200;\n    return (\n        <Skeleton variant=\"rectangular\"\n                  width={imageSize}\n                  height={imageSize}/>\n    );\n}\n\nfunction renderUrlVideo(size: PreviewSize) {\n\n    return (\n        <Skeleton variant=\"rectangular\"\n                  width={size !== \"regular\" ? 300 : 500}\n                  height={size !== \"regular\" ? 200 : 250}/>\n    );\n}\n\nfunction renderReference() {\n    return <Skeleton variant=\"rectangular\" width={200} height={100}/>;\n}\n\n\nfunction renderUrlComponent(property: StringProperty, size: PreviewSize = \"regular\") {\n\n    if (typeof property.config?.url === \"boolean\" && property.config.url) {\n        return <div style={{\n            display: \"flex\"\n        }}>\n            {renderSkeletonIcon()}\n            {renderSkeletonText()}\n        </div>;\n    }\n\n    const mediaType = property.config?.url || property.config?.storageMeta?.mediaType;\n    if (mediaType === \"image\") {\n        return renderSkeletonImageThumbnail(size);\n    } else if (mediaType === \"audio\") {\n        return renderUrlAudioComponent();\n    } else if (mediaType === \"video\") {\n        return renderUrlVideo(size);\n    } else {\n        return renderUrlFile(size);\n    }\n}\n\nfunction renderUrlFile(size: PreviewSize) {\n\n    return (\n        <Box\n            sx={{\n                width: getThumbnailMeasure(size),\n                height: getThumbnailMeasure(size)\n            }}>\n            {renderSkeletonIcon()}\n        </Box>\n    );\n}\n\nfunction renderSkeletonText(index?: number) {\n    return <Skeleton variant=\"text\" key={`skeleton_${index}`}/>;\n}\n\nexport function renderSkeletonCaptionText(index?: number) {\n    return <Skeleton\n        height={20}\n        variant=\"text\"/>;\n}\n\nexport function renderSkeletonIcon() {\n    return <Skeleton variant=\"rectangular\" width={24} height={24}/>;\n}\n\n","import React, { useEffect } from \"react\";\n\nimport { renderSkeletonImageThumbnail } from \"./SkeletonComponent\";\nimport { UrlComponentPreview } from \"./UrlComponentPreview\";\nimport { PreviewComponentProps } from \"../internal\";\nimport { useStorageSource } from \"../../hooks\";\n\n/**\n * @category Preview components\n */\nexport const StorageThumbnail = React.memo<PreviewComponentProps<string>>(StorageThumbnailInternal, areEqual) as React.FunctionComponent<PreviewComponentProps<string>>;\n\nfunction areEqual(prevProps: PreviewComponentProps<string>, nextProps: PreviewComponentProps<string>) {\n    return prevProps.name === nextProps.name &&\n        prevProps.size === nextProps.size &&\n        prevProps.height === nextProps.height &&\n        prevProps.width === nextProps.width &&\n        prevProps.value === nextProps.value;\n}\n\nconst URL_CACHE: Record<string, string> = {};\n\nexport function StorageThumbnailInternal({\n                                             name,\n                                             value,\n                                             property,\n                                             size\n                                         }: PreviewComponentProps<string>) {\n    const storage = useStorageSource();\n\n    const storagePathOrDownloadUrl = value;\n\n    const [url, setUrl] = React.useState<string>(URL_CACHE[storagePathOrDownloadUrl]);\n\n\n    useEffect(() => {\n        if (!storagePathOrDownloadUrl)\n            return;\n        let unmounted = false;\n        if (property.config?.storageMeta?.storeUrl) {\n            setUrl(storagePathOrDownloadUrl);\n            URL_CACHE[storagePathOrDownloadUrl] = storagePathOrDownloadUrl;\n        } else if (storagePathOrDownloadUrl)\n            storage.getDownloadURL(storagePathOrDownloadUrl)\n                .then(function (downloadURL) {\n                    if (!unmounted) {\n                        setUrl(downloadURL);\n                        URL_CACHE[storagePathOrDownloadUrl] = downloadURL;\n                    }\n                });\n        return () => {\n            unmounted = true;\n        };\n    }, [property.config?.storageMeta?.storeUrl, storagePathOrDownloadUrl]);\n\n    if (!storagePathOrDownloadUrl) return null;\n\n    return url\n        ? <UrlComponentPreview name={name}\n                             value={url}\n                             property={property}\n                             size={size}/>\n        : renderSkeletonImageThumbnail(size);\n}\n","import React from \"react\";\n\nimport {\n    PreviewComponent,\n    PreviewComponentProps,\n    PreviewSize\n} from \"../internal\";\nimport { ErrorBoundary } from \"../../core/internal/ErrorBoundary\";\nimport { Property } from \"../../models\";\n\nimport { Theme } from \"@mui/material\";\n\nimport createStyles from \"@mui/styles/createStyles\";\nimport makeStyles from \"@mui/styles/makeStyles\";\n\nexport const useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        arrayWrap: {\n            display: \"flex\",\n            flexWrap: \"wrap\"\n        },\n        arrayItem: {\n            margin: theme.spacing(0.5)\n        }\n    })\n);\n\n/**\n * @category Preview components\n */\nexport function ArrayOfStorageComponentsPreview({\n                                                    name,\n                                                    value,\n                                                    property,\n                                                    size\n                                                }: PreviewComponentProps<any[]>) {\n\n    if (property.dataType !== \"array\" || !property.of || property.of.dataType !== \"string\")\n        throw Error(\"Picked wrong preview component ArrayOfStorageComponentsPreview\");\n\n    const childSize: PreviewSize = size === \"regular\" ? \"small\" : \"tiny\";\n    const classes = useStyles();\n\n    return <div className={classes.arrayWrap}>\n        {value &&\n        value.map((v, index) =>\n            <div className={classes.arrayItem}\n                 key={`preview_array_storage_${name}_${index}`}>\n                <ErrorBoundary>\n                    <PreviewComponent\n                        name={name}\n                        value={v}\n                        property={property.of as Property<string>}\n                        size={childSize}/>\n                </ErrorBoundary>\n            </div>\n        )}\n    </div>;\n}\n","import * as React from \"react\";\nimport { useMemo } from \"react\";\n\nimport {\n    Box,\n    darken,\n    IconButton,\n    lighten,\n    Paper,\n    Skeleton,\n    Tooltip,\n    Typography\n} from \"@mui/material\";\nimport { AnyProperty, EntityReference } from \"../../models\";\n\nimport KeyboardTabIcon from \"@mui/icons-material/KeyboardTab\";\nimport { PreviewComponent, PreviewComponentProps } from \"../internal\";\n\nimport { SkeletonComponent } from \"./SkeletonComponent\";\nimport { ErrorView } from \"../../core\";\nimport {\n    useEntityFetch,\n    useNavigation,\n    useSideEntityController\n} from \"../../hooks\";\n\nexport type ReferencePreviewProps =\n    PreviewComponentProps<EntityReference>\n    & { onHover?: boolean };\n\n\n/**\n * @category Preview components\n */\nexport const ReferencePreview = React.memo<ReferencePreviewProps>(ReferencePreviewComponent, areEqual) as React.FunctionComponent<ReferencePreviewProps>;\n\nfunction areEqual(prevProps: ReferencePreviewProps, nextProps: ReferencePreviewProps) {\n    return prevProps.name === nextProps.name &&\n        prevProps.size === nextProps.size &&\n        prevProps.height === nextProps.height &&\n        prevProps.width === nextProps.width &&\n        prevProps.onHover === nextProps.onHover &&\n        prevProps.value?.id === nextProps.value?.id &&\n        prevProps.value?.path === nextProps.value?.path\n        ;\n}\n\nfunction ReferencePreviewComponent<M extends { [Key: string]: any }>(\n    {\n        value,\n        property,\n        onClick,\n        size,\n        onHover\n    }: ReferencePreviewProps) {\n\n    if (typeof property.path !== \"string\") {\n        throw Error(\"Picked the wrong component ReferencePreviewComponent\");\n    }\n\n    const reference: EntityReference = value;\n    const previewProperties = property.previewProperties;\n\n    const navigationContext = useNavigation();\n    const sideEntityController = useSideEntityController();\n\n    const collectionResolver = navigationContext.getCollectionResolver<M>(property.path);\n    if (!collectionResolver) {\n        throw Error(`Couldn't find the corresponding collection view for the path: ${property.path}`);\n    }\n\n    const schema = collectionResolver.schema;\n\n    const {\n        entity,\n        dataLoading,\n        dataLoadingError\n    } = useEntityFetch({\n        path: reference.path,\n        entityId: reference.id,\n        schema: collectionResolver.schemaResolver,\n        useCache: true\n    });\n\n    const listProperties = useMemo(() => {\n        let res = previewProperties;\n        if (!res || !res.length) {\n            res = Object.keys(schema.properties);\n        }\n\n        if (size === \"small\" || size === \"regular\")\n            res = res.slice(0, 3);\n        else if (size === \"tiny\")\n            res = res.slice(0, 1);\n        return res;\n    }, [previewProperties, schema.properties, size]);\n\n    let body: JSX.Element;\n\n    function buildError(error: string, tooltip?: string) {\n        return <ErrorView error={error} tooltip={tooltip}/>;\n    }\n\n    if (!value) {\n        body = buildError(\"Reference not set\");\n    }\n    // currently not happening since this gets filtered out in PreviewComponent\n    else if (!(value instanceof EntityReference)) {\n        body = buildError(\"Unexpected value\", JSON.stringify(value));\n    } else if (entity && !entity.values) {\n        body = buildError(\"Reference does not exist\", reference.path);\n    } else {\n\n        body = (\n            <>\n                <Box sx={{\n                    display: \"flex\",\n                    flexDirection: \"column\",\n                    flexGrow: 1,\n                    maxWidth: \"calc(100% - 60px)\",\n                    margin: 1\n                }}>\n\n                    {size !== \"tiny\" && (\n                        value\n                            ? <Box sx={{\n                                display: size !== \"regular\" ? \"block\" : undefined,\n                                whiteSpace: size !== \"regular\" ? \"nowrap\" : undefined,\n                                overflow: size !== \"regular\" ? \"hidden\" : undefined,\n                                textOverflow: size !== \"regular\" ? \"ellipsis\" : undefined\n                            }}>\n                                <Typography variant={\"caption\"}\n                                            className={\"mono\"}>\n                                    {value.id}\n                                </Typography>\n                            </Box>\n                            : <Skeleton variant=\"text\"/>)}\n\n\n                    {listProperties && listProperties.map((key) => {\n                        const childProperty = schema.properties[key as string];\n                        if (!childProperty) return null;\n\n                        return (\n                            <div key={\"ref_prev_\" + (key as string)}>\n                                {entity\n                                    ? <PreviewComponent name={key as string}\n                                                        value={entity.values[key as string]}\n                                                        property={childProperty as AnyProperty}\n                                                        size={\"tiny\"}/>\n                                    : <SkeletonComponent\n                                        property={childProperty as AnyProperty}\n                                        size={\"tiny\"}/>\n                                }\n                            </div>\n                        );\n                    })}\n\n                </Box>\n                <Box sx={{\n                    margin: \"auto\"\n                }}>\n                    {entity &&\n                        <Tooltip title={`See details for ${entity.id}`}>\n                            <IconButton\n                                size={size === \"tiny\" ? \"small\" : \"medium\"}\n                                onClick={(e) => {\n                                    e.stopPropagation();\n                                    sideEntityController.open({\n                                        entityId: entity.id,\n                                        path: entity.path,\n                                        schema: schema,\n                                        overrideSchemaRegistry: false\n                                    });\n                                }}>\n                                <KeyboardTabIcon fontSize={\"small\"}/>\n                            </IconButton>\n                        </Tooltip>}\n                </Box>\n            </>\n        );\n    }\n\n\n    return (\n        <Paper elevation={0} sx={(theme) => {\n            const clickableStyles = onClick\n                ? {\n                    tabindex: 0,\n                    backgroundColor: onHover ? (theme.palette.mode === \"dark\" ? lighten(theme.palette.background.default, 0.1) : darken(theme.palette.background.default, 0.15)) : darken(theme.palette.background.default, 0.1),\n                    transition: \"background-color 300ms ease, box-shadow 300ms ease\",\n                    boxShadow: onHover ? \"0 0 0 2px rgba(128,128,128,0.05)\" : undefined,\n                    cursor: onHover ? \"pointer\" : undefined\n                }\n                : {};\n            return ({\n                width: \"100%\",\n                display: \"flex\",\n                color: \"#838383\",\n                backgroundColor: darken(theme.palette.background.default, 0.1),\n                borderRadius: \"2px\",\n                overflow: \"hidden\",\n                padding: size === \"regular\" ? 1 : 0,\n                itemsAlign: size === \"tiny\" ? \"center\" : undefined,\n                fontWeight: theme.typography.fontWeightMedium,\n                ...clickableStyles\n            });\n        }}\n               onClick={onClick}>\n\n            {body}\n\n        </Paper>\n    );\n\n}\n","import { PreviewComponentProps, PreviewSize } from \"../internal\";\nimport { ReferenceProperty } from \"../../models\";\nimport { ReferencePreview } from \"./ReferencePreview\";\n\nimport { Theme } from \"@mui/material\";\n\nimport createStyles from \"@mui/styles/createStyles\";\nimport makeStyles from \"@mui/styles/makeStyles\";\n\nexport const useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        arrayItem: {\n            margin: theme.spacing(0.5)\n        }\n    })\n);\n\n/**\n * @category Preview components\n */\nexport function ArrayOfReferencesPreview({\n                                             name,\n                                             value,\n                                             property,\n                                             size\n                                         }: PreviewComponentProps<any[]>) {\n\n    if (property.dataType !== \"array\" || !property.of || property.of.dataType !== \"reference\")\n        throw Error(\"Picked wrong preview component ArrayOfReferencesPreview\");\n\n    const classes = useStyles();\n    const childSize: PreviewSize = size === \"regular\" ? \"small\" : \"tiny\";\n\n    return (\n        <>\n            {value &&\n            value.map((v, index) =>\n                <div className={classes.arrayItem}\n                     key={`preview_array_ref_${name}_${index}`}>\n                    <ReferencePreview\n                        name={`${name}[${index}]`}\n                        size={childSize}\n                        value={v}\n                        property={property.of as ReferenceProperty}\n                    />\n                </div>\n            )}\n        </>\n    );\n}\n","import React from \"react\";\nimport {\n    Table,\n    TableBody,\n    TableCell,\n    TableRow,\n    Typography\n} from \"@mui/material\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport makeStyles from \"@mui/styles/makeStyles\";\n\nimport { PreviewComponent, PreviewComponentProps } from \"../internal\";\nimport { MapProperty } from \"../../models\";\nimport { ErrorBoundary } from \"../../core/internal/ErrorBoundary\";\n\nconst useStyles = makeStyles(() =>\n    createStyles({\n        tableNoBottomBorder: {\n            \"&:last-child th, &:last-child td\": {\n                borderBottom: 0\n            }\n        },\n        verticalAlignTop: {\n            verticalAlign: \"top\"\n        }\n    })\n);\n\n/**\n * @category Preview components\n */\nexport function MapPreview<T extends {}>({\n                                             name,\n                                             value,\n                                             property,\n                                             size\n                                         }: PreviewComponentProps<T>) {\n\n    const classes = useStyles();\n\n    if (property.dataType !== \"map\") {\n        throw Error(\"Picked wrong preview component MapPreview\");\n    }\n\n    const mapProperty = property as MapProperty;\n    if (!mapProperty.properties) {\n        throw Error(`You need to specify a 'properties' prop (or specify a custom field) in your map property ${name}`);\n    }\n\n    if (!value) return null;\n\n\n    let mapPropertyKeys: string[];\n    if (size === \"regular\") {\n        mapPropertyKeys = Object.keys(mapProperty.properties);\n    } else {\n        mapPropertyKeys = (mapProperty.previewProperties || Object.keys(mapProperty.properties)) as string[];\n        if (size === \"small\")\n            mapPropertyKeys = mapPropertyKeys.slice(0, 3);\n        else if (size === \"tiny\")\n            mapPropertyKeys = mapPropertyKeys.slice(0, 1);\n    }\n\n    if (size !== \"regular\")\n        return (\n            <>\n                {mapPropertyKeys.map((key, index) => (\n                    <div\n                        key={\"map_preview_\" + mapProperty.title + key + index}>\n                        <ErrorBoundary>\n                            <PreviewComponent name={key}\n                                              value={(value as any)[key]}\n                                              property={mapProperty.properties![key]}\n                                              size={size}/>\n                        </ErrorBoundary>\n                    </div>\n                ))}\n            </>\n        );\n\n    return (\n        <Table size=\"small\" key={`map_preview_${name}`}>\n            <TableBody>\n                {mapPropertyKeys &&\n                mapPropertyKeys.map((key, index) => {\n                    return (\n                        <TableRow\n                            key={`map_preview_table_${name}_${index}`}\n                            className={classes.tableNoBottomBorder}>\n                            <TableCell key={`table-cell-title-${name}-${key}`}\n                                       className={classes.verticalAlignTop}\n                                       width=\"30%\"\n                                       component=\"th\">\n                                <Typography variant={\"caption\"}\n                                            color={\"textSecondary\"}>\n                                    {mapProperty.properties![key].title}\n                                </Typography>\n                            </TableCell>\n                            <TableCell key={`table-cell-${name}-${key}`}\n                                       width=\"70%\"\n                                       className={classes.verticalAlignTop}\n                                       component=\"th\">\n                                <ErrorBoundary>\n                                    <PreviewComponent\n                                        name={key}\n                                        value={(value as any)[key]}\n                                        property={mapProperty.properties![key]}\n                                        size={\"small\"}/>\n                                </ErrorBoundary>\n                            </TableCell>\n                        </TableRow>\n                    );\n                })}\n            </TableBody>\n        </Table>\n    );\n\n}\n","import React from \"react\";\n\nimport { Divider, Theme } from \"@mui/material\";\n\nimport {\n    PreviewComponent,\n    PreviewComponentProps,\n    PreviewSize\n} from \"../internal\";\nimport { ErrorBoundary } from \"../../core/internal/ErrorBoundary\";\nimport { Property } from \"../../models\";\n\nimport createStyles from \"@mui/styles/createStyles\";\nimport makeStyles from \"@mui/styles/makeStyles\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        array: {\n            display: \"flex\",\n            flexDirection: \"column\"\n        },\n        arrayItemBig: {\n            margin: theme.spacing(1)\n        }\n    })\n);\n\n/**\n * @category Preview components\n */\nexport function ArrayPreview({\n                                 name,\n                                 value,\n                                 property,\n                                 size\n                             }: PreviewComponentProps<any[]>) {\n\n    if (!property.of) {\n        throw Error(`You need to specify an 'of' prop (or specify a custom field) in your array property ${name}`);\n    }\n\n    const classes = useStyles();\n\n    if (property.dataType !== \"array\")\n        throw Error(\"Picked wrong preview component ArrayPreview\");\n\n    const values = value;\n\n    if (!values) return null;\n\n    const childSize: PreviewSize = size === \"regular\" ? \"small\" : \"tiny\";\n\n    return (\n        <div className={classes.array}>\n            {values &&\n            values.map((value, index) =>\n                <React.Fragment key={\"preview_array_\" + value + \"_\" + index}>\n                    <div className={classes.arrayItemBig}>\n                        <ErrorBoundary>\n                            <PreviewComponent\n                                name={name}\n                                value={value}\n                                property={property.of as Property<any>}\n                                size={childSize}/>\n                        </ErrorBoundary>\n                    </div>\n                    {index < values.length - 1 && <Divider/>}\n                </React.Fragment>\n            )}\n        </div>\n    );\n}\n","import React from \"react\";\n\nimport { Divider, Theme } from \"@mui/material\";\nimport {\n    PreviewComponent,\n    PreviewComponentProps,\n    PreviewSize\n} from \"../internal\";\nimport { ErrorBoundary } from \"../../core/internal/ErrorBoundary\";\nimport { Property } from \"../../models\";\n\nimport createStyles from \"@mui/styles/createStyles\";\nimport makeStyles from \"@mui/styles/makeStyles\";\n\nexport const useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        array: {\n            display: \"flex\",\n            flexDirection: \"column\"\n        },\n        arrayWrap: {\n            display: \"flex\",\n            flexWrap: \"wrap\"\n        },\n        arrayItemBig: {\n            margin: theme.spacing(1)\n        }\n    })\n);\n\n/**\n * @category Preview components\n */\nexport function ArrayOneOfPreview({\n                                      name,\n                                      value,\n                                      property,\n                                      size\n                                  }: PreviewComponentProps<any[]>) {\n\n    if (property.dataType !== \"array\")\n        throw Error(\"Picked wrong preview component ArrayPreview\");\n\n    if (!property.oneOf) {\n        throw Error(`You need to specify an 'of' or 'oneOf' prop (or specify a custom field) in your array property ${name}`);\n    }\n\n    const classes = useStyles();\n    const values = value;\n\n    if (!values) return null;\n\n    const childSize: PreviewSize = size === \"regular\" ? \"small\" : \"tiny\";\n\n    const typeField = property.oneOf.typeField ?? \"type\";\n    const valueField = property.oneOf.valueField ?? \"value\";\n    const properties = property.oneOf.properties;\n\n    return (\n        <div className={classes.array}>\n            {values &&\n            values.map((value, index) =>\n                <React.Fragment key={\"preview_array_\" + value + \"_\" + index}>\n                    <div className={classes.arrayItemBig}>\n                        <ErrorBoundary>\n                            {value && <PreviewComponent\n                                name={name}\n                                value={value[valueField]}\n                                property={properties[value[typeField]] as Property<any>}\n                                size={childSize}/>}\n                        </ErrorBoundary>\n                    </div>\n                    {index < values.length - 1 && <Divider/>}\n                </React.Fragment>\n            )}\n        </div>\n    );\n}\n","import React, { createElement } from \"react\";\nimport {\n    ArrayProperty,\n    BooleanProperty,\n    CMSType,\n    EntityReference,\n    MapProperty,\n    NumberProperty,\n    ReferenceProperty,\n    StringProperty,\n    TimestampProperty\n} from \"../models\";\n\nimport {\n    ArrayOfMapsPreview,\n    ArrayOfReferencesPreview,\n    ArrayOfStorageComponentsPreview,\n    ArrayOfStringsPreview,\n    ArrayOneOfPreview,\n    ArrayPreview,\n    ArrayPropertyEnumPreview,\n    BooleanPreview,\n    EmptyValue,\n    MapPreview,\n    NumberPreview,\n    ReferencePreview,\n    StorageThumbnail,\n    StringPreview,\n    TimestampPreview,\n    UrlComponentPreview\n} from \"./internal\";\nimport { ErrorView } from \"../core/components\";\n\nimport { PreviewComponentProps } from \"./PreviewComponentProps\";\n\nimport { Markdown } from \"./components/Markdown\";\n\n/**\n * @category Preview components\n */\nexport function PreviewComponent<T extends CMSType>(props: PreviewComponentProps<T>) {\n    let content: JSX.Element | any;\n    const {\n        property, name, value, size, height, width\n    } = props;\n\n    const fieldProps = { ...props };\n\n    if (value === undefined) {\n        content = <EmptyValue/>;\n    } else if (property.config?.Preview) {\n        content = createElement(property.config.Preview as React.ComponentType<PreviewComponentProps>,\n            {\n                name,\n                value,\n                property,\n                size,\n                height,\n                width,\n                customProps: property.config.customProps\n            });\n    } else if (value === null) {\n        content = <EmptyValue/>;\n    } else if (property.dataType === \"string\") {\n        const stringProperty = property as StringProperty;\n        if (typeof value === \"string\") {\n            if (stringProperty.config?.url) {\n                content = <UrlComponentPreview {...fieldProps}\n                                               property={property as StringProperty}\n                                               value={value}/>;\n            } else if (stringProperty.config?.storageMeta) {\n                content = <StorageThumbnail {...fieldProps}\n                                            property={property as StringProperty}\n                                            value={value}/>;\n            } else if (stringProperty.config?.markdown) {\n                content = <Markdown source={value}/>;\n            } else {\n                content = <StringPreview {...fieldProps}\n                                         property={property as StringProperty}\n                                         value={value}/>;\n            }\n        } else {\n            content = buildWrongValueType(name, property.dataType, value);\n        }\n    } else if (property.dataType === \"array\") {\n        if (value instanceof Array) {\n            const arrayProperty = property as ArrayProperty;\n            if (!arrayProperty.of && !arrayProperty.oneOf) {\n                throw Error(`You need to specify an 'of' or 'oneOf' prop (or specify a custom field) in your array property ${name}`);\n            }\n\n            if (arrayProperty.of) {\n                if (arrayProperty.of.dataType === \"map\") {\n                    content =\n                        <ArrayOfMapsPreview name={name}\n                                            property={property as ArrayProperty}\n                                            value={value as object[]}\n                                            size={size}\n                        />;\n                } else if (arrayProperty.of.dataType === \"reference\") {\n                    if (typeof arrayProperty.of.path === \"string\") {\n                        content = <ArrayOfReferencesPreview {...fieldProps}\n                                                            value={value}\n                                                            property={property as ArrayProperty}/>;\n                    } else {\n                        content = <EmptyValue/>;\n                    }\n                } else if (arrayProperty.of.dataType === \"string\") {\n                    if (arrayProperty.of.config?.enumValues) {\n                        content = <ArrayPropertyEnumPreview\n                            {...fieldProps}\n                            value={value as string[]}\n                            property={property as ArrayProperty}/>;\n                    } else if (arrayProperty.of.config?.storageMeta) {\n                        content = <ArrayOfStorageComponentsPreview\n                            {...fieldProps}\n                            value={value}\n                            property={property as ArrayProperty}/>;\n                    } else {\n                        content = <ArrayOfStringsPreview\n                            {...fieldProps}\n                            value={value as string[]}\n                            property={property as ArrayProperty}/>;\n                    }\n                } else if (arrayProperty.of.dataType === \"number\") {\n                    if (arrayProperty.of.config?.enumValues) {\n                        content = <ArrayPropertyEnumPreview\n                            {...fieldProps}\n                            value={value as string[]}\n                            property={property as ArrayProperty}/>;\n                    }\n                } else {\n                    content = <ArrayPreview {...fieldProps}\n                                            value={value}\n                                            property={property as ArrayProperty}/>;\n                }\n            } else if (arrayProperty.oneOf) {\n                content = <ArrayOneOfPreview {...fieldProps}\n                                             value={value}\n                                             property={property as ArrayProperty}/>;\n            }\n        } else {\n            content = buildWrongValueType(name, property.dataType, value);\n        }\n    } else if (property.dataType === \"map\") {\n        if (typeof value === \"object\") {\n            content =\n                <MapPreview {...fieldProps}\n                            property={property as MapProperty}/>;\n        } else {\n            content = buildWrongValueType(name, property.dataType, value);\n        }\n    } else if (property.dataType === \"timestamp\") {\n        if (value instanceof Date) {\n            content = <TimestampPreview {...fieldProps}\n                                        value={value}\n                                        property={property as TimestampProperty}/>;\n        } else {\n            content = buildWrongValueType(name, property.dataType, value);\n        }\n    } else if (property.dataType === \"reference\") {\n        if (typeof property.path === \"string\") {\n            if (value instanceof EntityReference) {\n                content = <ReferencePreview\n                    {...fieldProps}\n                    value={value as EntityReference}\n                    property={property as ReferenceProperty}\n                />;\n            } else {\n                content = buildWrongValueType(name, property.dataType, value);\n            }\n        } else {\n            content = <EmptyValue/>;\n        }\n\n    } else if (property.dataType === \"boolean\") {\n        if (typeof value === \"boolean\") {\n            content = <BooleanPreview {...fieldProps}\n                                      value={value}\n                                      property={property as BooleanProperty}/>;\n        } else {\n            content = buildWrongValueType(name, property.dataType, value);\n        }\n    } else if (property.dataType === \"number\") {\n        if (typeof value === \"number\") {\n            content = <NumberPreview {...fieldProps}\n                                     value={value}\n                                     property={property as NumberProperty}/>;\n        } else {\n            content = buildWrongValueType(name, property.dataType, value);\n        }\n    } else {\n        content = JSON.stringify(value);\n    }\n\n    return content === undefined || content === null ? <EmptyValue/> : content;\n}\n\nfunction buildWrongValueType(name: string | undefined, dataType: string, value: any) {\n    console.error(`Unexpected value for property ${name}, of type ${dataType}`, value);\n    return (\n        <ErrorView error={`Unexpected value: ${JSON.stringify(value)}`}/>\n    );\n}\n\n\n// export const PreviewComponent = React.memo<PreviewComponentProps<any>>(PreviewComponentInternal, areEqual) as React.FunctionComponent<PreviewComponentProps<any>>;\n//\n// function areEqual(prevProps: PreviewComponentProps<any>, nextProps: PreviewComponentProps<any>) {\n//     return prevProps.name === nextProps.name\n//         && prevProps.size === nextProps.size\n//         && prevProps.height === nextProps.height\n//         && prevProps.width === nextProps.width\n//         && isEqual(prevProps.value, nextProps.value)\n//         ;\n// }\n","import { Property } from \"../../models\";\nimport ShortTextIcon from \"@mui/icons-material/ShortText\";\nimport SubjectIcon from \"@mui/icons-material/Subject\";\nimport AttachmentIcon from \"@mui/icons-material/Attachment\";\nimport Crop75Icon from \"@mui/icons-material/Crop75\";\nimport ListIcon from \"@mui/icons-material/List\";\nimport ScheduleIcon from \"@mui/icons-material/Schedule\";\nimport ListAltIcon from \"@mui/icons-material/ListAlt\";\nimport React from \"react\";\nimport RoomIcon from \"@mui/icons-material/Room\";\nimport ViewListIcon from \"@mui/icons-material/ViewList\";\nimport LinkIcon from \"@mui/icons-material/Link\";\nimport EqualizerIcon from \"@mui/icons-material/Equalizer\";\nimport PhotoIcon from \"@mui/icons-material/Photo\";\nimport HttpIcon from \"@mui/icons-material/Http\";\nimport FlagIcon from \"@mui/icons-material/Flag\";\nimport AdjustIcon from \"@mui/icons-material/Adjust\";\n\nexport function getIdIcon(\n    color: \"inherit\" | \"primary\" | \"secondary\" | \"action\" | \"disabled\" | \"error\" = \"inherit\",\n    fontSize: \"inherit\" | \"medium\" | \"large\" | \"small\" | undefined = \"inherit\"): React.ReactNode {\n    return <AdjustIcon color={color} fontSize={fontSize}/>;\n}\n\nexport function getIconForProperty(\n    property: Property,\n    color: \"inherit\" | \"primary\" | \"secondary\" | \"action\" | \"disabled\" | \"error\" = \"inherit\",\n    fontSize: \"inherit\" | \"medium\" | \"large\" | \"small\" | undefined = \"inherit\"): React.ReactNode {\n    if (property.dataType === \"string\") {\n        if (property.config?.multiline || property.config?.markdown) {\n            return <SubjectIcon color={color} fontSize={fontSize}/>;\n        } else if (property.config?.storageMeta) {\n            if (property.config.storageMeta.mediaType === \"image\")\n                return <PhotoIcon color={color} fontSize={fontSize}/>;\n            return <AttachmentIcon color={color} fontSize={fontSize}/>;\n        } else if (property.config?.url) {\n            return <HttpIcon color={color} fontSize={fontSize}/>;\n        } else if (property.config?.enumValues) {\n            return <ListIcon color={color} fontSize={fontSize}/>;\n        } else {\n            return <ShortTextIcon color={color} fontSize={fontSize}/>;\n        }\n    } else if (property.dataType === \"number\") {\n        return <EqualizerIcon color={color} fontSize={fontSize}/>;\n    } else if (property.dataType === \"geopoint\") {\n        return <RoomIcon color={color} fontSize={fontSize}/>;\n    } else if (property.dataType === \"map\") {\n        if (property.properties)\n            return <ViewListIcon color={color} fontSize={fontSize}/>;\n        else\n            return <ListAltIcon color={color} fontSize={fontSize}/>;\n    } else if (property.dataType === \"array\") {\n        if (property.of)\n            return getIconForProperty(property.of, color, fontSize);\n        else\n            return <ListAltIcon color={color} fontSize={fontSize}/>;\n    } else if (property.dataType === \"boolean\") {\n        return <FlagIcon color={color} fontSize={fontSize}/>;\n    } else if (property.dataType === \"timestamp\") {\n        return <ScheduleIcon color={color} fontSize={fontSize}/>;\n    } else if (property.dataType === \"reference\") {\n        return <LinkIcon color={color} fontSize={fontSize}/>;\n    } else {\n        return <Crop75Icon color={color} fontSize={fontSize}/>;\n    }\n}\n","import * as React from \"react\";\n\nimport {\n    Box,\n    IconButton,\n    Table,\n    TableBody,\n    TableCell,\n    TableContainer,\n    TableRow,\n    Theme,\n    Typography\n} from \"@mui/material\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport makeStyles from \"@mui/styles/makeStyles\";\nimport {\n    AnyProperty,\n    Entity,\n    FireCMSContext,\n    Properties,\n    ResolvedEntitySchema\n} from \"../../models\";\nimport { PreviewComponent } from \"../../preview/PreviewComponent\";\nimport OpenInNewIcon from \"@mui/icons-material/OpenInNew\";\nimport { getIconForProperty, getIdIcon } from \"../util/property_icons\";\nimport { ErrorBoundary } from \"../internal/ErrorBoundary\";\nimport { useFireCMSContext } from \"../../hooks\";\n\nexport const useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        property: {\n            display: \"flex\"\n        },\n        valuePreview: {\n            height: \"72px\",\n            padding: theme.spacing(2, 3)\n        },\n        iconCell: {\n            paddingTop: theme.spacing(1)\n        },\n        titleCell: {\n            width: \"25%\",\n            padding: theme.spacing(1)\n        }\n    })\n);\n\n/**\n * @category Components\n */\nexport interface EntityPreviewProps<M> {\n    entity: Entity<M>;\n    schema: ResolvedEntitySchema<M>;\n    path: string;\n}\n\n/**\n * Use this component to render a preview of a property values\n * @param entity\n * @param schema\n * @param path\n * @constructor\n * @category Components\n */\nexport function EntityPreview<M>(\n    {\n        entity,\n        schema,\n        path\n    }: EntityPreviewProps<M>) {\n\n    const classes = useStyles();\n\n    const appConfig: FireCMSContext | undefined = useFireCMSContext();\n\n    const properties:Properties = schema.properties;\n\n    return (\n        <TableContainer>\n            <Table aria-label=\"entity table\">\n                <TableBody>\n                    <TableRow>\n                        <TableCell align=\"right\"\n                                   component=\"td\"\n                                   scope=\"row\"\n                                   className={classes.titleCell}>\n                            <Typography variant={\"caption\"}\n                                        color={\"textSecondary\"}>\n                                Id\n                            </Typography>\n                        </TableCell>\n                        <TableCell padding=\"none\"\n                                   className={classes.iconCell}>\n                            {getIdIcon(\"disabled\", \"small\")}\n                        </TableCell>\n                        <TableCell className={classes.valuePreview}>\n                            <Box display=\"flex\" alignItems=\"center\">\n                                {entity.id}\n                                {appConfig?.entityLinkBuilder &&\n                                <a href={appConfig.entityLinkBuilder({ entity })}\n                                   rel=\"noopener noreferrer\"\n                                   target=\"_blank\">\n                                    <IconButton\n                                        aria-label=\"go-to-entity-datasource\"\n                                        size=\"large\">\n                                        <OpenInNewIcon\n                                            fontSize={\"small\"}/>\n                                    </IconButton>\n                                </a>}\n                            </Box>\n                        </TableCell>\n                    </TableRow>\n\n                    {schema && Object.entries(properties)\n                        .map(([key, property]) => {\n                            const value = (entity.values as any)[key];\n                            return (\n                                <TableRow\n                                    key={\"entity_prev\" + property.title + key}>\n                                    <TableCell align=\"right\"\n                                               component=\"td\"\n                                               scope=\"row\"\n                                               className={classes.titleCell}>\n                                        <Typography\n                                            style={{ paddingLeft: \"16px\" }}\n                                            variant={\"caption\"}\n                                            color={\"textSecondary\"}>\n                                            {property.title}\n                                        </Typography>\n                                    </TableCell>\n\n                                    <TableCell padding=\"none\"\n                                               className={classes.iconCell}>\n                                        {getIconForProperty(property, \"disabled\", \"small\")}\n                                    </TableCell>\n\n                                <TableCell\n                                    className={classes.valuePreview}>\n                                    <ErrorBoundary>\n                                        <PreviewComponent\n                                            name={key}\n                                            value={value}\n                                            property={property as AnyProperty}\n                                            size={\"regular\"}/>\n                                    </ErrorBoundary>\n                                </TableCell>\n\n                            </TableRow>\n                        );\n                    })}\n                </TableBody>\n            </Table>\n        </TableContainer>\n    );\n\n}\n\nexport default EntityPreview;\n","import { useMemo } from \"react\";\nimport {\n    ArrayProperty,\n    EntityCollection,\n    Properties,\n    Property,\n    ResolvedEntitySchema\n} from \"../../../../models\";\n\n\nexport type Sort = \"asc\" | \"desc\" | undefined;\n\n\nexport function getCellAlignment(property: Property): \"right\" | \"left\" | \"center\" {\n    if (property.dataType === \"boolean\") {\n        return \"center\";\n    } else if (property.dataType === \"number\") {\n        if (property.config?.enumValues)\n            return \"left\";\n        return \"right\";\n    } else if (property.dataType === \"timestamp\") {\n        return \"right\";\n    } else {\n        return \"left\";\n    }\n}\n\nexport function isPropertyFilterable(property: Property): boolean {\n    if (property.dataType === \"boolean\") {\n        return true;\n    } else if (property.dataType === \"number\") {\n        return true;\n    } else if (property.dataType === \"string\") {\n        return true;\n    } else if (property.dataType === \"timestamp\") {\n        return true;\n    } else if (property.dataType === \"array\") {\n        if (property.of)\n            return isPropertyFilterable(property.of);\n        else\n            return false;\n    } else {\n        return false;\n    }\n}\n\nexport function getPropertyColumnWidth(property: Property): number {\n\n    if (property.columnWidth) {\n        return property.columnWidth;\n    }\n\n    if (property.dataType === \"string\") {\n        if (property.config?.url) {\n            if (property.config?.url === \"video\" || property.config?.storageMeta?.mediaType === \"video\")\n                return 340;\n            else if (property.config?.url === \"audio\" || property.config?.storageMeta?.mediaType === \"audio\")\n                return 300;\n            return 240;\n        } else if (property.config?.storageMeta) {\n            return 220;\n        } else if (property.config?.enumValues) {\n            return 200;\n        } else if (property.config?.multiline) {\n            return 300;\n        } else if (property.config?.markdown) {\n            return 300;\n        } else if (property.validation?.email) {\n            return 200;\n        } else {\n            return 200;\n        }\n    } else if (property.dataType === \"array\") {\n        const arrayProperty = property as ArrayProperty;\n        if (arrayProperty.of) {\n            return getPropertyColumnWidth(arrayProperty.of as Property);\n        } else {\n            return 300;\n        }\n    } else if (property.dataType === \"number\") {\n        if (property.config?.enumValues) {\n            return 200;\n        }\n        return 140;\n    } else if (property.dataType === \"map\") {\n        return 360;\n    } else if (property.dataType === \"timestamp\") {\n        return 160;\n    } else if (property.dataType === \"reference\") {\n        return 220;\n    } else if (property.dataType === \"boolean\") {\n        return 140;\n    } else {\n        return 200;\n    }\n}\n\n\nexport function getSubcollectionColumnId(collection: EntityCollection) {\n    return `subcollection:${collection.path}`;\n}\n\nexport function useColumnIds<M>(collection: EntityCollection<M>, resolvedSchema:ResolvedEntitySchema<M>, includeSubcollections: boolean): string[] {\n\n    return useMemo(() => {\n        const initialDisplayedProperties = collection.properties;\n        const excludedProperties = collection.excludedProperties;\n        const additionalColumns = collection.additionalColumns ?? [];\n        const subCollections: EntityCollection[] = collection.subcollections ?? [];\n\n        const properties:Properties = resolvedSchema.properties;\n\n        const hiddenColumnIds: string[] = Object.entries(properties)\n            .filter(([_, property]) => {\n                return property.disabled && typeof property.disabled === \"object\" && property.disabled.hidden;\n            })\n            .map(([propertyKey, _]) => propertyKey);\n\n        const columnIds: string[] = [\n            ...Object.keys(collection.schema.properties) as string[],\n            ...additionalColumns.map((column) => column.id)\n        ];\n\n        let result: string[];\n        if (initialDisplayedProperties) {\n            result = initialDisplayedProperties\n                .map((p) => {\n                    return columnIds.find(id => id === p);\n                }).filter(c => !!c) as string[];\n        } else if (excludedProperties) {\n            result = columnIds\n                .filter(id => !(excludedProperties as string[]).includes(id));\n        } else {\n            result = columnIds.filter((columnId) => !hiddenColumnIds.includes(columnId));\n        }\n\n        if (includeSubcollections) {\n            const subCollectionIds = subCollections\n                .map((collection) => getSubcollectionColumnId(collection))\n                .filter((subColId) => excludedProperties ? !excludedProperties?.includes(subColId) : true);\n            result.push(...subCollectionIds.filter((subColId) => !result.includes(subColId)));\n        }\n\n        return result;\n\n    }, [collection.properties, collection.excludedProperties, collection.additionalColumns, collection.subcollections, collection.schema.properties, resolvedSchema.properties, includeSubcollections]);\n}\n","import React, { useCallback, useEffect, useState } from \"react\";\nimport InputBase from \"@mui/material/InputBase\";\nimport { alpha, darken, Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport makeStyles from \"@mui/styles/makeStyles\";\nimport { FormControl, IconButton } from \"@mui/material\";\n\nimport SearchIcon from \"@mui/icons-material/Search\";\nimport ClearIcon from \"@mui/icons-material/Clear\";\nimport clsx from \"clsx\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        search: {\n            position: \"relative\",\n            display: \"flex\",\n            alignItems: \"center\",\n            height: 40,\n            borderRadius: theme.shape.borderRadius,\n            backgroundColor: theme.palette.mode === \"light\" ? alpha(theme.palette.common.black, 0.05) : darken(theme.palette.background.default, 0.2),\n            \"&:hover\": {\n                backgroundColor: theme.palette.mode === \"light\" ? alpha(theme.palette.common.black, 0.10) : darken(theme.palette.background.default, 0.3)\n            },\n            marginLeft: theme.spacing(1),\n            [theme.breakpoints.up(\"sm\")]: {\n                marginLeft: theme.spacing(1),\n                width: \"auto\"\n            }\n        },\n        searchIcon: {\n            padding: theme.spacing(0, 2),\n            height: \"100%\",\n            position: \"absolute\",\n            pointerEvents: \"none\",\n            display: \"flex\",\n            alignItems: \"center\",\n            justifyContent: \"center\"\n        },\n        inputRoot: {\n            color: \"inherit\",\n            minHeight: \"inherit\"\n        },\n        inputInput: {\n            padding: theme.spacing(1, 1, 1, 0),\n            // vertical padding + font size from searchIcon\n            paddingLeft: `calc(1em + ${theme.spacing(4)})`,\n            transition: theme.transitions.create(\"width\"),\n            width: \"100%\",\n            [theme.breakpoints.up(\"sm\")]: {\n                width: \"12ch\"\n            }\n        },\n        inputActive: {\n            [theme.breakpoints.up(\"sm\")]: {\n                width: \"20ch\"\n            }\n        }\n    })\n);\n\n\ninterface SearchBarProps {\n    onTextSearch: (searchString?: string) => void;\n}\n\nexport function SearchBar({ onTextSearch }: SearchBarProps) {\n\n    const classes = useStyles();\n\n    const [searchText, setSearchText] = useState<string>(\"\");\n    const [active, setActive] = useState<boolean>(false);\n\n    /**\n     * Debounce on Search text update\n     */\n    useEffect(\n        () => {\n            const handler = setTimeout(() => {\n                if (searchText) {\n                    onTextSearch(searchText);\n                } else {\n                    onTextSearch(undefined);\n                }\n            }, 250);\n\n            return () => {\n                clearTimeout(handler);\n            };\n        },\n        [searchText]\n    );\n\n    const clearText = useCallback(() => {\n        setSearchText(\"\");\n        onTextSearch(undefined);\n    }, []);\n\n    return (\n        <FormControl>\n            <div className={classes.search}>\n                <div className={classes.searchIcon}>\n                    <SearchIcon htmlColor={\"#666\"}/>\n                </div>\n                <InputBase\n                    placeholder=\"Search\"\n                    value={searchText}\n                    onChange={(event) => {\n                        setSearchText(event.target.value);\n                    }}\n                    onFocus={() => setActive(true)}\n                    onBlur={() => setActive(false)}\n                    classes={{\n                        root: classes.inputRoot,\n                        input: clsx(classes.inputInput, {\n                            [classes.inputActive]: active\n                        })\n                    }}\n                    endAdornment={searchText\n                        ? <IconButton\n                            size={\"small\"}\n                            onClick={clearText}>\n                            <ClearIcon fontSize={\"small\"}/>\n                        </IconButton>\n                        : <div style={{ width: 26 }}/>\n                    }\n                    inputProps={{ \"aria-label\": \"search\" }}\n                />\n            </div>\n        </FormControl>\n    );\n}\n","import React from \"react\";\nimport {\n    alpha,\n    Box,\n    CircularProgress,\n    darken,\n    Hidden,\n    IconButton,\n    InputBase,\n    MenuItem,\n    Select,\n    Theme,\n    Tooltip,\n    useMediaQuery,\n    useTheme\n} from \"@mui/material\";\n\nimport createStyles from \"@mui/styles/createStyles\";\nimport makeStyles from \"@mui/styles/makeStyles\";\n\nimport { CollectionSize } from \"../../../../models\";\nimport { SearchBar } from \"./SearchBar\";\nimport ClearIcon from \"@mui/icons-material/Clear\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        toolbar: {\n            minHeight: 56,\n            [theme.breakpoints.down(\"xl\")]: {\n                paddingLeft: theme.spacing(0.5),\n                paddingRight: theme.spacing(0.5)\n            },\n            paddingLeft: theme.spacing(1),\n            paddingRight: theme.spacing(1),\n            backgroundColor: theme.palette.mode === \"light\" ? theme.palette.common.white : theme.palette.background.default,\n            borderBottom: `1px solid ${theme.palette.divider}`,\n            display: \"flex\",\n            flexDirection: \"row\",\n            justifyContent: \"space-between\",\n            alignItems: \"center\",\n            width: \"100%\"\n        },\n        actions: {\n            display: \"flex\",\n            alignItems: \"center\",\n            \"& > *\": {\n                [theme.breakpoints.down(\"md\")]: {\n                    marginRight: theme.spacing(0.5)\n                },\n                marginRight: theme.spacing(1)\n            }\n        },\n        selectRoot: {\n            \"label + &\": {\n                marginTop: theme.spacing(3)\n            }\n        },\n        input: {\n            borderRadius: 4,\n            position: \"relative\",\n            backgroundColor: theme.palette.mode === \"light\" ? alpha(theme.palette.common.black, 0.05) : darken(theme.palette.background.default, 0.2),\n            fontSize: 14,\n            fontWeight: theme.typography.fontWeightMedium,\n            padding: \"10px 26px 10px 12px\",\n            transition: theme.transitions.create([\"border-color\", \"box-shadow\"]),\n            \"&:focus\": {\n                borderRadius: 4\n            }\n        },\n        item: {\n            backgroundColor: theme.palette.background.default,\n            fontSize: 14,\n            fontWeight: theme.typography.fontWeightMedium,\n            paddingTop: theme.spacing(1),\n            paddingBottom: theme.spacing(1),\n            \"&:hover\": {\n                backgroundColor: darken(theme.palette.background.default, 0.1)\n            },\n            \"&:focus\": {\n                backgroundColor: darken(theme.palette.background.default, 0.2),\n                \"& .MuiListItemIcon-root, & .MuiListItemText-primary\": {\n                    color: theme.palette.text.primary\n                }\n            }\n        }\n    })\n);\n\n\ninterface CollectionTableToolbarProps {\n    size: CollectionSize;\n    filterIsSet: boolean;\n    actions?: React.ReactNode;\n    loading: boolean;\n    title?: React.ReactNode,\n    onTextSearch?: (searchString?: string) => void;\n    onSizeChanged: (size: CollectionSize) => void;\n\n    clearFilter(): void;\n}\n\nexport function CollectionTableToolbar<M extends { [Key: string]: any }>(props: CollectionTableToolbarProps) {\n    const classes = useStyles();\n\n    const theme = useTheme();\n    const largeLayout = useMediaQuery(theme.breakpoints.up(\"md\"));\n\n    const filterView = props.filterIsSet &&\n        <Box display={\"flex\"}\n             alignItems=\"center\">\n\n            <Tooltip title=\"Clear filter\">\n                <IconButton\n                    style={{ height: \"fit-content\" }}\n                    aria-label=\"filter clear\"\n                    onClick={props.clearFilter}\n                    size=\"large\">\n                    <ClearIcon/>\n                </IconButton>\n            </Tooltip>\n\n        </Box>;\n\n    const sizeSelect = (\n        <Select\n            variant={\"standard\"}\n            value={props.size}\n            style={{ width: 56 }}\n            onChange={(evt: any) => {\n                props.onSizeChanged(evt.target.value);\n            }}\n            MenuProps={{\n                MenuListProps: {\n                    disablePadding: true,\n                    style: {\n                        borderRadius: 4\n                    }\n                },\n                elevation: 1\n            }}\n            input={<InputBase classes={{\n                root: classes.selectRoot,\n                input: classes.input\n            }}/>}\n            renderValue={(value: any) => value.toUpperCase()}\n        >\n            {[\"xs\", \"s\", \"m\", \"l\", \"xl\"].map((value) => (\n                <MenuItem\n                    classes={{\n                        root: classes.item\n                    }}\n                    key={`size-select-${value}`} value={value}>\n                    {value.toUpperCase()}\n                </MenuItem>\n            ))}\n        </Select>\n    );\n\n    return (\n        <div\n            className={classes.toolbar}\n        >\n\n            <Box display={\"flex\"}\n                 alignItems=\"center\">\n\n                {props.title && <Hidden lgDown>\n                    <Box mr={2}>\n                        {props.title}\n                    </Box>\n                </Hidden>}\n\n                {sizeSelect}\n\n                {filterView}\n\n\n            </Box>\n\n\n            <div className={classes.actions}>\n\n                {largeLayout && <Box width={22}>\n                    {props.loading &&\n                    <CircularProgress size={16} thickness={8}/>}\n                </Box>}\n\n                {props.onTextSearch &&\n                <SearchBar\n                    key={\"search-bar\"}\n                    onTextSearch={props.onTextSearch}/>\n                }\n\n                {props.actions}\n\n            </div>\n\n        </div>\n    );\n}\n","import { CollectionSize, Entity } from \"../../../../models\";\n\nimport React, { MouseEvent, useCallback } from \"react\";\nimport {\n    alpha,\n    Checkbox,\n    IconButton,\n    ListItemIcon,\n    ListItemText,\n    Menu,\n    MenuItem,\n    Skeleton,\n    Theme,\n    Tooltip,\n    Typography\n} from \"@mui/material\";\nimport { Delete, FileCopy, KeyboardTab, MoreVert } from \"@mui/icons-material\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport makeStyles from \"@mui/styles/makeStyles\";\n\nexport const useTableStyles = makeStyles<Theme>(theme => createStyles({\n    tableContainer: {\n        width: \"100%\",\n        height: \"100%\",\n        flexGrow: 1\n    },\n    headerTypography: {\n        fontSize: \"0.750rem\",\n        fontWeight: 600,\n        textTransform: \"uppercase\"\n    },\n    header: {\n        width: \"calc(100% + 24px)\",\n        margin: \"0px -12px\",\n        padding: \"0px 12px\",\n        color: theme.palette.text.secondary,\n        backgroundColor: theme.palette.background.default,\n        transition: \"color 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms\",\n        height: \"100%\",\n        fontSize: \"0.750rem\",\n        textTransform: \"uppercase\",\n        fontWeight: 600\n    },\n    tableRow: {\n        cursor: \"pointer\",\n        display: \"flex\",\n        alignItems: \"center\",\n        fontSize: \"0.875rem\"\n    },\n    tableRowClickable: {\n        \"&:hover\": {\n            backgroundColor: theme.palette.mode === \"dark\" ? alpha(theme.palette.background.default, 0.6) : alpha(theme.palette.background.default, 0.5)\n        }\n    },\n    column: {\n        padding: \"0px !important\"\n    },\n    cellButtonsWrap: {\n        width: \"100%\",\n        height: \"100%\",\n        display: \"flex\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n        flexDirection: \"column\",\n        backgroundColor: theme.palette.mode === \"dark\" ? alpha(theme.palette.background.default, 0.8) : alpha(theme.palette.background.default, 0.8)\n    },\n    cellButtons: {\n        minWidth: 138\n    },\n    cellButtonsId: {\n        width: 138,\n        textAlign: \"center\",\n        textOverflow: \"ellipsis\",\n        overflow: \"hidden\"\n    },\n    selectContainer: {\n        display: \"flex\",\n        justifyContent: \"space-around\"\n    },\n    verticalLine: {\n        width: \"1px\",\n        backgroundColor: \"#dfdfdf\",\n        height: \"55px\"\n    },\n    \"select-all\": {\n        position: \"absolute\",\n        top: \"-100px\",\n        right: \"-100px\",\n        opacity: \"0\"\n    }\n}));\n\n\n/**\n *\n * @param entity\n * @param isSelected\n * @param isAllSelected\n * @param selectionEnabled\n * @param size\n * @param toggleEntitySelection\n * @param data\n * @param selectAll\n * @param onCopyClicked\n * @param onEditClicked\n * @param onDeleteClicked\n * @constructor\n *\n * @category Collection components\n */\nexport function CollectionRowActions<M extends { [Key: string]: any }>({\n                                                                           entity,\n                                                                           isSelected,\n                                                                           isAllSelected,\n                                                                           selectionEnabled,\n                                                                           size,\n                                                                           toggleEntitySelection,\n                                                                           selectAll,\n                                                                           onCopyClicked,\n                                                                           onEditClicked,\n                                                                           onDeleteClicked,\n                                                                           data\n                                                                       }:\n                                                                           {\n                                                                               entity: Entity<M>,\n                                                                               size: CollectionSize,\n                                                                               isSelected?: boolean,\n                                                                               isAllSelected?: any,\n                                                                               selectionEnabled?: boolean,\n                                                                               toggleEntitySelection?: (selectedEntity: Entity<M>) => void\n                                                                               selectAll?: (data: any) => void\n                                                                               onEditClicked?: (selectedEntity: Entity<M>) => void,\n                                                                               onCopyClicked?: (selectedEntity: Entity<M>) => void,\n                                                                               onDeleteClicked?: (selectedEntity: Entity<M>) => void,\n                                                                               data?: any\n                                                                           }) {\n\n    const editEnabled = Boolean(onEditClicked);\n    const copyEnabled = Boolean(onCopyClicked);\n    const deleteEnabled = Boolean(onDeleteClicked);\n\n    const classes = useTableStyles();\n\n    const [anchorEl, setAnchorEl] = React.useState<any | null>(null);\n\n    const openMenu = useCallback((event: React.MouseEvent) => {\n        setAnchorEl(event.currentTarget);\n        event.stopPropagation();\n    }, [setAnchorEl]);\n\n    const closeMenu = useCallback(() => {\n        setAnchorEl(null);\n    }, [setAnchorEl]);\n\n    const onCheckboxChange = (event: React.ChangeEvent) => {\n        if (toggleEntitySelection)\n            toggleEntitySelection(entity);\n        event.stopPropagation();\n    };\n    const onCheckboxChange1 = (event: React.ChangeEvent) => {\n        if (selectAll) {\n            selectAll(entity)\n        }\n        event.stopPropagation();\n    };\n\n    const onDeleteClick = useCallback((event: MouseEvent) => {\n        event.stopPropagation();\n        if (onDeleteClicked)\n            onDeleteClicked(entity);\n        setAnchorEl(null);\n    }, [entity, onDeleteClicked, setAnchorEl]);\n\n    const onCopyClick = useCallback((event: MouseEvent) => {\n        event.stopPropagation();\n        if (onCopyClicked)\n            onCopyClicked(entity);\n        setAnchorEl(null);\n    }, [entity, onCopyClicked, setAnchorEl]);\n\n    return (\n        <div className={classes.cellButtonsWrap}>\n\n            {(editEnabled || deleteEnabled || selectionEnabled) &&\n                <div className={classes.cellButtons}\n                >\n                    (\n                    <div className={classes.selectContainer}>\n                        {editEnabled &&\n                            <Tooltip title={`Edit ${entity.id}`}>\n                                <IconButton\n                                    onClick={(event: MouseEvent) => {\n                                        event.stopPropagation();\n                                        if (onEditClicked)\n                                            onEditClicked(entity);\n                                    }}\n                                    size=\"large\">\n                                    <KeyboardTab/>\n                                </IconButton>\n                            </Tooltip>\n                        }\n                        <span className={classes.verticalLine}></span>\n                        {selectionEnabled &&\n                            <div>\n                                <Tooltip title={`Select ${entity.id}`} style={{ marginTop: \"5px\" }}>\n                                    <Checkbox\n                                        checked={isSelected}\n                                        onChange={onCheckboxChange}\n                                    />\n                                </Tooltip>\n                                <Tooltip title={\"Select All\"} className={classes[\"select-all\"] + \" select-all\"}>\n                                    <Checkbox\n                                        checked={isAllSelected}\n                                        onChange={onCheckboxChange1}\n                                    />\n                                </Tooltip>\n                            </div>}\n                    </div>\n                    )\n                </div>}\n\n            {size !== \"xs\" && (\n                <div className={classes.cellButtonsId}>\n\n                    {entity\n                        ? <Typography\n                            className={\"mono\"}\n                            variant={\"caption\"}\n                            color={\"textSecondary\"}> {entity.id} </Typography>\n                        : <Skeleton variant=\"text\"/>\n                    }\n                </div>\n            )}\n\n        </div>\n    );\n\n}\n","import { TableSize } from \"./TableProps\";\n\nexport function getRowHeight(size: TableSize): number {\n    switch (size) {\n        case \"xl\":\n            return 400;\n        case \"l\":\n            return 280;\n        case \"m\":\n            return 140;\n        case \"s\":\n            return 80;\n        case \"xs\":\n            return 54;\n        default:\n            throw Error(\"Missing mapping for collection size -> height\");\n    }\n}\n","import React, { useCallback, useEffect, useMemo, useState } from \"react\";\nimport { IconButton, Theme, Tooltip } from \"@mui/material\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport makeStyles from \"@mui/styles/makeStyles\";\n\nimport Measure, { ContentRect } from \"react-measure\";\nimport ErrorOutlineIcon from \"@mui/icons-material/ErrorOutline\";\nimport RemoveCircleIcon from \"@mui/icons-material/RemoveCircle\";\nimport clsx from \"clsx\";\nimport { CellStyleProps } from \"./styles\";\nimport { getRowHeight } from \"./common\";\nimport isEqual from \"react-fast-compare\";\n\nexport const useCellStyles = makeStyles<Theme, CellStyleProps & { disabled: boolean, removePadding?: boolean }>(theme => createStyles({\n        tableCell: {\n            position: \"relative\",\n            height: \"100%\",\n            width: \"100%\",\n            border: \"2px solid transparent\",\n            borderRadius: 4,\n            overflow: \"hidden\",\n            contain: \"strict\",\n            display: \"flex\",\n            padding: ({ size, removePadding }) => {\n                if (removePadding) return 0;\n                switch (size) {\n                    case \"l\":\n                    case \"xl\":\n                        return theme.spacing(2);\n                    case \"m\":\n                        return theme.spacing(1);\n                    case \"s\":\n                        return theme.spacing(0.5);\n                    default:\n                        return theme.spacing(0.25);\n                }\n            },\n            \"&:hover\": {\n                backgroundColor: ({ disabled }: any) => disabled ? undefined : (theme.palette.mode === \"dark\" ? theme.palette.background.paper : theme.palette.background.default)\n            },\n            justifyContent: ({ align }) => {\n                switch (align) {\n                    case \"right\":\n                        return \"flex-end\";\n                    case \"center\":\n                        return \"center\";\n                    case \"left\":\n                    default:\n                        return \"flex-start\";\n                }\n            }\n        },\n        fullWidth: {\n            width: \"100%\"\n        },\n        fullHeight: {\n            height: \"100%\"\n        },\n        error: {\n            border: `2px solid ${theme.palette.error.light} !important`\n        },\n        selected: {\n            backgroundColor: theme.palette.mode === \"dark\" ? theme.palette.background.paper : theme.palette.background.default,\n            border: \"2px solid #5E9ED6\",\n            transition: \"border-color 300ms ease-in-out\"\n        },\n        saved: {\n            border: `2px solid ${theme.palette.success.light}`\n        },\n        disabled: {\n            alpha: 0.8\n        },\n        iconsTop: {\n            position: \"absolute\",\n            top: 2,\n            right: 2\n        },\n        arrow: {\n            color: theme.palette.error.light\n        },\n        tooltip: {\n            margin: \"0 8px\",\n            backgroundColor: theme.palette.error.light\n        },\n        centered: {\n            alignItems: \"center\"\n        },\n        faded: {\n            \"-webkit-mask-image\": \"linear-gradient(to bottom, black 60%, transparent 100%)\",\n            maskImage: \"linear-gradient(to bottom, black 60%, transparent 100%)\",\n            alignItems: \"start\"\n        },\n        scrollable: {\n            overflow: \"auto\",\n            alignItems: \"start\"\n        }\n    })\n);\n\n\n\ninterface TableCellProps {\n    children: React.ReactNode;\n    /**\n     * The value is used only to check changes and force rerenders\n     */\n    value?: any;\n    disabled: boolean;\n    saved?: boolean;\n    error?: Error;\n    allowScroll?: boolean;\n    disabledTooltip?: string;\n    focused?: boolean;\n    selected?: boolean;\n    showExpandIcon?: boolean;\n    removePadding?: boolean;\n    fullHeight?: boolean;\n    select?: (cellRect: DOMRect | undefined) => void;\n    openPopup?: (cellRect: DOMRect | undefined) => void;\n}\n\nconst TableCellInternal = ({\n                                     children,\n                                     selected,\n                                     focused,\n                                     disabled,\n                                     disabledTooltip,\n                                     size,\n                                     saved,\n                                     error,\n                                     align,\n                                     allowScroll,\n                                     openPopup,\n                                     removePadding,\n                                     fullHeight,\n                                     select,\n                                     showExpandIcon = true\n                                 }: TableCellProps & CellStyleProps) => {\n\n    const ref = React.createRef<HTMLDivElement>();\n\n    const [isOverflowing, setIsOverflowing] = useState<boolean>(false);\n    const maxHeight = useMemo(() => getRowHeight(size), [size]);\n\n    const [onHover, setOnHover] = useState(false);\n    const [internalSaved, setInternalSaved] = useState(saved);\n\n    const iconRef = React.createRef<HTMLButtonElement>();\n    useEffect(() => {\n        if (iconRef.current && focused) {\n            iconRef.current.focus({ preventScroll: true });\n        }\n    }, [focused]);\n\n    useEffect(() => {\n        if (internalSaved !== saved) {\n            if (saved) {\n                setInternalSaved(true);\n            } else {\n                setInternalSaved(true);\n            }\n        }\n        const removeSavedState = () => {\n            setInternalSaved(false);\n        };\n        const handler = setTimeout(removeSavedState, 500);\n\n        return () => {\n            clearTimeout(handler);\n        };\n    }, [saved]);\n\n    const doOpenPopup = useCallback(() => {\n        if (openPopup) {\n            const cellRect = ref && ref?.current?.getBoundingClientRect();\n            openPopup(cellRect);\n        }\n    }, [ref]);\n\n    const onClick = useCallback((event: React.MouseEvent<HTMLDivElement>) => {\n        if (event.detail === 3) {\n            doOpenPopup();\n        }\n    }, [doOpenPopup]);\n\n    const onSelect = useCallback(() => {\n        if (!select) return;\n        const cellRect = ref && ref?.current?.getBoundingClientRect();\n        if (disabled) {\n            select(undefined);\n        } else if (!selected && cellRect) {\n            select(cellRect);\n        }\n    }, [ref, select, selected, disabled]);\n\n    const onFocus = useCallback((event: React.SyntheticEvent<HTMLDivElement>) => {\n        onSelect();\n        event.stopPropagation();\n    }, [onSelect]);\n\n    const onMeasure = useCallback((contentRect: ContentRect) => {\n        if (contentRect?.bounds) {\n            const newOverflowingValue = contentRect.bounds.height > maxHeight;\n            if (isOverflowing !== newOverflowingValue)\n                setIsOverflowing(newOverflowingValue);\n        }\n    }, [isOverflowing, maxHeight]);\n\n    const cellClasses = useCellStyles({\n        size,\n        align,\n        disabled,\n        removePadding\n    });\n\n    const measuredDiv = <Measure\n        bounds\n        onResize={onMeasure}\n    >\n        {({ measureRef }) => (\n            <div ref={measureRef}\n                 className={clsx(cellClasses.fullWidth, { [cellClasses.fullHeight]: fullHeight })}>\n                {children}\n            </div>\n        )}\n    </Measure>;\n\n    return (\n        <div\n            tabIndex={selected || disabled ? undefined : 0}\n            ref={ref}\n            onFocus={onFocus}\n            onClick={onClick}\n            onMouseEnter={() => setOnHover(true)}\n            onMouseMove={() => setOnHover(true)}\n            onMouseLeave={() => setOnHover(false)}\n            // style={{\n            //     background: \"#\" + Math.floor(Math.random() * 16777215).toString(16)\n            // }}\n            className={clsx(\n                cellClasses.tableCell,\n                {\n                    [cellClasses.disabled]: disabled,\n                    [cellClasses.centered]: disabled || !isOverflowing,\n                    [cellClasses.error]: error,\n                    [cellClasses.saved]: selected && internalSaved,\n                    [cellClasses.selected]: !error && (selected || focused),\n                    [cellClasses.fullHeight]: fullHeight\n                })}>\n\n            <div className={clsx(cellClasses.fullWidth, {\n                [cellClasses.faded]: !disabled && !allowScroll && isOverflowing,\n                [cellClasses.scrollable]: !disabled && allowScroll && isOverflowing,\n                [cellClasses.fullHeight]: fullHeight\n            })}>\n                {measuredDiv}\n            </div>\n\n            {disabled && onHover && disabledTooltip &&\n            <div style={{\n                position: \"absolute\",\n                top: 4,\n                right: 4,\n                fontSize: \"14px\"\n            }}>\n                <Tooltip title={disabledTooltip}>\n                    <RemoveCircleIcon color={\"disabled\"}\n                                      fontSize={\"inherit\"}/>\n                </Tooltip>\n            </div>}\n\n            {(error || showExpandIcon) &&\n            <div className={cellClasses.iconsTop}>\n\n                {selected && !disabled && showExpandIcon &&\n                <IconButton\n                    ref={iconRef}\n                    color={\"inherit\"}\n                    size={\"small\"}\n                    onClick={doOpenPopup}>\n                    <svg\n                        className={\"MuiSvgIcon-root MuiSvgIcon-fontSizeSmall\"}\n                        fill={\"#666\"}\n                        width=\"20\"\n                        height=\"20\"\n                        viewBox=\"0 0 24 24\">\n                        <path className=\"cls-2\"\n                              d=\"M20,5a1,1,0,0,0-1-1L14,4h0a1,1,0,0,0,0,2h2.57L13.29,9.29a1,1,0,0,0,0,1.42,1,1,0,0,0,1.42,0L18,7.42V10a1,1,0,0,0,1,1h0a1,1,0,0,0,1-1Z\"/>\n                        <path className=\"cls-2\"\n                              d=\"M10.71,13.29a1,1,0,0,0-1.42,0L6,16.57V14a1,1,0,0,0-1-1H5a1,1,0,0,0-1,1l0,5a1,1,0,0,0,1,1h5a1,1,0,0,0,0-2H7.42l3.29-3.29A1,1,0,0,0,10.71,13.29Z\"/>\n                    </svg>\n                </IconButton>\n                }\n\n                {error && <Tooltip\n                    classes={{\n                        arrow: cellClasses.arrow,\n                        tooltip: cellClasses.tooltip\n                    }}\n                    arrow\n                    placement={\"left\"}\n                    title={error.message}>\n                    <ErrorOutlineIcon\n                        fontSize={\"inherit\"}\n                        color={\"error\"}\n                    />\n                </Tooltip>\n                }\n\n\n            </div>\n            }\n\n        </div>\n    );\n};\n\nexport const TableCell = React.memo<TableCellProps & CellStyleProps>(TableCellInternal, areEqual) as React.FunctionComponent<TableCellProps & CellStyleProps>;\n\nfunction areEqual(prevProps: TableCellProps & CellStyleProps, nextProps: TableCellProps & CellStyleProps) {\n    return prevProps.selected === nextProps.selected &&\n        prevProps.focused === nextProps.selected &&\n        prevProps.disabled === nextProps.disabled &&\n        prevProps.size === nextProps.size &&\n        prevProps.align === nextProps.align &&\n        prevProps.saved === nextProps.saved &&\n        prevProps.showExpandIcon === nextProps.showExpandIcon &&\n        prevProps.removePadding === nextProps.removePadding &&\n        prevProps.fullHeight === nextProps.fullHeight &&\n        isEqual(prevProps.value, nextProps.value)\n        ;\n}\n\n","import {\n    ArrayProperty,\n    BooleanProperty,\n    GeopointProperty,\n    MapProperty,\n    NumberProperty,\n    Properties,\n    Property,\n    ReferenceProperty,\n    StringProperty,\n    TimestampProperty\n} from \"../models\";\nimport * as yup from \"yup\";\nimport {\n    AnySchema,\n    ArraySchema,\n    BooleanSchema,\n    DateSchema,\n    NumberSchema,\n    ObjectSchema,\n    StringSchema\n} from \"yup\";\nimport { enumToObjectEntries } from \"../core/util/enums\";\n\n// Add custom unique function for array values\ndeclare module \"yup\" {\n    // tslint:disable-next-line\n    interface ArraySchema<T> {\n        uniqueInArray(mapper: (a: T) => T, message: string): ArraySchema<T>;\n    }\n}\nyup.addMethod(yup.array, \"uniqueInArray\", function(\n    mapper = (a: any) => a,\n    message: string\n) {\n    return this.test(\"uniqueInArray\", message, values => {\n        return !values || values.length === new Set(values.map(mapper)).size;\n    });\n});\n\n\nexport type CustomFieldValidator = (props: {\n    name: string,\n    value: any,\n    property: Property,\n    parentProperty?: MapProperty | ArrayProperty\n}) => Promise<boolean>;\n\ninterface PropertyContext<PT extends Property> {\n    property: PT,\n    parentProperty?: MapProperty | ArrayProperty,\n    customFieldValidator?: CustomFieldValidator,\n    name?: any\n}\n\nexport function getYupEntitySchema<M>(properties: Properties<M>,\n                                      customFieldValidator?: CustomFieldValidator): ObjectSchema<any> {\n    const objectSchema: any = {};\n    Object.entries(properties).forEach(([name, property]) => {\n        objectSchema[name] = mapPropertyToYup({\n            property,\n            customFieldValidator,\n            name\n        });\n    });\n    return yup.object().shape(objectSchema);\n}\n\nexport function mapPropertyToYup(propertyContext: PropertyContext<any>): AnySchema<unknown> {\n\n    const property = propertyContext.property;\n    if (typeof property === \"function\") {\n        console.log(\"Error in property\", propertyContext);\n        throw Error(\"PropertyBuilders can only be defined as the root properties in entity schemas, not in child properties\");\n    }\n\n    if (property.dataType === \"string\") {\n        return getYupStringSchema(propertyContext);\n    } else if (property.dataType === \"number\") {\n        return getYupNumberSchema(propertyContext);\n    } else if (property.dataType === \"boolean\") {\n        return getYupBooleanSchema(propertyContext);\n    } else if (property.dataType === \"map\") {\n        return getYupMapObjectSchema(propertyContext);\n    } else if (property.dataType === \"array\") {\n        return getYupArraySchema(propertyContext);\n    } else if (property.dataType === \"timestamp\") {\n        return getYupDateSchema(propertyContext);\n    } else if (property.dataType === \"geopoint\") {\n        return getYupGeoPointSchema(propertyContext);\n    } else if (property.dataType === \"reference\") {\n        return getYupReferenceSchema(propertyContext);\n    }\n    console.error(\"Unsupported data type in yup mapping\", property)\n    throw Error(\"Unsupported data type in yup mapping\");\n}\n\nexport function getYupMapObjectSchema({\n                                                                            property,\n                                                                            parentProperty,\n                                                                            customFieldValidator,\n                                                                            name\n                                                                        }: PropertyContext<MapProperty>): ObjectSchema<any> {\n    const objectSchema: any = {};\n    if (property.properties)\n        Object.entries(property.properties).forEach(([childName, childProperty]: [string, Property]) => {\n            objectSchema[childName] = mapPropertyToYup({\n                property: childProperty,\n                parentProperty: property,\n                customFieldValidator,\n                name: `${name}[${childName}]`\n            });\n        });\n    return yup.object().shape(objectSchema);\n}\n\nfunction getYupStringSchema({\n                                property,\n                                parentProperty,\n                                customFieldValidator,\n                                name\n                            }: PropertyContext<StringProperty>): StringSchema {\n    let schema: StringSchema<any> = yup.string();\n    const validation = property.validation;\n    if (property.config?.enumValues) {\n        if (validation?.required)\n            schema = schema.required(validation?.requiredMessage ? validation.requiredMessage : \"Required\");\n        schema = schema.oneOf(\n            enumToObjectEntries(property.config?.enumValues)\n                .map(([key, _]) => key)\n        );\n    }\n    if (validation) {\n        schema = validation.required\n            ? schema.required(validation?.requiredMessage ? validation.requiredMessage : \"Required\").nullable(true)\n            : schema.notRequired().nullable(true);\n        if (validation.unique && customFieldValidator && name)\n            schema = schema.test(\"unique\", \"This value already exists and should be unique\",\n                (value, context) =>\n                    customFieldValidator({\n                        name,\n                        property,\n                        parentProperty,\n                        value\n                    }));\n        if (validation.min || validation.min === 0) schema = schema.min(validation.min, `${property.title} must be min ${validation.min} characters long`);\n        if (validation.max || validation.max === 0) schema = schema.max(validation.max, `${property.title} must be max ${validation.max} characters long`);\n        if (validation.matches) schema = schema.matches(validation.matches, validation.matchesMessage);\n        if (validation.email) schema = schema.email(`${property.title} must be an email`);\n        if (validation.url) schema = schema.url(`${property.title} must be a url`);\n        if (validation.trim) schema = schema.trim();\n        if (validation.lowercase) schema = schema.lowercase();\n        if (validation.uppercase) schema = schema.uppercase();\n    } else {\n        schema = schema.notRequired().nullable(true);\n    }\n    return schema;\n}\n\nfunction getYupNumberSchema({\n                                property,\n                                parentProperty,\n                                customFieldValidator,\n                                name\n                            }: PropertyContext<NumberProperty>): NumberSchema {\n    const validation = property.validation;\n    let schema: NumberSchema<any> = yup.number().typeError(\"Must be a number\");\n    if (validation) {\n        schema = validation.required\n            ? schema.required(validation.requiredMessage ? validation.requiredMessage : \"Required\").nullable(true)\n            : schema.notRequired().nullable(true);\n        if (validation.unique && customFieldValidator && name)\n            schema = schema.test(\"unique\",\n                \"This value already exists and should be unique\",\n                (value) => customFieldValidator({\n                    name,\n                    property,\n                    parentProperty,\n                    value\n                }));\n        if (validation.min || validation.min === 0) schema = schema.min(validation.min, `${property.title} must be higher or equal to ${validation.min}`);\n        if (validation.max || validation.max === 0) schema = schema.max(validation.max, `${property.title} must be lower or equal to ${validation.max}`);\n        if (validation.lessThan || validation.lessThan === 0) schema = schema.lessThan(validation.lessThan, `${property.title} must be higher than ${validation.lessThan}`);\n        if (validation.moreThan || validation.moreThan === 0) schema = schema.moreThan(validation.moreThan, `${property.title} must be lower than ${validation.moreThan}`);\n        if (validation.positive) schema = schema.positive(`${property.title} must be positive`);\n        if (validation.negative) schema = schema.negative(`${property.title} must be negative`);\n        if (validation.integer) schema = schema.integer(`${property.title} must be an integer`);\n    } else {\n        schema = schema.notRequired().nullable(true);\n    }\n    return schema;\n}\n\nfunction getYupGeoPointSchema({\n                                  property,\n                                  parentProperty,\n                                  customFieldValidator,\n                                  name\n                              }: PropertyContext<GeopointProperty>): AnySchema {\n    let schema: ObjectSchema<any> = yup.object();\n    const validation = property.validation;\n    if (validation?.unique && customFieldValidator && name)\n        schema = schema.test(\"unique\",\n            \"This value already exists and should be unique\",\n            (value) => customFieldValidator({\n                name,\n                property,\n                parentProperty,\n                value\n            }));\n    if (validation?.required) {\n        schema = schema.required(validation.requiredMessage).nullable(true);\n    } else {\n        schema = schema.notRequired().nullable(true);\n    }\n    return schema;\n}\n\nfunction getYupDateSchema({\n                              property,\n                              parentProperty,\n                              customFieldValidator,\n                              name\n                          }: PropertyContext<TimestampProperty>): AnySchema | DateSchema {\n    if (property.autoValue) {\n        return yup.object().nullable(true);\n    }\n    let schema: DateSchema<any> = yup.date();\n    const validation = property.validation;\n    if (validation) {\n        schema = validation.required\n            ? schema.required(validation?.requiredMessage ? validation.requiredMessage : \"Required\").nullable(true)\n            : schema.notRequired().nullable(true);\n        if (validation.unique && customFieldValidator && name)\n            schema = schema.test(\"unique\",\n                \"This value already exists and should be unique\",\n                (value) => customFieldValidator({\n                    name,\n                    property,\n                    parentProperty,\n                    value\n                }));\n        if (validation.min) schema = schema.min(validation.min, `${property.title} must be after ${validation.min}`);\n        if (validation.max) schema = schema.max(validation.max, `${property.title} must be before ${validation.min}`);\n    } else {\n        schema = schema.notRequired().nullable(true);\n    }\n    return schema;\n}\n\nfunction getYupReferenceSchema({\n                                                                     property,\n                                                                     parentProperty,\n                                                                     customFieldValidator,\n                                                                     name\n                                                                 }: PropertyContext<ReferenceProperty>): AnySchema {\n    let schema: ObjectSchema<any> = yup.object();\n    const validation = property.validation;\n    if (validation) {\n        schema = validation.required\n            ? schema.required(validation?.requiredMessage ? validation.requiredMessage : \"Required\").nullable(true)\n            : schema.notRequired().nullable(true);\n        if (validation.unique && customFieldValidator && name)\n            schema = schema.test(\"unique\",\n                \"This value already exists and should be unique\",\n                (value) => customFieldValidator({\n                    name,\n                    property,\n                    parentProperty,\n                    value\n                }));\n    } else {\n        schema = schema.notRequired().nullable(true);\n    }\n    return schema;\n}\n\nfunction getYupBooleanSchema({\n                                 property,\n                                 parentProperty,\n                                 customFieldValidator,\n                                 name\n                             }: PropertyContext<BooleanProperty>): BooleanSchema {\n    let schema: BooleanSchema<any> = yup.boolean();\n    const validation = property.validation;\n    if (validation) {\n        schema = validation.required\n            ? schema.required(validation?.requiredMessage ? validation.requiredMessage : \"Required\").nullable(true)\n            : schema.notRequired().nullable(true);\n        if (validation.unique && customFieldValidator && name)\n            schema = schema.test(\"unique\",\n                \"This value already exists and should be unique\",\n                (value) => customFieldValidator({\n                    name,\n                    property,\n                    parentProperty,\n                    value\n                }));\n    } else {\n        schema = schema.notRequired().nullable(true);\n    }\n    return schema;\n}\n\nfunction hasUniqueInArrayModifier(property: Property): boolean | [string, Property][] {\n    if (property.validation?.uniqueInArray) {\n        return true;\n    } else if (property.dataType === \"map\" && property.properties) {\n        return Object.entries(property.properties)\n            .filter(([key, childProperty]) => childProperty.validation?.uniqueInArray);\n    }\n    return false;\n}\n\nfunction getYupArraySchema({\n                                  property,\n                                  parentProperty,\n                                  customFieldValidator,\n                                  name\n                              }: PropertyContext<ArrayProperty>): ArraySchema<any> {\n\n    let schema: ArraySchema<any> = yup.array();\n\n    if (property.of) {\n        schema = schema.of(mapPropertyToYup({\n            property: property.of,\n            parentProperty: property\n        }));\n        const arrayUniqueFields = hasUniqueInArrayModifier(property.of);\n        if (arrayUniqueFields) {\n            if (typeof arrayUniqueFields === \"boolean\") {\n                schema = schema.uniqueInArray(v => v, `${property.title} should have unique values within the array`);\n            } else if (Array.isArray(arrayUniqueFields)) {\n                arrayUniqueFields.forEach(([name, childProperty]) => {\n                        schema = schema.uniqueInArray(v => v && v[name], `${property.title} → ${childProperty.title ?? name}: should have unique values within the array`);\n                    }\n                );\n            }\n        }\n    }\n    const validation = property.validation;\n\n    if (validation) {\n        schema = validation.required\n            ? schema.required(validation?.requiredMessage ? validation.requiredMessage : \"Required\").nullable(true)\n            : schema.notRequired().nullable(true);\n        if (validation.min || validation.min === 0) schema = schema.min(validation.min, `${property.title} should be min ${validation.min} entries long`);\n        if (validation.max) schema = schema.max(validation.max, `${property.title} should be max ${validation.max} entries long`);\n    } else {\n        schema = schema.notRequired().nullable(true);\n    }\n    return schema;\n}\n","import React, { useEffect, useRef, useState } from \"react\";\nimport { TextareaAutosize, Theme } from \"@mui/material\";\nimport clsx from \"clsx\";\n\n\nimport createStyles from \"@mui/styles/createStyles\";\nimport makeStyles from \"@mui/styles/makeStyles\";\n\n\nexport const useInputStyles = makeStyles<Theme>(theme => createStyles({\n        input: {\n            padding: 0,\n            margin: 0,\n            width: \"100%\",\n            color: \"unset\",\n            fontWeight: \"unset\",\n            lineHeight: \"unset\",\n            fontSize: \"unset\",\n            fontFamily: \"unset\",\n            background: \"unset\",\n            border: \"unset\",\n            resize: \"none\",\n            outline: \"none\"\n        }\n    })\n);\n\nexport function TableInput(props: {\n    error: Error | undefined;\n    value: string;\n    multiline: boolean;\n    focused: boolean;\n    disabled: boolean;\n    updateValue: (newValue: (string | null)) => void;\n}) {\n    const { disabled, value, multiline, updateValue, focused } = props;\n    const [internalValue, setInternalValue] = useState<typeof value>(value);\n    const focusedState = useRef<boolean>(false);\n\n    useEffect(\n        () => {\n            const doUpdate = () => {\n                const emptyInitialValue = !value || value.length === 0;\n                if (emptyInitialValue && !internalValue)\n                    return;\n                if (internalValue !== value)\n                    updateValue(internalValue);\n            };\n            const handler = setTimeout(doUpdate, 300);\n\n            return () => {\n                clearTimeout(handler);\n            };\n\n        },\n        [internalValue]\n    );\n\n    useEffect(\n        () => {\n            if (!focused && value !== internalValue)\n                setInternalValue(value);\n        },\n        [value, focused]\n    );\n\n    const classes = useInputStyles();\n\n    const ref = React.createRef<HTMLTextAreaElement>();\n    useEffect(() => {\n        if (ref.current && focused && !focusedState.current) {\n            focusedState.current = true;\n            ref.current.focus({ preventScroll: true });\n            ref.current.selectionStart = ref.current.value.length;\n            ref.current.selectionEnd = ref.current.value.length;\n        } else {\n            focusedState.current = focused;\n        }\n    }, [focused, ref]);\n\n    return (\n        <div style={{ display: \"flex\" }}>\n            <TextareaAutosize\n                ref={ref}\n                disabled={disabled}\n                className={clsx(classes.input)}\n                value={internalValue ?? \"\"}\n                onChange={(evt) => {\n                    const newValue = evt.target.value as string;\n                    if (multiline || !newValue.endsWith(\"\\n\"))\n                        setInternalValue(newValue);\n                }}\n            />\n        </div>\n    );\n}\n","import { EnumValues } from \"../../../../../models\";\nimport { ArrayEnumPreview } from \"../../../../../preview\";\nimport React, { useEffect, useState } from \"react\";\nimport { Checkbox, ListItemText, MenuItem, Select, Theme } from \"@mui/material\";\nimport {\n    enumToObjectEntries,\n    isEnumValueDisabled\n} from \"../../../../util/enums\";\nimport { EnumValuesChip } from \"../../../../../preview/components/CustomChip\";\n\n\nimport createStyles from \"@mui/styles/createStyles\";\nimport makeStyles from \"@mui/styles/makeStyles\";\n\nexport const useInputStyles = makeStyles<Theme>(theme => createStyles({\n        select: {\n            height: \"100%\"\n        },\n        selectRoot: {\n            display: \"flex\",\n            alignItems: \"center\",\n            height: \"100%\"\n        }\n    })\n);\n\nexport function TableSelect(props: {\n    name: string;\n    enumValues: EnumValues;\n    error: Error | undefined;\n    multiple: boolean;\n    disabled: boolean;\n    small: boolean;\n    internalValue: string | number | string[] | number[] | undefined;\n    valueType: \"string\" | \"number\";\n    updateValue: (newValue: (string | number | string[] | number[] | null)) => void;\n    focused: boolean;\n    onBlur?: React.FocusEventHandler<HTMLInputElement | HTMLTextAreaElement>;\n    setPreventOutsideClick: (value: any) => void;\n}) {\n\n    const {\n        name,\n        enumValues,\n        error,\n        internalValue,\n        disabled,\n        small,\n        focused,\n        updateValue,\n        multiple,\n        setPreventOutsideClick,\n        valueType\n    } = props;\n\n    const [open, setOpen] = useState<boolean>(false);\n    const handleOpen = () => {\n        setPreventOutsideClick(true);\n        setOpen(true);\n    };\n\n    const handleClose = () => {\n        setPreventOutsideClick(false);\n        setOpen(false);\n    };\n\n    const classes = useInputStyles();\n\n    const validValue = (Array.isArray(internalValue) && multiple) ||\n        (!Array.isArray(internalValue) && !multiple);\n\n    const ref = React.createRef<HTMLInputElement>();\n    useEffect(() => {\n        if (ref.current && focused) {\n            ref.current?.focus({ preventScroll: true });\n        }\n    }, [focused, ref]);\n\n    return (\n        <Select\n            variant={\"standard\"}\n            key={`table_select_${name}`}\n            inputRef={ref}\n            className={classes.select}\n            classes={{ select: classes.selectRoot }}\n            open={open}\n            disabled={disabled}\n            multiple={multiple}\n            onClose={handleClose}\n            onOpen={handleOpen}\n            fullWidth\n            inputProps={{\n                style: {\n                    height: \"100%\"\n                }\n            }}\n            disableUnderline\n            error={!!error}\n            value={validValue\n                ? (multiple ? (internalValue as any[]).map(v => v.toString()) : internalValue)\n                : (multiple ? [] : \"\")}\n            onChange={(evt) => {\n                if (valueType === \"number\") {\n                    if (multiple) {\n                        const newValue = (evt.target.value as string[]).map((v) => parseFloat(v));\n                        updateValue(newValue);\n                    } else {\n                        updateValue(parseFloat(evt.target.value as string));\n                    }\n                } else if (valueType === \"string\") {\n                    if (!evt.target.value)\n                        updateValue(null)\n                    else\n                        updateValue(evt.target.value);\n                } else {\n                    throw Error(\"Missing mapping in TableSelect\");\n                }\n            }}\n            renderValue={(enumKey: any) => {\n                if (multiple && Array.isArray(enumKey)) {\n                    return <ArrayEnumPreview value={enumKey}\n                                             name={name}\n                                             enumValues={enumValues}\n                                             size={small ? \"small\" : \"regular\"}/>;\n                } else {\n                    return <EnumValuesChip\n                        enumKey={enumKey}\n                        enumValues={enumValues}\n                        small={small}/>;\n                }\n            }\n            }>\n\n            {enumToObjectEntries(enumValues).map(([key, labelOrConfig]) => {\n\n                const chip = <EnumValuesChip\n                    enumKey={key}\n                    enumValues={enumValues}\n                    small={true}/>;\n                if (multiple) {\n                    return (\n                        <MenuItem key={`select-${name}-${key}`}\n                                  value={key}\n                                  disabled={isEnumValueDisabled(labelOrConfig)}\n                                  dense={true}>\n                            <Checkbox\n                                checked={Array.isArray(internalValue) && (internalValue as any[]).map(v => v.toString()).includes(key.toString())}/>\n                            <ListItemText primary={chip}/>\n                        </MenuItem>\n                    );\n                } else {\n                    return (\n                        <MenuItem key={`select-${name}-${key}`} value={key}\n                                  disabled={isEnumValueDisabled(labelOrConfig)}\n                                  dense={true}>\n                            {chip}\n                        </MenuItem>\n                    );\n                }\n            })}\n        </Select>\n    );\n}\n","import React, { useEffect, useState } from \"react\";\nimport { Input, Theme } from \"@mui/material\";\nimport clsx from \"clsx\";\n\n\nimport createStyles from \"@mui/styles/createStyles\";\nimport makeStyles from \"@mui/styles/makeStyles\";\n\n\nexport const useInputStyles = makeStyles<Theme>(theme => createStyles({\n        input: {\n            padding: 0,\n            margin: 0,\n            width: \"100%\",\n            color: \"unset\",\n            fontWeight: \"unset\",\n            lineHeight: \"unset\",\n            fontSize: \"unset\",\n            fontFamily: \"unset\",\n            background: \"unset\",\n            border: \"unset\",\n            resize: \"none\",\n            outline: \"none\"\n        },\n        numberInput: {\n            textAlign: \"right\"\n        }\n    })\n);\n\nexport function NumberTableInput(props: {\n    error: Error | undefined;\n    value: number;\n    align: \"right\" | \"left\" | \"center\";\n    updateValue: (newValue: (number | null)) => void;\n    focused: boolean;\n    disabled: boolean;\n    onBlur?: React.FocusEventHandler<HTMLInputElement | HTMLTextAreaElement>;\n}) {\n\n    const { align, value, updateValue, focused, onBlur, disabled } = props;\n    const propStringValue = (value && typeof value === \"number\") ? value.toString() : \"\";\n    const [internalValue, setInternalValue] = useState<string | null>(propStringValue);\n\n    useEffect(\n        () => {\n            const doUpdate = () => {\n                if (internalValue !== propStringValue) {\n                    if (internalValue !== undefined && internalValue !== null) {\n                        const numberValue = parseFloat(internalValue);\n                        if (isNaN(numberValue))\n                            return;\n                        if (numberValue !== undefined && numberValue !== null)\n                            updateValue(numberValue);\n                    } else {\n                        updateValue(null);\n                    }\n                }\n            };\n            const handler = setTimeout(doUpdate, 300);\n\n            return () => {\n                clearTimeout(handler);\n            };\n        },\n        [internalValue]\n    );\n\n    useEffect(\n        () => {\n            if (!focused && propStringValue !== internalValue)\n                setInternalValue(value !== undefined && value !== null ? value.toString() : null);\n        },\n        [value, focused]\n    );\n\n    const ref = React.createRef<HTMLInputElement>();\n    const classes = useInputStyles();\n\n    useEffect(() => {\n        if (ref.current && focused) {\n            ref.current.focus({ preventScroll: true });\n        }\n    }, [focused, ref]);\n\n    const regexp = /^-?[0-9]+[,.]?[0-9]*$/;\n\n    return (\n        <Input\n            inputRef={ref}\n            style={{\n                width: \"100%\",\n                fontSize: \"unset\",\n                fontFamily: \"unset\",\n                background: \"unset\",\n                border: \"unset\",\n                resize: \"none\",\n                outline: \"none\",\n                padding: 0\n\n            }}\n            inputProps={{\n                style: {\n                    textAlign: align\n                }\n            }}\n            disabled={disabled}\n            className={clsx(classes.input, classes.numberInput)}\n            disableUnderline\n            value={internalValue ?? \"\"}\n            onBlur={onBlur}\n            onChange={(evt) => {\n                const newValue = evt.target.value.replace(\",\", \".\");\n                if (newValue.length === 0)\n                    setInternalValue(null);\n                if (regexp.test(newValue) || newValue.startsWith(\"-\"))\n                    setInternalValue(newValue);\n            }}\n        />\n    );\n}\n","import React, { useEffect } from \"react\";\nimport { Switch } from \"@mui/material\";\n\nexport function TableSwitch(props: {\n    error: Error | undefined;\n    internalValue?: boolean;\n    focused: boolean;\n    disabled: boolean;\n    updateValue: (newValue: (boolean | null)) => void;\n}) {\n    const { disabled, internalValue, updateValue, focused } = props;\n\n    const ref = React.createRef<HTMLTextAreaElement>();\n    useEffect(() => {\n        if (ref.current && focused) {\n            ref.current.focus({ preventScroll: true });\n        }\n    }, [focused, ref]);\n\n    return (\n        <Switch\n            inputRef={ref}\n            color={\"secondary\"}\n            checked={Boolean(internalValue)}\n            disabled={disabled}\n            onChange={(evt) => {\n                const value = evt.target.checked as boolean;\n                updateValue(value);\n            }}\n        />\n    );\n}\n","import React, { useCallback } from \"react\";\nimport { Box, TextField as MuiTextField, Theme } from \"@mui/material\";\nimport { TimestampProperty } from \"../../../../../models\";\nimport DateTimePicker from \"@mui/lab/DateTimePicker\";\n\n\nimport createStyles from \"@mui/styles/createStyles\";\nimport makeStyles from \"@mui/styles/makeStyles\";\n\nexport const useInputStyles = makeStyles<Theme>(theme => createStyles({\n        hidden: {\n            display: \"none\"\n        }\n    })\n);\n\nexport function TableDateField(props: {\n    name: string;\n    error: Error | undefined;\n    internalValue: Date | undefined | null;\n    updateValue: (newValue: (Date | null)) => void;\n    focused: boolean;\n    disabled: boolean;\n    onBlur?: React.FocusEventHandler<HTMLInputElement | HTMLTextAreaElement>;\n    setPreventOutsideClick: (value: any) => void;\n}) {\n\n    const {\n        disabled,\n        error,\n        internalValue,\n        setPreventOutsideClick,\n        updateValue\n    } = props;\n\n    const handleOpen = useCallback(() => {\n        setPreventOutsideClick(true);\n    }, []);\n\n    const handleClose = useCallback(() => {\n        setPreventOutsideClick(false);\n    }, []);\n\n    return (\n        <Box display={\"flex\"} alignItems={\"center\"} width={\"100%\"}>\n\n            <DateTimePicker\n                value={internalValue ?? null}\n                clearable\n                disabled={disabled}\n                onChange={(dateValue: Date | null) => {\n                    updateValue(dateValue);\n                }}\n                renderInput={(params) =>\n                    <MuiTextField {...params}\n                                  variant={\"standard\"}\n                                  error={Boolean(error)}\n                                  style={{\n                                      height: \"100%\"\n                                  }}\n                                  InputProps={{\n                                      ...params.InputProps,\n                                      style: { fontSize: 14 },\n                                      disableUnderline: true\n                                  }}\n                    />}\n                InputAdornmentProps={{\n                    style: {\n                        fontSize: \"small\",\n                        height: 26\n                    }\n                }}\n                onOpen={handleOpen}\n                onClose={handleClose}\n            />\n        </Box>\n    );\n}\n","import React, { useCallback, useState } from \"react\";\nimport { Box, Button } from \"@mui/material\";\nimport { ReferencePreview } from \"../../../../../preview\";\nimport { ErrorView } from \"../../../index\";\nimport {\n    ArrayProperty,\n    CollectionSize,\n    Entity,\n    EntityReference,\n    ReferenceProperty\n} from \"../../../../../models\";\nimport { ReferenceDialog } from \"../../../ReferenceDialog\";\n\nimport { getPreviewSizeFrom } from \"../../../../../preview/util\";\nimport { getReferenceFrom } from \"../../../../utils\";\nimport { useNavigation } from \"../../../../../hooks\";\n\n\nexport function TableReferenceField(props: {\n    name: string;\n    disabled: boolean;\n    internalValue: EntityReference | EntityReference[] | undefined | null;\n    updateValue: (newValue: (EntityReference | EntityReference [] | null)) => void;\n    property: ReferenceProperty | ArrayProperty<EntityReference[]>;\n    size: CollectionSize;\n    setPreventOutsideClick: (value: any) => void;\n}) {\n\n    const {\n        name,\n        internalValue,\n        setPreventOutsideClick,\n        property,\n        updateValue,\n        size,\n        disabled\n    } = props;\n\n    let usedProperty: ReferenceProperty;\n    let multiselect;\n    if (property.dataType === \"reference\") {\n        usedProperty = property;\n        multiselect = false;\n    } else if (property.dataType === \"array\" && property.of?.dataType === \"reference\") {\n        usedProperty = property.of;\n        multiselect = true;\n    } else {\n        throw Error(\"TableReferenceField misconfiguration\");\n    }\n\n    if (typeof usedProperty.path !== \"string\") {\n        throw Error(\"Picked the wrong component TableReferenceField\");\n    }\n\n    const path = usedProperty.path;\n\n    const [onHover, setOnHover] = useState(false);\n    const [open, setOpen] = useState<boolean>(false);\n\n    const navigationContext = useNavigation();\n    const collectionResolver = navigationContext.getCollectionResolver(path);\n    if (!collectionResolver) {\n        throw Error(`Couldn't find the corresponding collection view for the path: ${path}`);\n    }\n    const handleOpen = useCallback((event: React.MouseEvent) => {\n        if (disabled)\n            return;\n        if (event.detail <= 1) {\n            event.stopPropagation();\n            setPreventOutsideClick(true);\n            setOpen(true);\n        }\n    }, [disabled, setPreventOutsideClick]);\n\n    const handleClose = useCallback(() => {\n        setPreventOutsideClick(false);\n        setOpen(false);\n    }, [setPreventOutsideClick, setOpen]);\n\n    const onSingleValueSet = useCallback((entity: Entity<any>) => {\n        updateValue(entity ? getReferenceFrom(entity) : null);\n        setPreventOutsideClick(false);\n        setOpen(false);\n    }, [updateValue, setPreventOutsideClick, setOpen]);\n\n    const onMultipleEntitiesSelected = useCallback((entities: Entity<any>[]) => {\n        updateValue(entities.map((e) => getReferenceFrom(e)));\n    }, [updateValue]);\n\n    const selectedIds = internalValue\n        ? (Array.isArray(internalValue)\n            ? internalValue.map((ref) => ref.id)\n            : internalValue.id ? [internalValue.id] : [])\n        : [];\n    const valueNotSet = !internalValue || (Array.isArray(internalValue) && internalValue.length === 0);\n\n    function buildSingleReferenceField() {\n        if (internalValue instanceof EntityReference)\n            return <ReferencePreview name={name}\n                                     onClick={disabled ? undefined : handleOpen}\n                                     value={internalValue as EntityReference}\n                                     property={usedProperty}\n                                     onHover={onHover}\n                                     size={getPreviewSizeFrom(size)}\n            />;\n        else\n            return <ErrorView error={\"Data is not a reference\"}/>;\n    }\n\n    function buildMultipleReferenceField() {\n        if (Array.isArray(internalValue))\n            return <>\n                {internalValue.map((v, index) =>\n                    <Box sx={{ m: 0.5 }}\n                         key={`preview_array_ref_${name}_${index}`}>\n                        <ReferencePreview\n                            name={`${name}[${index}]`}\n                            onClick={disabled ? undefined : handleOpen}\n                            size={\"tiny\"}\n                            onHover={onHover}\n                            value={v}\n                            property={usedProperty}\n\n                        />\n                    </Box>\n                )\n                }\n            </>;\n        else\n            return <ErrorView error={\"Data is not an array of references\"}/>;\n    }\n\n    if (!collectionResolver)\n        return <ErrorView error={\"The specified collection does not exist\"}/>;\n\n    return (\n        <div\n            onMouseEnter={() => setOnHover(true)}\n            onMouseMove={() => setOnHover(true)}\n            onMouseLeave={() => setOnHover(false)}>\n\n            {internalValue && !multiselect &&\n            buildSingleReferenceField()\n            }\n\n            {internalValue && multiselect &&\n            buildMultipleReferenceField()\n            }\n\n            {valueNotSet &&\n            <Button\n                onClick={handleOpen}\n                size={\"small\"}\n                variant=\"outlined\"\n                color=\"primary\">\n                Edit {property.title}\n            </Button>}\n\n            {!disabled &&\n            open &&\n            <ReferenceDialog open={open}\n                                multiselect={multiselect}\n                                path={path}\n                                collectionResolver={collectionResolver}\n                                onClose={handleClose}\n                                onMultipleEntitiesSelected={onMultipleEntitiesSelected}\n                                onSingleEntitySelected={onSingleValueSet}\n                                selectedEntityIds={selectedIds}\n            />}\n\n\n        </div>\n    );\n}\n","import * as React from \"react\";\nimport { useCallback, useEffect, useMemo, useState } from \"react\";\n\nimport { Box, IconButton, Skeleton, Theme, Typography } from \"@mui/material\";\n\nimport EditIcon from \"@mui/icons-material/Edit\";\nimport makeStyles from \"@mui/styles/makeStyles\";\n\nimport {\n    ArrayProperty,\n    EntityValues,\n    Property,\n    StorageMeta,\n    StringProperty\n} from \"../../../../../models\";\nimport { useDropzone } from \"react-dropzone\";\nimport { PreviewComponent, PreviewSize } from \"../../../../../preview\";\nimport isEqual from \"react-fast-compare\";\nimport { ErrorBoundary } from \"../../../../internal/ErrorBoundary\";\n\nimport clsx from \"clsx\";\nimport { useSnackbarController, useStorageSource } from \"../../../../../hooks\";\nimport { getThumbnailMeasure } from \"../../../../../preview/util\";\n\nexport const useStyles = makeStyles<Theme, {hasValue:boolean}>((theme: Theme) => ({\n    dropZone: {\n        position: \"relative\",\n        height: \"100%\",\n        outline: 0,\n        display: \"flex\",\n        flexDirection: \"row\",\n        flexWrap: \"wrap\",\n        justifyContent: ({ hasValue }) => hasValue ? \"start\" : \"center\",\n        alignItems: \"center\"\n    },\n    activeDrop: {\n        borderRadius: \"2px\",\n        border: \"2px solid\",\n        borderColor: \"transparent\"\n    },\n    acceptDrop: {\n        transition: \"background-color 200ms cubic-bezier(0.0, 0, 0.2, 1) 0ms\",\n        background: \"repeating-linear-gradient( 45deg, rgba(128, 128, 128, 0.2), rgba(128, 128, 128, 0.2) 10px, rgba(128, 128, 128, 0.25) 10px, rgba(128, 128, 128, 0.25) 20px) !important\",\n        // background: \"repeating-linear-gradient( 45deg, rgba(0, 0, 0, 0.09), rgba(0, 0, 0, 0.09) 10px, rgba(0, 0, 0, 0.12) 10px, rgba(0, 0, 0, 0.12) 20px) !important\",\n        borderColor: theme.palette.success.light\n    },\n    rejectDrop: {\n        borderColor: theme.palette.error.light\n    },\n    arrayEntry: {\n        border: \"1px dashed transparent\",\n        borderRadius: \"4px\"\n    },\n    arrayEntryHovered: {\n        opacity: 0.5,\n        border: \"1px dashed gray\",\n        boxSizing: \"border-box\"\n    },\n    thumbnailCloseIcon: {\n        position: \"absolute\",\n        borderRadius: \"9999px\",\n        top: -8,\n        right: -8,\n        zIndex: 100,\n        backgroundColor: theme.palette.background.paper\n    }\n}));\n\n\n/**\n * Field that allows to upload files to Google Cloud Storage.\n *\n * This is one of the internal components that get mapped natively inside forms\n * and tables to the specified properties.\n * @category Form fields\n */\nexport function TableStorageUpload(props: {\n    name: string;\n    error: Error | undefined;\n    disabled: boolean;\n    internalValue: string | string[] | null;\n    updateValue: (newValue: (string | string[] | null)) => void;\n    focused: boolean;\n    property: StringProperty | ArrayProperty<string[]>;\n    entityId: string;\n    previewSize: PreviewSize;\n    entityValues: EntityValues<any>;\n    onBlur?: React.FocusEventHandler<HTMLInputElement | HTMLTextAreaElement>;\n    setPreventOutsideClick: (value: any) => void;\n}) {\n\n    const {\n        name,\n        error,\n        internalValue,\n        disabled,\n        property,\n        entityId,\n        entityValues,\n        previewSize,\n        updateValue,\n        setPreventOutsideClick\n    } = props;\n\n    const multipleFilesSupported = property.dataType === \"array\";\n\n    const storageMeta: StorageMeta | undefined = property.dataType === \"string\"\n? property.config?.storageMeta\n        : property.dataType === \"array\" &&\n        (property.of as Property).dataType === \"string\"\n? (property.of as StringProperty).config?.storageMeta\n            : undefined;\n\n    if (!storageMeta)\n        throw Error(\"Storage meta must be specified\");\n\n    const fileNameBuilder = (file: File) => {\n        if (storageMeta.fileName) {\n            const fileName = storageMeta.fileName({\n                entityId,\n                values: entityValues,\n                property,\n                file,\n                storageMeta,\n                name\n            });\n\n            if (!fileName || fileName.length === 0) {\n                throw Error(\"You need to return a valid filename\");\n            }\n            return fileName;\n        }\n        return file.name;\n    };\n\n    const storagePathBuilder = (file: File) => {\n        if (typeof storageMeta.storagePath === \"string\")\n            return storageMeta.storagePath;\n\n        if (typeof storageMeta.storagePath === \"function\") {\n            const storagePath = storageMeta.storagePath({\n                entityId: entityId,\n                values: entityValues,\n                property,\n                file,\n                storageMeta,\n                name\n            });\n\n            if (!storagePath || storagePath.length === 0) {\n                throw Error(\"You need to return a valid filename\");\n            }\n            return storagePath;\n        }\n        console.warn(\"When using a storage property, if you don't specify the storagePath, the root storage is used\");\n        return \"/\";\n    };\n\n\n    return (\n\n        <StorageUpload\n            value={internalValue}\n            name={name}\n            disabled={disabled}\n            autoFocus={false}\n            property={property}\n            onChange={(newValue) => {\n                updateValue(\n                    newValue\n                );\n            }}\n            fileNameBuilder={fileNameBuilder}\n            storagePathBuilder={storagePathBuilder}\n            storageMeta={storageMeta}\n            multipleFilesSupported={multipleFilesSupported}\n            previewSize={previewSize}/>\n\n    );\n}\n\n/**\n * Internal representation of an item in the storage\n * It can have two states, having a storagePathOrDownloadUrl set,\n * which means the file has\n * been uploaded and it is rendered as a preview\n * Or have a pending file being uploaded.\n */\ninterface StorageFieldItem {\n    id: number; // generated on the fly for internal use only\n    storagePathOrDownloadUrl?: string;\n    file?: File;\n    fileName?: string;\n    metadata?: any\n}\n\ninterface StorageUploadProps {\n    value: string | string[] | null;\n    name: string;\n    property: StringProperty | ArrayProperty<string[]>;\n    onChange: (value: string | string[] | null) => void;\n    multipleFilesSupported: boolean;\n    autoFocus: boolean;\n    disabled: boolean;\n    previewSize: PreviewSize;\n    storageMeta: StorageMeta;\n    fileNameBuilder: (file: File) => string;\n    storagePathBuilder: (file: File) => string;\n}\n\nfunction StorageUpload({\n                           property,\n                           name,\n                           value,\n                           onChange,\n                           multipleFilesSupported,\n                           previewSize: previewSizeInput,\n                           disabled,\n                           autoFocus,\n                           storageMeta,\n                           fileNameBuilder,\n                                  storagePathBuilder\n                              }: StorageUploadProps) {\n\n    const storage = useStorageSource();\n    const [onHover, setOnHover] = useState(false);\n\n    const previewSize = multipleFilesSupported && previewSizeInput === \"regular\" ? \"small\" : previewSizeInput;\n    if (multipleFilesSupported) {\n        const arrayProperty = property as ArrayProperty<string[]>;\n        if (arrayProperty.of) {\n            if (arrayProperty.of.dataType !== \"string\") {\n                throw Error(\"Storage field using array must be of data type string\");\n            }\n        } else {\n            throw Error(\"Storage field using array must be of data type string\");\n        }\n    }\n\n    const metadata: any | undefined = storageMeta?.metadata;\n    const hasValue = Boolean(value);\n\n    const classes = useStyles({ hasValue });\n\n    const internalInitialValue: StorageFieldItem[] =\n        value == null\n            ? []\n            : (multipleFilesSupported\n                ? value as string[]\n                : [value as string]).map(entry => (\n                {\n                    id: getRandomId(),\n                    storagePathOrDownloadUrl: entry,\n                    metadata: metadata,\n                    size: previewSize\n                }\n            ));\n\n    const initialValue = React.useRef<string | string[] | null>(value);\n    const [internalValue, setInternalValue] = React.useState<StorageFieldItem[]>(internalInitialValue);\n\n    if (!isEqual(initialValue.current, value)) {\n        initialValue.current = value;\n        setInternalValue(internalInitialValue ?? []);\n    }\n\n    function getRandomId() {\n        return Math.floor(Math.random() * Math.floor(Number.MAX_SAFE_INTEGER));\n    }\n\n    function removeDuplicates(items: StorageFieldItem[]) {\n        return items.filter(\n            (v, i) => {\n                return ((items.map((v) => v.storagePathOrDownloadUrl).indexOf(v.storagePathOrDownloadUrl) === i) || !v.storagePathOrDownloadUrl) &&\n                    ((items.map((v) => v.file).indexOf(v.file) === i) || !v.file);\n            }\n        );\n    }\n\n    const onExternalDrop = (acceptedFiles: File[]) => {\n\n        if (!acceptedFiles.length || disabled)\n            return;\n\n        let newInternalValue: StorageFieldItem[];\n        if (multipleFilesSupported) {\n            newInternalValue = [...internalValue,\n                ...(acceptedFiles.map(file => ({\n                    id: getRandomId(),\n                    file,\n                    fileName: fileNameBuilder(file),\n                    metadata\n                } as StorageFieldItem)))];\n        } else {\n            newInternalValue = [{\n                id: getRandomId(),\n                file: acceptedFiles[0],\n                fileName: fileNameBuilder(acceptedFiles[0]),\n                metadata\n            }];\n        }\n\n        // Remove either storage path or file duplicates\n        newInternalValue = removeDuplicates(newInternalValue);\n        setInternalValue(newInternalValue);\n    };\n\n    const onFileUploadComplete = async (uploadedPath: string,\n                                        entry: StorageFieldItem,\n                                        metadata?: any) => {\n\n        let uploadPathOrDownloadUrl = uploadedPath;\n        if (storageMeta.storeUrl) {\n            uploadPathOrDownloadUrl = await storage.getDownloadURL(uploadedPath);\n        }\n        if (storageMeta.postProcess) {\n            uploadPathOrDownloadUrl = await storageMeta.postProcess(uploadPathOrDownloadUrl);\n        }\n\n        let newValue: StorageFieldItem[];\n\n        entry.storagePathOrDownloadUrl = uploadPathOrDownloadUrl;\n        entry.metadata = metadata;\n        newValue = [...internalValue];\n\n        newValue = removeDuplicates(newValue);\n        setInternalValue(newValue);\n\n        const fieldValue = newValue\n            .filter(e => !!e.storagePathOrDownloadUrl)\n            .map(e => e.storagePathOrDownloadUrl as string);\n\n        if (multipleFilesSupported) {\n            onChange(fieldValue);\n        } else {\n            onChange(fieldValue ? fieldValue[0] : null);\n        }\n    };\n\n    const onClear = (clearedStoragePathOrDownloadUrl: string) => {\n        if (multipleFilesSupported) {\n            const newValue: StorageFieldItem[] = internalValue.filter(v => v.storagePathOrDownloadUrl !== clearedStoragePathOrDownloadUrl);\n            onChange(newValue.filter(v => !!v.storagePathOrDownloadUrl).map(v => v.storagePathOrDownloadUrl as string));\n            setInternalValue(newValue);\n        } else {\n            onChange(null);\n            setInternalValue([]);\n        }\n    };\n\n    const {\n        open,\n        getRootProps,\n        getInputProps,\n        isDragActive,\n        isDragAccept,\n        isDragReject\n    } = useDropzone({\n            accept: storageMeta.acceptedFiles,\n            disabled: disabled,\n            noClick: true,\n            noKeyboard: true,\n            onDrop: onExternalDrop\n        }\n    );\n\n    const { ...rootProps } = getRootProps();\n\n    const helpText = multipleFilesSupported\n        ? \"Drag 'n' drop some files here, or click here to edit\"\n        : \"Drag 'n' drop a file here, or click here edit\";\n\n    const renderProperty = multipleFilesSupported\n        ? (property as ArrayProperty<string[]>).of as StringProperty\n        : property as StringProperty;\n\n    return (\n        <Box {...rootProps}\n\n             onMouseEnter={() => setOnHover(true)}\n             onMouseMove={() => setOnHover(true)}\n             onMouseLeave={() => setOnHover(false)}\n             className={clsx(classes.dropZone, {\n                 [classes.activeDrop]: isDragActive,\n                 [classes.rejectDrop]: isDragReject,\n                 [classes.acceptDrop]: isDragAccept\n             })}\n        >\n\n            <input autoFocus={autoFocus} {...getInputProps()} />\n\n            {internalValue.map((entry, index) => {\n                let child;\n                if (entry.storagePathOrDownloadUrl) {\n                    child = (\n                        <StorageItemPreview\n                            key={`storage_preview_${index}`}\n                            property={renderProperty}\n                            disabled={disabled}\n                            value={entry.storagePathOrDownloadUrl}\n                            onClear={onClear}\n                            size={previewSize}/>\n                    );\n                } else if (entry.file) {\n                    child = (\n                        <StorageUploadProgress\n                            key={`storage_progress_${index}`}\n                            entry={entry}\n                            metadata={metadata}\n                            storagePath={storagePathBuilder(entry.file)}\n                            onFileUploadComplete={onFileUploadComplete}\n                            size={previewSize}\n                        />\n                    );\n                }\n\n                return child;\n            })\n            }\n\n            {!value && <Box\n                sx={{\n                    flexGrow: 1,\n                    m: 2,\n                    maxWidth: 200\n                }}\n                onClick={open}>\n                <Typography\n                    sx={{\n                        color: (theme) => (theme.palette.mode === \"light\" ? \"#999\" : \"#444\")\n                    }}\n                    variant={\"body2\"}\n                    align={\"center\"}>\n                    {helpText}\n                </Typography>\n            </Box>}\n\n            {onHover &&\n            <IconButton\n                color={\"inherit\"}\n                size={\"small\"}\n                onClick={open}\n                sx={{\n                    position: \"absolute\",\n                    bottom: 2,\n                    right: 2\n                }}>\n                <EditIcon sx={{\n                    width: 16,\n                    height: 16,\n                    fill: \"#666\"\n                }\n                }/>\n            </IconButton>\n            }\n\n\n        </Box>\n    );\n\n}\n\n\ninterface StorageUploadItemProps {\n    storagePath: string;\n    metadata?: any,\n    entry: StorageFieldItem,\n    onFileUploadComplete: (value: string,\n                           entry: StorageFieldItem,\n                           metadata?: any) => Promise<void>;\n    size: PreviewSize;\n}\n\nexport function StorageUploadProgress({\n                                          storagePath,\n                                          entry,\n                                          metadata,\n                                          onFileUploadComplete,\n                                          size\n                                      }: StorageUploadItemProps) {\n\n    const storage = useStorageSource();\n\n    const snackbarContext = useSnackbarController();\n\n    const [error, setError] = React.useState<string>();\n    const [loading, setLoading] = React.useState<boolean>(false);\n    const mounted = React.useRef(false);\n\n    const upload = useCallback((file: File, fileName?: string) => {\n\n        setError(undefined);\n        setLoading(true);\n\n        storage.uploadFile({ file, fileName, path: storagePath, metadata })\n            .then(async ({ path }) => {\n                console.debug(\"Upload successful\");\n                await onFileUploadComplete(path, entry, metadata);\n                if (mounted.current)\n                    setLoading(false);\n            })\n            .catch((e) => {\n                console.error(\"Upload error\", e);\n                if (mounted.current) {\n                    setError(e.message);\n                    setLoading(false);\n                }\n                snackbarContext.open({\n                    type: \"error\",\n                    title: \"Error uploading file\",\n                    message: e.message\n                });\n            });\n    }, [entry, metadata, onFileUploadComplete, snackbarContext, storage, storagePath]);\n\n    useEffect(() => {\n        mounted.current = true;\n        if (entry.file)\n            upload(entry.file, entry.fileName);\n        return () => {\n            mounted.current = false;\n        };\n    }, [entry.file, entry.fileName, upload]);\n\n    const imageSize = useMemo(() => getThumbnailMeasure(size), [size]);\n\n    return (\n\n        <Box m={1} sx={{\n            width: imageSize,\n            height: imageSize\n        }}>\n\n            {loading && <Skeleton variant=\"rectangular\" sx={{\n                width: imageSize,\n                height: imageSize\n            }}/>}\n\n            {error && <p>Error uploading file: {error}</p>}\n\n        </Box>\n\n    );\n\n}\n\ninterface StorageItemPreviewProps {\n    property: StringProperty;\n    value: string,\n    onClear: (value: string) => void;\n    size: PreviewSize;\n    disabled: boolean;\n}\n\nexport function StorageItemPreview({\n                                       property,\n                                       value,\n                                       size\n                                   }: StorageItemPreviewProps) {\n\n    return (\n        <Box\n            m={1}\n            position={\"relative\"}\n        >\n\n            {value &&\n            <ErrorBoundary>\n                <PreviewComponent value={value}\n                                  property={property}\n                                  size={size}/>\n            </ErrorBoundary>\n            }\n\n        </Box>\n    );\n\n}\n","import {\n    ArrayProperty,\n    CMSType,\n    EntityReference,\n    EntityValues,\n    NumberProperty,\n    Property,\n    ReferenceProperty,\n    StringProperty\n} from \"../../../../models\";\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport { TableInput } from \"./fields/TableInput\";\nimport { TableSelect } from \"./fields/TableSelect\";\nimport { NumberTableInput } from \"./fields/TableNumberInput\";\nimport { TableSwitch } from \"./fields/TableSwitch\";\nimport { TableDateField } from \"./fields/TableDateField\";\nimport { ErrorBoundary } from \"../../../internal/ErrorBoundary\";\nimport { PreviewComponent } from \"../../../../preview\";\nimport { CellStyleProps } from \"../../Table/styles\";\nimport { TableReferenceField } from \"./fields/TableReferenceField\";\n\nimport { getPreviewSizeFrom } from \"../../../../preview/util\";\nimport { useClearRestoreValue } from \"../../../../hooks\";\nimport isEqual from \"react-fast-compare\";\nimport { isReadOnly } from \"../../../utils\";\nimport { TableCell } from \"../../Table/TableCell\";\nimport { AnySchema } from \"yup\";\nimport { TableStorageUpload } from \"./fields/TableStorageUpload\";\n\n\nexport interface PropertyTableCellProps<T extends CMSType> {\n    name: string;\n    selected: boolean;\n    value: T;\n    select: (cellRect: DOMRect | undefined) => void;\n    openPopup: (cellRect: DOMRect | undefined) => void;\n    setPreventOutsideClick: (value: boolean) => void;\n    focused: boolean;\n    setFocused: (value: boolean) => void;\n    property: Property<T>;\n    height: number;\n    width: number;\n    entityId: string;\n    entityValues: EntityValues<any>;\n    validation: AnySchema;\n    onValueChange?: (params: OnCellChangeParams<T>) => void\n}\n\n/**\n * Props passed in a callback when the content of a cell in a table has been edited\n */\nexport interface OnCellChangeParams<T> {\n    value: T,\n    name: string,\n    setError: (e: Error) => void,\n    setSaved: (saved: boolean) => void\n}\n\nconst PropertyTableCellInternal = <T extends CMSType>({\n                                                                                            selected,\n                                                                                            focused,\n                                                                                            name,\n                                                                                            setPreventOutsideClick,\n                                                                                            setFocused,\n                                                                                            onValueChange,\n                                                                                            select,\n                                                                                            openPopup,\n                                                                                            value,\n                                                                                            property,\n                                                                                            validation,\n                                                                                            size,\n                                                                                            align,\n                                                                                            width,\n                                                                                            height,\n                                                                                            entityId,\n                                                                                            entityValues\n                                                                                        }: PropertyTableCellProps<T> & CellStyleProps) => {\n\n    const [internalValue, setInternalValue] = useState<any | null>(value);\n\n    useClearRestoreValue<T>({\n        property,\n        value: internalValue,\n        setValue: setInternalValue\n    });\n\n    const [error, setError] = useState<Error | undefined>();\n    const [saved, setSaved] = useState<boolean>(false);\n\n    const customField = Boolean(property.config?.Field);\n    const customPreview = Boolean(property.config?.Preview);\n    const readOnly = isReadOnly(property);\n    const disabledTooltip: string | undefined = typeof property.disabled === \"object\" ? property.disabled.disabledMessage : undefined;\n    const disabled = Boolean(property.disabled);\n\n    const onBlur = useCallback(() => {\n        setFocused(false);\n    }, []);\n\n    useEffect(\n        () => {\n            if (value !== internalValue) {\n                setInternalValue(value);\n            }\n        },\n        [value]\n    );\n\n    useEffect(\n        () => {\n            if (!isEqual(value, internalValue)) {\n                setSaved(false);\n                validation\n                    .validate(internalValue)\n                    .then(() => {\n                        setError(undefined);\n                        if (onValueChange) {\n                            onValueChange({\n                                value: internalValue,\n                                name,\n                                setError,\n                                setSaved\n                            });\n                        }\n                    })\n                    .catch((e) => {\n                        console.error(e);\n                        setError(e);\n                    });\n            }\n        },\n        [internalValue]\n    );\n\n    const updateValue = useCallback(\n        (newValue: any | null) => {\n\n            let updatedValue: any;\n            if (newValue === undefined) {\n                updatedValue = null;\n            } else {\n                updatedValue = newValue;\n            }\n            setInternalValue(updatedValue);\n        },\n        []\n    );\n\n    let innerComponent: JSX.Element | undefined;\n    let allowScroll = false;\n    let showExpandIcon = false;\n    let removePadding = false;\n    let fullHeight = false;\n\n    if (!readOnly && !customField && (!customPreview || selected)) {\n        const isAStorageProperty = (property.dataType === \"string\" && (property as StringProperty).config?.storageMeta) ||\n            (property.dataType === \"array\" && (property as ArrayProperty).of?.dataType === \"string\" && ((property as ArrayProperty).of as StringProperty)?.config?.storageMeta);\n        if (isAStorageProperty) {\n            innerComponent = <TableStorageUpload error={error}\n                                                 disabled={disabled}\n                                                 focused={focused}\n                                                 property={property as StringProperty | ArrayProperty<string[]>}\n                                                 entityId={entityId}\n                                                 entityValues={entityValues}\n                                                 internalValue={internalValue}\n                                                 previewSize={getPreviewSizeFrom(size)}\n                                                 updateValue={updateValue}\n                                                 name={name as string}\n                                                 onBlur={onBlur}\n                                                 setPreventOutsideClick={setPreventOutsideClick}\n            />;\n            showExpandIcon = true;\n            fullHeight = true;\n            removePadding = true;\n        } else if (selected && property.dataType === \"number\") {\n            const numberProperty = property as NumberProperty;\n            if (numberProperty.config?.enumValues) {\n                innerComponent = <TableSelect name={name as string}\n                                              multiple={false}\n                                              disabled={disabled}\n                                              focused={focused}\n                                              valueType={\"number\"}\n                                              small={getPreviewSizeFrom(size) !== \"regular\"}\n                                              enumValues={numberProperty.config.enumValues}\n                                              error={error}\n                                              onBlur={onBlur}\n                                              internalValue={internalValue as string | number}\n                                              updateValue={updateValue}\n                                              setPreventOutsideClick={setPreventOutsideClick}\n                />;\n            } else {\n                innerComponent = <NumberTableInput\n                    align={align}\n                    error={error}\n                    focused={focused}\n                    disabled={disabled}\n                    onBlur={onBlur}\n                    value={internalValue as number}\n                    updateValue={updateValue}\n                />;\n                allowScroll = true;\n            }\n        } else if (selected && property.dataType === \"string\") {\n            const stringProperty = property as StringProperty;\n            if (stringProperty.config?.enumValues) {\n                innerComponent = <TableSelect name={name as string}\n                                              multiple={false}\n                                              focused={focused}\n                                              disabled={disabled}\n                                              valueType={\"string\"}\n                                              small={getPreviewSizeFrom(size) !== \"regular\"}\n                                              enumValues={stringProperty.config.enumValues}\n                                              error={error}\n                                              onBlur={onBlur}\n                                              internalValue={internalValue as string | number}\n                                              updateValue={updateValue}\n                                              setPreventOutsideClick={setPreventOutsideClick}\n                />;\n            } else if (!stringProperty.config?.storageMeta && !stringProperty.config?.markdown) {\n                const multiline = !!stringProperty.config?.multiline;\n                innerComponent = <TableInput error={error}\n                                             disabled={disabled}\n                                             multiline={multiline}\n                                             focused={focused}\n                                             value={internalValue as string}\n                                             updateValue={updateValue}\n                />;\n                allowScroll = true;\n            }\n        } else if (property.dataType === \"boolean\") {\n            innerComponent = <TableSwitch error={error}\n                                          disabled={disabled}\n                                          focused={focused}\n                                          internalValue={internalValue as boolean}\n                                          updateValue={updateValue}\n            />;\n        } else if (property.dataType === \"timestamp\") {\n            innerComponent = <TableDateField name={name as string}\n                                             error={error}\n                                             disabled={disabled}\n                                             focused={focused}\n                                             internalValue={internalValue as Date}\n                                             updateValue={updateValue}\n                                             setPreventOutsideClick={setPreventOutsideClick}\n            />;\n            allowScroll = true;\n        } else if (property.dataType === \"reference\") {\n            if (typeof property.path === \"string\") {\n                innerComponent = <TableReferenceField name={name as string}\n                                                      internalValue={internalValue as EntityReference}\n                                                      updateValue={updateValue}\n                                                      disabled={disabled}\n                                                      size={size}\n                                                      property={property as ReferenceProperty}\n                                                      setPreventOutsideClick={setPreventOutsideClick}\n                />;\n            }\n            allowScroll = true;\n        } else if (property.dataType === \"array\") {\n            const arrayProperty = (property as ArrayProperty);\n            if (arrayProperty.of) {\n                if (arrayProperty.of.dataType === \"string\" || arrayProperty.of.dataType === \"number\") {\n                    if (selected && arrayProperty.of.config?.enumValues) {\n                        innerComponent = <TableSelect name={name as string}\n                                                      multiple={true}\n                                                      disabled={disabled}\n                                                      focused={focused}\n                                                      small={getPreviewSizeFrom(size) !== \"regular\"}\n                                                      valueType={arrayProperty.of.dataType}\n                                                      enumValues={arrayProperty.of.config.enumValues}\n                                                      error={error}\n                                                      onBlur={onBlur}\n                                                      internalValue={internalValue as string | number}\n                                                      updateValue={updateValue}\n                                                      setPreventOutsideClick={setPreventOutsideClick}\n                        />;\n                        allowScroll = true;\n                    }\n                } else if (arrayProperty.of.dataType === \"reference\") {\n                    if (typeof arrayProperty.of.path === \"string\") {\n                        innerComponent =\n                            <TableReferenceField name={name as string}\n                                                 disabled={disabled}\n                                                 internalValue={internalValue as EntityReference[]}\n                                                 updateValue={updateValue}\n                                                 size={size}\n                                                 property={property as ArrayProperty}\n                                                 setPreventOutsideClick={setPreventOutsideClick}\n                            />;\n                    }\n                    allowScroll = false;\n                }\n            }\n\n            if (!arrayProperty.of && !arrayProperty.oneOf) {\n                throw Error(`You need to specify an 'of' or 'oneOf' prop (or specify a custom field) in your array property ${name}`);\n            }\n        }\n    }\n\n    if (!innerComponent) {\n        allowScroll = false;\n        showExpandIcon = selected && !innerComponent && !disabled && !readOnly;\n        innerComponent = (\n            <ErrorBoundary>\n                <PreviewComponent\n                    width={width}\n                    height={height}\n                    name={name as string}\n                    value={internalValue}\n                    property={property}\n                    size={getPreviewSizeFrom(size)}\n                />\n            </ErrorBoundary>\n        );\n    }\n\n    return (\n        <TableCell\n            select={select}\n            selected={selected}\n            focused={focused}\n            disabled={disabled || readOnly}\n            disabledTooltip={disabledTooltip ?? \"Disabled\"}\n            removePadding={removePadding}\n            fullHeight={fullHeight}\n            size={size}\n            saved={saved}\n            error={error}\n            align={align}\n            allowScroll={allowScroll}\n            showExpandIcon={showExpandIcon}\n            openPopup={!disabled ? openPopup : undefined}\n            value={internalValue}\n        >\n\n            {innerComponent}\n\n        </TableCell>\n    );\n\n};\n\nexport const PropertyTableCell = React.memo<PropertyTableCellProps<any> & CellStyleProps>(PropertyTableCellInternal, areEqual) as React.FunctionComponent<PropertyTableCellProps<any> & CellStyleProps>;\n\nfunction areEqual(prevProps: PropertyTableCellProps<any> & CellStyleProps, nextProps: PropertyTableCellProps<any> & CellStyleProps) {\n    return prevProps.selected === nextProps.selected &&\n        prevProps.focused === nextProps.selected &&\n        prevProps.height === nextProps.height &&\n        prevProps.size === nextProps.size &&\n        prevProps.align === nextProps.align &&\n        prevProps.width === nextProps.width &&\n        isEqual(prevProps.property, nextProps.property) &&\n        isEqual(prevProps.value, nextProps.value)\n        ;\n}\n\n","import React, { useEffect } from \"react\";\n\ninterface DraggableProps {\n    containerRef: React.RefObject<HTMLDivElement>,\n    ref: React.RefObject<HTMLDivElement>,\n    x?: number;\n    y?: number;\n    onMove: (x: number, y: number) => void,\n}\n\nexport function useDraggable({\n                                 containerRef,\n                                 ref,\n                                 x,\n                                 y,\n                                 onMove\n                             }: DraggableProps) {\n\n\n    let relX = 0;\n    let relY = 0;\n\n\n    const onMouseDown = (event: any) => {\n        if (event.button !== 0 || !ref.current || event.target !== ref.current) {\n            return;\n        }\n\n        const { x, y } = ref.current.getBoundingClientRect();\n\n        relX = event.screenX - x;\n        relY = event.screenY - y;\n        document.addEventListener(\"mousemove\", onMouseMove);\n        document.addEventListener(\"mouseup\", onMouseUp);\n        event.stopPropagation();\n    };\n\n    const onMouseUp = (event: any) => {\n        document.removeEventListener(\"mousemove\", onMouseMove);\n        document.removeEventListener(\"mouseup\", onMouseUp);\n        event.stopPropagation();\n    };\n\n    const onMouseMove = (event: any) => {\n        onMove(\n            event.screenX - relX,\n            event.screenY - relY\n        );\n        event.stopPropagation();\n    };\n\n    const update = () => {\n        if (containerRef.current) {\n            containerRef.current.style.top = `${y}px`;\n            containerRef.current.style.left = `${x}px`;\n        }\n    };\n\n    useEffect(() => {\n        const current = ref.current;\n        if (current)\n            current.addEventListener(\"mousedown\", onMouseDown);\n        update();\n        return () => {\n            if (current)\n                current.removeEventListener(\"mousedown\", onMouseDown);\n        };\n    });\n\n}\n","import { useLayoutEffect, useState } from \"react\";\n\ninterface WindowSize {\n    width: number,\n    height: number\n}\n\nexport function useWindowSize(): WindowSize {\n    const [size, setSize] = useState<WindowSize>({ width: 0, height: 0 });\n    useLayoutEffect(() => {\n        function updateSize() {\n            setSize({ width: window.innerWidth, height: window.innerHeight });\n        }\n\n        window.addEventListener(\"resize\", updateSize);\n        updateSize();\n        return () => window.removeEventListener(\"resize\", updateSize);\n    }, []);\n    return size;\n}\n","import React, { useEffect, useMemo, useRef, useState } from \"react\";\nimport { FieldArray } from \"formik\";\n\nimport { Box, Button, IconButton } from \"@mui/material\";\n\nimport ClearIcon from \"@mui/icons-material/Clear\";\nimport DragHandleIcon from \"@mui/icons-material/DragHandle\";\nimport { DragDropContext, Draggable, Droppable } from \"react-beautiful-dnd\";\nimport { getHashValue } from \"../../core/util/objects\";\n\n\ninterface ArrayContainerProps<T> {\n    value: T[];\n    name: string;\n    buildEntry: (index: number, internalId: number) => React.ReactNode;\n    disabled: boolean;\n    onInternalIdAdded?: (id: number) => void;\n    includeAddButton?: boolean;\n}\n\n/**\n * @category Form custom fields\n */\nexport function ArrayContainer<T>({\n                                      name,\n                                      value,\n                                      disabled,\n                                      buildEntry,\n                                      onInternalIdAdded,\n                                      includeAddButton\n                                  }: ArrayContainerProps<T>) {\n\n    const hasValue = value && Array.isArray(value) && value.length > 0;\n\n    const internalIdsMap: Record<string, number> = useMemo(() =>\n            hasValue\n                ? value.map((v, index) => {\n                    if (!v) return {};\n                    return ({\n                        [getHashValue(v) + index]: getRandomId()\n                    });\n                }).reduce((a, b) => ({ ...a, ...b }), {})\n                : {},\n        [value, hasValue]);\n    const internalIdsRef = useRef<Record<string, number>>(internalIdsMap);\n\n    const [internalIds, setInternalIds] = useState<number[]>(\n        hasValue\n            ? Object.values(internalIdsRef.current)\n            : []);\n\n    useEffect(() => {\n        if (hasValue && value && value.length !== internalIds.length) {\n            const newInternalIds = value.map((v, index) => {\n                const hashValue = getHashValue(v) + index;\n                if (hashValue in internalIdsRef.current) {\n                    return internalIdsRef.current[hashValue];\n                } else {\n                    const newInternalId = getRandomId();\n                    internalIdsRef.current[hashValue] = newInternalId;\n                    return newInternalId;\n                }\n            });\n            setInternalIds(newInternalIds);\n        }\n    }, [hasValue, internalIds.length, value]);\n\n\n    return <FieldArray\n        name={name}\n        validateOnChange={true}\n        render={arrayHelpers => {\n\n            const insertInEnd = () => {\n                if (disabled) return;\n                const id = getRandomId();\n                const newIds: number[] = [...internalIds, id];\n                if (onInternalIdAdded)\n                    onInternalIdAdded(id);\n                setInternalIds(newIds);\n                arrayHelpers.push(null);\n            };\n\n            const remove = (index: number) => {\n                const newValue = [...internalIds];\n                newValue.splice(index, 1);\n                setInternalIds(newValue);\n                arrayHelpers.remove(index);\n            };\n\n            const onDragEnd = (result: any) => {\n                // dropped outside the list\n                if (!result.destination) {\n                    return;\n                }\n                const sourceIndex = result.source.index;\n                const destinationIndex = result.destination.index;\n\n                const newIds = [...internalIds];\n                const temp = newIds[sourceIndex];\n                newIds[sourceIndex] = newIds[destinationIndex];\n                newIds[destinationIndex] = temp;\n                setInternalIds(newIds);\n\n                arrayHelpers.move(sourceIndex, destinationIndex);\n            }\n\n            return (\n                <DragDropContext onDragEnd={onDragEnd}>\n                    <Droppable droppableId={`droppable_${name}`}>\n                        {(droppableProvided, droppableSnapshot) => (\n                            <div\n                                {...droppableProvided.droppableProps}\n                                ref={droppableProvided.innerRef}>\n                                {hasValue && internalIds.map((internalId: number, index: number) => {\n                                    return (\n                                        <Draggable\n                                            key={`array_field_${name}_${internalId}}`}\n                                            draggableId={`array_field_${name}_${internalId}}`}\n                                            isDragDisabled={disabled}\n                                            index={index}>\n                                            {(provided, snapshot) => (\n\n                                                <Box\n                                                    ref={provided.innerRef}\n                                                    {...provided.draggableProps}\n                                                    style={\n                                                        provided.draggableProps.style\n                                                    }\n                                                    sx={{\n                                                        marginBottom: 1,\n                                                        borderRadius: \"4px\",\n                                                        opacity: 1\n                                                    }}\n                                                >\n                                                    <Box key={`field_${index}`}\n                                                         display=\"flex\">\n                                                        <Box flexGrow={1}\n                                                             width={\"100%\"}\n                                                             key={`field_${name}_entryValue`}>\n                                                            {buildEntry(index, internalId)}\n                                                        </Box>\n                                                        <Box width={\"36px\"}\n                                                             display=\"flex\"\n                                                             flexDirection=\"column\"\n                                                             alignItems=\"center\">\n                                                            <div\n                                                                {...provided.dragHandleProps}>\n                                                                <DragHandleIcon\n                                                                    fontSize={\"small\"}\n                                                                    color={disabled ? \"disabled\" : \"inherit\"}\n                                                                    sx={{ cursor: disabled ? \"inherit\" : \"move\" }}/>\n                                                            </div>\n                                                            {!disabled &&\n                                                            <IconButton\n                                                                size=\"small\"\n                                                                aria-label=\"remove\"\n                                                                onClick={() => remove(index)}>\n                                                                <ClearIcon\n                                                                    fontSize={\"small\"}/>\n                                                            </IconButton>}\n                                                        </Box>\n                                                    </Box>\n                                                </Box>\n                                            )}\n                                        </Draggable>);\n                                })}\n\n                                {droppableProvided.placeholder}\n\n                                {includeAddButton && !disabled && <Box p={1}\n                                                                       justifyContent=\"center\"\n                                                                       textAlign={\"left\"}>\n                                    <Button variant=\"outlined\"\n                                            color=\"primary\"\n                                            disabled={disabled}\n                                            onClick={insertInEnd}>\n                                        Add\n                                    </Button>\n                                </Box>}\n                            </div>\n                        )}\n                    </Droppable>\n                </DragDropContext>\n            );\n        }}\n    />;\n}\n\n\nfunction getRandomId() {\n    return Math.floor(Math.random() * Math.floor(Number.MAX_SAFE_INTEGER));\n}\n","import React from \"react\";\nimport { CMSType, Property } from \"../../models\";\n\nimport {\n    Box,\n    FormHelperText,\n    IconButton,\n    Tooltip,\n    Typography\n} from \"@mui/material\";\nimport InfoIcon from \"@mui/icons-material/InfoOutlined\";\n\ninterface FieldDescriptionPopoverProps<T extends CMSType> {\n    property: Property<T>,\n}\n\n/**\n * Render the field description for a property\n * @category Form custom fields\n */\nexport function FieldDescription<T extends CMSType>({ property }: FieldDescriptionPopoverProps<T>) {\n    const disabledTooltip: string | undefined = typeof property.disabled === \"object\" ? property.disabled.disabledMessage : undefined;\n    return (\n\n        // <FormHelperText>{disabledTooltip ? disabledTooltip : property.description}</FormHelperText>\n        <Box display=\"flex\">\n\n            <Box flexGrow={1}>\n                <FormHelperText>{disabledTooltip || property.description}</FormHelperText>\n            </Box>\n\n            {property.longDescription &&\n            <Tooltip title={\n                <Typography\n                    variant={\"caption\"}>{property.longDescription}</Typography>\n            }\n                     placement=\"bottom-start\"\n                     arrow>\n                <IconButton\n                    edge={\"start\"}\n                    size={\"small\"}>\n\n                    <InfoIcon color={\"disabled\"}\n                              fontSize={\"small\"}/>\n                </IconButton>\n            </Tooltip>}\n\n        </Box>\n    );\n}\n","import React from \"react\";\nimport { Property } from \"../../models\";\nimport { getIconForProperty } from \"../../core/util/property_icons\";\n\ninterface LabelWithIconProps {\n    property: Property<any>,\n}\n\n/**\n * Render the label of a form field for a given property, with the corresponding\n * icon\n * @category Form custom fields\n */\nexport function LabelWithIcon({\n                                  property\n                              }: LabelWithIconProps) {\n\n    return (\n        <>\n            <span style={{ paddingRight: \"12px\" }}>\n                {getIconForProperty(property)}\n            </span>\n            <span>{property.title}</span>\n        </>\n    );\n}\n","import React from \"react\";\nimport {\n    FormControl,\n    FormHelperText,\n    InputLabel,\n    MenuItem,\n    Select as MuiSelect,\n    Theme\n} from \"@mui/material\";\n\nimport { EnumType, EnumValues, FieldProps } from \"../../models\";\nimport { FieldDescription } from \"../../form\";\nimport { LabelWithIcon } from \"../components\";\nimport { useClearRestoreValue } from \"../../hooks\";\nimport {\n    enumToObjectEntries,\n    isEnumValueDisabled\n} from \"../../core/util/enums\";\nimport { EnumValuesChip } from \"../../preview/components/CustomChip\";\n\nimport createStyles from \"@mui/styles/createStyles\";\nimport makeStyles from \"@mui/styles/makeStyles\";\n\nconst formStyles = makeStyles((theme: Theme) => createStyles({\n    inputLabel: {\n        marginTop: theme.spacing(1 / 2),\n        marginLeft: theme.spacing(1 / 2)\n    },\n    shrinkInputLabel: {\n        marginTop: \"-2px\",\n        marginLeft: theme.spacing(1 / 2)\n    }\n}))\n\ntype SelectProps<T extends EnumType> = FieldProps<T>;\n\n/**\n * If `enumValues` are set in the string config, this field renders a select\n * where each option is a colored chip.\n *\n * This is one of the internal components that get mapped natively inside forms\n * and tables to the specified properties.\n * @category Form fields\n */\nexport function Select<T extends EnumType>({\n                                               name,\n                                               value,\n                                               setValue,\n                                               error,\n                                               showError,\n                                               disabled,\n                                               autoFocus,\n                                               touched,\n                                               property,\n                                               includeDescription,\n                                               shouldAlwaysRerender\n                                           }: SelectProps<T>) {\n\n    const classes = formStyles();\n    const enumValues = property.config?.enumValues as EnumValues;\n\n    useClearRestoreValue({\n        property,\n        value,\n        setValue\n    });\n\n    return (\n        <FormControl\n            variant=\"filled\"\n            fullWidth\n            required={property.validation?.required}\n            error={showError}\n            disabled={disabled}\n        >\n\n            <InputLabel id={`${name}-select-label`}\n                        classes={{\n                            root: classes.inputLabel,\n                            shrink: classes.shrinkInputLabel\n                        }}>\n                <LabelWithIcon property={property}/>\n            </InputLabel>\n\n            <MuiSelect\n                sx={{\n                    minHeight: \"64px\"\n                }}\n                variant={\"filled\"}\n                labelId={`${name}-select-label`}\n                autoFocus={autoFocus}\n                value={value !== undefined ? value : \"\"}\n                disabled={disabled}\n                onChange={(evt: any) => {\n                    const eventValue = evt.target.value;\n                    const newValue = eventValue\n                        ? (property.dataType === \"number\" ? parseFloat(eventValue) : eventValue)\n                        : null;\n\n                    return setValue(newValue);\n                }}\n                renderValue={(enumKey: any) => {\n                    return <EnumValuesChip\n                        enumKey={enumKey}\n                        enumValues={enumValues}\n                        small={false}/>;\n                }\n                }>\n\n                {enumToObjectEntries(enumValues)\n                    .map(([enumKey, labelOrConfig]) => {\n                        return (\n                            <MenuItem key={`select_${name}_${enumKey}`}\n                                      value={enumKey}\n                                      disabled={isEnumValueDisabled(labelOrConfig)}>\n                                <EnumValuesChip\n                                    enumKey={enumKey}\n                                    enumValues={enumValues}\n                                    small={true}/>\n                            </MenuItem>\n                        );\n                    })}\n            </MuiSelect>\n\n            {includeDescription &&\n            <FieldDescription property={property}/>}\n\n            {showError && <FormHelperText>{error}</FormHelperText>}\n\n        </FormControl>\n    );\n}\n","import React from \"react\";\nimport {\n    Checkbox,\n    FormControl,\n    FormHelperText,\n    InputLabel,\n    ListItemText,\n    MenuItem,\n    Select as MuiSelect,\n    Theme\n} from \"@mui/material\";\nimport { EnumType, FieldProps } from \"../../models\";\nimport { FieldDescription } from \"../../form\";\nimport { LabelWithIcon } from \"../components\";\nimport { useClearRestoreValue } from \"../../hooks\";\nimport {\n    enumToObjectEntries,\n    isEnumValueDisabled\n} from \"../../core/util/enums\";\nimport { EnumValuesChip } from \"../../preview/components/CustomChip\";\n\nimport { ArrayEnumPreview } from \"../../preview\";\n\nimport createStyles from \"@mui/styles/createStyles\";\nimport makeStyles from \"@mui/styles/makeStyles\";\n\nconst formStyles = makeStyles((theme: Theme) => createStyles({\n    inputLabel: {\n        marginTop: theme.spacing(1 / 2),\n        marginLeft: theme.spacing(1 / 2)\n    },\n    shrinkInputLabel: {\n        marginTop: \"-2px\",\n        marginLeft: theme.spacing(1 / 2)\n    }\n}));\n\n/**\n * This fields renders a dropdown with multiple selection.\n *\n * This is one of the internal components that get mapped natively inside forms\n * and tables to the specified properties.\n * @category Form fields\n */\nexport function ArrayEnumSelect({\n                                    name,\n                                    value,\n                                    setValue,\n                                    error,\n                                    showError,\n                                    disabled,\n                                    property,\n                                    includeDescription,\n                                    autoFocus\n                                }: FieldProps<EnumType[]>) {\n\n    const classes = formStyles();\n\n    if (!property.of) {\n        throw Error(\"Using wrong component ArrayEnumSelect\");\n    }\n\n    if (property.of.dataType !== \"string\" && property.of.dataType !== \"number\") {\n        throw Error(\"Field misconfiguration: array field of type string or number\");\n    }\n\n    const enumValues = property.of.config?.enumValues;\n    if (!enumValues) {\n        console.error(property);\n        throw Error(\"Field misconfiguration: array field of type string or number needs to have enumValues\");\n    }\n    useClearRestoreValue({\n        property,\n        value,\n        setValue\n    });\n\n    const validValue = !!value && Array.isArray(value);\n    return (\n        <FormControl\n            variant=\"filled\"\n            fullWidth\n            required={property.validation?.required}\n            error={showError}\n        >\n\n            <InputLabel id={`${name}-multiselect-label`}\n                        classes={{\n                            root: classes.inputLabel,\n                            shrink: classes.shrinkInputLabel\n                        }}>\n                <LabelWithIcon property={property}/>\n            </InputLabel>\n\n            <MuiSelect\n                multiple\n                sx={{\n                    minHeight: \"64px\"\n                }}\n                variant={\"filled\"}\n                labelId={`${name}-multiselect-label`}\n                value={validValue ? value.map(v => v.toString()) : []}\n                autoFocus={autoFocus}\n                disabled={disabled}\n                onChange={(evt: any) => {\n                    let newValue;\n                    if (property.of?.dataType === \"number\")\n                        newValue = evt.target.value ? evt.target.value.map((e: any) => parseFloat(e)) : [];\n                    else\n                        newValue = evt.target.value;\n                    return setValue(\n                        newValue\n                    );\n                }}\n                renderValue={(selected: any) => (\n                    <ArrayEnumPreview value={selected}\n                                      name={name}\n                                      enumValues={enumValues}\n                                      size={\"regular\"}/>\n                )}>\n\n                {enumToObjectEntries(enumValues)\n                    .map(([enumKey, labelOrConfig]) => {\n                        const checked = validValue && value.map(v => v.toString()).includes(enumKey.toString());\n                        return (\n                            <MenuItem key={`form-select-${name}-${enumKey}`}\n                                      value={enumKey}\n                                      disabled={isEnumValueDisabled(labelOrConfig)}\n                                      dense={true}>\n                                <Checkbox checked={checked}/>\n                                <ListItemText primary={\n                                    <EnumValuesChip\n                                        enumKey={enumKey}\n                                        enumValues={enumValues}\n                                        small={true}/>\n                                }/>\n                            </MenuItem>\n                        );\n                    })}\n            </MuiSelect>\n\n            {includeDescription &&\n            <FieldDescription property={property}/>}\n\n            {showError && <FormHelperText>{error}</FormHelperText>}\n\n        </FormControl>\n    );\n}\n","import * as React from \"react\";\nimport { useCallback } from \"react\";\n\nimport isEqual from \"react-fast-compare\";\nimport {\n    Box,\n    FormControl,\n    FormHelperText,\n    IconButton,\n    Paper,\n    Skeleton,\n    Theme,\n    Typography\n} from \"@mui/material\";\n\nimport makeStyles from \"@mui/styles/makeStyles\";\n\nimport {\n    ArrayProperty,\n    FieldProps,\n    Property,\n    StorageMeta,\n    StringProperty\n} from \"../../models\";\nimport { useDropzone } from \"react-dropzone\";\nimport ClearIcon from \"@mui/icons-material/Clear\";\nimport { PreviewComponent, PreviewSize } from \"../../preview\";\nimport { FieldDescription } from \"../../form\";\nimport { LabelWithIcon } from \"../components\";\nimport { ErrorBoundary } from \"../../core/internal/ErrorBoundary\";\n\nimport clsx from \"clsx\";\nimport {\n    useClearRestoreValue,\n    useSnackbarController,\n    useStorageSource\n} from \"../../hooks\";\nimport { isReadOnly } from \"../../core/utils\";\nimport { DragDropContext, Draggable, Droppable } from \"react-beautiful-dnd\";\n\nconst useStyles = makeStyles((theme: Theme) => ({\n    dropZone: {\n        position: \"relative\",\n        paddingTop: \"2px\",\n        border: \"2px solid transparent\",\n        minHeight: \"254px\",\n        outline: 0,\n        borderTopLeftRadius: \"2px\",\n        borderTopRightRadius: \"2px\",\n        backgroundColor: theme.palette.mode === \"light\" ? \"rgba(0, 0, 0, 0.06)\" : \"rgba(255, 255, 255, 0.09)\",\n        borderBottom: theme.palette.mode === \"light\" ? \"1px solid rgba(0, 0, 0, 0.42)\" : \"1px solid rgba(255, 255, 255, 0.7)\",\n        boxSizing: \"border-box\",\n        transition: \"border-bottom-color 200ms cubic-bezier(0.4, 0, 0.2, 1) 0ms\",\n        \"&:focus\": {\n            borderBottom: `2px solid ${theme.palette.primary.main}`\n        }\n    },\n    disabled: {\n        backgroundColor: \"rgba(0, 0, 0, 0.12)\",\n        color: theme.palette.mode === \"light\" ? \"rgba(0, 0, 0, 0.38)\" : \"rgba(255, 255, 255, 0.38)\",\n        borderBottom: `1px dotted ${theme.palette.grey[400]}`\n    },\n    nonActiveDrop: {\n        \"&:hover\": {\n            backgroundColor: theme.palette.mode === \"light\" ? \"rgba(0, 0, 0, 0.09)\" : \"rgba(255, 255, 255, 0.13)\"\n        }\n    },\n    activeDrop: {\n        paddingTop: \"0px\",\n        boxSizing: \"border-box\",\n        border: \"2px solid\"\n    },\n    acceptDrop: {\n        transition: \"background-color 200ms cubic-bezier(0.0, 0, 0.2, 1) 0ms\",\n        background: \"repeating-linear-gradient( 45deg, rgba(0, 0, 0, 0.09), rgba(0, 0, 0, 0.09) 10px, rgba(0, 0, 0, 0.12) 10px, rgba(0, 0, 0, 0.12) 20px) !important\",\n        border: \"2px solid\",\n        borderColor: theme.palette.success.light\n    },\n    rejectDrop: {\n        border: \"2px solid\",\n        borderColor: theme.palette.error.light\n    },\n    uploadItem: {\n        padding: theme.spacing(1),\n        minWidth: 220,\n        minHeight: 220\n    },\n    uploadItemSmall: {\n        padding: theme.spacing(1),\n        minWidth: 118,\n        minHeight: 118,\n        boxSizing: \"border-box\"\n    },\n    thumbnailCloseIcon: {\n        position: \"absolute\",\n        borderRadius: \"9999px\",\n        top: -8,\n        right: -8,\n        zIndex: 100,\n        backgroundColor: theme.palette.background.paper\n    }\n}));\n\ntype StorageUploadFieldProps = FieldProps<string | string[]>;\n\n/**\n * Field that allows to upload files to Google Cloud Storage.\n *\n * This is one of the internal components that get mapped natively inside forms\n * and tables to the specified properties.\n * @category Form fields\n */\nexport function StorageUploadField({\n                                       name,\n                                       value,\n                                       setValue,\n                                       error,\n                                       showError,\n                                       autoFocus,\n                                       tableMode,\n                                       property,\n                                       includeDescription,\n                                       context,\n                                       isSubmitting\n                                   }: StorageUploadFieldProps) {\n\n    const multipleFilesSupported = property.dataType === \"array\";\n    const disabled = isReadOnly(property) || !!property.disabled || isSubmitting;\n\n    const internalValue = multipleFilesSupported\n        ? (Array.isArray(value) ? value : [])\n        : value;\n\n    useClearRestoreValue<string | string[]>({\n        property,\n        value,\n        setValue\n    });\n\n    const storageMeta: StorageMeta | undefined = property.dataType === \"string\"\n? property.config?.storageMeta\n        : property.dataType === \"array\" &&\n        (property.of as Property).dataType === \"string\"\n? (property.of as StringProperty).config?.storageMeta\n            : undefined;\n\n    if (!storageMeta)\n        throw Error(\"Storage meta must be specified\");\n\n    const fileNameBuilder = (file: File) => {\n        if (storageMeta.fileName) {\n            const fileName = storageMeta.fileName({\n                entityId: context.entityId,\n                values: context.values,\n                property,\n                file,\n                storageMeta,\n                name\n            });\n\n            if (!fileName || fileName.length === 0) {\n                throw Error(\"You need to return a valid filename\");\n            }\n            return fileName;\n        }\n        return file.name;\n    };\n\n    const storagePathBuilder = (file: File) => {\n        if (typeof storageMeta.storagePath === \"string\")\n            return storageMeta.storagePath;\n\n        if (typeof storageMeta.storagePath === \"function\") {\n            const storagePath = storageMeta.storagePath({\n                entityId: context.entityId,\n                values: context.values,\n                property,\n                file,\n                storageMeta,\n                name\n            });\n\n            if (!storagePath || storagePath.length === 0) {\n                throw Error(\"You need to return a valid filename\");\n            }\n            return storagePath;\n        }\n        console.warn(\"When using a storage property, if you don't specify the storagePath, the root storage is used\");\n        return \"/\";\n    };\n\n    return (\n\n            <FormControl fullWidth\n                         required={property.validation?.required}\n                         error={showError}>\n\n                {!tableMode &&\n                <FormHelperText filled\n                                required={property.validation?.required}>\n                    <LabelWithIcon property={property}/>\n                </FormHelperText>}\n\n                <StorageUpload\n                    value={internalValue}\n                    name={name}\n                    disabled={disabled}\n                    autoFocus={autoFocus}\n                    property={property}\n                    onChange={(newValue) => {\n                        setValue(newValue);\n                    }}\n                    fileNameBuilder={fileNameBuilder}\n                    storagePathBuilder={storagePathBuilder}\n                    storageMeta={storageMeta}\n                    multipleFilesSupported={multipleFilesSupported}/>\n\n                {includeDescription &&\n                <FieldDescription property={property as any}/>}\n\n                {showError && <FormHelperText>{error}</FormHelperText>}\n\n            </FormControl>\n    );\n}\n\n/**\n * Internal representation of an item in the storage\n * It can have two states, having a storagePathOrDownloadUrl set,\n * which means the file has\n * been uploaded and it is rendered as a preview\n * Or have a pending file being uploaded.\n */\ninterface StorageFieldItem {\n    id: number; // generated on the fly for internal use only\n    storagePathOrDownloadUrl?: string;\n    file?: File;\n    fileName?: string;\n    metadata?: any,\n    size: PreviewSize\n}\n\ninterface StorageUploadProps {\n    value: string | string[];\n    name: string;\n    property: StringProperty | ArrayProperty<string[]>;\n    onChange: (value: string | string[] | null) => void;\n    multipleFilesSupported: boolean;\n    autoFocus: boolean;\n    disabled: boolean;\n    storageMeta: StorageMeta;\n    fileNameBuilder: (file: File) => string;\n    storagePathBuilder: (file: File) => string;\n}\n\nfunction FileDropComponent({\n                               storageMeta,\n                               disabled,\n                               isDraggingOver,\n                               onExternalDrop,\n                               multipleFilesSupported,\n                               droppableProvided,\n                               autoFocus,\n                               internalValue,\n                               property,\n                               onClear,\n                               metadata,\n                               storagePathBuilder,\n                               onFileUploadComplete,\n                               size,\n                               name,\n                               helpText\n                           }: {\n    storageMeta: StorageMeta,\n    disabled: boolean,\n    isDraggingOver: boolean,\n    droppableProvided: any,\n    onExternalDrop: (acceptedFiles: File[]) => void,\n    multipleFilesSupported: boolean,\n    autoFocus: boolean,\n    internalValue: StorageFieldItem[],\n    property: StringProperty | ArrayProperty<string[]>,\n    onClear: (clearedStoragePathOrDownloadUrl: string) => void,\n    metadata: any,\n    storagePathBuilder: (file: File) => string,\n    onFileUploadComplete: (uploadedPath: string, entry: StorageFieldItem, fileMetadata?: any) => Promise<void>,\n    size: PreviewSize,\n    name: string,\n    helpText: string\n}) {\n\n    const classes = useStyles();\n    const {\n        getRootProps,\n        getInputProps,\n        isDragActive,\n        isDragAccept,\n        isDragReject\n    } = useDropzone({\n            accept: storageMeta.acceptedFiles,\n            disabled: disabled || isDraggingOver,\n            noDragEventsBubbling: true,\n            onDrop: onExternalDrop\n        }\n    );\n\n    return (\n        <Box\n            {...getRootProps()}\n            className={clsx(classes.dropZone, {\n                [classes.nonActiveDrop]: !isDragActive,\n                [classes.activeDrop]: isDragActive,\n                [classes.rejectDrop]: isDragReject,\n                [classes.acceptDrop]: isDragAccept,\n                [classes.disabled]: disabled\n            })}\n            sx={{\n                display: multipleFilesSupported && internalValue.length ? undefined : \"flex\",\n                alignItems: \"center\"\n            }}\n        >\n            <Box\n                {...droppableProvided.droppableProps}\n                ref={droppableProvided.innerRef}\n                sx={{\n                    display: \"flex\",\n                    alignItems: \"center\",\n                    overflow: multipleFilesSupported && internalValue.length ? \"auto\" : undefined,\n                    minHeight: multipleFilesSupported && internalValue.length ? 180 : 250,\n                    p: 1,\n                    \"&::-webkit-scrollbar\": {\n                        display: \"none\"\n                    }\n                }}\n            >\n\n                <input\n                    autoFocus={autoFocus}\n                    {...getInputProps()} />\n\n                {internalValue.map((entry, index) => {\n                    let child: any;\n                    if (entry.storagePathOrDownloadUrl) {\n                        const renderProperty = multipleFilesSupported\n                            ? (property as ArrayProperty<string[]>).of as StringProperty\n                            : property as StringProperty;\n                        child = (\n                            <StorageItemPreview\n                                name={`storage_preview_${entry.storagePathOrDownloadUrl}`}\n                                property={renderProperty}\n                                disabled={disabled}\n                                value={entry.storagePathOrDownloadUrl}\n                                onClear={onClear}\n                                size={entry.size}/>\n                        );\n                    } else if (entry.file) {\n                        child = (\n                            <StorageUploadProgress\n                                entry={entry}\n                                metadata={metadata}\n                                storagePath={storagePathBuilder(entry.file)}\n                                onFileUploadComplete={onFileUploadComplete}\n                                size={size}\n                            />\n                        );\n                    }\n\n                    return (\n                        <Draggable\n                            key={`array_field_${name}_${entry.id}}`}\n                            draggableId={`array_field_${name}_${entry.id}}`}\n                            index={index}>\n                            {(provided, snapshot) => (\n                                <Box\n                                    ref={provided.innerRef}\n                                    {...provided.draggableProps}\n                                    {...provided.dragHandleProps}\n                                    style={\n                                        provided.draggableProps.style\n                                    }\n                                    sx={{\n                                        borderRadius: \"4px\"\n                                    }}\n                                >\n                                    {child}\n                                </Box>\n                            )}\n                        </Draggable>\n                    );\n                })\n                }\n\n                {droppableProvided.placeholder}\n\n\n            </Box>\n\n            <Box\n                sx={{\n                    flexGrow: 1,\n                    minHeight: 38,\n                    boxSizing: \"border-box\",\n                    m: 2\n                }}>\n                <Typography align={\"center\"}\n                            variant={\"body2\"}\n                            sx={(theme) => ({\n                                color: \"#838383\",\n                                fontWeight: theme.typography.fontWeightMedium\n                            })}>\n                    {helpText}\n                </Typography>\n            </Box>\n\n        </Box>\n    );\n}\n\nexport function StorageUpload({\n                                  property,\n                                  name,\n                                  value,\n                                  onChange,\n                                  multipleFilesSupported,\n                                  disabled,\n                                  autoFocus,\n                                  storageMeta,\n                                  fileNameBuilder,\n                                  storagePathBuilder\n                              }: StorageUploadProps) {\n\n    const storage = useStorageSource();\n\n    if (multipleFilesSupported) {\n        const arrayProperty = property as ArrayProperty<string[]>;\n        if (arrayProperty.of) {\n            if (arrayProperty.of.dataType !== \"string\") {\n                throw Error(\"Storage field using array must be of data type string\");\n            }\n        } else {\n            throw Error(\"Storage field using array must be of data type string\");\n        }\n    }\n\n    const metadata: any | undefined = storageMeta?.metadata;\n\n    const size = multipleFilesSupported ? \"small\" : \"regular\";\n\n    const internalInitialValue: StorageFieldItem[] =\n        (multipleFilesSupported\n            ? value as string[]\n            : [value as string]).map(entry => (\n            {\n                id: getRandomId(),\n                storagePathOrDownloadUrl: entry,\n                metadata: metadata,\n                size: size\n            }\n        ));\n\n    const [initialValue, setInitialValue] = React.useState<string | string[]>(value);\n    const [internalValue, setInternalValue] = React.useState<StorageFieldItem[]>(internalInitialValue);\n    const [hoveredIndex, setHoveredIndex] = React.useState<number | undefined>(undefined);\n\n    if (!isEqual(initialValue, value)) {\n        setInitialValue(value);\n        setInternalValue(internalInitialValue);\n    }\n\n    function getRandomId() {\n        return Math.floor(Math.random() * Math.floor(Number.MAX_SAFE_INTEGER));\n    }\n\n    const moveItem = (fromIndex: number, toIndex: number) => {\n        const newValue = [...internalValue];\n        const item = newValue[fromIndex];\n        newValue.splice(fromIndex, 1);\n        newValue.splice(toIndex, 0, item);\n        setInternalValue(newValue);\n        const fieldValue = newValue\n            .filter(e => !!e.storagePathOrDownloadUrl)\n            .map(e => e.storagePathOrDownloadUrl as string);\n        onChange(fieldValue);\n    };\n\n    const onDragEnd = (result: any) => {\n        // dropped outside the list\n        if (!result.destination) {\n            return;\n        }\n\n        moveItem(result.source.index, result.destination.index);\n\n    }\n\n    function removeDuplicates(items: StorageFieldItem[]) {\n        return items.filter(\n            (v, i) => {\n                return ((items.map((v) => v.storagePathOrDownloadUrl).indexOf(v.storagePathOrDownloadUrl) === i) || !v.storagePathOrDownloadUrl) &&\n                    ((items.map((v) => v.file).indexOf(v.file) === i) || !v.file);\n            }\n        );\n    }\n\n    const onExternalDrop = (acceptedFiles: File[]) => {\n\n        if (!acceptedFiles.length || disabled)\n            return;\n\n        let newInternalValue: StorageFieldItem[];\n        if (multipleFilesSupported) {\n            newInternalValue = [...internalValue,\n                ...(acceptedFiles.map(file => ({\n                    id: getRandomId(),\n                    file,\n                    fileName: fileNameBuilder(file),\n                    metadata,\n                    size: size\n                } as StorageFieldItem)))];\n        } else {\n            newInternalValue = [{\n                id: getRandomId(),\n                file: acceptedFiles[0],\n                fileName: fileNameBuilder(acceptedFiles[0]),\n                metadata,\n                size: size\n            }];\n        }\n\n        // Remove either storage path or file duplicates\n        newInternalValue = removeDuplicates(newInternalValue);\n        setInternalValue(newInternalValue);\n    };\n\n    const onFileUploadComplete = async (uploadedPath: string,\n                                        entry: StorageFieldItem,\n                                        metadata?: any) => {\n\n        console.debug(\"onFileUploadComplete\", uploadedPath, entry);\n\n        let uploadPathOrDownloadUrl = uploadedPath;\n        if (storageMeta.storeUrl) {\n            uploadPathOrDownloadUrl = await storage.getDownloadURL(uploadedPath);\n        }\n        if (storageMeta.postProcess) {\n            uploadPathOrDownloadUrl = await storageMeta.postProcess(uploadPathOrDownloadUrl);\n        }\n\n        let newValue: StorageFieldItem[];\n\n        entry.storagePathOrDownloadUrl = uploadPathOrDownloadUrl;\n        entry.metadata = metadata;\n        newValue = [...internalValue];\n\n        newValue = removeDuplicates(newValue);\n        setInternalValue(newValue);\n\n        const fieldValue = newValue\n            .filter(e => !!e.storagePathOrDownloadUrl)\n            .map(e => e.storagePathOrDownloadUrl as string);\n\n        if (multipleFilesSupported) {\n            onChange(fieldValue);\n        } else {\n            onChange(fieldValue ? fieldValue[0] : null);\n        }\n    };\n\n    const onClear = (clearedStoragePathOrDownloadUrl: string) => {\n        if (multipleFilesSupported) {\n            const newValue: StorageFieldItem[] = internalValue.filter(v => v.storagePathOrDownloadUrl !== clearedStoragePathOrDownloadUrl);\n            onChange(newValue.filter(v => !!v.storagePathOrDownloadUrl).map(v => v.storagePathOrDownloadUrl as string));\n            setInternalValue(newValue);\n        } else {\n            onChange(null);\n            setInternalValue([]);\n        }\n    };\n\n    const helpText = multipleFilesSupported\n        ? \"Drag 'n' drop some files here, or click to select files\"\n        : \"Drag 'n' drop a file here, or click to select one\";\n\n    return (\n        <DragDropContext onDragEnd={onDragEnd}>\n            <Droppable droppableId={`droppable_${name}`} direction=\"horizontal\">\n                {(provided, snapshot) => {\n                    return <FileDropComponent storageMeta={storageMeta}\n                                              disabled={disabled}\n                                              isDraggingOver={snapshot.isDraggingOver}\n                                              droppableProvided={provided}\n                                              onExternalDrop={onExternalDrop}\n                                              multipleFilesSupported={multipleFilesSupported}\n                                              autoFocus={autoFocus}\n                                              internalValue={internalValue}\n                                              property={property}\n                                              onClear={onClear}\n                                              metadata={metadata}\n                                              storagePathBuilder={storagePathBuilder}\n                                              onFileUploadComplete={onFileUploadComplete}\n                                              size={size}\n                                              name={name}\n                                              helpText={helpText}/>\n                }}\n            </Droppable>\n        </DragDropContext>\n    );\n\n}\n\n\ninterface StorageUploadItemProps {\n    storagePath: string;\n    metadata?: any,\n    entry: StorageFieldItem,\n    onFileUploadComplete: (value: string,\n                           entry: StorageFieldItem,\n                           metadata?: any) => Promise<void>;\n    size: PreviewSize;\n}\n\nexport function StorageUploadProgress({\n                                          storagePath,\n                                          entry,\n                                          metadata,\n                                          onFileUploadComplete,\n                                          size\n                                      }: StorageUploadItemProps) {\n\n\n    const storage = useStorageSource();\n\n    const classes = useStyles();\n    const snackbarContext = useSnackbarController();\n\n    const [error, setError] = React.useState<string>();\n    const [loading, setLoading] = React.useState<boolean>(false);\n    const mounted = React.useRef(false);\n\n    const upload = useCallback((file: File, fileName?: string) => {\n\n        setError(undefined);\n        setLoading(true);\n\n        storage.uploadFile({ file, fileName, path: storagePath, metadata })\n            .then(async ({ path }) => {\n                console.debug(\"Upload successful\");\n                await onFileUploadComplete(path, entry, metadata);\n                if (mounted.current)\n                    setLoading(false);\n            })\n            .catch((e) => {\n                console.error(\"Upload error\", e);\n                if (mounted.current) {\n                    setError(e.message);\n                    setLoading(false);\n                }\n                snackbarContext.open({\n                    type: \"error\",\n                    title: \"Error uploading file\",\n                    message: e.message\n                });\n            });\n    }, [entry, metadata, onFileUploadComplete, snackbarContext, storage, storagePath]);\n\n    React.useEffect(() => {\n        mounted.current = true;\n        if (entry.file)\n            upload(entry.file, entry.fileName);\n        return () => {\n            mounted.current = false;\n        };\n    }, [entry.file, entry.fileName, upload]);\n\n    return (\n\n        <Box m={1}>\n            <Paper elevation={0}\n                   className={size === \"regular\" ? classes.uploadItem : classes.uploadItemSmall}\n                   variant={\"outlined\"}>\n\n                {loading && <Skeleton variant=\"rectangular\" sx={{\n                    width: \"100%\",\n                    height: \"100%\"\n                }}/>}\n\n                {error && <p>Error uploading file: {error}</p>}\n\n            </Paper>\n        </Box>\n\n    );\n\n}\n\ninterface StorageItemPreviewProps {\n    name: string;\n    property: StringProperty;\n    value: string,\n    onClear: (value: string) => void;\n    size: PreviewSize;\n    disabled: boolean;\n}\n\nexport function StorageItemPreview({\n                                       name,\n                                       property,\n                                       value,\n                                       onClear,\n                                       disabled,\n                                       size\n                                   }: StorageItemPreviewProps) {\n\n    const classes = useStyles();\n    return (\n        <Box m={1} position={\"relative\"}>\n\n            <Paper\n                elevation={0}\n                className={size === \"regular\" ? classes.uploadItem : classes.uploadItemSmall}\n                variant={\"outlined\"}>\n\n                {!disabled &&\n\n                <a\n                    className={classes.thumbnailCloseIcon}>\n                    <IconButton\n                        size={\"small\"}\n                        onClick={(event) => {\n                            event.stopPropagation();\n                            onClear(value);\n                        }}>\n                        <ClearIcon fontSize={\"small\"}/>\n                    </IconButton>\n                </a>\n                }\n\n                {value &&\n                <ErrorBoundary>\n                    <PreviewComponent name={name}\n                                      value={value}\n                                      property={property}\n                                      size={size}/>\n                </ErrorBoundary>\n                }\n\n            </Paper>\n\n        </Box>\n    );\n\n}\n","import React from \"react\";\nimport {\n    Box,\n    FilledInput,\n    FormControl,\n    FormControlLabel,\n    FormHelperText,\n    InputLabel,\n    Switch,\n    Theme,\n    Typography\n} from \"@mui/material\";\n\nimport { FieldProps, MediaType, StringProperty } from \"../../models\";\nimport { PreviewComponent } from \"../../preview\";\nimport { FieldDescription } from \"../../form\";\nimport { LabelWithIcon } from \"../components\";\nimport { ErrorBoundary } from \"../../core/internal/ErrorBoundary\";\nimport { useClearRestoreValue } from \"../../hooks\";\n\n\nimport createStyles from \"@mui/styles/createStyles\";\nimport makeStyles from \"@mui/styles/makeStyles\";\n\nconst formStyles = makeStyles((theme: Theme) => createStyles({\n    inputLabel: {\n        marginTop: theme.spacing(1 / 2),\n        marginLeft: theme.spacing(1 / 2)\n    },\n    shrinkInputLabel: {\n        marginTop: \"-2px\",\n        marginLeft: theme.spacing(1 / 2)\n    }\n}))\n\ninterface TextFieldProps<T extends string | number> extends FieldProps<T> {\n    allowInfinity?: boolean\n}\n\n/**\n * Generic text field.\n * This is one of the internal components that get mapped natively inside forms\n * and tables to the specified properties.\n * @category Form fields\n */\nexport function TextField<T extends string | number>({\n                                                         name,\n                                                         value,\n                                                         setValue,\n                                                         error,\n                                                         showError,\n                                                         disabled,\n                                                         autoFocus,\n                                                         property,\n                                                         includeDescription,\n                                                         allowInfinity,\n                                                         shouldAlwaysRerender\n                                                     }: TextFieldProps<T>) {\n\n    const classes = formStyles();\n\n    let mediaType: MediaType | undefined;\n    let multiline: boolean | undefined;\n    if (property.dataType === \"string\") {\n        const url = (property as StringProperty).config?.url;\n        mediaType = typeof url === \"string\" ? url : undefined;\n        multiline = (property as StringProperty).config?.multiline;\n    }\n\n    useClearRestoreValue({\n        property,\n        value,\n        setValue\n    });\n\n    const isMultiline = !!multiline;\n\n    const internalValue = value ?? (property.dataType === \"string\" ? \"\" : value === 0 ? 0 : \"\");\n\n    const valueIsInfinity = internalValue === Infinity;\n    const inputType = !valueIsInfinity && property.dataType === \"number\" ? \"number\" : undefined;\n\n    const updateValue = (newValue: typeof internalValue | undefined) => {\n\n        if (!newValue) {\n            setValue(\n                null\n            );\n        } else if (inputType === \"number\") {\n            const numValue = parseFloat(newValue as string);\n            setValue(\n                numValue as T\n            );\n        } else {\n            setValue(\n                newValue\n            );\n        }\n    };\n\n    const filledInput = (\n        <FilledInput\n            sx={{\n                minHeight: \"64px\"\n            }}\n            autoFocus={autoFocus}\n            type={inputType}\n            multiline={isMultiline}\n            inputProps={{\n                rows: 4\n            }}\n            value={valueIsInfinity ? \"Infinity\" : (value ?? \"\")}\n            disabled={disabled}\n            onChange={(evt) => {\n                updateValue(evt.target.value as T);\n            }}\n        />\n    );\n\n    return (\n        <>\n\n            <FormControl\n                variant=\"filled\"\n                required={property.validation?.required}\n                error={showError}\n                disabled={valueIsInfinity}\n                fullWidth>\n\n                <InputLabel\n                    classes={{\n                        root: classes.inputLabel,\n                        shrink: classes.shrinkInputLabel\n                    }}>\n                    <LabelWithIcon property={property}/>\n                </InputLabel>\n\n                {filledInput}\n\n                <Box display={\"flex\"}>\n\n                    <Box flexGrow={1}>\n                        {showError && <FormHelperText>{error}</FormHelperText>}\n\n                        {includeDescription &&\n                        <FieldDescription property={property}/>}\n                    </Box>\n\n                    {allowInfinity &&\n                    <FormControlLabel\n                        checked={valueIsInfinity}\n                        style={{ marginRight: 0 }}\n                        labelPlacement={\"start\"}\n                        control={\n                            <Switch\n                                size={\"small\"}\n                                type={\"checkbox\"}\n                                onChange={(evt) => {\n                                    updateValue(\n                                        evt.target.checked ? Infinity as T : undefined);\n                                }}/>\n                        }\n                        disabled={disabled}\n                        label={\n                            <Typography variant={\"caption\"}>\n                                Set value to Infinity\n                            </Typography>\n                        }\n                    />\n                    }\n                </Box>\n\n            </FormControl>\n\n            {mediaType && internalValue &&\n            <ErrorBoundary>\n                <Box m={1}>\n                    <PreviewComponent name={name}\n                                      value={internalValue}\n                                      property={property}\n                                      size={\"regular\"}/>\n                </Box>\n            </ErrorBoundary>\n            }\n        </>\n    );\n\n}\n","import React, { useState } from \"react\";\nimport {\n    FormControl,\n    FormControlLabel,\n    FormHelperText,\n    Switch,\n    Theme,\n    Typography\n} from \"@mui/material\";\nimport clsx from \"clsx\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport makeStyles from \"@mui/styles/makeStyles\";\n\nimport { FieldProps } from \"../../models\";\nimport { FieldDescription } from \"../../form\";\nimport { LabelWithIcon } from \"../components\";\nimport { useClearRestoreValue } from \"../../hooks\";\n\nexport const useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        formControl: {\n            justifyContent: \"space-between\",\n            margin: 0,\n            width: \"100%\",\n            minHeight: \"64px\",\n            paddingLeft: \"16px\",\n            paddingRight: \"24px\",\n            color: \"rgba(0, 0, 0, 0.87)\",\n            boxSizing: \"border-box\",\n            position: \"relative\",\n            display: \"inline-flex\",\n            alignItems: \"center\",\n            backgroundColor: theme.palette.mode === \"light\" ? \"rgba(0, 0, 0, 0.06)\" : \"rgba(255, 255, 255, 0.09)\",\n            borderTopLeftRadius: \"4px\",\n            borderTopRightRadius: \"4px\",\n            transition: \"background-color 200ms cubic-bezier(0.0, 0, 0.2, 1) 0ms\",\n            \"&::before\": {\n                borderBottom: theme.palette.mode === \"light\" ? \"1px solid rgba(0, 0, 0, 0.42)\" : \"1px solid rgba(255, 255, 255, 0.7)\",\n                left: 0,\n                bottom: 0,\n                content: \"\\\"\\\\00a0\\\"\",\n                position: \"absolute\",\n                right: 0,\n                transition: \"border-bottom-color 200ms cubic-bezier(0.4, 0, 0.2, 1) 0ms\",\n                pointerEvents: \"none\"\n            },\n            \"&::after\": {\n                content: \"\\\"\\\"\",\n                transition: \"transform 200ms cubic-bezier(0.0, 0, 0.2, 1) 0ms\",\n                left: 0,\n                bottom: 0,\n                position: \"absolute\",\n                right: 0,\n                transform: \"scaleX(0)\",\n                borderBottom: `2px solid ${theme.palette.primary.main}`\n            },\n            \"&:hover\": {\n                backgroundColor: theme.palette.mode === \"light\" ? \"rgba(0, 0, 0, 0.09)\" : \"rgba(255, 255, 255, 0.13)\"\n            }\n        },\n        focus: {\n            \"&::before\": {\n                borderBottom: theme.palette.mode === \"light\" ? \"1px solid rgba(255, 255, 255, 0.7)\" : \"1px solid rgba(0, 0, 0, 0.87)\"\n            },\n            \"&::after\": {\n                transform: \"scaleX(1)\",\n                pointerEvents: \"none\"\n            }\n        }\n    })\n);\n\n\ntype SwitchFieldProps = FieldProps<boolean>;\n\nconst SwitchFieldComponent = React.forwardRef(function({\n                                                           name,\n                                                           value,\n                                                           setValue,\n                                                           error,\n                                                           showError,\n                                                           autoFocus,\n                                                           disabled,\n                                                           touched,\n                                                           property,\n                                                           includeDescription,\n                                                           shouldAlwaysRerender\n                                                       }: SwitchFieldProps, ref) {\n\n    const classes = useStyles();\n\n    useClearRestoreValue({\n        property,\n        value,\n        setValue\n    });\n\n    const [focus, setFocus] = useState<boolean>(autoFocus);\n\n    return (\n        <>\n            <FormControl fullWidth>\n\n                <FormControlLabel\n                    className={clsx(classes.formControl,\n                        {\n                            [classes.focus]: focus\n                        })}\n                    onClick={(e) => setFocus(true)}\n                    labelPlacement={\"start\"}\n                    checked={Boolean(value)}\n                    inputRef={ref}\n                    control={\n                        <Switch\n                            type={\"checkbox\"}\n                            color={\"secondary\"}\n                            autoFocus={autoFocus}\n                            disabled={disabled}\n                            onFocus={(e) => setFocus(true)}\n                            onBlur={(e) => setFocus(false)}\n                            onChange={(evt) => {\n                                setFocus(true);\n                                setValue(\n                                    evt.target.checked\n                                );\n                            }}/>\n                    }\n                    disabled={disabled}\n                    label={\n                        <Typography color={\"textSecondary\"}>\n                            <LabelWithIcon\n\n                                property={property}/>\n                        </Typography>}\n                />\n\n                {includeDescription &&\n                <FieldDescription property={property}/>}\n\n                {showError && <FormHelperText>{error}</FormHelperText>}\n\n            </FormControl>\n\n\n        </>\n\n    );\n});\n\n/**\n * Simple boolean switch.\n *\n * This is one of the internal components that get mapped natively inside forms\n * and tables to the specified properties.\n * @category Form fields\n */\nexport const SwitchField = (props: SwitchFieldProps) => {\n    return <SwitchFieldComponent {...props}/>;\n};\n\n","import React from \"react\";\n\nimport { TextField as MuiTextField } from \"@mui/material\";\nimport DateTimePicker from \"@mui/lab/DateTimePicker\";\n\nimport { FieldProps } from \"../../models\";\n\nimport { FieldDescription } from \"../../form\";\nimport { LabelWithIcon } from \"../components\";\nimport { useClearRestoreValue } from \"../../hooks\";\n\ntype DateTimeFieldProps = FieldProps<Date>;\n\n/**\n * Field that allows selecting a date\n *\n * This is one of the internal components that get mapped natively inside forms\n * and tables to the specified properties.\n * @category Form fields\n */\nexport function DateTimeField({\n                                  name,\n                                  value,\n                                  setValue,\n                                  autoFocus,\n                                  error,\n                                  showError,\n                                  disabled,\n                                  touched,\n                                  property,\n                                  includeDescription,\n                                  shouldAlwaysRerender\n                              }: DateTimeFieldProps) {\n\n\n    const internalValue = value || null;\n\n    useClearRestoreValue({\n        property,\n        value,\n        setValue\n    });\n\n    return (\n        <>\n\n            <DateTimePicker\n                clearable\n                autoFocus={autoFocus}\n                value={internalValue}\n                label={\n                    <LabelWithIcon property={property}/>\n                }\n                renderInput={(props) => (\n                    <MuiTextField {...props}\n                                  fullWidth\n                                  InputProps={{\n                                      ...props.InputProps,\n                                      sx: {\n                                          minHeight: \"64px\"\n                                      }\n                                  }}\n                                  error={showError}\n                        // format={dateFormat}\n                                  variant={\"filled\"}\n                                  helperText={showError ? error : null}/>\n                )}\n                disabled={disabled}\n                onChange={(dateValue) => {\n                    return setValue(\n                        dateValue\n                    );\n                }}\n            />\n\n            {includeDescription &&\n            <FieldDescription property={property}/>}\n\n        </>\n    );\n}\n","import React, { useMemo } from \"react\";\n\nimport {\n    Box,\n    Button,\n    FormControl,\n    FormHelperText,\n    IconButton,\n    Theme,\n    Tooltip,\n    Typography\n} from \"@mui/material\";\n\nimport createStyles from \"@mui/styles/createStyles\";\nimport makeStyles from \"@mui/styles/makeStyles\";\n\nimport ErrorIcon from \"@mui/icons-material/Error\";\nimport ClearIcon from \"@mui/icons-material/Clear\";\nimport KeyboardTabIcon from \"@mui/icons-material/KeyboardTab\";\n\nimport {\n    AnyProperty,\n    Entity,\n    EntityCollectionResolver,\n    EntityReference,\n    EntitySchemaResolver,\n    FieldProps\n} from \"../../models\";\nimport { FieldDescription } from \"../../form\";\nimport { ErrorView, ReferenceDialog } from \"../../core\";\nimport { ErrorBoundary } from \"../../core/internal/ErrorBoundary\";\nimport { PreviewComponent, SkeletonComponent } from \"../../preview\";\nimport { LabelWithIcon } from \"../components\";\nimport {\n    useClearRestoreValue,\n    useEntityFetch,\n    useNavigation,\n    useSideEntityController\n} from \"../../hooks\";\nimport { getReferenceFrom } from \"../../core/utils\";\n\nexport const useStyles = makeStyles((theme: Theme) => createStyles({\n    root: {\n        elevation: 0,\n        width: \"100%\",\n        padding: theme.spacing(1),\n        position: \"relative\",\n        transition: \"background-color 200ms cubic-bezier(0.0, 0, 0.2, 1) 0ms\",\n        borderTopLeftRadius: \"2px\",\n        borderTopRightRadius: \"2px\",\n        backgroundColor: theme.palette.mode === \"light\" ? \"rgba(0, 0, 0, 0.06)\" : \"rgba(255, 255, 255, 0.09)\",\n        // borderBottom: `1px solid ${darken(theme.palette.background.default, 0.1)}`,\n        \"&::before\": {\n            borderBottom: theme.palette.mode === \"light\" ? \"1px solid rgba(0, 0, 0, 0.42)\" : \"1px solid rgba(255, 255, 255, 0.7)\",\n            left: 0,\n            bottom: 0,\n            content: \"\\\"\\\\00a0\\\"\",\n            position: \"absolute\",\n            right: 0,\n            transition: \"border-bottom-color 200ms cubic-bezier(0.4, 0, 0.2, 1) 0ms\",\n            pointerEvents: \"none\"\n        },\n        \"&::after\": {\n            content: \"\\\"\\\"\",\n            transition: \"transform 200ms cubic-bezier(0.0, 0, 0.2, 1) 0ms\",\n            left: 0,\n            bottom: 0,\n            position: \"absolute\",\n            right: 0,\n            transform: \"scaleX(0)\",\n            borderBottom: `2px solid ${theme.palette.primary.main}`\n        },\n        \"&:hover\": {\n            cursor: \"pointer\",\n            backgroundColor: theme.palette.mode === \"light\" ? \"rgba(0, 0, 0, 0.09)\" : \"rgba(255, 255, 255, 0.13)\"\n        },\n        color: \"#838383\",\n        fontWeight: theme.typography.fontWeightMedium\n    },\n    disabled: {\n        backgroundColor: \"rgba(0, 0, 0, 0.12)\",\n        color: theme.palette.mode === \"light\" ? \"rgba(0, 0, 0, 0.38)\" : \"rgba(255, 255, 255, 0.38)\",\n        \"&::before\": {\n            borderBottom: theme.palette.mode === \"light\" ? \"1px dotted rgba(0, 0, 0, 0.42)\" : \"1px dotted rgba(255, 255, 255, 0.7)\"\n        },\n        \"&::after\": {\n            borderBottom: `2px dotted ${theme.palette.primary.main}`\n        },\n        \"&:hover\": {\n            cursor: \"inherit\",\n            backgroundColor: \"rgba(0, 0, 0, 0.12)\"\n        }\n    }\n}));\n\n/**\n * Field that opens a reference selection dialog.\n *\n * This is one of the internal components that get mapped natively inside forms\n * and tables to the specified properties.\n * @category Form fields\n */\nexport function ReferenceField<M extends { [Key: string]: any }>({\n                                                                     name,\n                                                                     value,\n                                                                     setValue,\n                                                                     error,\n                                                                     showError,\n                                                                     disabled,\n                                                                     touched,\n                                                                     autoFocus,\n                                                                     property,\n                                                                     includeDescription,\n                                                                     context,\n                                                                     shouldAlwaysRerender\n                                                                 }: FieldProps<EntityReference>) {\n\n\n    if (typeof property.path !== \"string\") {\n        throw Error(\"Picked the wrong component ReferenceField\");\n    }\n\n    useClearRestoreValue({\n        property,\n        value,\n        setValue\n    });\n\n    const classes = useStyles();\n\n    const [open, setOpen] = React.useState(autoFocus);\n    const sideEntityController = useSideEntityController();\n\n    const navigationContext = useNavigation();\n    const collectionResolver: EntityCollectionResolver | undefined = useMemo(() => {\n        return navigationContext.getCollectionResolver(property.path as string);\n    }, [property.path, navigationContext]);\n\n    if (!collectionResolver) {\n        throw Error(`Couldn't find the corresponding collection for the path: ${property.path}`);\n    }\n\n    const schemaResolver = collectionResolver.schemaResolver;\n    const path = property.path;\n\n    const validValue = value && value instanceof EntityReference;\n\n    const {\n        entity,\n        dataLoading,\n        dataLoadingError\n    } = useEntityFetch({\n        path: validValue ? value.path : undefined,\n        entityId: validValue ? value.id : undefined,\n        schema: schemaResolver,\n        useCache: true\n    });\n\n    const handleEntityClick = (entity: Entity<M>) => {\n        if (disabled)\n            return;\n        setValue(entity ? getReferenceFrom(entity) : null);\n        setOpen(false);\n    };\n\n    const handleClickOpen = () => {\n        setOpen(true);\n    };\n\n    const clearValue = (e: React.MouseEvent) => {\n        e.stopPropagation();\n        setValue(null);\n        setOpen(false);\n    };\n\n    const seeEntityDetails = (e: React.MouseEvent) => {\n        e.stopPropagation();\n        if (entity)\n            sideEntityController.open({\n                entityId: entity.id,\n                path,\n                overrideSchemaRegistry: false\n            });\n    };\n\n    const onClose = () => {\n        setOpen(false);\n    };\n\n    function buildEntityView(schemaResolver?: EntitySchemaResolver) {\n\n        const missingEntity = entity && !entity.values;\n\n        let body: JSX.Element;\n        if (!schemaResolver) {\n            body = (\n                <ErrorView\n                    error={\"The specified collection does not exist. Check console\"}/>\n            );\n        } else if (missingEntity) {\n            body = (\n                <Tooltip title={value && value.path}>\n                    <Box\n                        display={\"flex\"}\n                        alignItems={\"center\"}\n                        p={1}\n                        flexGrow={1}>\n                        <ErrorIcon fontSize={\"small\"} color={\"error\"}/>\n                        <Box marginLeft={1}>Missing\n                            reference {entity && entity.id}</Box>\n                    </Box>\n                </Tooltip>\n            );\n        } else {\n            if (validValue) {\n\n                const schema = schemaResolver({});\n                const allProperties = Object.keys(schema.properties);\n                let listProperties = property.previewProperties?.filter(p => allProperties.includes(p as string));\n                if (!listProperties || !listProperties.length) {\n                    listProperties = allProperties;\n                }\n                listProperties = listProperties.slice(0, 3);\n\n                body = (\n                    <Box display={\"flex\"}\n                         flexDirection={\"column\"}\n                         flexGrow={1}\n                         ml={1}\n                         mr={1}>\n\n                        {listProperties && listProperties.map((key, index) => {\n                            const property = schema.properties[key as string];\n                            if (!property) return null;\n                            return (\n                                <Box\n                                    key={`reference_previews_${key as string}`}\n                                    mt={0.5}\n                                    mb={0.5}>\n                                    <ErrorBoundary>{\n                                        entity\n                                            ? <PreviewComponent\n                                                name={key as string}\n                                                value={(entity.values as any)[key]}\n                                                property={property as AnyProperty}\n                                                size={\"tiny\"}/>\n                                            : <SkeletonComponent\n                                                property={property as AnyProperty}\n                                                size={\"tiny\"}/>}\n                                    </ErrorBoundary>\n                                </Box>\n                            );\n                        })}\n                    </Box>\n                );\n            } else {\n                body = <Box p={1}\n                            onClick={disabled ? undefined : handleClickOpen}\n                            justifyContent=\"center\"\n                            display=\"flex\">\n                    <Typography variant={\"body2\"} sx={(theme) => ({\n                        flexGrow: 1,\n                        textAlign: \"center\",\n                        color: \"#838383\",\n                        fontWeight: theme.typography.fontWeightMedium\n                    })}>No value set</Typography>\n                    {!disabled && <Button variant=\"outlined\"\n                                          color=\"primary\">\n                        Set\n                    </Button>}\n                </Box>;\n            }\n        }\n\n        return (\n            <Box\n                onClick={disabled ? undefined : handleClickOpen}\n                display=\"flex\">\n\n                <Box display={\"flex\"}\n                     flexDirection={\"column\"}\n                     flexGrow={1}>\n\n                    <Box display={\"flex\"}\n                         flexDirection={\"row\"}\n                         flexGrow={1}>\n\n                        <Box flexGrow={1}>\n                            <FormHelperText filled\n                                            required={property.validation?.required}>\n                                <LabelWithIcon\n                                    property={property}/>\n                            </FormHelperText>\n                        </Box>\n\n                        {entity &&\n                        <Box\n                            alignSelf={\"center\"}\n                            m={1}>\n                            <Tooltip title={value && value.path}>\n                                <Typography variant={\"caption\"}\n                                            className={\"mono\"}>\n                                    {entity.id}\n                                </Typography>\n                            </Tooltip>\n                        </Box>}\n\n                        {!missingEntity && entity && value && <Box>\n                            <Tooltip title={`See details for ${entity.id}`}>\n                                <span>\n                                <IconButton\n                                    onClick={seeEntityDetails}\n                                    size=\"large\">\n                                    <KeyboardTabIcon/>\n                                </IconButton>\n                                    </span>\n                            </Tooltip>\n                        </Box>}\n\n                        {value && <Box>\n                            <Tooltip title=\"Clear\">\n                                <span>\n                                <IconButton\n                                    disabled={disabled}\n                                    onClick={disabled ? undefined : clearValue}\n                                    size=\"large\">\n                                    <ClearIcon/>\n                                </IconButton>\n                                </span>\n                            </Tooltip>\n                        </Box>}\n\n                    </Box>\n\n                    {body}\n\n                </Box>\n            </Box>\n        );\n    }\n\n    return (\n        <FormControl error={showError} fullWidth>\n\n            <div\n                className={`${classes.root} ${disabled ? classes.disabled : \"\"}`}>\n\n                {schemaResolver && buildEntityView(schemaResolver)}\n\n                {collectionResolver && <ReferenceDialog open={open}\n                                                        collectionResolver={collectionResolver}\n                                                        multiselect={false}\n                                                        path={path}\n                                                        onClose={onClose}\n                                                        onSingleEntitySelected={handleEntityClick}\n                />}\n\n\n            </div>\n\n            {includeDescription &&\n            <FieldDescription property={property}/>}\n\n            {showError && <FormHelperText>{error}</FormHelperText>}\n\n        </FormControl>\n    );\n}\n\n\n","import React, { useState } from \"react\";\nimport { CMSType, FieldProps, Property } from \"../../models\";\nimport { FormControl, FormHelperText, Paper, Theme } from \"@mui/material\";\nimport { FieldDescription } from \"../../form\";\nimport { ArrayContainer, LabelWithIcon } from \"../components\";\nimport { buildPropertyField } from \"../form_factory\";\nimport { useClearRestoreValue } from \"../../hooks\";\n\n\n/**\n * Generic array field that allows reordering and renders the child property\n * as nodes.\n *\n * This is one of the internal components that get mapped natively inside forms\n * and tables to the specified properties.\n * @category Form fields\n */\nexport function ArrayDefaultField<T extends Array<any>>({\n                                                            name,\n                                                            value,\n                                                            error,\n                                                            showError,\n                                                            isSubmitting,\n                                                            setValue,\n                                                            tableMode,\n                                                            property,\n                                                            includeDescription,\n                                                            underlyingValueHasChanged,\n                                                            context,\n                                                            disabled,\n                                                            shouldAlwaysRerender\n                                                        }: FieldProps<T>) {\n\n    if (!property.of)\n        throw Error(\"ArrayDefaultField misconfiguration. Property `of` not set\");\n\n    const ofProperty: Property<CMSType[]> = property.of as Property<CMSType[]>;\n\n    const [lastAddedId, setLastAddedId] = useState<number | undefined>();\n\n    useClearRestoreValue({\n        property,\n        value,\n        setValue\n    });\n\n    const buildEntry = (index: number, internalId: number) => {\n        return buildPropertyField({\n            name: `${name}[${index}]`,\n            disabled,\n            property: ofProperty,\n            includeDescription,\n            underlyingValueHasChanged,\n            context,\n            tableMode: false,\n            partOfArray: true,\n            autoFocus: internalId === lastAddedId,\n            shouldAlwaysRerender: false\n        });\n\n    };\n\n    return (\n\n        <FormControl fullWidth error={showError}>\n\n            {!tableMode && <FormHelperText filled\n                                           required={property.validation?.required}>\n                <LabelWithIcon property={property}/>\n            </FormHelperText>}\n\n            <Paper variant={\"outlined\"}\n                   sx={(theme) => ({\n                       elevation: 0,\n                       padding: theme.spacing(2),\n                       [theme.breakpoints.up(\"md\")]: {\n                           padding: theme.spacing(2)\n                       }\n                   })}>\n                <ArrayContainer value={value}\n                                name={name}\n                                buildEntry={buildEntry}\n                                onInternalIdAdded={setLastAddedId}\n                                disabled={isSubmitting || Boolean(property.disabled)}\n                                includeAddButton={!property.disabled}/>\n\n            </Paper>\n\n            {includeDescription &&\n            <FieldDescription property={property}/>}\n\n            {showError && typeof error === \"string\" &&\n            <FormHelperText>{error}</FormHelperText>}\n\n        </FormControl>\n    );\n}\n\n\n","import React, { useEffect, useState } from \"react\";\nimport {\n    FormControl,\n    FormHelperText,\n    InputLabel,\n    MenuItem,\n    Paper,\n    Select\n} from \"@mui/material\";\nimport { FastField, FieldProps as FormikFieldProps } from \"formik\";\n\n\nimport { ArrayContainer, FieldDescription, LabelWithIcon } from \"../components\";\nimport { useClearRestoreValue } from \"../../hooks\";\nimport { buildPropertyField } from \"../form_factory\";\nimport { EnumValuesChip } from \"../../preview/components/CustomChip\";\nimport { enumToObjectEntries } from \"../../core/util/enums\";\nimport { EnumValues, FieldProps, FormContext, Property } from \"../../models\";\n\n\n/**\n * If the `oneOf` property is specified, this fields render each array entry as\n * a `type` select and the corresponding field widget to the selected `type.\n *\n * This is one of the internal components that get mapped natively inside forms\n * and tables to the specified properties.\n * @category Form fields\n */\nexport function ArrayOneOfField<T extends Array<any>>({\n                                                          name,\n                                                          value,\n                                                          error,\n                                                          showError,\n                                                          isSubmitting,\n                                                          setValue,\n                                                          tableMode,\n                                                          property,\n                                                          includeDescription,\n                                                          underlyingValueHasChanged,\n                                                          context,\n                                                          disabled,\n                                                          shouldAlwaysRerender\n                                                      }: FieldProps<T>) {\n\n    if (!property.oneOf)\n        throw Error(\"ArrayOneOfField misconfiguration. Property `oneOf` not set\");\n\n    useClearRestoreValue({\n        property,\n        value,\n        setValue\n    });\n\n    const [lastAddedId, setLastAddedId] = useState<number | undefined>();\n\n    const buildEntry = (index: number, internalId: number) => {\n        return <ArrayOneOfEntry\n            key={`array_one_of_${index}`}\n            name={`${name}[${index}]`}\n            index={index}\n            value={value[index]}\n            typeField={property.oneOf!.typeField ?? \"type\"}\n            valueField={property.oneOf!.valueField ?? \"value\"}\n            properties={property.oneOf!.properties}\n            autoFocus={internalId === lastAddedId}\n            context={context}/>;\n    };\n\n    return (\n\n        <FormControl fullWidth error={showError}>\n\n            {!tableMode && <FormHelperText filled\n                                           required={property.validation?.required}>\n                <LabelWithIcon property={property}/>\n            </FormHelperText>}\n\n            <Paper variant={\"outlined\"}\n                   sx={(theme) => ({\n                       elevation: 0,\n                       padding: theme.spacing(2),\n                       [theme.breakpoints.up(\"md\")]: {\n                           padding: theme.spacing(2)\n                       }\n                   })}>\n                <ArrayContainer value={value}\n                                name={name}\n                                buildEntry={buildEntry}\n                                onInternalIdAdded={setLastAddedId}\n                                disabled={isSubmitting || Boolean(property.disabled)}\n                                includeAddButton={!property.disabled}/>\n            </Paper>\n\n            {includeDescription &&\n            <FieldDescription property={property}/>}\n\n            {showError &&\n            typeof error === \"string\" &&\n            <FormHelperText>{error}</FormHelperText>}\n\n        </FormControl>\n    );\n}\n\ninterface ArrayOneOfEntryProps {\n    name: string;\n    index: number;\n    value: any;\n    /**\n     * Name of the field to use as the discriminator for type\n     * Defaults to `type`\n     */\n    typeField: string;\n    /**\n     * Name of the  field to use as the value\n     * Defaults to `value`\n     */\n    valueField: string;\n\n    autoFocus: boolean;\n    /**\n     * Record of properties, where the key is the `type` and the value\n     * is the corresponding property\n     */\n    properties: Record<string, Property>;\n\n    /**\n     * Additional values related to the state of the form or the entity\n     */\n    context: FormContext<any>;\n}\n\nfunction ArrayOneOfEntry({\n                             name,\n                             index,\n                             value,\n                             typeField,\n                             valueField,\n                             properties,\n                             autoFocus,\n                             context\n                         }: ArrayOneOfEntryProps) {\n\n\n    const type = value && value[typeField];\n    const [typeInternal, setTypeInternal] = useState<string | undefined>(type ?? undefined);\n\n    useEffect(() => {\n        if (type !== typeInternal) {\n            setTypeInternal(type);\n        }\n    }, [type]);\n\n    const property = typeInternal ? properties[typeInternal] : undefined;\n\n    const enumValues: EnumValues = Object.entries(properties).map(([key, property]) => ({ [key]: property.title ?? key })).reduce((a, b) => ({ ...a, ...b }));\n\n    const typeFieldName = `${name}[${typeField}]`;\n    const valueFieldName = `${name}[${valueField}]`;\n\n    return (\n        <Paper sx={(theme) => ({\n            elevation: 0,\n            padding: theme.spacing(2),\n            [theme.breakpoints.up(\"md\")]: {\n                padding: theme.spacing(2)\n            }\n        })} elevation={0}>\n\n            <FastField\n                required={true}\n                name={typeFieldName}\n            >\n                {(fieldProps: FormikFieldProps) =>\n                    (\n                        <FormControl fullWidth>\n                            <InputLabel\n                                id={`${name}_${index}_select_label`}>\n                                <span>Type</span>\n                            </InputLabel>\n                            <Select\n                                fullWidth\n                                sx={{ marginBottom: 2 }}\n                                labelId={`${name}_${index}_select_label`}\n                                value={fieldProps.field.value !== undefined && fieldProps.field.value !== null ? fieldProps.field.value : \"\"}\n                                onChange={(evt: any) => {\n                                    const eventValue = evt.target.value;\n                                    fieldProps.form.setFieldTouched(typeFieldName);\n                                    setTypeInternal(eventValue);\n                                    fieldProps.form.setFieldValue(typeFieldName, eventValue);\n                                    fieldProps.form.setFieldValue(valueFieldName, null);\n                                }}\n                                renderValue={(enumKey: any) =>\n                                    <EnumValuesChip\n                                        enumKey={enumKey}\n                                        enumValues={enumValues}\n                                        small={true}/>\n                                }>\n                                {enumToObjectEntries(enumValues)\n                                    .map(([enumKey, labelOrConfig]) => {\n                                        return (\n                                            <MenuItem\n                                                key={`select_${name}_${index}_${enumKey}`}\n                                                value={enumKey}>\n                                                <EnumValuesChip\n                                                    enumKey={enumKey}\n                                                    enumValues={enumValues}\n                                                    small={true}/>\n                                            </MenuItem>\n                                        );\n                                    })}\n                            </Select>\n                        </FormControl>\n                    )\n                }\n            </FastField>\n\n            {property && (\n                <FormControl fullWidth\n                             key={`form_control_${name}_${typeInternal}`}>\n                    {buildPropertyField({\n                        name: valueFieldName,\n                        property: property,\n                        context: context,\n                        autoFocus: autoFocus\n                    })}\n                </FormControl>\n            )}\n\n        </Paper>\n    );\n}\n\n\n","import React from \"react\";\nimport { FormControl, FormHelperText, Paper } from \"@mui/material\";\n\nimport { FieldProps } from \"../../models\";\n\nimport { PreviewComponent } from \"../../preview\";\nimport { FieldDescription } from \"../../form\";\nimport { LabelWithIcon } from \"../components\";\nimport { ErrorBoundary } from \"../../core/internal/ErrorBoundary\";\n\n/**\n *\n * Simply render the non-editable preview of a field\n *\n * This is one of the internal components that get mapped natively inside forms\n * and tables to the specified properties.\n * @category Form fields\n */\nexport function ReadOnlyField({\n                                  name,\n                                                                    value,\n                                                                    setValue,\n                                                                    error,\n                                                                    showError,\n                                                                    isSubmitting,\n                                                                    touched,\n                                                                    tableMode,\n                                                                    property,\n                                                                    includeDescription,\n                                                                    context\n                                                                }: FieldProps<any>) {\n\n    return (\n\n        <FormControl fullWidth error={showError}>\n\n            {!tableMode && <FormHelperText filled\n                                           required={property.validation?.required}>\n                <LabelWithIcon property={property}/>\n            </FormHelperText>}\n\n            <Paper\n                sx={(theme) => ({\n                    minHeight: \"64px\",\n                    elevation: 0,\n                    padding: theme.spacing(2),\n                    [theme.breakpoints.up(\"md\")]: {\n                        padding: theme.spacing(3)\n                    }\n                })}\n                variant={\"outlined\"}>\n\n                <ErrorBoundary>\n                    <PreviewComponent name={name}\n                                      value={value}\n                                      property={property}\n                                      size={\"regular\"}/>\n                </ErrorBoundary>\n\n            </Paper>\n\n            {showError &&\n            typeof error === \"string\" &&\n            <FormHelperText>{error}</FormHelperText>}\n\n            {includeDescription &&\n            <FieldDescription property={property}/>}\n\n        </FormControl>\n    );\n}\n","import React from \"react\";\n\nimport { Box, FormControl, FormHelperText, Theme } from \"@mui/material\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport makeStyles from \"@mui/styles/makeStyles\";\nimport MDEditor from \"@uiw/react-md-editor\";\n\nimport { FieldProps } from \"../../models\";\nimport { FieldDescription } from \"../../form\";\nimport { LabelWithIcon } from \"../components\";\n\nimport { useClearRestoreValue } from \"../../hooks\";\n\ninterface MarkDownFieldProps extends FieldProps<string> {\n}\n\nexport const useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        root: {\n            \"& .w-md-editor-toolbar li > button\": {\n                color: theme.palette.text.secondary\n            },\n            \"& .w-md-editor-toolbar li.active > button\": {\n                color: theme.palette.primary.main\n            },\n            \"& .w-md-editor-text-pre, & .w-md-editor-text-pre .title, & .w-md-editor-text-pre .bold\": {\n                color: \"inherit !important\"\n            },\n            \"& .wmde-markdown-color code.language-markdown\": {\n                color: \"inherit\"\n            },\n            \"& .w-md-editor\": {\n                color: \"inherit\",\n                backgroundColor: theme.palette.mode === \"light\" ? \"rgb(240, 240, 240)\" : \"#323232\"\n            },\n            \"& .w-md-editor-toolbar\": {\n                borderBottom: \"inherit\",\n                backgroundColor: theme.palette.mode === \"light\" ? \"rgba(0, 0, 0, 0.09)\" : \"rgba(255, 255, 255, 0.09)\"\n            }\n        }\n    })\n);\n\n/**\n * Render a markdown field that allows edition and seeing the preview.\n *\n * This is one of the internal components that get mapped natively inside forms\n * and tables to the specified properties.\n * @category Form fields\n */\nexport function MarkdownField({\n                                  name,\n                                  value,\n                                  setValue,\n                                  error,\n                                  showError,\n                                  disabled,\n                                  autoFocus,\n                                  touched,\n                                  property,\n                                  tableMode,\n                                  includeDescription,\n                                  context,\n                                  shouldAlwaysRerender\n                              }: MarkDownFieldProps) {\n\n    const classes = useStyles();\n\n    useClearRestoreValue({\n        property,\n        value,\n        setValue\n    });\n\n    const updateValue = (newValue: string | undefined) => {\n        if (!newValue) {\n            setValue(\n                null\n            );\n        } else {\n            setValue(\n                newValue\n            );\n        }\n    };\n\n    return (\n\n        <FormControl\n            required={property.validation?.required}\n            error={showError}\n            fullWidth>\n\n            {!tableMode && <FormHelperText filled\n                                           required={property.validation?.required}>\n                <LabelWithIcon property={property}/>\n            </FormHelperText>}\n\n            <div className={classes.root}>\n                <MDEditor\n                    value={typeof value === \"string\" ? value : \"\"}\n                    preview={\"edit\"}\n                    onChange={(value) => updateValue(value)}\n                />\n            </div>\n\n            <Box display={\"flex\"}>\n                <Box flexGrow={1}>\n                    {showError &&\n                    typeof error === \"string\" &&\n                    <FormHelperText>{error}</FormHelperText>}\n                    {includeDescription &&\n                    <FieldDescription property={property}/>}\n                </Box>\n            </Box>\n\n        </FormControl>\n    );\n\n}\n","import React, { useMemo } from \"react\";\nimport {\n    Box,\n    Button,\n    FormControl,\n    FormHelperText,\n    Paper,\n    Theme\n} from \"@mui/material\";\nimport {\n    Entity,\n    EntityCollectionResolver,\n    EntityReference,\n    FieldProps,\n    Property\n} from \"../../models\";\nimport { ReferencePreview } from \"../../preview\";\nimport { ArrayContainer, FieldDescription, LabelWithIcon } from \"../components\";\nimport { ErrorView, ReferenceDialog } from \"../../core\";\n\nimport { useClearRestoreValue, useNavigation } from \"../../hooks\";\nimport { getReferenceFrom } from \"../../core/utils\";\n\n\ntype ArrayOfReferencesFieldProps = FieldProps<EntityReference[]>;\n\n/**\n * This field allows selecting multiple references.\n *\n * This is one of the internal components that get mapped natively inside forms\n * and tables to the specified properties.\n * @category Form fields\n */\nexport function ArrayOfReferencesField({\n                                           name,\n                                           value,\n                                           error,\n                                           showError,\n                                           isSubmitting,\n                                           tableMode,\n                                           property,\n                                           includeDescription,\n                                           setValue\n                                       }: ArrayOfReferencesFieldProps) {\n\n    const ofProperty: Property = property.of as Property;\n    if (ofProperty.dataType !== \"reference\") {\n        throw Error(\"ArrayOfReferencesField expected a property containing references\");\n    }\n\n    const [open, setOpen] = React.useState(false);\n    const [onHover, setOnHover] = React.useState(false);\n    const selectedIds = value && Array.isArray(value) ? value.map((ref) => ref.id) : [];\n\n    useClearRestoreValue({\n        property,\n        value,\n        setValue\n    });\n\n    const navigationContext = useNavigation();\n    const collectionResolver: EntityCollectionResolver | undefined = useMemo(() => {\n        return ofProperty.path ? navigationContext.getCollectionResolver(ofProperty.path) : undefined;\n    }, [ofProperty.path]);\n\n    if (!collectionResolver) {\n        throw Error(`Couldn't find the corresponding collection for the path: ${ofProperty.path}`);\n    }\n\n    const onEntryClick = () => {\n        setOpen(true);\n    };\n\n    const onClose = () => {\n        setOpen(false);\n    };\n\n    const onMultipleEntitiesSelected = (entities: Entity<any>[]) => {\n        setValue(entities.map(e => getReferenceFrom(e)));\n    };\n\n    const buildEntry = (index: number, internalId: number) => {\n        const entryValue = value && value.length > index ? value[index] : undefined;\n        if (!entryValue)\n            return <div>Internal ERROR</div>;\n        return (\n            <div\n                onMouseEnter={() => setOnHover(true)}\n                onMouseMove={() => setOnHover(true)}\n                onMouseLeave={() => setOnHover(false)}>\n                <ReferencePreview\n                    value={entryValue}\n                    property={ofProperty}\n                    onHover={onHover}\n                    size={\"regular\"}\n                    onClick={onEntryClick}/>\n            </div>\n        );\n    };\n\n\n    return (\n        <>\n            <FormControl fullWidth error={showError}>\n\n                {!tableMode && <FormHelperText filled\n                                               required={property.validation?.required}>\n                    <LabelWithIcon property={property}/>\n                </FormHelperText>}\n\n                <Paper variant={\"outlined\"}\n                       sx={(theme) => ({\n                           elevation: 0,\n                           padding: theme.spacing(2),\n                           [theme.breakpoints.up(\"md\")]: {\n                               padding: theme.spacing(2)\n                           }\n                       })}>\n\n                    {!collectionResolver && <ErrorView\n                        error={\"The specified collection does not exist. Check console\"}/>}\n\n                    {collectionResolver && <>\n\n                        <ArrayContainer value={value}\n                                        name={name}\n                                        buildEntry={buildEntry}\n                                        disabled={isSubmitting}/>\n\n                        <Box p={1}\n                             justifyContent=\"center\"\n                             textAlign={\"left\"}>\n                            <Button variant=\"outlined\"\n                                    color=\"primary\"\n                                    disabled={isSubmitting}\n                                    onClick={onEntryClick}>\n                                Edit {property.title}\n                            </Button>\n                        </Box>\n                    </>}\n\n                </Paper>\n\n                {includeDescription &&\n                <FieldDescription property={property}/>}\n\n                {showError &&\n                typeof error === \"string\" &&\n                <FormHelperText>{error}</FormHelperText>}\n\n            </FormControl>\n\n            {collectionResolver && ofProperty.path && <ReferenceDialog open={open}\n                                                    multiselect={true}\n                                                    collectionResolver={collectionResolver}\n                                                    path={ofProperty.path}\n                                                    onClose={onClose}\n                                                    onMultipleEntitiesSelected={onMultipleEntitiesSelected}\n                                                    selectedEntityIds={selectedIds}\n            />}\n        </>\n    );\n}\n\n\n","import React, { ComponentType, ReactElement, useEffect, useState } from \"react\";\nimport { FormHelperText } from \"@mui/material\";\n\nimport {\n    FastField,\n    Field,\n    FieldProps as FormikFieldProps,\n    getIn\n} from \"formik\";\n\nimport {\n    ArrayProperty,\n    CMSFormFieldProps,\n    CMSType,\n    FieldProps,\n    Property\n} from \"../models\";\n\nimport { Select } from \"./fields/Select\";\nimport { ArrayEnumSelect } from \"./fields/ArrayEnumSelect\";\nimport { StorageUploadField } from \"./fields/StorageUploadField\";\nimport { TextField } from \"./fields/TextField\";\nimport { SwitchField } from \"./fields/SwitchField\";\nimport { DateTimeField } from \"./fields/DateTimeField\";\nimport { ReferenceField } from \"./fields/ReferenceField\";\nimport { MapField } from \"./fields/MapField\";\nimport { ArrayDefaultField } from \"./fields/ArrayDefaultField\";\nimport { ArrayOneOfField } from \"./fields/ArrayOneOfField\";\nimport { ReadOnlyField } from \"./fields/ReadOnlyField\";\nimport { MarkdownField } from \"./fields/MarkdownField\";\n\nimport { ArrayOfReferencesField } from \"./fields/ArrayOfReferencesField\";\nimport { isReadOnly } from \"../core/utils\";\nimport isEqual from \"react-fast-compare\";\n\n\n/**\n * This factory method renders a form field creating the corresponding configuration\n * from a property. For example if bound to a string property, it will generate\n * a text field.\n *\n * You can use it when you are creating a custom field, and need to\n * render additional fields mapped to properties. This is useful if you\n * need to build a complex property mapping, like an array where each index\n * is a different property.\n *\n * Please note that if you build a custom field in a component, the\n * **validation** passed in the property will have no effect. You need to set\n * the validation in the `EntitySchema` definition.\n *\n * @param name You can use nested names such as `address.street` or `friends[2]`\n * @param property\n * @param context\n * @param includeDescription\n * @param underlyingValueHasChanged\n * @param disabled\n * @param tableMode\n * @param partOfArray\n * @param autoFocus\n * @param shouldAlwaysRerender\n * @category Form custom fields\n */\nexport function buildPropertyField<T extends CMSType = any, M = any>\n({\n     name,\n     property,\n     context,\n     includeDescription,\n     underlyingValueHasChanged,\n     disabled,\n     tableMode,\n     partOfArray,\n     autoFocus,\n     shouldAlwaysRerender\n }: CMSFormFieldProps<M>): ReactElement<CMSFormFieldProps<M>> {\n\n    let component: ComponentType<FieldProps<T, any, M>> | undefined;\n    if (isReadOnly(property)) {\n        component = ReadOnlyField;\n    } else if (property.config?.Field) {\n        component = property.config?.Field as ComponentType<FieldProps<T>>;\n    } else if (property.dataType === \"array\") {\n        const of = (property as ArrayProperty).of;\n        if (of) {\n            if ((of.dataType === \"string\" || of.dataType === \"number\") && of.config?.enumValues) {\n                component = ArrayEnumSelect as ComponentType<FieldProps<T>>;\n            } else if (of.dataType === \"string\" && of.config?.storageMeta) {\n                component = StorageUploadField as ComponentType<FieldProps<T>>;\n            } else if (of.dataType === \"reference\") {\n                component = ArrayOfReferencesField as ComponentType<FieldProps<T>>;\n            } else {\n                component = ArrayDefaultField as ComponentType<FieldProps<T>>;\n            }\n        }\n        const oneOf = (property as ArrayProperty).oneOf;\n        if (oneOf) {\n            component = ArrayOneOfField as ComponentType<FieldProps<T>>;\n        }\n        if (!of && !oneOf) {\n            throw Error(`You need to specify an 'of' or 'oneOf' prop (or specify a custom field) in your array property ${name}`);\n        }\n    } else if (property.dataType === \"map\") {\n        component = MapField as ComponentType<FieldProps<T>>;\n    } else if (property.dataType === \"reference\") {\n        if (!property.path)\n            component = ReadOnlyField as ComponentType<FieldProps<T>>;\n        else {\n            component = ReferenceField as ComponentType<FieldProps<T>>;\n        }\n    } else if (property.dataType === \"timestamp\") {\n        component = DateTimeField as ComponentType<FieldProps<T>>;\n    } else if (property.dataType === \"boolean\") {\n        component = SwitchField as ComponentType<FieldProps<T>>;\n    } else if (property.dataType === \"number\") {\n        if (property.config?.enumValues) {\n            component = Select as ComponentType<FieldProps<T>>;\n        } else {\n            component = TextField as ComponentType<FieldProps<T>>;\n        }\n    } else if (property.dataType === \"string\") {\n        if (property.config?.storageMeta) {\n            component = StorageUploadField as ComponentType<FieldProps<T>>;\n        } else if (property.config?.markdown) {\n            component = MarkdownField as ComponentType<FieldProps<T>>;\n        } else if (property.config?.enumValues) {\n            component = Select as ComponentType<FieldProps<T>>;\n        } else {\n            component = TextField as ComponentType<FieldProps<T>>;\n        }\n    }\n\n    if (component) {\n\n        const componentProps = {\n            name,\n            property,\n            includeDescription,\n            underlyingValueHasChanged,\n            context,\n            disabled,\n            tableMode,\n            partOfArray,\n            autoFocus,\n            shouldAlwaysRerender\n        };\n\n        // we use the standard Field for user defined fields, since it rebuilds\n        // when there are changes in other values, in contrast to FastField\n        const FieldComponent = shouldAlwaysRerender || property.config?.Field ? Field : FastField;\n\n        return (\n            <FieldComponent\n                required={property.validation?.required}\n                name={`${name}`}\n            >\n                {(fieldProps: FormikFieldProps<T>) => {\n                    return <FieldInternal\n                        component={component as ComponentType<FieldProps<T>>}\n                        componentProps={componentProps}\n                        fieldProps={fieldProps}/>;\n                }}\n            </FieldComponent>\n        );\n\n    }\n\n    return (\n        <div>{`Currently the field ${property.dataType} is not supported`}</div>\n    );\n}\n\n\nfunction FieldInternal<T extends CMSType, M extends { [Key: string]: any }>\n({\n     component,\n     componentProps: {\n         name,\n         property,\n         includeDescription,\n         underlyingValueHasChanged,\n         tableMode,\n         partOfArray,\n         autoFocus,\n         context,\n         disabled,\n         shouldAlwaysRerender\n     },\n     fieldProps\n\n }:\n     {\n         component: ComponentType<FieldProps<T>>,\n         componentProps: CMSFormFieldProps<M>,\n         fieldProps: FormikFieldProps<T>\n     }) {\n\n    const customFieldProps: any = property.config?.customProps;\n    const value = fieldProps.field.value;\n    const initialValue = fieldProps.meta.initialValue;\n    const error = getIn(fieldProps.form.errors, name);\n    const touched = getIn(fieldProps.form.touched, name);\n\n    const showError: boolean = error &&\n        (fieldProps.form.submitCount > 0 || property.validation?.unique) &&\n        (!Array.isArray(error) || !!error.filter((e: any) => !!e).length);\n\n    const isSubmitting = fieldProps.form.isSubmitting;\n\n    const [internalValue, setInternalValue] = useState<T | null>(value);\n    useEffect(\n        () => {\n            const handler = setTimeout(() => {\n                fieldProps.form.setFieldValue(name, internalValue);\n            }, 50);\n\n            return () => {\n                clearTimeout(handler);\n            };\n        },\n        [internalValue]\n    );\n\n    useEffect(\n        () => {\n            if (!isEqual(value, internalValue)) {\n                setInternalValue(value);\n            }\n        },\n        [value]\n    );\n\n    const cmsFieldProps: FieldProps<T> = {\n        name,\n        value: internalValue as T,\n        initialValue,\n        setValue: (value: T | null) => {\n            fieldProps.form.setFieldTouched(name, true, false);\n            setInternalValue(value);\n        },\n        error,\n        touched,\n        showError,\n        isSubmitting,\n        includeDescription: includeDescription ?? true,\n        property: property as Property<T>,\n        disabled: disabled ?? false,\n        underlyingValueHasChanged: underlyingValueHasChanged ?? false,\n        tableMode: tableMode ?? false,\n        partOfArray: partOfArray ?? false,\n        autoFocus: autoFocus ?? false,\n        customProps: customFieldProps,\n        context,\n        shouldAlwaysRerender: shouldAlwaysRerender ?? true\n    };\n\n    return (\n        <>\n\n            {React.createElement(component, cmsFieldProps)}\n\n            {underlyingValueHasChanged && !isSubmitting &&\n            <FormHelperText>\n                This value has been updated elsewhere\n            </FormHelperText>}\n\n        </>);\n\n}\n\n","import React from \"react\";\nimport { FieldProps, Properties, Property } from \"../../models\";\nimport {\n    Box,\n    FormControl,\n    FormHelperText,\n    Grid,\n    InputLabel,\n    MenuItem,\n    Paper,\n    Select\n} from \"@mui/material\";\nimport { SelectChangeEvent } from \"@mui/material/Select\";\n\nimport { pick } from \"../../core/util/objects\";\nimport { FieldDescription, LabelWithIcon } from \"../components\";\nimport { useClearRestoreValue } from \"../../hooks\";\nimport { buildPropertyField } from \"../form_factory\";\nimport { isHidden } from \"../../core/utils\";\n\n/**\n * Field that renders the children property fields\n *\n * This is one of the internal components that get mapped natively inside forms\n * and tables to the specified properties.\n * @category Form fields\n */\nexport function MapField<T extends object>({\n                                               name,\n                                               value,\n                                               showError,\n                                               disabled,\n                                               property,\n                                               setValue,\n                                               tableMode,\n                                               includeDescription,\n                                               underlyingValueHasChanged,\n                                               context\n                                           }: FieldProps<T>) {\n\n\n    const pickOnlySomeKeys = property.config?.pickOnlySomeKeys || false;\n\n    if (!property.properties) {\n        throw Error(`You need to specify a 'properties' prop (or specify a custom field) in your map property ${name}`);\n    }\n\n    let mapProperties: Record<string, Property>;\n    if (!pickOnlySomeKeys) {\n        mapProperties = property.properties as Properties;\n    } else if (value) {\n        mapProperties = pick(property.properties as Properties,\n            ...Object.keys(value)\n                .filter(key => key in property.properties!)\n        );\n    } else {\n        mapProperties = {};\n    }\n\n    useClearRestoreValue({\n        property,\n        value,\n        setValue\n    });\n\n    function buildPickKeysSelect() {\n\n        const keys = Object.keys(property.properties!)\n            .filter((key) => !value || !(key in value));\n\n        const handleAddProperty = (event: SelectChangeEvent) => {\n            setValue({\n                ...value,\n                [event.target.value as string]: null\n            });\n        };\n\n        if (!keys.length) return <></>;\n\n        return <Box m={1}>\n            <FormControl fullWidth>\n                <InputLabel>Add property</InputLabel>\n                <Select\n                    variant={\"standard\"}\n                    value={\"\"}\n                    disabled={disabled}\n                    onChange={handleAddProperty}>\n                    {keys.map((key) => (\n                        <MenuItem key={key} value={key}>\n                            {(property.properties as Properties)[key].title || key}\n                        </MenuItem>\n                    ))}\n                </Select>\n            </FormControl>\n        </Box>;\n    }\n\n    return (\n        <FormControl fullWidth error={showError}>\n\n            {!tableMode && <FormHelperText filled\n                                           required={property.validation?.required}>\n                <LabelWithIcon property={property}/>\n            </FormHelperText>}\n\n            <Paper elevation={0} variant={\"outlined\"} sx={(theme) => ({\n                elevation: 0,\n                padding: theme.spacing(2),\n                [theme.breakpoints.up(\"md\")]: {\n                    padding: theme.spacing(2)\n                }\n            })}>\n                <Grid container spacing={2}>\n                    {Object.entries(mapProperties)\n                        .filter(([_, property]) => !isHidden(property))\n                        .map(([entryKey, childProperty], index) => {\n                            return (\n                                <Grid item\n                                      sm={12}\n                                      xs={12}\n                                      key={`map-${name}-${index}`}>\n                                    {\n                                        buildPropertyField<any, T>({\n                                            name: `${name}[${entryKey}]`,\n                                            disabled,\n                                            property: childProperty,\n                                            includeDescription,\n                                            underlyingValueHasChanged,\n                                            context,\n                                            tableMode,\n                                            partOfArray: false,\n                                            autoFocus: false,\n                                                shouldAlwaysRerender: false\n                                            })\n                                        }\n                                    </Grid>\n                                );\n                            }\n                        )}\n                </Grid>\n\n                {pickOnlySomeKeys && buildPickKeysSelect()}\n\n            </Paper>\n\n            {includeDescription &&\n            <FieldDescription property={property}/>}\n\n        </FormControl>\n    );\n}\n","import React, { useEffect } from \"react\";\nimport { useFormikContext } from \"formik\";\n\nexport const ErrorFocus = ({ containerRef }:\n                               { containerRef?: React.RefObject<HTMLDivElement> }) => {\n    const { isSubmitting, isValidating, errors } = useFormikContext();\n\n    useEffect(() => {\n        const keys = Object.keys(errors);\n\n        // Whenever there are errors and the form is submitting but finished validating.\n        if (keys.length > 0 && isSubmitting && !isValidating) {\n            const errorElement = containerRef?.current?.querySelector<HTMLDivElement>(\n                `#form_field_${keys[0]}`\n            );\n\n            if (errorElement && containerRef?.current) {\n                const scrollableParent = getScrollableParent(containerRef.current);\n                if (scrollableParent) {\n                    const top = errorElement.getBoundingClientRect().top;\n                    scrollableParent.scrollTo({\n                        top: scrollableParent.scrollTop + top - 64,\n                        behavior: \"smooth\"\n                    });\n                }\n                const input = errorElement.querySelector(\"input\");\n                if (input) input.focus();\n            }\n        }\n    }, [isSubmitting, isValidating, errors, containerRef]);\n\n    // This component does not render anything by itself.\n    return null;\n};\n\nconst isScrollable = (ele: HTMLElement | null) => {\n    const hasScrollableContent = ele && ele.scrollHeight > ele.clientHeight;\n\n    const overflowYStyle = ele ? window.getComputedStyle(ele).overflowY : null;\n    const isOverflowHidden = overflowYStyle && overflowYStyle.indexOf(\"hidden\") !== -1;\n\n    return hasScrollableContent && !isOverflowHidden;\n};\n\nconst getScrollableParent = (ele: HTMLElement | null): HTMLElement | null => {\n    return (!ele || ele === document.body)\n        ? document.body\n        : (isScrollable(ele) ? ele : getScrollableParent(ele.parentNode as HTMLElement));\n};\n","import React from \"react\";\n\nimport {\n    FormControl,\n    IconButton,\n    InputAdornment,\n    InputLabel,\n    MenuItem,\n    Select as MuiSelect,\n    TextField as MuiTextField,\n    Theme,\n    Tooltip\n} from \"@mui/material\";\nimport OpenInNewIcon from \"@mui/icons-material/OpenInNew\";\n\nimport { ErrorMessage } from \"formik\";\n\nimport {\n    Entity,\n    EntitySchema,\n    EntityStatus,\n    FireCMSContext\n} from \"../../models\";\n\nimport {\n    useClipboard,\n    useFireCMSContext,\n    useSnackbarController\n} from \"../../hooks\";\n\nimport createStyles from \"@mui/styles/createStyles\";\nimport makeStyles from \"@mui/styles/makeStyles\";\n\nconst formStyles = makeStyles((theme: Theme) => createStyles({\n    paper: {\n        elevation: 0,\n        padding: theme.spacing(2),\n        [theme.breakpoints.up(\"md\")]: {\n            padding: theme.spacing(2)\n        }\n    },\n    largePadding: {\n        padding: theme.spacing(2),\n        [theme.breakpoints.up(\"md\")]: {\n            padding: theme.spacing(3)\n        }\n    },\n    inputLabel: {\n        marginTop: theme.spacing(1 / 2),\n        marginLeft: theme.spacing(1 / 2)\n    },\n    shrinkInputLabel: {\n        marginTop: \"-2px\",\n        marginLeft: theme.spacing(1 / 2)\n    },\n    buttons: {\n        display: \"flex\",\n        justifyContent: \"flex-end\"\n    },\n    button: {\n        margin: theme.spacing(1)\n    },\n    form: {\n        marginTop: theme.spacing(2)\n    },\n    input: {\n        minHeight: \"64px\"\n    },\n    select: {\n        paddingTop: theme.spacing(1 / 2)\n    },\n    oneOfInput: {\n        marginBottom: theme.spacing(2)\n    }\n}))\n\nexport function CustomIdField<M, UserType>\n({ schema, status, onChange, error, entity }: {\n    schema: EntitySchema<M>,\n    status: EntityStatus,\n    onChange: Function,\n    error: boolean,\n    entity: Entity<M> | undefined\n}) {\n\n    const classes = formStyles();\n\n    const disabled = status === \"existing\" || !schema.customId;\n    const idSetAutomatically = status !== \"existing\" && !schema.customId;\n\n    const hasEnumValues = typeof schema.customId === \"object\";\n\n    const snackbarContext = useSnackbarController();\n    const { copy } = useClipboard({\n        onSuccess: (text) => snackbarContext.open({\n            type: \"success\",\n            message: `Copied ${text}`\n        })\n    });\n\n    const appConfig: FireCMSContext<UserType> | undefined = useFireCMSContext();\n    const inputProps = {\n        className: classes.input,\n        endAdornment: entity\n? (\n            <InputAdornment position=\"end\">\n\n                <IconButton onClick={(e) => copy(entity.id)}\n                            aria-label=\"copy-id\"\n                            size=\"large\">\n                    <Tooltip title={\"Copy\"}>\n                        <svg\n                            className={\"MuiSvgIcon-root MuiSvgIcon-fontSizeSmall\"}\n                            fill={\"currentColor\"}\n                            width=\"20\" height=\"20\" viewBox=\"0 0 24 24\">\n                            <path\n                                d=\"M16 1H4c-1.1 0-2 .9-2 2v14h2V3h12V1zm3 4H8c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h11c1.1 0 2-.9 2-2V7c0-1.1-.9-2-2-2zm0 16H8V7h11v14z\"/>\n                        </svg>\n                    </Tooltip>\n                </IconButton>\n\n                {appConfig?.entityLinkBuilder &&\n                <a href={appConfig.entityLinkBuilder({ entity })}\n                   rel=\"noopener noreferrer\"\n                   target=\"_blank\">\n                    <IconButton onClick={(e) => e.stopPropagation()}\n                                aria-label=\"go-to-datasource\" size=\"large\">\n                        <Tooltip title={\"Open in the console\"}>\n                            <OpenInNewIcon fontSize={\"small\"}/>\n                        </Tooltip>\n                    </IconButton>\n                </a>}\n\n            </InputAdornment>\n        )\n: undefined\n    };\n\n    const fieldProps: any = {\n        label: idSetAutomatically ? \"ID is set automatically\" : \"ID\",\n        disabled: disabled,\n        name: \"id\",\n        type: null,\n        value: entity && status === \"existing\" ? entity.id : undefined,\n        variant: \"filled\"\n    };\n\n    return (\n        <FormControl fullWidth\n                     error={error}\n                     {...fieldProps}\n                     key={\"custom-id-field\"}>\n\n            {hasEnumValues && schema.customId &&\n            <>\n                <InputLabel id={\"id-label\"}>{fieldProps.label}</InputLabel>\n                <MuiSelect\n                    labelId={\"id-label\"}\n                    className={classes.select}\n                    error={error}\n                    {...fieldProps}\n                    onChange={(event: any) => onChange(event.target.value)}>\n                    {Object.entries(schema.customId).map(([key, label]) =>\n                        <MenuItem\n                            key={`custom-id-item-${key}`}\n                            value={key}>\n                            {`${key} - ${label}`}\n                        </MenuItem>)}\n                </MuiSelect>\n            </>}\n\n            {!hasEnumValues &&\n            <MuiTextField {...fieldProps}\n                          error={error}\n                          InputProps={inputProps}\n                          helperText={schema.customId === \"optional\" ? \"Leave this blank to autogenerate an ID\" : \"ID of the new document\"}\n                          onChange={(event) => {\n                              let value = event.target.value;\n                              if (value) value = value.trim();\n                              return onChange(value.length ? value : undefined);\n                          }}/>}\n\n            <ErrorMessage name={\"id\"}\n                          component=\"div\">\n                {(_) => \"You need to specify an ID\"}\n            </ErrorMessage>\n\n        </FormControl>\n    );\n}\n\n","import React, { useCallback, useEffect, useMemo, useState } from \"react\";\nimport { Box, Button, Container, Grid, Theme, Typography } from \"@mui/material\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport makeStyles from \"@mui/styles/makeStyles\";\nimport {\n    CMSFormFieldProps,\n    Entity,\n    EntitySchema,\n    EntitySchemaResolver,\n    EntityStatus,\n    EntityValues,\n    FormContext,\n    Properties,\n    Property,\n    ResolvedEntitySchema\n} from \"../models\";\nimport { Form, Formik, FormikHelpers } from \"formik\";\nimport { buildPropertyField } from \"./form_factory\";\nimport { CustomFieldValidator, getYupEntitySchema } from \"./validation\";\nimport isEqual from \"react-fast-compare\";\nimport { ErrorFocus } from \"./components/ErrorFocus\";\nimport {\n    computeSchema,\n    initWithProperties,\n    isHidden,\n    isReadOnly\n} from \"../core/utils\";\nimport { CustomIdField } from \"./components/CustomIdField\";\nimport { useDataSource } from \"../hooks\";\n\nexport const useStyles = makeStyles((theme: Theme) => createStyles({\n    stickyButtons: {\n        marginTop: theme.spacing(2),\n        background: theme.palette.mode === \"light\" ? \"rgba(255,255,255,0.6)\" : \"rgba(255, 255, 255, 0)\",\n        backdropFilter: \"blur(4px)\",\n        borderTop: theme.palette.divider,\n        position: \"sticky\",\n        bottom: 0,\n        zIndex: 200\n    },\n    container: {\n        padding: theme.spacing(4),\n        marginTop: theme.spacing(2),\n        marginBottom: theme.spacing(2),\n        [theme.breakpoints.down(\"lg\")]: {\n            paddingLeft: theme.spacing(2),\n            paddingRight: theme.spacing(2),\n            paddingTop: theme.spacing(3),\n            paddingBottom: theme.spacing(3)\n        },\n        [theme.breakpoints.down(\"md\")]: {\n            padding: theme.spacing(2)\n        }\n    },\n    button: {\n        margin: theme.spacing(1)\n    },\n    form: {\n        marginTop: theme.spacing(2)\n    }\n}));\n\n/**\n *\n * @category Components\n */\nexport interface EntityFormProps<M> {\n\n    /**\n     * New or existing status\n     */\n    status: EntityStatus;\n\n    /**\n     * Path of the collection this entity is located\n     */\n    path: string;\n\n    /**\n     * Use to resolve the schema properties for specific path, entity id or values\n     */\n    schemaOrResolver: EntitySchema<M> & EntitySchemaResolver<M>;\n\n    /**\n     * The updated entity is passed from the parent component when the underlying data\n     * has changed in the datasource\n     */\n    entity?: Entity<M>;\n\n    /**\n     * The callback function called when Save is clicked and validation is correct\n     */\n    onEntitySave?(\n        props:\n            {\n                schema: EntitySchema<M>,\n                path: string,\n                entityId: string | undefined,\n                values: EntityValues<M>,\n                previousValues?: EntityValues<M>\n            }\n    ): Promise<void>;\n\n    /**\n     * The callback function called when discard is clicked\n     */\n    onDiscard?(): void;\n\n    /**\n     * The callback function when the form is dirty, so the values are different\n     * from the original ones\n     */\n    onModified?(dirty: boolean): void;\n\n    /**\n     * The callback function when the form original values have been modified\n     */\n    onValuesChanged?(values?: EntityValues<M>): void;\n\n}\n\n/**\n * This is the form used internally by the CMS\n * @param status\n * @param path\n * @param schemaOrResolver\n * @param entity\n * @param onEntitySave\n * @param onDiscard\n * @param onModified\n * @param onValuesChanged\n * @constructor\n * @category Components\n */\nexport function EntityForm<M>({\n                                  status,\n                                  path,\n                                  schemaOrResolver,\n                                  entity,\n                                  onEntitySave,\n                                  onDiscard,\n                                  onModified,\n                                  onValuesChanged\n                              }: EntityFormProps<M>) {\n\n    const classes = useStyles();\n    const dataSource = useDataSource();\n\n    /**\n     * Base values are the ones this view is initialized from, we use them to\n     * compare them with underlying changes in the datasource\n     */\n    const entityId = status === \"existing\" ? entity?.id : undefined;\n    const initialResolvedSchema: ResolvedEntitySchema<M> = useMemo(() => computeSchema({\n        schemaOrResolver,\n        path,\n        entityId\n    }), [path, entityId]);\n\n    const baseDataSourceValues: Partial<EntityValues<M>> = useMemo(() => {\n        const properties = initialResolvedSchema.properties;\n        if ((status === \"existing\" || status === \"copy\") && entity) {\n            return entity.values ?? initWithProperties(properties, initialResolvedSchema.defaultValues);\n        } else if (status === \"new\") {\n            return initWithProperties(properties, initialResolvedSchema.defaultValues);\n        } else {\n            console.error({ status, entity });\n            throw new Error(\"Form has not been initialised with the correct parameters\");\n        }\n    }, [status, initialResolvedSchema, entity]);\n\n    const formRef = React.useRef<HTMLDivElement>(null);\n\n    const [customId, setCustomId] = React.useState<string | undefined>(undefined);\n    const [customIdError, setCustomIdError] = React.useState<boolean>(false);\n    const [savingError, setSavingError] = React.useState<any>();\n\n    const initialValuesRef = React.useRef<EntityValues<M>>(entity?.values ?? baseDataSourceValues as EntityValues<M>);\n    const initialValues = initialValuesRef.current;\n\n    const [internalValue, setInternalValue] = useState<EntityValues<M> | undefined>(initialValues);\n\n    const schema: ResolvedEntitySchema<M> = useMemo(() => computeSchema({\n        schemaOrResolver,\n        path,\n        entityId,\n        values: internalValue,\n        previousValues: initialValues\n    }), [schemaOrResolver, path, entityId, internalValue]);\n\n    const mustSetCustomId: boolean = (status === \"new\" || status === \"copy\") && (!!schema.customId && schema.customId !== \"optional\");\n\n    const underlyingChanges: Partial<EntityValues<M>> = useMemo(() => {\n        if (initialValues && status === \"existing\") {\n            return Object.keys(schema.properties)\n                .map((key) => {\n                    const initialValue = (initialValues as any)[key];\n                    const latestValue = (baseDataSourceValues as any)[key];\n                    if (!isEqual(initialValue, latestValue)) {\n                        return { [key]: latestValue };\n                    }\n                    return {};\n                })\n                .reduce((a, b) => ({ ...a, ...b }), {}) as Partial<EntityValues<M>>;\n        } else {\n            return {};\n        }\n    }, [initialValues, baseDataSourceValues]);\n\n    const saveValues = useCallback((values: EntityValues<M>, formikActions: FormikHelpers<EntityValues<M>>) => {\n\n        if (mustSetCustomId && !customId) {\n            console.error(\"Missing custom Id\");\n            setCustomIdError(true);\n            formikActions.setSubmitting(false);\n            return;\n        }\n\n        setSavingError(null);\n        setCustomIdError(false);\n\n        let savedEntityId: string | undefined;\n        if (status === \"existing\") {\n            if (!entity?.id) throw Error(\"Form misconfiguration when saving, no id for existing entity\");\n            savedEntityId = entity.id;\n        } else if (status === \"new\" || status === \"copy\") {\n            if (schema.customId) {\n                if (schema.customId !== \"optional\" && !customId) {\n                    throw Error(\"Form misconfiguration when saving, customId should be set\");\n                }\n                savedEntityId = customId;\n            }\n        } else {\n            throw Error(\"New FormType added, check EntityForm\");\n        }\n\n        if (onEntitySave)\n            onEntitySave({\n                schema: schema as EntitySchema,\n                path,\n                entityId: savedEntityId,\n                values,\n                previousValues: entity?.values\n            })\n                .then(_ => {\n                    initialValuesRef.current = values;\n                    formikActions.setTouched({});\n                })\n                .catch(e => {\n                    console.error(e);\n                    setSavingError(e);\n                })\n                .finally(() => {\n                    formikActions.setSubmitting(false);\n                });\n\n    }, [status, path, schema, entity, onEntitySave, mustSetCustomId, customId]);\n\n\n    const uniqueFieldValidator: CustomFieldValidator = useCallback(({\n                                                                        name,\n                                                                        value,\n                                                                        property\n                                                                    }) => dataSource.checkUniqueField(path, name, value, property, entityId),\n        [dataSource, path, entityId]);\n\n    const validationSchema = useMemo(() => getYupEntitySchema(\n        schema.properties,\n        uniqueFieldValidator), [schema.properties]);\n\n\n    return (\n        <Formik\n            initialValues={initialValues}\n            onSubmit={saveValues}\n            validationSchema={validationSchema}\n            validate={(values) => console.debug(\"Validating\", values)}\n            onReset={() => onDiscard && onDiscard()}\n        >\n            {({\n                  values,\n                  touched,\n                  setFieldValue,\n                  handleSubmit,\n                  isSubmitting,\n                  dirty\n              }) => {\n\n                return <FormInternal baseDataSourceValues={baseDataSourceValues}\n                                     values={values} onModified={onModified}\n                                     setInternalValue={setInternalValue}\n                                     onValuesChanged={onValuesChanged}\n                                     underlyingChanges={underlyingChanges}\n                                     entityId={entityId}\n                                     entity={entity}\n                                     touched={touched}\n                                     setFieldValue={setFieldValue}\n                                     schema={schema}\n                                     isSubmitting={isSubmitting}\n                                     classes={classes}\n                                     formRef={formRef}\n                                     status={status}\n                                     setCustomId={setCustomId}\n                                     customIdError={customIdError}\n                                     handleSubmit={handleSubmit}\n                                     savingError={savingError}/>;\n            }}\n        </Formik>\n    );\n}\n\nfunction FormInternal<M>({\n                             baseDataSourceValues,\n                             values,\n                             onModified,\n                             setInternalValue,\n                             onValuesChanged,\n                             underlyingChanges,\n                             entity,\n                             touched,\n                             setFieldValue,\n                             schema,\n                             entityId,\n                             isSubmitting,\n                             classes,\n                             formRef,\n                             status,\n                             setCustomId,\n                             customIdError,\n                             handleSubmit,\n                             savingError\n                         }: {\n    baseDataSourceValues: Partial<M>,\n    values: any,\n    onModified: ((modified: boolean) => void) | undefined,\n    setInternalValue: any,\n    onValuesChanged?: (changedValues?: EntityValues<M>) => void,\n    underlyingChanges: Partial<M>,\n    entity: Entity<M> | undefined,\n    touched: any,\n    setFieldValue: any,\n    schema: ResolvedEntitySchema<M>,\n    entityId: string | undefined,\n    isSubmitting: any,\n    classes: any,\n    formRef: any,\n    status: \"new\" | \"existing\" | \"copy\",\n    setCustomId: any,\n    customIdError: any,\n    handleSubmit: any,\n    savingError: any\n}) {\n    const modified = useMemo(() => !isEqual(baseDataSourceValues, values), [baseDataSourceValues, values]);\n    useEffect(() => {\n        if (onModified)\n            onModified(modified);\n        setInternalValue(values);\n        if (onValuesChanged)\n            onValuesChanged(values);\n    }, [modified, values]);\n\n    if (underlyingChanges && entity) {\n        // we update the form fields from the Firestore data\n        // if they were not touched\n        Object.entries(underlyingChanges).forEach(([key, value]) => {\n            const formValue = (values as any)[key];\n            if (!isEqual(value, formValue) && !(touched as any)[key]) {\n                console.debug(\"Updated value from the datasource:\", key, value);\n                setFieldValue(key, value !== undefined ? value : null);\n            }\n        });\n    }\n\n    const context: FormContext<M> = {\n        schema,\n        entityId,\n        values\n    };\n\n    const formFields = (\n        <Grid container spacing={4}>\n\n            {Object.entries<Property>(schema.properties as Properties)\n                .filter(([key, property]) => !isHidden(property))\n                .map(([key, property]) => {\n\n                    const underlyingValueHasChanged: boolean =\n                        !!underlyingChanges &&\n                        Object.keys(underlyingChanges).includes(key) &&\n                        !!(touched as any)[key];\n\n                    const shouldAlwaysRerender = typeof (schema.originalSchema.properties as any)[key] === \"function\";\n\n                    const disabled = isSubmitting || isReadOnly(property) || Boolean(property.disabled);\n                    const cmsFormFieldProps: CMSFormFieldProps = {\n                        name: key,\n                        disabled: disabled,\n                        property: property,\n                        includeDescription: true,\n                        underlyingValueHasChanged: underlyingValueHasChanged,\n                        context: context,\n                        tableMode: false,\n                        partOfArray: false,\n                        autoFocus: false,\n                        shouldAlwaysRerender: shouldAlwaysRerender\n                    };\n                    return (\n                        <Grid item\n                              xs={12}\n                              id={`form_field_${key}`}\n                              key={`field_${schema.name}_${key}`}>\n                            {buildPropertyField(cmsFormFieldProps)}\n                        </Grid>\n                    );\n                })}\n\n        </Grid>\n    );\n\n    return (\n        <Container maxWidth={\"sm\"}\n                   className={classes.container}\n                   ref={formRef}>\n\n            <CustomIdField schema={schema as EntitySchema}\n                           status={status}\n                           onChange={setCustomId}\n                           error={customIdError}\n                           entity={entity}/>\n\n            <Form className={classes.form}\n                  onSubmit={handleSubmit}\n                  noValidate>\n\n                <Box pt={3}>\n                    {formFields}\n                </Box>\n\n                <div className={classes.stickyButtons}>\n\n                    {savingError &&\n                    <Box textAlign=\"right\">\n                        <Typography color={\"error\"}>\n                            {savingError.message}\n                        </Typography>\n                    </Box>}\n\n                    {buildButtons(classes, isSubmitting, modified, status)}\n\n                </div>\n\n            </Form>\n\n\n            <ErrorFocus containerRef={formRef}/>\n\n        </Container>\n    );\n}\n\nfunction buildButtons(classes: any, isSubmitting: boolean, modified: boolean, status: EntityStatus) {\n    const disabled = isSubmitting || (!modified && status === \"existing\");\n    return (\n        <Box textAlign=\"right\">\n\n            {status === \"existing\" &&\n            <Button\n                variant=\"text\"\n                color=\"primary\"\n                disabled={disabled}\n                className={classes.button}\n                type=\"reset\"\n            >\n                Discard\n            </Button>}\n\n            <Button\n                variant=\"contained\"\n                color=\"primary\"\n                type=\"submit\"\n                disabled={disabled}\n                className={classes.button}\n            >\n                {status === \"existing\" && \"Save\"}\n                {status === \"copy\" && \"Create copy\"}\n                {status === \"new\" && \"Create\"}\n            </Button>\n\n        </Box>\n    );\n}\n\n\nexport default EntityForm;\n","import { RefObject, useCallback, useEffect, useRef } from \"react\";\n\ninterface Props {\n    onResize: (event: Event) => void;\n}\n\nexport const ElementResizeListener: React.FC<Props> = ({ onResize }) => {\n    const rafRef = useRef(0);\n    const objectRef: RefObject<HTMLObjectElement> = useRef(null);\n    const onResizeRef = useRef(onResize);\n\n    onResizeRef.current = onResize;\n\n    const _onResize = useCallback((e: Event) => {\n        if (rafRef.current) {\n            cancelAnimationFrame(rafRef.current);\n        }\n        rafRef.current = requestAnimationFrame(() => {\n            onResizeRef.current(e);\n        });\n    }, []);\n\n    const onLoad = useCallback(() => {\n        const obj = objectRef.current;\n        if (obj && obj.contentDocument && obj.contentDocument.defaultView) {\n            obj.contentDocument.defaultView.addEventListener(\"resize\", _onResize);\n        }\n    }, [_onResize]);\n\n    useEffect(() => {\n        const obj = objectRef.current;\n        return () => {\n            if (obj && obj.contentDocument && obj.contentDocument.defaultView) {\n                obj.contentDocument.defaultView.removeEventListener(\"resize\", _onResize);\n            }\n        };\n    }, [_onResize]);\n\n    return (\n        <object\n            onLoad={onLoad}\n            ref={objectRef} tabIndex={-1}\n            type={\"text/html\"}\n            data={\"about:blank\"}\n            title={\"\"}\n            style={{\n                position: \"absolute\",\n                top: 0,\n                left: 0,\n                height: \"100%\",\n                width: \"100%\",\n                pointerEvents: \"none\",\n                zIndex: -1,\n                opacity: 0\n            }}\n        />\n    );\n};\n","import React, {\n    useCallback,\n    useEffect,\n    useLayoutEffect,\n    useMemo,\n    useState\n} from \"react\";\n\nimport { Button, IconButton, Theme, Typography } from \"@mui/material\";\nimport { Portal } from \"@mui/base\";\n\nimport createStyles from \"@mui/styles/createStyles\";\nimport makeStyles from \"@mui/styles/makeStyles\";\nimport ClearIcon from \"@mui/icons-material/Clear\";\n\nimport isEqual from \"react-fast-compare\";\n\nimport {\n    Entity,\n    EntitySchemaResolver,\n    EntityValues,\n    FormContext,\n    Properties,\n    Property\n} from \"../../../../../models\";\nimport { Form, Formik, FormikProps } from \"formik\";\nimport { useDraggable } from \"./useDraggable\";\nimport {\n    CustomFieldValidator,\n    getYupEntitySchema\n} from \"../../../../../form/validation\";\nimport { useWindowSize } from \"./useWindowSize\";\nimport { computeSchema, isReadOnly } from \"../../../../utils\";\nimport { buildPropertyField } from \"../../../../../form\";\nimport clsx from \"clsx\";\nimport { ElementResizeListener } from \"./ElementResizeListener\";\nimport { OnCellValueChangeParams } from \"../../column_builder\";\nimport { ErrorView } from \"../../../ErrorView\";\n\nexport const useStyles = makeStyles((theme: Theme) => createStyles({\n    form: {\n        display: \"flex\",\n        flexDirection: \"column\"\n    },\n    button: {\n        marginTop: theme.spacing(1),\n        alignSelf: \"flex-end\",\n        position: \"sticky\",\n        bottom: 0\n    },\n    popup: {\n        display: \"inline-block\",\n        userSelect: \"none\",\n        position: \"fixed\",\n        zIndex: 1300,\n        boxShadow: \"0 0 0 2px rgba(128,128,128,0.2)\",\n        borderRadius: \"4px\",\n        backgroundColor: theme.palette.background.paper\n        // transition: \"transform 250ms ease-out\",\n        // transform: \"scale(1.0)\"\n    },\n    popupInner: {\n        padding: theme.spacing(2),\n        overflow: \"auto\",\n        cursor: \"inherit\"\n    },\n    hidden: {\n        visibility: \"hidden\",\n        // transform: \"scale(0.7)\",\n        zIndex: -1\n    }\n}));\n\n\ninterface PopupFormFieldProps<M extends { [Key: string]: any }> {\n    entity?: Entity<M>;\n    customFieldValidator?: CustomFieldValidator;\n    path: string;\n    tableKey: string;\n    name?: keyof M;\n    schemaResolver?: EntitySchemaResolver<M>;\n    cellRect?: DOMRect;\n    open: boolean;\n    onClose: () => void;\n    columnIndex?: number;\n    setPreventOutsideClick: (value: any) => void;\n\n    /**\n     * Callback when the value of a cell has been edited\n     * @param params\n     */\n    onCellValueChange?: (params: OnCellValueChangeParams<any, M>) => Promise<void>;\n}\n\nexport function PopupFormField<M extends { [Key: string]: any }>({\n                                                                     tableKey,\n                                                                     entity,\n                                                                     customFieldValidator,\n                                                                     name,\n                                                                     schemaResolver,\n                                                                     path,\n                                                                     cellRect,\n                                                                     setPreventOutsideClick,\n                                                                     open,\n                                                                     onClose,\n                                                                     columnIndex,\n                                                                     onCellValueChange\n                                                                 }: PopupFormFieldProps<M>) {\n\n    const [savingError, setSavingError] = React.useState<any>();\n    const [popupLocation, setPopupLocation] = useState<{ x: number, y: number }>();\n    const [internalValue, setInternalValue] = useState<EntityValues<M> | undefined>(entity?.values);\n\n    const classes = useStyles();\n    const windowSize = useWindowSize();\n\n    const ref = React.useRef<HTMLDivElement>(null);\n    const containerRef = React.useRef<HTMLDivElement>(null);\n    const initialPositionSet = React.useRef<boolean>(false);\n\n    const draggableBoundingRect = ref.current?.getBoundingClientRect();\n\n    useDraggable({\n        containerRef,\n        ref,\n        x: popupLocation?.x,\n        y: popupLocation?.y,\n        onMove: (x, y) => onMove({ x, y })\n    });\n\n    useEffect(\n        () => {\n            initialPositionSet.current = false;\n        },\n        [name, entity]\n    );\n\n    const getInitialLocation = useCallback(() => {\n        if (!cellRect) throw Error(\"getInitialLocation error\");\n\n        return {\n            x: cellRect.left < windowSize.width - cellRect.right\n                ? cellRect.x + cellRect.width / 2\n                : cellRect.x - cellRect.width / 2,\n            y: cellRect.top < windowSize.height - cellRect.bottom\n                ? cellRect.y + cellRect.height / 2\n                : cellRect.y - cellRect.height / 2\n        };\n    }, [cellRect, windowSize.height, windowSize.width]);\n\n    const normalizePosition = useCallback(({\n                                               x,\n                                               y\n                                           }: { x: number, y: number }) => {\n        if (!draggableBoundingRect)\n            throw Error(\"normalizePosition called before draggableBoundingRect is set\");\n\n        return {\n            x: Math.max(0, Math.min(x, windowSize.width - draggableBoundingRect.width)),\n            y: Math.max(0, Math.min(y, windowSize.height - draggableBoundingRect.height))\n        };\n    }, [draggableBoundingRect, windowSize]);\n\n    const updatePopupLocation = useCallback((position?: { x: number, y: number }) => {\n        if (!cellRect || !draggableBoundingRect) return;\n        const newPosition = normalizePosition(position ?? getInitialLocation());\n        if (!popupLocation || newPosition.x !== popupLocation.x || newPosition.y !== popupLocation.y)\n            setPopupLocation(newPosition);\n    }, [cellRect, draggableBoundingRect, getInitialLocation, normalizePosition, popupLocation]);\n\n    useEffect(\n        () => {\n            if (!cellRect || !draggableBoundingRect || initialPositionSet.current) return;\n            initialPositionSet.current = true;\n            updatePopupLocation(getInitialLocation());\n        },\n        [cellRect, draggableBoundingRect, getInitialLocation, updatePopupLocation]\n    );\n\n    useLayoutEffect(\n        () => {\n            updatePopupLocation(popupLocation);\n        },\n        [windowSize, cellRect]\n    );\n\n    useEffect(\n        () => {\n            setPreventOutsideClick(open);\n        },\n        [open]\n    );\n\n    const validationSchema = useMemo(() => {\n        if (!schemaResolver) return;\n        const schema = computeSchema({\n            schemaOrResolver: schemaResolver,\n            path,\n            values: internalValue,\n            previousValues: entity?.values\n        });\n        return getYupEntitySchema(\n            name && schema.properties[name]\n                ? { [name]: schema.properties[name] } as Properties<any>\n                : {} as Properties<any>,\n            customFieldValidator);\n    }, [path, internalValue, name]);\n\n    const adaptResize = () => {\n        if (!draggableBoundingRect) return;\n        return updatePopupLocation(popupLocation);\n    };\n\n    const onMove = (position: { x: number, y: number }) => {\n        if (!draggableBoundingRect) return;\n        return updatePopupLocation(position);\n    };\n\n    const saveValue = async (values: M) => {\n        setSavingError(null);\n        if (entity && onCellValueChange && name) {\n            return onCellValueChange({\n                value: values[name as string],\n                name: name as string,\n                entity,\n                setError: setSavingError,\n                setSaved: () => {\n                }\n            });\n        }\n        return Promise.resolve();\n    };\n\n    if (!entity)\n        return <></>;\n\n    const form = entity && (\n        <div\n            key={`popup_form_${tableKey}_${entity.id}_${columnIndex}`}\n            style={{\n                width: 520,\n                maxWidth: \"100vw\",\n                maxHeight: \"85vh\"\n            }}>\n            <Formik\n                initialValues={entity.values}\n                validationSchema={validationSchema}\n                validate={(values) => console.debug(\"Validating\", values)}\n                onSubmit={(values, actions) => {\n                    saveValue(values)\n                        .then(() => onClose())\n                        .finally(() => actions.setSubmitting(false));\n                }}\n            >\n                {({\n                      handleChange,\n                      values,\n                      errors,\n                      touched,\n                      dirty,\n                      setFieldValue,\n                      setFieldTouched,\n                      handleSubmit,\n                      isSubmitting\n                  }: FormikProps<EntityValues<M>>) => {\n\n                    if (!isEqual(values, internalValue)) {\n                        setInternalValue(values);\n                    }\n\n                    if (!entity)\n                        return <ErrorView\n                            error={\"PopupFormField misconfiguration\"}/>;\n\n                    if (!schemaResolver)\n                        return <></>;\n\n                    const disabled = isSubmitting;\n\n                    const schema = computeSchema({\n                        schemaOrResolver: schemaResolver,\n                        path,\n                        values,\n                        previousValues: entity?.values\n                    });\n\n                    const context: FormContext<M> = {\n                        schema,\n                        entityId: entity.id,\n                        values\n                    };\n\n                    const property: Property<any> | undefined = schema.properties[name];\n\n                    return <Form\n                        className={classes.form}\n                        onSubmit={handleSubmit}\n                        noValidate>\n\n                        {name && property && buildPropertyField<any, M>({\n                            name: name as string,\n                            disabled: isSubmitting || isReadOnly(property) || !!property.disabled,\n                            property,\n                            includeDescription: false,\n                            underlyingValueHasChanged: false,\n                            context,\n                            tableMode: true,\n                            partOfArray: false,\n                            autoFocus: open,\n                            shouldAlwaysRerender: true\n                        })}\n\n                        <Button\n                            className={classes.button}\n                            variant=\"contained\"\n                            color=\"primary\"\n                            type=\"submit\"\n                            disabled={disabled}\n                        >\n                            Save\n                        </Button>\n\n                    </Form>;\n                }}\n            </Formik>\n\n            {savingError &&\n            <Typography color={\"error\"}>\n                {savingError.message}\n            </Typography>\n            }\n\n        </div>\n    );\n\n    const draggable = (\n        <div\n            key={`draggable_${name}_${entity.id}`}\n            className={clsx(classes.popup,\n                { [classes.hidden]: !open }\n            )}\n            ref={containerRef}>\n\n            <ElementResizeListener onResize={adaptResize}/>\n\n            <div className={classes.popupInner}\n                 ref={ref}>\n\n                {form}\n\n                <IconButton\n                    size={\"small\"}\n                    style={{\n                        position: \"absolute\",\n                        top: -14,\n                        right: -14,\n                        backgroundColor: \"#666\"\n                    }}\n                    onClick={(event) => {\n                        event.stopPropagation();\n                        onClose();\n                    }}>\n                    <ClearIcon style={{ color: \"white\" }}\n                               fontSize={\"small\"}/>\n                </IconButton>\n            </div>\n\n        </div>\n    );\n\n    return (\n        <Portal container={document.body}>\n            {draggable}\n        </Portal>\n    );\n\n}\n\n\n","import { getCellAlignment, getPropertyColumnWidth } from \"./internal/common\";\nimport {\n    AdditionalColumnDelegate,\n    CollectionSize,\n    Entity,\n    EntitySchemaResolver,\n    EnumValues,\n    FireCMSContext,\n    Property,\n    ResolvedEntitySchema\n} from \"../../../models\";\nimport React, { useCallback, useEffect, useMemo } from \"react\";\nimport { TableCell } from \"../Table/TableCell\";\nimport { PreviewComponent, SkeletonComponent } from \"../../../preview\";\nimport { getPreviewSizeFrom } from \"../../../preview/util\";\nimport {\n    CustomFieldValidator,\n    mapPropertyToYup\n} from \"../../../form/validation\";\nimport {\n    OnCellChangeParams,\n    PropertyTableCell\n} from \"./internal/PropertyTableCell\";\nimport { ErrorBoundary } from \"../../internal/ErrorBoundary\";\nimport { useAuthController, useFireCMSContext } from \"../../../hooks\";\nimport { PopupFormField } from \"./internal/popup_field/PopupFormField\";\nimport { TableColumn, TableColumnFilter, TableEnumValues } from \"../../index\";\nimport { getIconForProperty } from \"../../util/property_icons\";\nimport {\n    buildEnumLabel,\n    enumToObjectEntries,\n    isEnumValueDisabled\n} from \"../../util/enums\";\nimport { computeSchema } from \"../../utils\";\n\n\nexport type ColumnsFromSchemaProps<M, AdditionalKey extends string, UserType> = {\n\n    /**\n     * Absolute collection path\n     */\n    path: string;\n\n    /**\n     * Use to resolve the schema properties for specific path, entity id or values\n     */\n    schemaResolver: EntitySchemaResolver<M>;\n\n    /**\n     * Properties displayed in this collection. If this property is not set\n     * every property is displayed, you can filter\n     */\n    displayedProperties: string[];\n\n    /**\n     * You can add additional columns to the collection view by implementing\n     * an additional column delegate.\n     * Usually defined by the end user.\n     */\n    additionalColumns?: AdditionalColumnDelegate<M, AdditionalKey, UserType>[];\n\n    /**\n     * Can the table be edited inline\n     */\n    inlineEditing: ((entity: Entity<any>) => boolean) | boolean;\n\n    /**\n     * Size of the elements in the collection\n     */\n    size: CollectionSize;\n\n    /**\n     * Use this callback to validate if an entity field should be unique\n     */\n    uniqueFieldValidator?: UniqueFieldValidator;\n\n    /**\n     * Callback when the value of a cell has been edited\n     * @param params\n     */\n    onCellValueChange?: OnCellValueChange<unknown, M>;\n\n};\n\n/**\n * @category Collection components\n */\nexport type UniqueFieldValidator = (props: { name: string, value: any, property: Property, entityId?: string }) => Promise<boolean>;\n\n/**\n * Callback when a cell has changed in a table\n * @category Collection components\n */\nexport type OnCellValueChange<T, M extends { [Key: string]: any }> = (params: OnCellValueChangeParams<T, M>) => Promise<void>;\n\n/**\n * Props passed in a callback when the content of a cell in a table has been edited\n * @category Collection components\n */\nexport interface OnCellValueChangeParams<T, M extends { [Key: string]: any }> {\n    value: T,\n    name: string,\n    entity: Entity<M>,\n    setSaved: (saved: boolean) => void\n    setError: (e: Error) => void\n}\n\n\nexport function checkInlineEditing<M>(inlineEditing: ((entity: Entity<any>) => boolean) | boolean, entity: Entity<M>) {\n    if (typeof inlineEditing === \"boolean\") {\n        return inlineEditing;\n    } else if (typeof inlineEditing === \"function\") {\n        return inlineEditing(entity);\n    } else {\n        return true;\n    }\n}\n\ntype SelectedCellProps<M> =\n    {\n        name: keyof M,\n        columnIndex: number,\n        cellRect: DOMRect;\n        width: number,\n        height: number,\n        schemaResolver: EntitySchemaResolver<M>,\n        entity: Entity<any>\n    };\n\n\nexport function useBuildColumnsFromSchema<M, AdditionalKey extends string, UserType>({\n                                                                                         schemaResolver,\n                                                                                         additionalColumns,\n                                                                                         displayedProperties,\n                                                                                         path,\n                                                                                         inlineEditing,\n                                                                                         size,\n                                                                                         onCellValueChange,\n                                                                                         uniqueFieldValidator\n                                                                                     }: ColumnsFromSchemaProps<M, AdditionalKey, UserType>\n): { columns: TableColumn<M>[], popupFormField: React.ReactElement } {\n\n    const context: FireCMSContext<UserType> = useFireCMSContext();\n\n    const [selectedCell, setSelectedCell] = React.useState<SelectedCellProps<M> | undefined>(undefined);\n    const [popupCell, setPopupCell] = React.useState<SelectedCellProps<M> | undefined>(undefined);\n    const [focused, setFocused] = React.useState<boolean>(false);\n\n    const [preventOutsideClick, setPreventOutsideClick] = React.useState<boolean>(false);\n\n    const tableKey = React.useRef<string>(Math.random().toString(36));\n\n    const additionalColumnsMap: Record<string, AdditionalColumnDelegate<M, string, UserType>> = useMemo(() => {\n        return additionalColumns\n            ? additionalColumns\n                .map((aC) => ({ [aC.id]: aC }))\n                .reduce((a, b) => ({ ...a, ...b }), [])\n            : {};\n    }, [additionalColumns]);\n\n    // on ESC key press\n    useEffect(() => {\n        const escFunction = (event: any) => {\n            if (event.keyCode === 27) {\n                unselect();\n            }\n        };\n        document.addEventListener(\"keydown\", escFunction, false);\n        return () => {\n            document.removeEventListener(\"keydown\", escFunction, false);\n        };\n    });\n\n    const select = useCallback((cell?: SelectedCellProps<M>) => {\n        setSelectedCell(cell);\n        setFocused(true);\n    }, []);\n\n    const unselect = useCallback(() => {\n        setSelectedCell(undefined);\n        setFocused(false);\n        setPreventOutsideClick(false);\n    }, []);\n\n    const onPopupClose = useCallback(() => {\n        setPopupCell(undefined);\n        setFocused(true);\n    }, []);\n\n    const buildFilterEnumValues = useCallback((values: EnumValues): TableEnumValues => enumToObjectEntries(values)\n        .filter(([enumKey, labelOrConfig]) => !isEnumValueDisabled(labelOrConfig))\n        .map(([enumKey, labelOrConfig]) => ({ [enumKey]: buildEnumLabel(labelOrConfig) as string }))\n        .reduce((a, b) => ({ ...a, ...b }), {}), []);\n\n    const buildFilterableFromProperty = useCallback((property: Property,\n                                                     isArray: boolean = false): TableColumnFilter | undefined => {\n\n        if (property.dataType === \"number\" || property.dataType === \"string\") {\n            const title = property.title;\n            const enumValues = property.config?.enumValues;\n            return {\n                dataType: property.dataType,\n                isArray,\n                title,\n                enumValues: enumValues ? buildFilterEnumValues(enumValues) : undefined\n            };\n        } else if (property.dataType === \"array\" && property.of) {\n            return buildFilterableFromProperty(property.of, true);\n        } else if (property.dataType === \"boolean\") {\n            const title = property.title;\n            return {\n                dataType: property.dataType,\n                isArray,\n                title\n            };\n        } else if (property.dataType === \"timestamp\") {\n            const title = property.title;\n            return {\n                dataType: property.dataType,\n                isArray,\n                title\n            };\n        }\n\n        return undefined;\n\n    }, [buildFilterEnumValues]);\n\n    const resolvedSchema: ResolvedEntitySchema<M> = useMemo(() => computeSchema({\n        schemaOrResolver: schemaResolver,\n        path\n    }), [schemaResolver, path]);\n\n\n    const auth = useAuthController()\n    const isGlobalAdmin = auth.extra.admin\n\n    const newProps: any = {}\n    Object.keys(resolvedSchema.properties).forEach(k => {\n        if (resolvedSchema.properties[k].onlyForGlobalAdmin) {\n            if (isGlobalAdmin) {\n                newProps[k] = resolvedSchema.properties[k]\n            }\n        } else {\n            newProps[k] = resolvedSchema.properties[k]\n        }\n    })\n\n    resolvedSchema.properties = newProps\n\n\n    const propertyCellRenderer = ({\n                                      column,\n                                      columnIndex,\n                                      rowData,\n                                      rowIndex\n                                  }: any) => {\n\n\n        const entity: Entity<M> = rowData;\n\n        const name = column.dataKey as keyof M;\n\n        const resolvedSchema = schemaResolver({\n            entityId: entity.id,\n            values: entity.values\n        });\n        const property = resolvedSchema.properties[name] as Property<any>;\n        if (!property)\n            return null;\n\n        const inlineEditingEnabled = checkInlineEditing(inlineEditing, entity);\n\n        if (!inlineEditingEnabled) {\n            return (\n                <TableCell\n                    key={`preview_cell_${name}_${rowIndex}_${columnIndex}`}\n                    size={size}\n                    value={entity.values[name]}\n                    align={column.align}\n                    disabled={true}>\n                    <PreviewComponent\n                        width={column.width}\n                        height={column.height}\n                        name={`preview_${name}_${rowIndex}_${columnIndex}`}\n                        property={property}\n                        value={entity.values[name]}\n                        size={getPreviewSizeFrom(size)}\n                    />\n                </TableCell>\n            );\n        } else {\n\n            const openPopup = (cellRect: DOMRect | undefined) => {\n                if (!cellRect) {\n                    setPopupCell(undefined);\n                } else {\n                    setPopupCell({\n                        columnIndex,\n                        width: column.width,\n                        height: column.height,\n                        entity,\n                        cellRect,\n                        name,\n                        schemaResolver\n                    });\n                }\n            };\n\n            const onSelect = (cellRect: DOMRect | undefined) => {\n                if (!cellRect) {\n                    select(undefined);\n                } else {\n                    select({\n                        columnIndex,\n                        // rowIndex,\n                        width: column.width,\n                        height: column.height,\n                        entity,\n                        cellRect,\n                        name,\n                        schemaResolver\n                    });\n                }\n            };\n\n            const selected = selectedCell?.columnIndex === columnIndex &&\n                selectedCell?.entity.id === entity.id;\n\n            const isFocused = selected && focused;\n\n            const customFieldValidator: CustomFieldValidator | undefined = uniqueFieldValidator\n                ? ({ name, value, property }) => uniqueFieldValidator({\n                    name, value, property, entityId: entity.id\n                })\n                : undefined;\n\n            const validation = mapPropertyToYup({\n                property,\n                customFieldValidator,\n                name: name\n            });\n\n            const onValueChange = onCellValueChange\n                ? (props: OnCellChangeParams<any>) => onCellValueChange({\n                    ...props,\n                    entity\n                })\n                : undefined;\n\n            return entity\n                ? <PropertyTableCell\n                    key={`table_cell_${name}_${rowIndex}_${columnIndex}`}\n                    size={size}\n                    align={column.align}\n                    name={name as string}\n                    validation={validation}\n                    onValueChange={onValueChange}\n                    selected={selected}\n                    focused={isFocused}\n                    setPreventOutsideClick={setPreventOutsideClick}\n                    setFocused={setFocused}\n                    value={entity?.values ? entity.values[name] : undefined}\n                    property={property}\n                    openPopup={openPopup}\n                    select={onSelect}\n                    width={column.width}\n                    height={column.height}\n                    entityId={entity.id}\n                    entityValues={entity.values}/>\n                : <SkeletonComponent property={property}\n                                     size={getPreviewSizeFrom(size)}/>;\n        }\n\n\n    };\n\n    const additionalCellRenderer = ({\n                                        column,\n                                        columnIndex,\n                                        rowData,\n                                        rowIndex\n                                    }: any) => {\n\n        const entity: Entity<M> = rowData;\n\n        const additionalColumn = additionalColumnsMap[column.dataKey as AdditionalKey];\n        const value = additionalColumn.dependencies\n            ? Object.entries(entity.values)\n                .filter(([key, value]) => additionalColumn.dependencies!.includes(key as any))\n                .reduce((a, b) => ({ ...a, ...b }), {})\n            : undefined;\n\n        return (\n            <TableCell\n                value={value}\n                focused={false}\n                selected={false}\n                disabled={true}\n                size={size}\n                align={\"left\"}\n                allowScroll={false}\n                showExpandIcon={false}\n                disabledTooltip={\"Additional columns can't be edited directly\"}\n            >\n                <ErrorBoundary>\n                    {additionalColumn.builder({\n                        entity,\n                        context\n                    })}\n                </ErrorBoundary>\n            </TableCell>\n        );\n\n    };\n\n    const allColumns: TableColumn<M>[] = (Object.keys(resolvedSchema.properties) as (keyof M)[])\n        .map((key) => {\n            const property: Property<any> | undefined = resolvedSchema.properties[key];\n\n            return ({\n                key: key as string,\n                property,\n                align: getCellAlignment(property),\n                icon: (hoverOrOpen) => getIconForProperty(property, hoverOrOpen ? undefined : \"disabled\", \"small\"),\n                label: property.title || key as string,\n                sortable: true,\n                filter: buildFilterableFromProperty(property),\n                width: getPropertyColumnWidth(property),\n                cellRenderer: propertyCellRenderer\n            });\n        });\n\n    if (additionalColumns) {\n        const items: TableColumn<M>[] = additionalColumns.map((additionalColumn) =>\n            ({\n                key: additionalColumn.id,\n                type: \"additional\",\n                align: \"left\",\n                sortable: false,\n                label: additionalColumn.title,\n                width: additionalColumn.width ?? 200,\n                cellRenderer: additionalCellRenderer\n            }));\n        allColumns.push(...items);\n    }\n\n    const columns = displayedProperties\n        .map((p) => {\n            return allColumns.find(c => c.key === p);\n        }).filter(c => !!c) as TableColumn<M>[];\n\n    const customFieldValidator: CustomFieldValidator | undefined = uniqueFieldValidator\n        ? ({ name, value, property }) => uniqueFieldValidator({\n            name,\n            value,\n            property,\n            entityId: selectedCell?.entity.id\n        })\n        : undefined;\n\n    const popupFormField = (\n        <PopupFormField\n            open={Boolean(popupCell)}\n            onClose={onPopupClose}\n            cellRect={popupCell?.cellRect}\n            columnIndex={popupCell?.columnIndex}\n            name={popupCell?.name}\n            schemaResolver={popupCell?.schemaResolver}\n            entity={popupCell?.entity}\n            tableKey={tableKey.current}\n            customFieldValidator={customFieldValidator}\n            path={path}\n            onCellValueChange={onCellValueChange}\n            setPreventOutsideClick={setPreventOutsideClick}\n        />\n    );\n\n    return { columns, popupFormField };\n\n}\n","import React, { useCallback, useMemo } from \"react\";\nimport { Button, Paper, Theme, useMediaQuery, useTheme } from \"@mui/material\";\nimport { makeStyles } from \"@mui/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\n\nimport {\n    AdditionalColumnDelegate,\n    CollectionSize,\n    Entity,\n    FilterCombination,\n    FilterValues,\n    SaveEntityProps,\n    User,\n    WhereFilterOp\n} from \"../../../models\";\nimport { getSubcollectionColumnId, useColumnIds } from \"./internal/common\";\nimport { CollectionTableToolbar } from \"./internal/CollectionTableToolbar\";\nimport { CollectionRowActions } from \"./internal/CollectionRowActions\";\nimport { CollectionTableProps } from \"./CollectionTableProps\";\nimport {\n    saveEntityWithCallbacks,\n    useCollectionFetch,\n    useDataSource,\n    useFireCMSContext,\n    useSideEntityController\n} from \"../../../hooks\";\nimport { Table } from \"../../index\";\nimport {\n    checkInlineEditing,\n    OnCellValueChange,\n    UniqueFieldValidator,\n    useBuildColumnsFromSchema\n} from \"./column_builder\";\n\nconst DEFAULT_PAGE_SIZE = 50;\n\nexport const useStyles = makeStyles<Theme>(theme => createStyles({\n    root: {\n        height: \"100%\",\n        width: \"100%\",\n        display: \"flex\",\n        flexDirection: \"column\"\n    }\n}));\n\n\n/**\n * This component is in charge of rendering a collection table with a high\n * degree of customization. It is in charge of fetching data from\n * the {@link DataSource} and holding the state of filtering and sorting.\n *\n * This component is used internally by {@link EntityCollectionView} and\n * {@link ReferenceDialog}\n *\n * Please note that you only need to use this component if you are building\n * a custom view. If you just need to create a default view you can do it\n * exclusively with config options.\n *\n * If you want to bind a {@link EntityCollection} to a table with the default\n * options you see in collections in the top level navigation, you can\n * check {@link EntityCollectionView}\n *\n * If you need a table that is not bound to the datasource or entities and\n * properties at all, you can check {@link Table}\n *\n * @see CollectionTableProps\n * @see EntityCollectionView\n * @see Table\n * @category Components\n */\nexport const CollectionTable = React.memo<CollectionTableProps<any, any>>(CollectionTableInternal, areEqual) as React.FunctionComponent<CollectionTableProps<any, any>>;\n\nfunction areEqual(prevProps: CollectionTableProps<any, any>, nextProps: CollectionTableProps<any, any>) {\n    return prevProps.path === nextProps.path &&\n        prevProps.collection === nextProps.collection &&\n        prevProps.title === nextProps.title &&\n        prevProps.toolbarActionsBuilder === nextProps.toolbarActionsBuilder &&\n        prevProps.tableRowActionsBuilder === nextProps.tableRowActionsBuilder &&\n        prevProps.inlineEditing === nextProps.inlineEditing\n        ;\n}\n\n\nexport function CollectionTableInternal<M extends { [Key: string]: any },\n    AdditionalKey extends string = string,\n    UserType = User>\n({\n     path,\n     collection,\n     schemaResolver,\n     inlineEditing,\n     toolbarActionsBuilder,\n     title,\n     tableRowActionsBuilder,\n     entitiesDisplayedFirst,\n     onEntityClick,\n     onColumnResize,\n     onSizeChanged,\n     hoverRow = true\n }: CollectionTableProps<M, AdditionalKey>) {\n\n    const context = useFireCMSContext();\n    const dataSource = useDataSource();\n    const sideEntityController = useSideEntityController();\n\n    const theme = useTheme();\n    const largeLayout = useMediaQuery(theme.breakpoints.up(\"md\"));\n\n    const [size, setSize] = React.useState<CollectionSize>(\"xs\");\n\n    const initialFilter = collection.initialFilter;\n    const initialSort = collection.initialSort;\n    const filterCombinations = collection.filterCombinations;\n    const textSearchEnabled = collection.textSearchEnabled;\n    const paginationEnabled = collection.pagination === undefined || Boolean(collection.pagination);\n    const pageSize = typeof collection.pagination === \"number\" ? collection.pagination : DEFAULT_PAGE_SIZE;\n\n    const [itemCount, setItemCount] = React.useState<number | undefined>(paginationEnabled ? pageSize : undefined);\n\n    const [filterValues, setFilterValues] = React.useState<FilterValues<M> | undefined>(initialFilter || {});\n    const [sortBy, setSortBy] = React.useState<[Extract<keyof M, string>, \"asc\" | \"desc\"] | undefined>(initialSort);\n\n    const filterIsSet = !!filterValues && Object.keys(filterValues).length > 0;\n\n    const classes = useStyles();\n\n    const additionalColumns = useMemo(() => {\n        const subcollectionColumns: AdditionalColumnDelegate<M, any, any>[] = collection.subcollections?.map((subcollection) => {\n            return {\n                id: getSubcollectionColumnId(subcollection),\n                title: subcollection.name,\n                width: 200,\n                dependencies: [],\n                builder: ({ entity }) => (\n                    <Button color={\"primary\"}\n                            onClick={(event) => {\n                                event.stopPropagation();\n                                sideEntityController.open({\n                                    path,\n                                    entityId: entity.id,\n                                    selectedSubpath: subcollection.path,\n                                    permissions: collection.permissions,\n                                    schema: schemaResolver,\n                                    subcollections: collection.subcollections,\n                                    callbacks: collection.callbacks,\n                                    overrideSchemaRegistry: false\n                                });\n                            }}>\n                        {(subcollection.buttonContent && subcollection.buttonContent({ entity })) ?? subcollection.name}\n                    </Button>\n                )\n            };\n        }) ?? [];\n        return [...(collection.additionalColumns ?? []), ...subcollectionColumns];\n    }, [collection, path]);\n\n    const resolvedSchema = useMemo(() => schemaResolver({}), []);\n    const displayedProperties = useColumnIds(collection, resolvedSchema, true);\n\n    const uniqueFieldValidator: UniqueFieldValidator = useCallback(\n        ({\n             name,\n             value,\n             property,\n             entityId\n         }) => dataSource.checkUniqueField(path, name, value, property, entityId),\n        [path, dataSource]);\n\n\n    const onCellChanged: OnCellValueChange<any, M> = useCallback(({\n                                                                      value,\n                                                                      name,\n                                                                      setSaved,\n                                                                      setError,\n                                                                      entity\n                                                                  }) => {\n        const saveProps: SaveEntityProps<M> = {\n            path,\n            entityId: entity.id,\n            values: {\n                ...entity.values,\n                [name]: value\n            },\n            previousValues: entity.values,\n            schema: schemaResolver,\n            status: \"existing\"\n        };\n\n        return saveEntityWithCallbacks({\n            ...saveProps,\n            callbacks: collection.callbacks,\n            dataSource,\n            context,\n            onSaveSuccess: () => setSaved(true),\n            onSaveFailure: (e: Error) => {\n                setError(e);\n            }\n        });\n\n    }, [path, collection, schemaResolver]);\n\n    let { columns, popupFormField } = useBuildColumnsFromSchema({\n        schemaResolver,\n        additionalColumns,\n        displayedProperties,\n        path,\n        inlineEditing,\n        size,\n        onCellValueChange: onCellChanged,\n        uniqueFieldValidator\n    });\n    console.log('columns', columns)\n    columns = columns.filter(c => {\n        if (c.property) {\n            return !c.property.hideInTable\n        } else {\n            return true\n        }\n    })\n    const [searchString, setSearchString] = React.useState<string | undefined>();\n\n    const {\n        data,\n        dataLoading,\n        noMoreToLoad,\n        dataLoadingError\n    } = useCollectionFetch({\n        entitiesDisplayedFirst,\n        path,\n        schemaResolver,\n        filterValues,\n        sortBy,\n        searchString,\n        itemCount\n    });\n\n    const actions = useMemo(() => toolbarActionsBuilder && toolbarActionsBuilder({\n        size,\n        data\n    }), [toolbarActionsBuilder, size, data]);\n\n    const loadNextPage = useCallback(() => {\n        if (!paginationEnabled || dataLoading || noMoreToLoad)\n            return;\n        if (itemCount !== undefined)\n            setItemCount(itemCount + pageSize);\n    }, [dataLoading, itemCount, noMoreToLoad, pageSize, paginationEnabled]);\n\n    const resetPagination = useCallback(() => {\n        setItemCount(pageSize);\n    }, [pageSize]);\n\n    const clearFilter = useCallback(() => setFilterValues({}), []);\n\n    const buildIdColumn = useCallback(({ entry, size }: {\n        entry: Entity<M>,\n        size: CollectionSize,\n    }) => {\n        if (tableRowActionsBuilder)\n            return tableRowActionsBuilder({ entity: entry, size });\n        else\n            return <CollectionRowActions entity={entry} size={size} data={data}/>;\n\n    }, [tableRowActionsBuilder]);\n\n    const onRowClick = useCallback(({ rowData }: { rowData: Entity<M> }) => {\n\n    }, [onEntityClick]);\n\n    const updateSize = useCallback((size: CollectionSize) => {\n        if (onSizeChanged)\n            onSizeChanged(size);\n        setSize(size);\n    }, []);\n\n    const onTextSearch = useCallback((newSearchString) => setSearchString(newSearchString), []);\n    return (\n\n        <Paper className={classes.root}>\n\n            <CollectionTableToolbar filterIsSet={filterIsSet}\n                                    onTextSearch={textSearchEnabled ? onTextSearch : undefined}\n                                    clearFilter={clearFilter}\n                                    actions={actions}\n                                    size={size}\n                                    onSizeChanged={updateSize}\n                                    title={title}\n                                    loading={dataLoading}/>\n\n            <Table\n                data={data}\n                columns={columns}\n                onRowClick={onRowClick}\n                onEndReached={loadNextPage}\n                onResetPagination={resetPagination}\n                idColumnBuilder={buildIdColumn}\n                error={dataLoadingError}\n                paginationEnabled={paginationEnabled}\n                onColumnResize={onColumnResize}\n                frozenIdColumn={largeLayout}\n                size={size}\n                loading={dataLoading}\n                filter={filterValues}\n                onFilterUpdate={setFilterValues}\n                sortBy={sortBy}\n                onSortByUpdate={setSortBy as any}\n                hoverRow={hoverRow}\n                checkFilterCombination={(filterValues, sortBy) => isFilterCombinationValid(filterValues, filterCombinations, sortBy)}\n                collection={collection}\n            />\n\n            {popupFormField}\n\n\n        </Paper>\n    );\n\n}\n\nfunction isFilterCombinationValid<M>(\n    filterValues: FilterValues<M>,\n    indexes?: FilterCombination<string>[],\n    sortBy?: [string, \"asc\" | \"desc\"]\n): boolean {\n\n    const sortKey = sortBy ? sortBy[0] : undefined;\n    const sortDirection = sortBy ? sortBy[1] : undefined;\n\n    // Order by clause cannot contain a field with an equality filter available\n    const values: [WhereFilterOp, any][] = Object.values(filterValues) as [WhereFilterOp, any][];\n    if (sortKey && values.map((v) => v[0]).includes(\"==\")) {\n        return false;\n    }\n\n    const filterKeys = Object.keys(filterValues);\n    const filtersCount = filterKeys.length;\n\n    if (filtersCount === 1 && (!sortKey || sortKey === filterKeys[0])) {\n        return true;\n    }\n\n    if (!indexes && filtersCount > 1) {\n        return false;\n    }\n\n    // only one filter set, different to the sort key\n    if (sortKey && filtersCount === 1 && filterKeys[0] !== sortKey) {\n        return false;\n    }\n\n    return !!indexes && indexes\n        .filter((compositeIndex) => !sortKey || sortKey in compositeIndex)\n        .find((compositeIndex) =>\n            Object.entries(filterValues).every(([key, value]) => compositeIndex[key] !== undefined && (!sortDirection || compositeIndex[key] === sortDirection))\n        ) !== undefined;\n}\n","import React, { useEffect, useState } from \"react\";\nimport { CollectionSize, Entity, EntityCollectionResolver } from \"../../models\";\nimport {\n    Button,\n    Dialog,\n    DialogActions,\n    Divider,\n    Typography\n} from \"@mui/material\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport makeStyles from \"@mui/styles/makeStyles\";\n\nimport { CollectionTable } from \"./CollectionTable\";\nimport { CollectionRowActions } from \"./CollectionTable/internal/CollectionRowActions\";\nimport { useDataSource } from \"../../hooks\";\n\n\nexport const useStyles = makeStyles(theme => createStyles({\n    dialogBody: {\n        flexGrow: 1,\n        overflow: \"auto\",\n        minWidth: \"85vw\"\n    },\n    paper: {\n        height: \"100%\"\n    }\n}));\n\n/**\n * @category Components\n */\nexport interface ReferenceDialogProps {\n\n    /**\n     * Is the dialog currently open\n     */\n    open: boolean;\n\n    /**\n     * Allow multiple selection of values\n     */\n    multiselect: boolean;\n\n    /**\n     * Entity collection config\n     */\n    collectionResolver: EntityCollectionResolver;\n\n    /**\n     * Absolute path of the collection\n     */\n    path: string;\n\n    /**\n     * If you are opening the dialog for the first time, you can select some\n     * entity ids to be displayed first.\n     */\n    selectedEntityIds?: string[];\n\n    /**\n     * If `multiselect` is set to `false`, you will get the select entity\n     * in this callback.\n     * @param entity\n     * @callback\n        */\n    onSingleEntitySelected?(entity: Entity<any> | null): void;\n\n    /**\n     * If `multiselect` is set to `true`, you will get the selected entities\n     * in this callback.\n     * @param entities\n     * @callback\n        */\n    onMultipleEntitiesSelected?(entities: Entity<any>[]): void;\n\n    /**\n     * Is the dialog currently open\n     * @callback\n        */\n    onClose(): void;\n\n}\n\n/**\n * This component renders an overlay dialog that allows to select entities\n * in a given collection\n * @category Components\n */\nexport function ReferenceDialog(\n    {\n        onSingleEntitySelected,\n        onMultipleEntitiesSelected,\n        onClose,\n        open,\n        multiselect,\n        collectionResolver,\n        path,\n        selectedEntityIds\n    }: ReferenceDialogProps) {\n\n    const classes = useStyles();\n    const dataSource = useDataSource();\n\n    const collection = collectionResolver;\n    const schema = collectionResolver.schema;\n    const schemaResolver = collectionResolver.schemaResolver;\n\n    const [selectedEntities, setSelectedEntities] = useState<Entity<any>[] | undefined>();\n\n    useEffect(() => {\n        let unmounted = false;\n        if (selectedEntityIds) {\n            Promise.all(\n                selectedEntityIds.map((entityId) => {\n                    return dataSource.fetchEntity({\n                        path,\n                        entityId,\n                        schema: schemaResolver\n                    });\n                }))\n                .then((entities) => {\n                    if (!unmounted)\n                        setSelectedEntities(entities);\n                });\n        } else {\n            setSelectedEntities([]);\n        }\n        return () => {\n            unmounted = true;\n        };\n    }, [dataSource, path, selectedEntityIds]);\n\n\n    const onEntityClick = (entity: Entity<any>) => {\n        if (!multiselect && onSingleEntitySelected) {\n            onSingleEntitySelected(entity);\n        } else {\n            toggleEntitySelection(entity);\n        }\n    };\n\n    const onClear = () => {\n        if (!multiselect && onSingleEntitySelected) {\n            onSingleEntitySelected(null);\n        } else if (onMultipleEntitiesSelected) {\n            onMultipleEntitiesSelected([]);\n        }\n    };\n\n\n    const toggleEntitySelection = (entity: Entity<any>) => {\n        let newValue;\n        if (selectedEntities) {\n            if (selectedEntities.map((e) => e.id).indexOf(entity.id) > -1) {\n                newValue = selectedEntities.filter((item: Entity<any>) => item.id !== entity.id);\n            } else {\n                newValue = [...selectedEntities, entity];\n            }\n            setSelectedEntities(newValue);\n\n            if (onMultipleEntitiesSelected)\n                onMultipleEntitiesSelected(newValue);\n        }\n    };\n\n    const tableRowActionsBuilder = ({\n                                        entity,\n                                        size\n                                    }: { entity: Entity<any>, size: CollectionSize }) => {\n\n        const isSelected = selectedEntityIds && selectedEntityIds.indexOf(entity.id) > -1;\n        return <CollectionRowActions\n            entity={entity}\n            size={size}\n            isSelected={isSelected}\n            selectionEnabled={multiselect}\n            toggleEntitySelection={toggleEntitySelection}\n        />;\n\n    };\n\n    const toolbarActionsBuilder = () => (\n        <Button onClick={onClear}\n                color=\"primary\">\n            Clear\n        </Button>\n    );\n\n    const title = (\n        <Typography variant={\"h6\"}>\n            {`Select ${schema.name}`}\n        </Typography>);\n\n    return (\n\n        <Dialog\n            onClose={onClose}\n            classes={{\n                paper: classes.paper\n            }}\n            maxWidth={\"xl\"}\n            scroll={\"paper\"}\n            open={open}>\n\n            <div className={classes.dialogBody}>\n\n                {selectedEntities &&\n                <CollectionTable path={path}\n                                 collection={collection}\n                                 schemaResolver={schemaResolver}\n                                 inlineEditing={false}\n                                 toolbarActionsBuilder={toolbarActionsBuilder}\n                                 onEntityClick={onEntityClick}\n                                 tableRowActionsBuilder={tableRowActionsBuilder}\n                                 title={title}\n                                 entitiesDisplayedFirst={selectedEntities}\n                />}\n            </div>\n\n            <Divider/>\n\n            <DialogActions>\n                <Button onClick={(event) => {\n                    event.stopPropagation();\n                    onClose();\n                }}\n                        color=\"primary\"\n                        variant=\"contained\">\n                    Close\n                </Button>\n            </DialogActions>\n\n        </Dialog>\n\n    );\n\n}\n","import {\n    Entity,\n    EntityCallbacks,\n    EntitySchema,\n    EntitySchemaResolver\n} from \"../../../../models\";\nimport React, { useCallback, useMemo, useState } from \"react\";\nimport {\n    Button,\n    CircularProgress,\n    Dialog,\n    DialogActions,\n    DialogContent,\n    DialogTitle\n} from \"@mui/material\";\nimport { EntityPreview } from \"../../index\";\nimport {\n    deleteEntityWithCallbacks,\n    useDataSource,\n    useFireCMSContext,\n    useSnackbarController\n} from \"../../../../hooks\";\n\n\nexport interface DeleteEntityDialogProps<M extends { [Key: string]: any }> {\n    entityOrEntitiesToDelete?: Entity<M> | Entity<M>[],\n    path: string,\n    schema: EntitySchema<M>,\n    schemaResolver: EntitySchemaResolver<M>;\n    open: boolean;\n    onClose: () => void;\n    callbacks?: EntityCallbacks<M>,\n\n    onEntityDelete?(path: string, entity: Entity<M>): void;\n\n    onMultipleEntitiesDelete?(path: string, entities: Entity<M>[]): void;\n}\n\nexport function DeleteEntityDialog<M extends { [Key: string]: any }>({\n                                                                                   entityOrEntitiesToDelete,\n                                                                                   schemaResolver,\n                                                                                   onClose,\n                                                                                   open,\n                                                                                   callbacks,\n                                                                                   onEntityDelete,\n                                                                                   onMultipleEntitiesDelete,\n                                                                                   path,\n                                                                                   ...other\n                                                                               }\n                                                                         : DeleteEntityDialogProps<M>) {\n\n    const dataSource = useDataSource();\n    const snackbarContext = useSnackbarController();\n    const [loading, setLoading] = useState(false);\n\n    const [entityOrEntities, setUsedEntityOrEntities] = React.useState<Entity<M> | Entity<M>[]>();\n    const [multipleEntities, setMultipleEntities] = React.useState<boolean>();\n    const context = useFireCMSContext();\n\n    const schema = useMemo(() => schemaResolver({}), []);\n\n    React.useEffect(() => {\n        if (entityOrEntitiesToDelete) {\n            const revisedEntityOrEntities = Array.isArray(entityOrEntitiesToDelete) && entityOrEntitiesToDelete.length === 1\n                ? entityOrEntitiesToDelete[0]\n                : entityOrEntitiesToDelete;\n            setUsedEntityOrEntities(revisedEntityOrEntities);\n            setMultipleEntities(Array.isArray(revisedEntityOrEntities));\n        }\n    }, [entityOrEntitiesToDelete]);\n\n    const handleCancel = useCallback(() => {\n        onClose();\n    }, [onClose]);\n\n    const onDeleteSuccess = useCallback((entity: Entity<any>) => {\n        console.debug(\"Deleted\", entity);\n    }, []);\n\n    const onDeleteFailure = useCallback((entity: Entity<any>, e: Error) => {\n        snackbarContext.open({\n            type: \"error\",\n            title: `${schema.name}: Error deleting`,\n            message: e?.message\n        });\n\n        console.error(\"Error deleting entity\");\n        console.error(e);\n    }, [schema.name]);\n\n    const onPreDeleteHookError = useCallback((entity: Entity<any>, e: Error) => {\n        snackbarContext.open({\n            type: \"error\",\n            title: `${schema.name}: Error before deleting`,\n            message: e?.message\n        });\n        console.error(e);\n    }, [schema.name]);\n\n    const onDeleteSuccessHookError = useCallback((entity: Entity<any>, e: Error) => {\n        snackbarContext.open({\n            type: \"error\",\n            title: `${schema.name}: Error after deleting (entity is deleted)`,\n            message: e?.message\n        });\n        console.error(e);\n    }, [schema.name]);\n\n    const performDelete = useCallback((entity: Entity<M>): Promise<boolean> =>\n        deleteEntityWithCallbacks({\n            dataSource,\n            entity,\n            schema,\n            callbacks,\n            onDeleteSuccess,\n            onDeleteFailure,\n            onPreDeleteHookError,\n            onDeleteSuccessHookError,\n            context\n        }), [dataSource, schema, callbacks, onDeleteSuccess, onDeleteFailure, onPreDeleteHookError, onDeleteSuccessHookError, context]);\n\n    const handleOk = useCallback(async () => {\n        if (entityOrEntities) {\n\n            setLoading(true);\n\n            if (multipleEntities) {\n                Promise.all((entityOrEntities as Entity<M>[]).map(performDelete)).then((results) => {\n\n                    setLoading(false);\n\n                    if (onMultipleEntitiesDelete && entityOrEntities)\n                        onMultipleEntitiesDelete(path, entityOrEntities as Entity<M>[]);\n\n                    if (results.every(Boolean)) {\n                        snackbarContext.open({\n                            type: \"success\",\n                            message: `${schema.name}: multiple deleted`\n                        });\n                    } else if (results.some(Boolean)) {\n                        snackbarContext.open({\n                            type: \"warning\",\n                            message: `${schema.name}: Some of the entities have been deleted, but not all`\n                        });\n                    } else {\n                        snackbarContext.open({\n                            type: \"error\",\n                            message: `${schema.name}: Error deleting entities`\n                        });\n                    }\n                    onClose();\n                });\n\n            } else {\n                performDelete(entityOrEntities as Entity<M>).then((success) => {\n                    setLoading(false);\n                    if (success) {\n                        if (onEntityDelete && entityOrEntities)\n                            onEntityDelete(path, entityOrEntities as Entity<M>);\n                        snackbarContext.open({\n                            type: \"success\",\n                            message: `${schema.name} deleted`\n                        });\n                        onClose();\n                    }\n                });\n            }\n        }\n    }, [entityOrEntities, multipleEntities, performDelete, onMultipleEntitiesDelete, path, onClose, snackbarContext, schema.name, onEntityDelete]);\n\n\n    let content: JSX.Element;\n    if (entityOrEntities && multipleEntities) {\n        content = <div>Multiple entities</div>;\n    } else {\n        const entity = entityOrEntities as Entity<M> | undefined;\n        const resolvedSchema = schemaResolver({\n            entityId: entity?.id,\n            values: entity?.values\n        })\n        content = entity\n            ? <EntityPreview\n                entity={entity}\n                schema={resolvedSchema}\n                path={path}/>\n            : <></>;\n    }\n\n    const dialogTitle = multipleEntities\n        ? `${schema.name}: Confirm multiple delete?`\n        : `Would you like to delete this ${schema.name}?`;\n\n    return (\n        <Dialog\n            maxWidth=\"md\"\n            aria-labelledby=\"delete-dialog\"\n            open={open}\n            onBackdropClick={onClose}\n            {...other}\n        >\n            <DialogTitle id=\"delete-dialog-title\">\n                {dialogTitle}\n            </DialogTitle>\n\n            {!multipleEntities && <DialogContent dividers>\n                {content}\n            </DialogContent>}\n\n            <DialogActions>\n\n                {loading && <CircularProgress size={16} thickness={8}/>}\n\n                <Button onClick={handleCancel}\n                        disabled={loading}\n                        color=\"primary\">\n                    Cancel\n                </Button>\n                <Button\n                    autoFocus\n                    disabled={loading}\n                    onClick={handleOk}\n                    color=\"primary\">\n                    Ok\n                </Button>\n            </DialogActions>\n\n        </Dialog>\n    );\n}\n\n","import {\n    Entity,\n    EntityReference,\n    ExportConfig,\n    Properties,\n    Property,\n    ResolvedEntitySchema\n} from \"../../models\";\nimport { getValueInPath } from \"./objects\";\n\ninterface Header {\n    key: string;\n    label: string;\n}\n\nexport function downloadCSV<M>(data: Entity<M>[],\n                               additionalData: Record<string, any>[] | undefined,\n                               schema: ResolvedEntitySchema<M>,\n                               path: string,\n                               exportConfig: ExportConfig | undefined) {\n    const properties = schema.properties;\n    const headers = getExportHeaders(properties, path, exportConfig);\n    const exportableData = getExportableData(data, additionalData, properties, headers);\n    const headersData = entryToCSVRow(headers.map(h => h.label));\n    const csvData = exportableData.map(entry => entryToCSVRow(entry));\n    downloadBlob([headersData, ...csvData], `${schema.name}.csv`, \"text/csv\");\n}\n\nexport function getExportableData(data: any[],\n                                  additionalData: Record<string, any>[] | undefined,\n                                  properties: Properties,\n                                  headers: Header[]\n) {\n\n    const mergedData: any[] = data.map(e => ({ id: e.id, ...processCSVValues(e.values as any, properties) }));\n    if (additionalData) {\n        additionalData.forEach((additional, index) => {\n            mergedData[index] = { ...mergedData[index], ...additional };\n        });\n    }\n    return mergedData && mergedData.map((entry) => {\n        return headers.map((header) => getValueInPath(entry, header.key));\n    });\n}\n\n\nfunction getExportHeaders<M extends { [Key: string]: any }, UserType>(properties: Properties<M>,\n                                                                      path: string,\n                                                                      exportConfig?: ExportConfig<UserType>): Header[] {\n    const headers = [\n        { label: \"id\", key: \"id\" },\n        ...Object.entries(properties)\n            .map(([childKey, property]) => getHeaders(property, childKey, \"\"))\n            .flat()\n    ];\n\n    if (exportConfig?.additionalColumns) {\n        headers.push(...exportConfig.additionalColumns.map((column) => ({\n            label: column.key,\n            key: column.key\n        })));\n    }\n\n    return headers;\n}\n\n/**\n * Get headers for property. There could be more than one header per property\n * @param property\n * @param propertyKey\n * @param prefix\n */\nfunction getHeaders(property: Property, propertyKey: string, prefix: string = \"\"): Header[] {\n    const currentKey = prefix ? `${prefix}.${propertyKey}` : propertyKey;\n    if (property.dataType === \"map\" && property.properties) {\n        return Object.entries(property.properties)\n            .map(([childKey, p]) => getHeaders(p, childKey, currentKey))\n            .flat();\n    } else {\n        return [{ label: currentKey, key: currentKey }];\n    }\n}\n\nfunction processCSVValue(inputValue: any,\n                         property: Property): any {\n\n    let value;\n    if (property.dataType === \"map\" && property.properties) {\n        value = processCSVValues(inputValue, property.properties as Properties);\n    } else if (property.dataType === \"array\") {\n        if (property.of && Array.isArray(inputValue)) {\n            if (property.of.dataType === \"map\") {\n                value = inputValue.map((e) => JSON.stringify(e));\n            } else {\n                value = inputValue.map((e) => processCSVValue(e, property.of as Property));\n            }\n        } else {\n            value = inputValue;\n        }\n    } else if (property.dataType === \"reference\") {\n        const ref = inputValue ? inputValue as EntityReference : undefined;\n        value = ref ? ref.pathWithId : null;\n    } else if (property.dataType === \"timestamp\") {\n        value = inputValue ? inputValue.getTime() : null;\n    } else {\n        value = inputValue;\n    }\n\n    return value;\n}\n\nfunction processCSVValues<M extends { [Key: string]: any }>\n(inputValues: Record<keyof M, any>, properties: Properties<M>): Record<keyof M, any> {\n    const updatedValues = Object.entries(properties)\n        .map(([key, property]) => {\n            const inputValue = inputValues && (inputValues as any)[key];\n            const updatedValue = processCSVValue(inputValue, property as Property);\n            if (updatedValue === undefined) return {};\n            return ({ [key]: updatedValue });\n        })\n        .reduce((a, b) => ({ ...a, ...b }), {}) as Record<keyof M, any>;\n    return { ...inputValues, ...updatedValues };\n}\n\nfunction entryToCSVRow(entry: any[]) {\n    return entry\n        .map((v: string | undefined) => {\n            if (v === null || v === undefined) return \"\";\n            const s = String(v);\n            return '\"' + s.replaceAll('\"', '\"\"') + '\"';\n        })\n        .join(\",\") + \"\\r\\n\";\n}\n\nexport function downloadBlob(content: BlobPart[], filename: string, contentType: string) {\n    const blob = new Blob(content, { type: contentType });\n    const url = URL.createObjectURL(blob);\n    const pom = document.createElement(\"a\");\n    pom.href = url;\n    pom.setAttribute(\"download\", filename);\n    pom.click();\n}\n\n","import React, { useCallback, useEffect, useRef } from \"react\";\nimport {\n    Alert,\n    Button,\n    CircularProgress,\n    Dialog,\n    DialogActions,\n    DialogContent,\n    DialogContentText,\n    DialogTitle,\n    IconButton,\n    Tooltip\n} from \"@mui/material\";\n\nimport Upload from \"@mui/icons-material/Upload\";\nimport {\n    Entity,\n    EntitySchema,\n    EntitySchemaResolver,\n    ExportConfig\n} from \"../../../../models\";\nimport { useDataSource, useFireCMSContext } from \"../../../../hooks\";\nimport { downloadCSV } from \"../../../util/csv\";\n\ninterface ExportButtonProps<M extends { [Key: string]: any }, UserType> {\n    schema: EntitySchema<M>;\n    schemaResolver: EntitySchemaResolver<M>;\n    path: string;\n    exportConfig?: ExportConfig<UserType>;\n}\n\nconst INITIAL_DOCUMENTS_LIMIT = 200;\n\nexport function ExportButton<M extends { [Key: string]: any }, UserType>({\n                                                                             schema,\n                                                                             schemaResolver,\n                                                                             path,\n                                                                             exportConfig\n                                                                         }: ExportButtonProps<M, UserType>\n) {\n\n    const dataSource = useDataSource();\n    const context = useFireCMSContext();\n\n    const dataRef = useRef<Entity<M>[]>();\n    const additionalDataRef = useRef<Record<string, any>[]>();\n\n    const [dataLoading, setDataLoading] = React.useState<boolean>(false);\n    const [dataLoadingError, setDataLoadingError] = React.useState<Error | undefined>();\n\n    // If in the initial load, we get more than INITIAL_DOCUMENTS_LIMIT results\n    const [hasLargeAmountOfData, setHasLargeAmountOfData] = React.useState<boolean>(false);\n\n    // did the user agree to export a large amount of data\n    const [fetchLargeDataAccepted, setFetchLargeDataAccepted] = React.useState<boolean>(false);\n\n    const [open, setOpen] = React.useState(false);\n\n    const handleClickOpen = useCallback(() => {\n        setOpen(true);\n    }, [setOpen]);\n\n    const handleClose = useCallback(() => {\n        setOpen(false);\n    }, [setOpen]);\n\n    const doDownload = useCallback((data: Entity<M>[] | undefined,\n                                    additionalData: Record<string, any>[] | undefined,\n                                    schema: EntitySchema<M>,\n                                    schemaResolver: EntitySchemaResolver<M>,\n                                    path: string,\n                                    exportConfig: ExportConfig | undefined) => {\n        if (!data)\n            throw Error(\"Trying to perform export without loading data first\");\n\n        const resolvedSchema = schemaResolver({});\n        downloadCSV(data, additionalData, resolvedSchema, path, exportConfig);\n    }, []);\n\n    useEffect(() => {\n\n        if (!open) return;\n\n        setDataLoading(true);\n\n        const updateEntities = async (entities: Entity<M>[]) => {\n            if (entities.length >= INITIAL_DOCUMENTS_LIMIT) {\n                setHasLargeAmountOfData(true);\n            }\n\n            const pendingDownload = dataRef.current && entities.length > dataRef.current.length && fetchLargeDataAccepted;\n\n            dataRef.current = entities;\n            const additionalColumnsData = await fetchAdditionalColumns(entities);\n            additionalDataRef.current = additionalColumnsData;\n            setDataLoading(false);\n            setDataLoadingError(undefined);\n\n            if (pendingDownload) {\n                doDownload(entities, additionalColumnsData, schema, schemaResolver, path, exportConfig);\n                handleClose();\n            }\n        };\n\n        const fetchAdditionalColumns = async (entities: Entity<M>[]) => {\n\n            if (!exportConfig?.additionalColumns) {\n                return;\n            }\n\n            const additionalColumns = exportConfig.additionalColumns;\n\n            const resolvedColumnsValues: Record<string, any>[] = await Promise.all(entities.map(async (entity) => {\n                return (await Promise.all(additionalColumns.map(async (column) => {\n                    return {\n                        [column.key]: await column.builder({\n                            entity,\n                            context\n                        })\n                    };\n                }))).reduce((a, b) => ({ ...a, ...b }), {});\n            }));\n            return resolvedColumnsValues;\n        };\n\n        const onFetchError = (error: Error) => {\n            console.error(\"ERROR\", error);\n            setDataLoading(false);\n            setDataLoadingError(error);\n        };\n\n        dataSource.fetchCollection<M>({\n            path,\n            schema: schemaResolver,\n            limit: fetchLargeDataAccepted ? undefined : INITIAL_DOCUMENTS_LIMIT\n        })\n            .then(updateEntities)\n            .catch(onFetchError);\n\n    }, [path, fetchLargeDataAccepted, schema, open, dataSource, schemaResolver, doDownload, exportConfig, handleClose, context]);\n\n    const needsToAcceptFetchAllData = hasLargeAmountOfData && !fetchLargeDataAccepted;\n\n    const onOkClicked = useCallback(() => {\n        if (needsToAcceptFetchAllData) {\n            setFetchLargeDataAccepted(true);\n        } else {\n            doDownload(dataRef.current, additionalDataRef.current, schema, schemaResolver, path, exportConfig);\n            handleClose();\n        }\n    }, [needsToAcceptFetchAllData, doDownload, schema, schemaResolver, path, exportConfig, handleClose]);\n\n    return <>\n\n        <Tooltip title={\"Export\"}>\n            <IconButton color={\"primary\"} onClick={handleClickOpen}\n                        size=\"large\">\n                <Upload/>\n            </IconButton>\n        </Tooltip>\n\n        <Dialog\n            open={open}\n            onClose={handleClose}\n        >\n            <DialogTitle>Export data</DialogTitle>\n\n            <DialogContent>\n                <DialogContentText>\n\n                    <div>Download the the content of this table as a CSV\n                    </div>\n                    <br/>\n\n                    {needsToAcceptFetchAllData &&\n                    <Alert elevation={1}\n                              variant=\"filled\"\n                              severity={\"warning\"}>\n                        <div>\n                            This collections has a large number\n                            of documents (more than {INITIAL_DOCUMENTS_LIMIT}).\n                        </div>\n                        <div>\n                            Would you like to proceed?\n                        </div>\n\n                    </Alert>}\n\n                </DialogContentText>\n            </DialogContent>\n\n            <DialogActions>\n\n                {dataLoading && <CircularProgress size={16} thickness={8}/>}\n\n                <Button color=\"primary\" onClick={handleClose}>\n                    Cancel\n                </Button>\n\n                <Button color=\"primary\"\n                        disabled={dataLoading}\n                        onClick={onOkClicked}>\n                    Download\n                </Button>\n\n            </DialogActions>\n\n        </Dialog>\n\n    </>;\n}\n\n","import {\n    AuthController,\n    Entity,\n    FireCMSContext,\n    Permissions,\n    PermissionsBuilder\n} from \"../../models\";\n\nconst DEFAULT_PERMISSIONS = {\n    edit: true,\n    create: true,\n    delete: true\n};\n\nfunction checkHasPermissionOnEntity<M extends { [Key: string]: any }, UserType>\n(permission: PermissionsBuilder<M, UserType> | Permissions | undefined,\n entity: Entity<M> | null,\n authController: AuthController<UserType>,\n path: string,\n context: FireCMSContext<UserType>): Permissions {\n\n    if (permission === undefined) {\n        return DEFAULT_PERMISSIONS;\n    } else if (typeof permission === \"object\") {\n        return permission as Permissions;\n    } else if (typeof permission === \"function\") {\n        return permission({\n            user: authController.user,\n            authController,\n            entity,\n            path,\n            context\n        });\n    }\n\n    throw Error(\"New type of HasPermission added and not mapped\");\n}\n\nexport function canEdit<M extends { [Key: string]: any }, UserType>\n(permission: PermissionsBuilder<M, UserType> | Permissions | undefined,\n entity: Entity<M>,\n authController: AuthController<UserType>,\n path: string,\n context: FireCMSContext<UserType>): boolean {\n    return checkHasPermissionOnEntity(permission, entity, authController, path, context).edit ?? DEFAULT_PERMISSIONS.edit;\n}\n\nexport function canCreate<M extends { [Key: string]: any }, UserType>\n(permission: PermissionsBuilder<M, UserType> | Permissions | undefined,\n authController: AuthController<UserType>,\n path: string,\n context: FireCMSContext<UserType>): boolean {\n    return checkHasPermissionOnEntity(permission, null, authController, path, context).create ?? DEFAULT_PERMISSIONS.create;\n}\n\nexport function canDelete<M extends { [Key: string]: any }, UserType>\n(permission: PermissionsBuilder<M, UserType> | Permissions | undefined,\n entity: Entity<M>,\n authController: AuthController<UserType>,\n path: string,\n context: FireCMSContext<UserType>): boolean {\n    return checkHasPermissionOnEntity(permission, entity, authController, path, context).delete ?? DEFAULT_PERMISSIONS.delete;\n}\n\n","import React, { useCallback, useEffect, useMemo, useState } from \"react\";\nimport {\n    Box,\n    Button,\n    IconButton,\n    Popover,\n    Tooltip,\n    Typography,\n    useMediaQuery,\n    useTheme\n} from \"@mui/material\";\nimport { Add, Delete } from \"@mui/icons-material\";\n\nimport {\n    AnyProperty,\n    CollectionSize,\n    Entity,\n    EntityCollection,\n    PartialEntityCollection,\n    SelectionController\n} from \"../../models\";\nimport { CollectionTable, OnColumnResizeParams } from \"./CollectionTable\";\n\nimport { CollectionRowActions } from \"./CollectionTable/internal/CollectionRowActions\";\nimport { DeleteEntityDialog } from \"./CollectionTable/internal/DeleteEntityDialog\";\nimport { ExportButton } from \"./CollectionTable/internal/ExportButton\";\n\nimport { canCreate, canDelete, canEdit } from \"../util/permissions\";\nimport { Markdown } from \"../../preview\";\nimport {\n    useAuthController, useCollectionFetch,\n    useFireCMSContext,\n    useNavigation,\n    useSideEntityController\n} from \"../../hooks\";\n\n/**\n * @category Components\n */\nexport interface EntityCollectionViewProps<M extends { [Key: string]: any }> {\n\n    /**\n     * Absolute path this collection view points to\n     */\n    path: string;\n\n    /**\n     * Entity collection props\n     */\n    collection: EntityCollection<M>;\n\n}\n\n\nexport function useSelectionController<M = any>(collection?: any): SelectionController {\n\n    const [selectedEntities, setSelectedEntities] = useState<Entity<M>[]>([]);\n    let collectionData = useCollectionFetch({\n        path: collection.path,\n        schemaResolver: collection.schemaResolver\n    })\n\n    collectionData = useCollectionFetch({\n        path: collection.path,\n        schemaResolver: collection.schemaResolver\n    })\n\n    const toggleEntitySelection = useCallback((entity: Entity<M>) => {\n        let newValue;\n        if (selectedEntities.map(e => e.id).includes(entity.id)) {\n            newValue = selectedEntities.filter((item: Entity<M>) => item.id !== entity.id);\n        } else {\n            newValue = [...selectedEntities, entity];\n        }\n        setSelectedEntities(newValue);\n    }, [selectedEntities]);\n\n    const selectAll = useCallback((d: any) => {\n        if ((selectedEntities.length === collectionData.data.length) && selectedEntities.length !== 0) {\n            setSelectedEntities([]);\n        } else {\n            if (collectionData.data) {\n                const new1: any = collectionData.data\n                setSelectedEntities(new1);\n            }\n        }\n    }, [selectedEntities]);\n\n    const isEntitySelected = useCallback((entity: Entity<M>) => selectedEntities.map(e => e.id).includes(entity.id), [selectedEntities]);\n    const isAllEntitiesSelected = useCallback(() => (selectedEntities.length === collectionData.data.length) && selectedEntities.length !== 0, [selectedEntities, collectionData]);\n\n    return {\n        selectedEntities,\n        setSelectedEntities,\n        isEntitySelected,\n        isAllEntitiesSelected,\n        toggleEntitySelection,\n        selectAll\n    };\n}\n\n/**\n * This component is in charge of binding a datasource path with an {@link EntityCollection}\n * where it's configuration is defined. It includes an infinite scrolling table,\n * 'Add' new entities button,\n *\n * This component is the default one used for displaying entity collections\n * and is in charge of generating all the specific actions and customization\n * of the lower level {@link CollectionTable}\n *\n * Please **note** that you only need to use this component if you are building\n * a custom view. If you just need to create a default view you can do it\n * exclusively with config options.\n *\n * If you need a lower level implementation with more granular options, you\n * can use {@link CollectionTable}.\n *\n * If you need a table that is not bound to the datasource or entities and\n * properties at all, you can check {@link Table}\n *\n * @param path\n * @param collection\n * @constructor\n * @category Components\n */\nexport function EntityCollectionView<M extends { [Key: string]: any }>({\n                                                                           path,\n                                                                           collection: baseCollection\n                                                                       }: EntityCollectionViewProps<M>\n) {\n\n    const sideEntityController = useSideEntityController();\n    const context = useFireCMSContext();\n    const authController = useAuthController();\n    const navigationContext = useNavigation();\n\n    const theme = useTheme();\n    const largeLayout = useMediaQuery(theme.breakpoints.up(\"md\"));\n\n    const [deleteEntityClicked, setDeleteEntityClicked] = React.useState<Entity<M> | Entity<M>[] | undefined>(undefined);\n    const collectionResolver = navigationContext.getCollectionResolver<M>(path);\n    if (!collectionResolver) {\n        throw Error(`Couldn't find the corresponding collection view for the path: ${path}`);\n    }\n\n    const onCollectionModifiedForUser = useCallback((partialCollection: PartialEntityCollection<any>) => {\n        navigationContext.onCollectionModifiedForUser(path, partialCollection);\n    }, [path]);\n\n    const collection: EntityCollection<M> = collectionResolver ?? baseCollection;\n\n    const { schemaResolver } = collectionResolver;\n\n    const exportable = collection.exportable === undefined || collection.exportable;\n\n    const selectionEnabled = collection.selectionEnabled === undefined || collection.selectionEnabled;\n    const hoverRow = collection.inlineEditing !== undefined && !collection.inlineEditing;\n\n    const [anchorEl, setAnchorEl] = React.useState<HTMLElement | null>(null);\n\n    const selectionController = useSelectionController<M>(collection);\n    const usedSelectionController = collection.selectionController ?? selectionController;\n    const {\n        selectedEntities,\n        toggleEntitySelection,\n        selectAll,\n        isAllEntitiesSelected,\n        isEntitySelected,\n        setSelectedEntities,\n        collectionData\n    } = usedSelectionController;\n\n    useEffect(() => {\n        setDeleteEntityClicked(undefined);\n    }, [selectedEntities]);\n\n    const onEntityClick = useCallback((entity: Entity<M>) => {\n        return sideEntityController.open({\n            entityId: entity.id,\n            path,\n            permissions: collection.permissions,\n            schema: collection.schema,\n            subcollections: collection.subcollections,\n            callbacks: collection.callbacks,\n            overrideSchemaRegistry: false\n        });\n    }, [path, collection, sideEntityController]);\n\n    const onNewClick = useCallback((e: React.MouseEvent) => {\n        e.stopPropagation();\n        return sideEntityController.open({\n            path,\n            permissions: collection.permissions,\n            schema: collection.schema,\n            subcollections: collection.subcollections,\n            callbacks: collection.callbacks,\n            overrideSchemaRegistry: false\n        });\n    }, [path, collection, sideEntityController]);\n\n    const internalOnEntityDelete = useCallback((_path: string, entity: Entity<M>) => {\n        setSelectedEntities(selectedEntities.filter((e) => e.id !== entity.id));\n    }, [selectedEntities, setSelectedEntities]);\n\n    const internalOnMultipleEntitiesDelete = useCallback((_path: string, entities: Entity<M>[]) => {\n        setSelectedEntities([]);\n        setDeleteEntityClicked(undefined);\n    }, [setSelectedEntities]);\n\n    const checkInlineEditing = useCallback((entity: Entity<any>) => {\n        if (!canEdit(collection.permissions, entity, authController, path, context)) {\n            return false;\n        }\n        return collection.inlineEditing === undefined || collection.inlineEditing;\n    }, [collection.inlineEditing, collection.permissions, path]);\n\n    const onColumnResize = useCallback(({\n                                            width,\n                                            key\n                                        }: OnColumnResizeParams) => {\n        // Only for property columns\n        if (!collection.schema.properties[key]) return;\n        const property: Partial<AnyProperty> = { columnWidth: width };\n        const updatedFields: PartialEntityCollection<any> = { schema: { properties: { [key as keyof M]: property } } };\n        if (onCollectionModifiedForUser)\n            onCollectionModifiedForUser(updatedFields)\n    }, [collection.schema.properties, onCollectionModifiedForUser]);\n\n    const onSizeChanged = useCallback((size: CollectionSize) => {\n        if (onCollectionModifiedForUser)\n            onCollectionModifiedForUser({ defaultSize: \"xs\" })\n    }, [onCollectionModifiedForUser]);\n\n    const open = anchorEl != null;\n    const title = useMemo(() => (\n        <div style={{\n            padding: \"4px\"\n        }}>\n\n            <Typography\n                variant=\"h6\"\n                style={{\n                    lineHeight: \"1.0\",\n                    textOverflow: \"ellipsis\",\n                    whiteSpace: \"nowrap\",\n                    overflow: \"hidden\",\n                    maxWidth: \"160px\",\n                    cursor: collection.description ? \"pointer\" : \"inherit\"\n                }}\n                onClick={collection.description\n                    ? (e) => {\n                        setAnchorEl(e.currentTarget);\n                        e.stopPropagation();\n                    }\n                    : undefined}\n            >\n                {`${collection.name}`}\n            </Typography>\n            <Typography\n                style={{\n                    display: \"block\",\n                    textOverflow: \"ellipsis\",\n                    whiteSpace: \"nowrap\",\n                    overflow: \"hidden\",\n                    maxWidth: \"160px\",\n                    direction: \"rtl\",\n                    textAlign: \"left\"\n                }}\n                variant={\"caption\"}\n                color={\"textSecondary\"}>\n                {`/${path}`}\n            </Typography>\n\n            {collection.description &&\n                <Popover\n                    id={\"info-dialog\"}\n                    open={open}\n                    anchorEl={anchorEl}\n                    elevation={1}\n                    onClose={() => {\n                        setAnchorEl(null);\n                    }}\n                    anchorOrigin={{\n                        vertical: \"bottom\",\n                        horizontal: \"center\"\n                    }}\n                    transformOrigin={{\n                        vertical: \"top\",\n                        horizontal: \"center\"\n                    }}\n                >\n\n                    <Box m={2}>\n                        <Markdown source={collection.description}/>\n                    </Box>\n\n                </Popover>\n            }\n\n        </div>\n    ), [collection.description, collection.name, path, open, anchorEl]);\n\n    const tableRowActionsBuilder = useCallback(({\n                                                    entity,\n                                                    size\n                                                }: { entity: Entity<any>, size: CollectionSize }) => {\n\n        const isSelected = isEntitySelected(entity);\n        const isAllSelected: any = isAllEntitiesSelected();\n\n\n        const createEnabled = canCreate(collection.permissions, authController, path, context);\n        const editEnabled = canEdit(collection.permissions, entity, authController, path, context);\n        const deleteEnabled = canDelete(collection.permissions, entity, authController, path, context);\n\n        const onCopyClicked = (clickedEntity: Entity<M>) => sideEntityController.open({\n            entityId: clickedEntity.id,\n            path,\n            copy: true,\n            permissions: {\n                edit: editEnabled,\n                create: createEnabled,\n                delete: deleteEnabled\n            },\n            schema: collection.schema,\n            subcollections: collection.subcollections,\n            callbacks: collection.callbacks,\n            overrideSchemaRegistry: false\n        });\n\n        const onEditClicked = (clickedEntity: Entity<M>) => sideEntityController.open({\n            entityId: clickedEntity.id,\n            path,\n            permissions: {\n                edit: editEnabled,\n                create: createEnabled,\n                delete: deleteEnabled\n            },\n            schema: collection.schema,\n            subcollections: collection.subcollections,\n            callbacks: collection.callbacks,\n            overrideSchemaRegistry: false\n        });\n\n        return (\n            <CollectionRowActions\n                entity={entity}\n                isSelected={isSelected}\n                isAllSelected={isAllSelected}\n                selectionEnabled={selectionEnabled}\n                size={size}\n                toggleEntitySelection={toggleEntitySelection}\n                selectAll={selectAll}\n                onEditClicked={onEditClicked}\n                onCopyClicked={createEnabled ? onCopyClicked : undefined}\n                onDeleteClicked={deleteEnabled ? setDeleteEntityClicked : undefined}\n            />\n        );\n\n    }, [usedSelectionController, sideEntityController, collection.permissions, authController, path]);\n\n    const toolbarActionsBuilder = useCallback((_: { size: CollectionSize, data: Entity<any>[] }) => {\n\n        const addButton = canCreate(collection.permissions, authController, path, context) && onNewClick && (largeLayout\n            ? <Button\n                onClick={onNewClick}\n                startIcon={<Add/>}\n                size=\"large\"\n                variant=\"contained\"\n                color=\"primary\">\n                Add {collection.schema.name}\n            </Button>\n            : <Button\n                onClick={onNewClick}\n                size=\"medium\"\n                variant=\"contained\"\n                color=\"primary\"\n            >\n                <Add/>\n            </Button>);\n\n        const multipleDeleteEnabled = selectedEntities.every((entity) => canDelete(collection.permissions, entity, authController, path, context));\n        const onMultipleDeleteClick = (event: React.MouseEvent) => {\n            event.stopPropagation();\n            setDeleteEntityClicked(selectedEntities);\n        };\n\n\n        const extraActions = collection.extraActions\n            ? collection.extraActions({\n                path,\n                collection,\n                selectionController: usedSelectionController,\n                context\n            })\n            : undefined;\n\n        const exportButton = exportable &&\n            <ExportButton schema={collection.schema}\n                          schemaResolver={schemaResolver}\n                          exportConfig={typeof collection.exportable === \"object\" ? collection.exportable : undefined}\n                          path={path}/>;\n\n        return (\n            <>\n                {extraActions}\n                {exportButton}\n                {addButton}\n            </>\n        );\n    }, [usedSelectionController, path, collection, largeLayout]);\n\n    return (\n        <>\n\n            <CollectionTable\n                key={`collection_table_${path}`}\n                title={title}\n                path={path}\n                collection={collection}\n                schemaResolver={schemaResolver}\n                onSizeChanged={onSizeChanged}\n                inlineEditing={checkInlineEditing}\n                onEntityClick={onEntityClick}\n                onColumnResize={onColumnResize}\n                tableRowActionsBuilder={tableRowActionsBuilder}\n                toolbarActionsBuilder={toolbarActionsBuilder}\n                hoverRow={hoverRow}\n            />\n\n            {deleteEntityClicked && <DeleteEntityDialog entityOrEntitiesToDelete={deleteEntityClicked}\n                                                        path={path}\n                                                        schema={collection.schema}\n                                                        schemaResolver={schemaResolver}\n                                                        callbacks={collection.callbacks}\n                                                        open={!!deleteEntityClicked}\n                                                        onEntityDelete={internalOnEntityDelete}\n                                                        onMultipleEntitiesDelete={internalOnMultipleEntitiesDelete}\n                                                        onClose={() => setDeleteEntityClicked(undefined)}/>}\n        </>\n    );\n}\n\nexport default EntityCollectionView;\n\n","import { Box, CircularProgress, CircularProgressProps } from \"@mui/material\";\nimport React from \"react\";\n\n/**\n *\n * @param props\n * @constructor\n * @ignore\n */\nexport function CircularProgressCenter(props: CircularProgressProps) {\n    return (\n        <Box\n            display=\"flex\"\n            width={\"100%\"}\n            maxHeight={\"100%\"}\n            height={\"100vh\"}>\n            <Box m=\"auto\">\n                <CircularProgress {...props}/>\n            </Box>\n        </Box>\n    );\n}\n","import React from \"react\";\nimport {\n    Box,\n    CardActionArea,\n    CardActions,\n    CardContent,\n    Container,\n    Divider,\n    Grid,\n    Paper,\n    Theme,\n    Typography\n} from \"@mui/material\";\n\nimport createStyles from \"@mui/styles/createStyles\";\nimport makeStyles from \"@mui/styles/makeStyles\";\nimport ArrowForwardIcon from \"@mui/icons-material/ArrowForward\";\nimport PlaylistPlayIcon from \"@mui/icons-material/PlaylistPlay\";\nimport { Link as ReactLink } from \"react-router-dom\";\n\nimport {\n    computeTopNavigation,\n    TopNavigationEntry\n} from \"../util/navigation_utils\";\nimport { Markdown } from \"../../preview\";\nimport { useNavigation } from \"../../hooks\";\n\nexport const useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        card: {\n            display: \"flex\",\n            flexDirection: \"column\",\n            alignItems: \"flex-start\",\n            minHeight: 248\n        },\n        flexGrow: {\n            flexGrow: 1\n        }\n    })\n);\n\n/**\n * Default entry view for the CMS under the path \"/\"\n * This components takes navigation as an input and renders cards\n * for each entry, including title and description.\n * @constructor\n * @category Components\n */\nexport function FireCMSHomePage() {\n\n    const classes = useStyles();\n    const navigationContext = useNavigation();\n    if (!navigationContext.navigation)\n        return <></>;\n\n    const {\n        navigationEntries,\n        groups\n    } = computeTopNavigation(navigationContext, false);\n\n    const allGroups: Array<string | null> = [...groups];\n    if (navigationEntries.filter(e => !e.group).length > 0) {\n        allGroups.push(null);\n    }\n\n    function buildNavigationCard(entry: TopNavigationEntry) {\n        return (\n            <Grid item xs={12}\n                  sm={6}\n                  md={4}\n                  key={`nav_${entry.group}_${entry.name}`}>\n                <Paper variant={\"outlined\"}>\n\n                    <CardActionArea\n                        className={classes.card}\n                        component={ReactLink}\n                        to={entry.url}>\n                        <CardContent\n                            className={classes.flexGrow}>\n\n                            <PlaylistPlayIcon color={\"disabled\"}/>\n                            <Typography gutterBottom variant=\"h5\"\n                                        component=\"h2\">\n                                {entry.name}\n                            </Typography>\n\n                            {entry.description && <Typography variant=\"body2\"\n                                                              color=\"textSecondary\"\n                                                              component=\"div\">\n                                <Markdown source={entry.description}/>\n                            </Typography>}\n                        </CardContent>\n\n                        <CardActions style={{ alignSelf: \"flex-end\" }}>\n                            <Box p={1}>\n                                <ArrowForwardIcon color=\"primary\"/>\n                            </Box>\n                        </CardActions>\n\n                    </CardActionArea>\n                </Paper>\n            </Grid>\n        );\n    }\n\n    return (\n        <Container>\n            {allGroups.map((group, index) => (\n                <Box mt={6} mb={6} key={`group_${index}`}>\n                    {allGroups.length > 0 && <>\n                        <Typography color={\"textSecondary\"}\n                                    className={\"weight-500\"}>\n                            {group?.toUpperCase() ?? \"Collections\".toUpperCase()}\n                        </Typography>\n                        <Divider/>\n                    </>}\n\n                    <Box mt={2}>\n                        <Grid container spacing={2}>\n                            {group && navigationEntries\n                                .filter((entry) => entry.group === group)\n                                .map((entry) => buildNavigationCard(entry))\n                            }\n                            {!group && navigationEntries\n                                .filter((entry) => !entry.group)\n                                .map((entry) => buildNavigationCard(entry))\n                            }\n                        </Grid>\n                    </Box>\n                </Box>\n            ))}\n        </Container>\n    );\n}\n\n","import React from \"react\";\nimport { alpha, Theme } from \"@mui/material\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport makeStyles from \"@mui/styles/makeStyles\";\nimport { TableSize } from \"./TableProps\";\nimport { css } from \"@emotion/react\";\n\nexport const baseTableCss = css`\n  & .BaseTable {\n    box-shadow: 0 2px 4px 0 rgba(128, 128, 128, 0.2);\n    contain: strict;\n    position: relative;\n    box-sizing: border-box;\n    font-size: 13px;\n  }\n\n  & .BaseTable--disabled {\n    opacity: 0.7;\n    pointer-events: none;\n  }\n\n  & .BaseTable--dynamic .BaseTable__row {\n    overflow: hidden;\n    align-items: stretch;\n  }\n\n  & .BaseTable:not(.BaseTable--dynamic) .BaseTable__row-cell-text,\n  & .BaseTable .BaseTable__row--frozen .BaseTable__row-cell-text {\n    overflow: hidden;\n    text-overflow: ellipsis;\n    white-space: nowrap;\n  }\n\n  & .BaseTable__table {\n    position: absolute;\n    top: 0;\n    display: flex;\n    flex-direction: column-reverse;\n  }\n\n  & .BaseTable__table-main {\n    outline: 1px solid rgba(128, 128, 128, 0.1);\n    left: 0;\n  }\n\n  & .BaseTable__table-main .BaseTable__header-cell:first-of-type, .BaseTable__table-main .BaseTable__row-cell:first-of-type {\n    padding: 0;\n  }\n\n  & .BaseTable__table-frozen-left .BaseTable__body {\n    backdrop-filter: blur(4px);\n  }\n\n  & .BaseTable__table-frozen-left .BaseTable__header,\n  & .BaseTable__table-frozen-left .BaseTable__body, .BaseTable__table-frozen-right .BaseTable__header,\n  & .BaseTable__table-frozen-right .BaseTable__body {\n    overflow: hidden !important;\n  }\n\n  & .BaseTable__table-frozen-left {\n    box-shadow: 2px 0 4px 0 rgba(128, 128, 128, 0.1);\n    top: 0;\n    left: 0;\n  }\n\n  & .BaseTable__table-frozen-left .BaseTable__header-cell:first-of-type, .BaseTable__table-frozen-left .BaseTable__row-cell:first-of-type {\n    padding: 0;\n  }\n\n  & .BaseTable__table-frozen-left .BaseTable__header-row,\n  & .BaseTable__table-frozen-left .BaseTable__row {\n    padding-right: 0 !important;\n  }\n\n  & .BaseTable__table-frozen-left .BaseTable__body {\n    overflow-y: auto !important;\n  }\n\n  & .BaseTable__table-frozen-right {\n    box-shadow: -2px 0 4px 0 rgba(128, 128, 128, 0.3);\n    top: 0;\n    right: 0;\n  }\n\n  & .BaseTable__table-frozen-right .BaseTable__header-cell:last-child, .BaseTable__table-frozen-right .BaseTable__row-cell:last-child {\n    padding-right: 15px;\n  }\n\n  & .BaseTable__table-frozen-right .BaseTable__header-row,\n  & .BaseTable__table-frozen-right .BaseTable__row {\n    padding-left: 0 !important;\n  }\n\n  & .BaseTable__table-frozen-right .BaseTable__body {\n    overflow-y: auto !important;\n  }\n\n  & .BaseTable__header {\n    overflow: hidden !important;\n  }\n\n  & .BaseTable .BaseTable__header,\n  & .BaseTable .BaseTable__body {\n    outline: none;\n  }\n\n  & .BaseTable__header-row, .BaseTable__row {\n    display: flex;\n    align-items: center;\n    border-bottom: 1px solid rgba(128, 128, 128, 0.1);\n    box-sizing: border-box;\n  }\n\n  & .BaseTable__header-row {\n    /*background-color: #f8f8f8;*/\n    font-weight: 700;\n  }\n\n  & .BaseTable__row {\n    /*background-color: #ffffff;*/\n  }\n\n  & .BaseTable__row:hover, .BaseTable__row--hovered {\n    /*background-color: rgba(128, 128, 128, 0.02);*/\n  }\n\n  & .BaseTable__row-expanded {\n    /*border-bottom: 1px solid #eeeeee;*/\n  }\n\n  & .BaseTable__header-cell, .BaseTable__row-cell {\n    min-width: 0;\n    height: 100%;\n    display: flex;\n    align-items: center;\n    padding: 0 7.5px;\n    box-sizing: border-box;\n  }\n\n  & .BaseTable__header-cell--align-center, .BaseTable__row-cell--align-center {\n    justify-content: center;\n    text-align: center;\n  }\n\n  & .BaseTable__header-cell--align-right, .BaseTable__row-cell--align-right {\n    justify-content: flex-end;\n    text-align: right;\n  }\n\n  & .BaseTable__header-cell {\n    position: relative;\n    cursor: default;\n  }\n\n  & .BaseTable__header-cell:hover .BaseTable__column-resizer {\n    visibility: visible;\n    opacity: 0.5;\n  }\n\n  & .BaseTable__header-cell:hover .BaseTable__column-resizer:hover {\n    opacity: 1;\n  }\n\n  & .BaseTable__header-cell .BaseTable__sort-indicator {\n    display: none;\n  }\n\n  & .BaseTable__header-cell--sortable:hover {\n    background-color: #f3f3f3;\n    cursor: pointer;\n  }\n\n  & .BaseTable__header-cell--sortable:not(.BaseTable__header-cell--sorting):hover .BaseTable__sort-indicator {\n    display: block;\n    color: #888888;\n  }\n\n  & .BaseTable__header-cell--sorting .BaseTable__sort-indicator, .BaseTable__header-cell--sorting:hover .BaseTable__sort-indicator {\n    display: block;\n  }\n\n  & .BaseTable__header-cell--resizing .BaseTable__column-resizer {\n    visibility: visible;\n    opacity: 1;\n  }\n\n  & .BaseTable__header-cell--resizing .BaseTable__column-resizer::after {\n    position: absolute;\n    left: 0;\n    right: 0;\n    top: 0;\n    bottom: 0;\n    overflow: hidden;\n    content: '';\n    left: -9999px;\n  }\n\n  & .BaseTable__header-cell-text {\n    overflow: hidden;\n    text-overflow: ellipsis;\n    white-space: normal;\n  }\n\n  & .BaseTable__header-row--resizing .BaseTable__header-cell {\n    background-color: transparent;\n    cursor: col-resize;\n  }\n\n  & .BaseTable__header-row--resizing .BaseTable__header-cell:not(.BaseTable__header-cell--sorting) .BaseTable__sort-indicator {\n    display: none;\n  }\n\n  & .BaseTable__header-row--resizing .BaseTable__header-cell:not(.BaseTable__header-cell--resizing) .BaseTable__column-resizer {\n    visibility: hidden;\n  }\n\n  & .BaseTable__column-resizer {\n    width: 3px;\n    visibility: hidden;\n    background-color: #cccccc;\n  }\n\n  & .BaseTable__column-resizer:hover {\n    visibility: visible;\n    opacity: 1;\n  }\n\n  & .BaseTable__footer {\n    position: absolute;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    overflow: hidden;\n    background-color: #ffffff;\n  }\n\n  & .BaseTable__resizing-line {\n    cursor: col-resize;\n    position: absolute;\n    top: 0;\n    background-color: #cccccc;\n    width: 3px;\n    transform: translateX(-100%);\n  }\n\n  & .BaseTable__empty-layer {\n    position: absolute;\n    left: 0;\n    right: 0;\n    top: 0;\n    bottom: 0;\n    overflow: hidden;\n  }\n\n  & .BaseTable__overlay {\n    position: absolute;\n    left: 0;\n    right: 0;\n    top: 0;\n    bottom: 0;\n    overflow: hidden;\n    pointer-events: none;\n  }\n\n  & .BaseTable__overlay > * {\n    pointer-events: auto;\n  }\n`;\n\n\n\nexport interface CellStyleProps {\n    size: TableSize;\n    align: \"right\" | \"left\" | \"center\";\n}\n\n\n","import {\n    Box,\n    FormControl,\n    IconButton,\n    MenuItem,\n    OutlinedInput,\n    Select as MuiSelect\n} from \"@mui/material\";\nimport ClearIcon from \"@mui/icons-material/Clear\";\nimport React, { useState } from \"react\";\nimport Tooltip from \"@mui/material/Tooltip/Tooltip\";\nimport { EnumValuesChip } from \"../../../../preview/components/CustomChip\";\nimport { TableEnumValues, TableWhereFilterOp } from \"../TableProps\";\n\ninterface StringNumberFilterFieldProps {\n    name: string,\n    dataType: \"string\" | \"number\";\n    value?: [op: TableWhereFilterOp, fieldValue: any];\n    setValue: (value?: [op: TableWhereFilterOp, newValue: any]) => void;\n    isArray?: boolean;\n    enumValues?: TableEnumValues;\n    title?: string;\n}\n\nconst operationLabels = {\n    \"==\": \"==\",\n    \"!=\": \"!=\",\n    \">\": \">\",\n    \"<\": \"<\",\n    \">=\": \">=\",\n    \"<=\": \"<=\",\n    in: \"in\",\n    \"array-contains\": \"Contains\",\n    \"array-contains-any\": \"Any\"\n};\n\nconst multipleSelectOperations = [\"array-contains-any\", \"in\"];\n\nexport function StringNumberFilterField({\n                                            name,\n                                            value,\n                                            setValue,\n                                            dataType,\n                                            isArray,\n                                            enumValues,\n                                            title\n                                        }: StringNumberFilterFieldProps) {\n\n    const possibleOperations: (keyof typeof operationLabels) [] = isArray\n        ? [\"array-contains\"]\n        : [\"==\", \"!=\", \">\", \"<\", \">=\", \"<=\"];\n\n    if (enumValues)\n        isArray\n            ? possibleOperations.push(\"array-contains-any\")\n            : possibleOperations.push(\"in\");\n\n    const [fieldOperation, fieldValue] = value || [possibleOperations[0], undefined];\n    const [operation, setOperation] = useState<TableWhereFilterOp>(fieldOperation);\n    const [internalValue, setInternalValue] = useState<string | number | string[] | number[] | undefined>(fieldValue);\n\n    function updateFilter(op: TableWhereFilterOp, val: string | number | string[] | number[] | undefined) {\n        let newValue = val;\n        const prevOpIsArray = multipleSelectOperations.includes(operation);\n        const newOpIsArray = multipleSelectOperations.includes(op);\n        if (prevOpIsArray !== newOpIsArray) {\n            // @ts-ignore\n            newValue = newOpIsArray ? (typeof val === \"string\" || typeof val === \"number\" ? [val] : []) : \"\";\n        }\n\n        if (typeof newValue === \"number\" && isNaN(newValue))\n            newValue = undefined;\n\n        setOperation(op);\n        setInternalValue(newValue);\n\n        const hasNewValue = newValue !== null && Array.isArray(newValue)\n            ? newValue.length > 0\n            : newValue !== undefined;\n        if (op && hasNewValue) {\n            setValue(\n                [op, newValue]\n            );\n        } else {\n            setValue(\n                undefined\n            );\n        }\n    }\n\n    const multiple = multipleSelectOperations.includes(operation);\n    return (\n\n        <Box display={\"flex\"} width={340} alignItems={\"center\"}>\n            <Box width={80}>\n                <FormControl fullWidth>\n                    <MuiSelect value={operation}\n                               fullWidth\n                               onChange={(evt: any) => {\n                                   updateFilter(evt.target.value, internalValue);\n                               }}>\n                        {possibleOperations.map((op) =>\n                            <MenuItem\n                                key={`filter_op_${name}_${op}`}\n                                value={op}>{operationLabels[op]}</MenuItem>\n                        )}\n\n                    </MuiSelect>\n                </FormControl>\n            </Box>\n\n            <Box flexGrow={1} ml={1}>\n\n                <FormControl fullWidth>\n                    {!enumValues && <OutlinedInput\n                        fullWidth\n                        key={`filter_${name}`}\n                        type={dataType === \"number\" ? \"number\" : undefined}\n                        value={internalValue !== undefined ? internalValue : \"\"}\n                        onChange={(evt) => {\n                            const val = dataType === \"number\"\n                                ? parseFloat(evt.target.value)\n                                : evt.target.value;\n                            updateFilter(operation, val);\n                        }}\n                    />}\n\n                    {enumValues &&\n                    <MuiSelect\n                        fullWidth\n                        key={`filter-select-${multiple}-${name}`}\n                        multiple={multiple}\n                        value={internalValue !== undefined ? internalValue : isArray ? [] : \"\"}\n                        onChange={(evt: any) => updateFilter(operation, dataType === \"number\" ? parseInt(evt.target.value) : evt.target.value)}\n                        renderValue={multiple\n? (selected: any) =>\n                            (\n                                <div>\n                                    {selected.map((enumKey: any) => {\n                                        return <EnumValuesChip\n                                            key={`select_value_${name}_${enumKey}`}\n                                            enumKey={enumKey}\n                                            enumValues={enumValues}\n                                            small={true}/>;\n                                    })}\n                                </div>\n                            )\n: undefined}>\n                        {Object.entries(enumValues).map(([enumKey, labelOrConfig]) => {\n                            return (\n                                <MenuItem\n                                    key={`select_${name}_${enumKey}`}\n                                    value={enumKey}>\n                                    <EnumValuesChip\n                                        enumKey={enumKey}\n                                        enumValues={enumValues}\n                                        small={true}/>\n                                </MenuItem>\n                            );\n                        })}\n                    </MuiSelect>}\n                </FormControl>\n            </Box>\n\n            {internalValue !== undefined && <Box ml={1}>\n                <IconButton\n                    onClick={(e) => updateFilter(operation, undefined)}\n                    size={\"small\"}>\n                    <Tooltip title={`Clear ${title}`}>\n                        <ClearIcon fontSize={\"small\"}/>\n                    </Tooltip>\n                </IconButton>\n            </Box>}\n\n        </Box>\n    );\n\n}\n","import React from \"react\";\nimport { Checkbox, FormControlLabel, Theme } from \"@mui/material\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport makeStyles from \"@mui/styles/makeStyles\";\nimport { TableWhereFilterOp } from \"../TableProps\";\n\nexport const useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        formControl: {\n            width: \"200px\"\n        },\n        label: {\n            width: \"100%\",\n            height: \"100%\"\n        }\n    })\n);\n\ninterface BooleanFieldProps {\n    name: string,\n    value?: [op: TableWhereFilterOp, fieldValue: any];\n    setValue: (value?: [op: TableWhereFilterOp, newValue: any]) => void;\n    title?: string;\n}\n\nexport function BooleanFilterField({\n                                       name,\n                                       title,\n                                       value,\n                                       setValue\n                                   }: BooleanFieldProps) {\n    const classes = useStyles();\n\n    function updateFilter(val?: boolean) {\n        if (val !== undefined) {\n            setValue(\n                [\"==\", val]\n            );\n        } else {\n            setValue(\n                undefined\n            );\n        }\n    }\n\n    const valueSetToTrue = value && value[1];\n    const valueSet = !!value;\n\n    return (\n        <FormControlLabel\n            className={classes.formControl}\n            labelPlacement={\"end\"}\n            checked={valueSet && valueSetToTrue}\n            control={\n                <Checkbox\n                    key={`filter-${name}`}\n                    indeterminate={!valueSet}\n                    onChange={(evt) => {\n                        if (valueSetToTrue) { updateFilter(false); } else if (!valueSet) { updateFilter(true); } else { updateFilter(undefined); }\n                    }}\n                />\n            }\n            label={!valueSet ? \"No filter\" : (valueSetToTrue ? `${title} is true` : `${title} is false`)}\n        />\n    );\n}\n","import React, { useState } from \"react\";\nimport {\n    Box,\n    FormControl,\n    IconButton,\n    Input,\n    MenuItem,\n    Select as MuiSelect\n} from \"@mui/material\";\nimport ClearIcon from \"@mui/icons-material/Clear\";\nimport Tooltip from \"@mui/material/Tooltip/Tooltip\";\nimport DateTimePicker from \"@mui/lab/DateTimePicker\";\nimport CalendarTodayIcon from \"@mui/icons-material/CalendarToday\";\nimport { TableWhereFilterOp } from \"../TableProps\";\n\ninterface DateTimeFilterFieldProps {\n    name: string,\n    value?: [op: TableWhereFilterOp, fieldValue: any];\n    setValue: (value?: [op: TableWhereFilterOp, newValue: any]) => void;\n    isArray?: boolean;\n    title?: string;\n}\n\n\nconst operationLabels = {\n    \"==\": \"==\",\n    \"!=\": \"!=\",\n    \">\": \">\",\n    \"<\": \"<\",\n    \">=\": \">=\",\n    \"<=\": \"<=\",\n    in: \"in\",\n    \"array-contains\": \"Contains\",\n    \"array-contains-any\": \"Any\"\n};\n\nconst multipleSelectOperations = [\"array-contains-any\", \"in\"];\n\n\nexport function DateTimeFilterField({\n                                        name,\n                                        isArray,\n                                        value,\n                                        setValue,\n                                        title\n                                    }: DateTimeFilterFieldProps) {\n\n    const possibleOperations: (keyof typeof operationLabels) [] = isArray\n        ? [\"array-contains\"]\n        : [\"==\", \"!=\", \">\", \"<\", \">=\", \"<=\"];\n\n    const [fieldOperation, fieldValue] = value || [possibleOperations[0], undefined];\n    const [operation, setOperation] = useState<TableWhereFilterOp>(fieldOperation);\n    const [internalValue, setInternalValue] = useState<Date | undefined>(fieldValue);\n\n    function updateFilter(op: TableWhereFilterOp, val: Date | undefined) {\n        let newValue: Date | undefined = val;\n        const prevOpIsArray = multipleSelectOperations.includes(operation);\n        const newOpIsArray = multipleSelectOperations.includes(op);\n        if (prevOpIsArray !== newOpIsArray) {\n            // @ts-ignore\n            newValue = newOpIsArray ? (val ? [val] : []) : \"\";\n        }\n\n        setOperation(op);\n        setInternalValue(newValue === null ? undefined : newValue);\n\n        const hasNewValue = newValue !== null && Array.isArray(newValue)\n            ? newValue.length > 0\n            : newValue !== undefined;\n        if (op && hasNewValue) {\n            setValue(\n                [op, newValue]\n            );\n        } else {\n            setValue(\n                undefined\n            );\n        }\n    }\n\n    return (\n\n        <Box display={\"flex\"} width={340} alignItems={\"center\"}>\n            <Box width={80}>\n                <FormControl fullWidth>\n                    <MuiSelect value={operation}\n                               fullWidth\n                               onChange={(evt: any) => {\n                                   updateFilter(evt.target.value, internalValue);\n                               }}>\n                        {possibleOperations.map((op) =>\n                            <MenuItem\n                                key={`filter_op_${name}_${op}`}\n                                value={op}>{operationLabels[op]}</MenuItem>\n                        )}\n\n                    </MuiSelect>\n                </FormControl>\n            </Box>\n\n            <Box flexGrow={1} ml={1}>\n\n                <DateTimePicker\n                    clearable\n                    InputProps={{\n                        // disableUnderline: true,\n                    }}\n                    renderInput={(props) => (\n                        <Input\n                            startAdornment={\n                                <CalendarTodayIcon fontSize={\"small\"}/>\n                            }\n                        />\n                    )}\n                    value={internalValue ?? null}\n                    onChange={(dateValue: Date | null) => {\n                        updateFilter(operation, dateValue === null ? undefined : dateValue);\n                    }}\n                />\n\n            </Box>\n\n            {internalValue !== undefined && <Box ml={1}>\n                <IconButton\n                    onClick={(e) => updateFilter(operation, undefined)}\n                    size={\"small\"}>\n                    <Tooltip title={`Clear ${title}`}>\n                        <ClearIcon fontSize={\"small\"}/>\n                    </Tooltip>\n                </IconButton>\n            </Box>}\n\n        </Box>\n    );\n\n}\n","import React, { useCallback, useRef, useState } from \"react\";\n\nimport clsx from \"clsx\";\nimport {\n    alpha,\n    Badge,\n    Box,\n    Button,\n    darken,\n    Divider,\n    Grid,\n    IconButton,\n    Popover,\n    Theme\n} from \"@mui/material\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport makeStyles from \"@mui/styles/makeStyles\";\nimport ArrowUpwardIcon from \"@mui/icons-material/ArrowUpward\";\nimport ArrowDownwardIcon from \"@mui/icons-material/ArrowDownward\";\nimport ArrowDropDownCircleIcon from \"@mui/icons-material/ArrowDropDownCircle\";\n\nimport {\n    TableColumn,\n    TableColumnFilter,\n    TableSort,\n    TableWhereFilterOp\n} from \"./TableProps\";\nimport { StringNumberFilterField } from \"./filters/StringNumberFilterField\";\nimport { BooleanFilterField } from \"./filters/BooleanFilterField\";\nimport { DateTimeFilterField } from \"./filters/DateTimeFilterfield\";\nimport { ErrorBoundary } from \"../../internal/ErrorBoundary\";\n\nexport const useStyles = makeStyles<Theme, { onHover?: boolean, align?: \"right\" | \"left\" | \"center\" }>(theme => createStyles({\n    header: ({ onHover }) => ({\n        width: \"calc(100% + 24px)\",\n        margin: \"0px -12px\",\n        padding: \"0px 12px\",\n        color: onHover ? theme.palette.text.primary : theme.palette.text.secondary,\n        backgroundColor: onHover ? darken(theme.palette.background.default, 0.05) : theme.palette.background.default,\n        transition: \"color 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms\",\n        height: \"100%\",\n        fontSize: \"0.750rem\",\n        textTransform: \"uppercase\",\n        fontWeight: 600\n    }),\n    headerInternal: ({ align }) => ({\n        display: \"flex\",\n        flexDirection: \"row\",\n        alignItems: \"center\",\n        justifyContent: align === \"right\" ? \"flex-end\" : (align === \"center\" ? \"center\" : \"flex-start\")\n    }),\n    headerTitle: ({ align }) => ({\n        overflow: \"hidden\",\n        flexShrink: 1\n    }),\n    headerTitleInternal: ({ align }) => ({\n        margin: \"0px 4px\",\n        overflow: \"hidden\",\n        justifyContent: align,\n        flexShrink: 1\n    }),\n    headerIcon: {\n        paddingTop: \"4px\"\n    },\n    headerIconButton: {\n        backgroundColor: theme.palette.mode === \"light\" ? \"#f5f5f5\" : theme.palette.background.default\n    },\n    headerTypography: {\n        fontSize: \"0.750rem\",\n        fontWeight: 600,\n        textTransform: \"uppercase\"\n    }\n}));\n\n\nexport const TableHeader = React.memo<TableHeaderProps<any>>(TableHeaderInternal) as React.FunctionComponent<TableHeaderProps<any>>;\n\ntype TableHeaderProps<M extends { [Key: string]: any }> = {\n    column: TableColumn<M>;\n    onColumnSort: (key: Extract<keyof M, string>) => void;\n    onFilterUpdate: (filterForProperty?: [TableWhereFilterOp, any]) => void;\n    filter?: [TableWhereFilterOp, any];\n    sort: TableSort;\n};\n\nfunction TableHeaderInternal<M extends { [Key: string]: any }>({\n                                                                   sort,\n                                                                   onColumnSort,\n                                                                   onFilterUpdate,\n                                                                   filter,\n                                                                   column\n                                                               }: TableHeaderProps<M>) {\n    const [onHover, setOnHover] = useState(false);\n    const ref = useRef<HTMLDivElement>(null);\n\n    const classes = useStyles({ onHover, align: column.align });\n\n    const [open, setOpen] = React.useState(false);\n\n    const handleSettingsClick = useCallback((event: any) => {\n        setOpen(true);\n    }, []);\n\n    const handleClose = useCallback(() => {\n        setOpen(false);\n    }, []);\n\n    const update = useCallback((filterForProperty?: [TableWhereFilterOp, any]) => {\n        onFilterUpdate(filterForProperty);\n        setOpen(false);\n    }, []);\n\n    return (\n        <ErrorBoundary>\n            <Grid\n                className={classes.header}\n                ref={ref}\n                wrap={\"nowrap\"}\n                alignItems={\"center\"}\n                onMouseEnter={() => setOnHover(true)}\n                onMouseMove={() => setOnHover(true)}\n                onMouseLeave={() => setOnHover(false)}\n                container>\n\n                <Grid item xs={true} className={classes.headerTitle}>\n                    <div className={classes.headerInternal}>\n                        <div className={classes.headerIcon}>\n                            {column.icon && column.icon(onHover || open)}\n                        </div>\n                        <div className={classes.headerTitleInternal}>\n                            {column.label}\n                        </div>\n                    </div>\n                </Grid>\n\n                {column.property && !column.property.hideFilter && column.sortable && (sort || onHover || open) &&\n                <Grid item>\n                    <Badge color=\"secondary\"\n                           variant=\"dot\"\n                           overlap=\"circular\"\n                           invisible={!sort}>\n                        <IconButton\n                            size={\"small\"}\n                            className={classes.headerIconButton}\n                            onClick={() => {\n                                onColumnSort(column.key as Extract<keyof M, string>);\n                            }}\n                        >\n                            {!sort && <ArrowUpwardIcon fontSize={\"small\"}/>}\n                            {sort === \"asc\" &&\n                            <ArrowUpwardIcon fontSize={\"small\"}/>}\n                            {sort === \"desc\" &&\n                            <ArrowDownwardIcon fontSize={\"small\"}/>}\n                        </IconButton>\n                    </Badge>\n                </Grid>\n                }\n\n                {column.property && !column.property.hideFilter && column.filter && <Grid item>\n                    <Badge color=\"secondary\"\n                           variant=\"dot\"\n                           overlap=\"circular\"\n                           invisible={!filter}>\n                        <IconButton\n                            className={classes.headerIconButton}\n                            size={\"small\"}\n                            onClick={handleSettingsClick}>\n                            <ArrowDropDownCircleIcon fontSize={\"small\"}\n                                                     color={onHover || open ? undefined : \"disabled\"}/>\n                        </IconButton>\n\n                    </Badge>\n                </Grid>}\n            </Grid>\n\n            {column.sortable && <Popover\n                id={open ? `popover_${column.key}` : undefined}\n                open={open}\n                elevation={2}\n                anchorEl={ref.current}\n                onClose={handleClose}\n                anchorOrigin={{\n                    vertical: \"bottom\",\n                    horizontal: \"right\"\n                }}\n                transformOrigin={{\n                    vertical: \"top\",\n                    horizontal: \"right\"\n                }}\n            >\n                <FilterForm column={column}\n                            filter={filter}\n                            onFilterUpdate={update}/>\n            </Popover>}\n\n        </ErrorBoundary>\n    );\n}\n\ninterface FilterFormProps<M> {\n    column: TableColumn<M>;\n    onFilterUpdate: (filter?: [TableWhereFilterOp, any]) => void;\n    filter?: [TableWhereFilterOp, any];\n}\n\n\nfunction FilterForm<M>({\n                           column,\n                           onFilterUpdate,\n                           filter\n                       }: FilterFormProps<M>) {\n\n\n    const id = column.key;\n    const classes = useStyles({});\n\n    const [filterInternal, setFilterInternal] = useState<[TableWhereFilterOp, any] | undefined>(filter);\n\n    const submit = (e: any) => {\n        onFilterUpdate(filterInternal);\n    };\n\n    const reset = (e: any) => {\n        onFilterUpdate(undefined);\n    };\n\n    const filterIsSet = !!filter;\n\n    function createFilterField(id: string,\n                               filterConfig: TableColumnFilter,\n                               filterValue: [TableWhereFilterOp, any] | undefined,\n                               setFilterValue: (filterValue?: [TableWhereFilterOp, any]) => void\n    ): JSX.Element {\n\n        if (filterConfig.dataType === \"number\" || filterConfig.dataType === \"string\") {\n            const dataType = filterConfig.dataType;\n            const title = filterConfig.title;\n            const enumValues = filterConfig.enumValues;\n            return <StringNumberFilterField value={filterValue}\n                                            setValue={setFilterValue}\n                                            name={id as string}\n                                            dataType={dataType}\n                                            isArray={filterConfig.isArray}\n                                            enumValues={enumValues}\n                                            title={title}/>;\n        } else if (filterConfig.dataType === \"boolean\") {\n            const title = filterConfig.title;\n            return <BooleanFilterField value={filterValue}\n                                       setValue={setFilterValue}\n                                       name={id as string}\n                                       title={title}/>;\n        } else if (filterConfig.dataType === \"timestamp\") {\n            const title = filterConfig.title;\n            return <DateTimeFilterField value={filterValue}\n                                        setValue={setFilterValue}\n                                        name={id as string}\n                                        isArray={filterConfig.isArray}\n                                        title={title}/>;\n        }\n\n        return (\n            <div>{`Currently the field ${filterConfig.dataType} is not supported`}</div>\n        );\n    }\n\n\n    return (\n        <>\n\n            <Box p={2} className={classes.headerTypography}>\n                {column.label ?? id}\n            </Box>\n\n            <Divider/>\n\n            {column.filter && <Box p={2}>\n                {createFilterField(id, column.filter, filterInternal, setFilterInternal)}\n            </Box>}\n\n            <Box display=\"flex\"\n                 justifyContent=\"flex-end\"\n                 m={2}>\n                <Box mr={1}>\n                    <Button\n                        disabled={!filterIsSet}\n                        color=\"primary\"\n                        type=\"reset\"\n                        aria-label=\"filter clear\"\n                        onClick={reset}>Clear</Button>\n                </Box>\n                <Button\n                    variant=\"outlined\"\n                    color=\"primary\"\n                    onClick={submit}>Filter</Button>\n            </Box>\n        </>\n    );\n\n}\n\n","import React, { useCallback, useEffect, useRef } from \"react\";\nimport BaseTable, { Column, ColumnShape } from \"react-base-table\";\nimport Measure, { ContentRect } from \"react-measure\";\nimport { alpha, Box, Checkbox, Theme, Tooltip, Typography } from \"@mui/material\";\nimport AssignmentIcon from \"@mui/icons-material/Assignment\";\nimport clsx from \"clsx\";\n\nimport { ErrorBoundary } from \"../../internal/ErrorBoundary\";\nimport { CircularProgressCenter } from \"../CircularProgressCenter\";\nimport { baseTableCss } from \"./styles\";\nimport { TableHeader } from \"./TableHeader\";\nimport { TableColumn, TableFilterValues, TableProps, TableWhereFilterOp } from \"./TableProps\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport makeStyles from \"@mui/styles/makeStyles\";\n\nimport { getRowHeight } from \"./common\";\nimport { useSelectionController } from \"../EntityCollectionView\";\nimport { useNavigation } from \"../../../hooks\";\n\nconst PIXEL_NEXT_PAGE_OFFSET = 1200;\n\n// @types/react/index.d.ts\ndeclare module \"react\" {\n    interface Attributes {\n        css?: any;\n    }\n}\n\nexport const useTableStyles = makeStyles<Theme>(theme => createStyles({\n    tableContainer: {\n        width: \"100%\",\n        height: \"100%\",\n        flexGrow: 1\n    },\n    header: {\n        width: \"calc(100% + 24px)\",\n        margin: \"0px -12px\",\n        padding: \"0px 12px\",\n        color: theme.palette.text.secondary,\n        backgroundColor: theme.palette.background.default,\n        transition: \"color 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms\",\n        height: \"100%\",\n        fontSize: \"0.750rem\",\n        textTransform: \"uppercase\",\n        fontWeight: 600\n    },\n    tableRow: {\n        cursor: \"pointer\",\n        display: \"flex\",\n        alignItems: \"center\",\n        fontSize: \"0.875rem\"\n    },\n    tableRowClickable: {\n        \"&:hover\": {\n            backgroundColor: theme.palette.mode === \"dark\" ? alpha(theme.palette.background.default, 0.6) : alpha(theme.palette.background.default, 0.5)\n        }\n    },\n    column: {\n        padding: \"0px !important\"\n    },\n    alignText: {\n        paddingLeft: \"12px !important\"\n    }\n}));\n\n/**\n * This is a Table component that allows displaying arbitrary data, not\n * necessarily related to entities or properties. It is the component\n * that powers the entity collections but has a generic API so it\n * can be reused.\n *\n * If you have an entity collection defined, you probably want to use\n * {@link CollectionTable} or {@link EntityCollectionView}\n *\n * @see CollectionTable\n * @see EntityCollectionView\n * @category Components\n */\nexport function Table<T>({\n                             data,\n                             idColumnBuilder,\n                             onResetPagination,\n                             onEndReached,\n                             size,\n                             columns,\n                             frozenIdColumn,\n                             onRowClick,\n                             onColumnResize,\n                             filter,\n                             checkFilterCombination,\n                             collection,\n                             onFilterUpdate,\n                             sortBy,\n                             error,\n                             emptyMessage,\n                             onSortByUpdate,\n                             loading,\n                             hoverRow = true\n                         }: TableProps<T>) {\n    const sortByProperty: string | undefined = sortBy ? sortBy[0] : undefined;\n    const currentSort: \"asc\" | \"desc\" | undefined = sortBy ? sortBy[1] : undefined;\n\n    const [tableSize, setTableSize] = React.useState<ContentRect | undefined>();\n\n    const tableRef = useRef<BaseTable>(null);\n\n    // these refs are a workaround to prevent the scroll jump caused by Firestore\n    // firing listeners with incomplete data\n    const scrollRef = useRef<number>(0);\n    const endReachedTimestampRef = useRef<number>(0);\n\n    const classes = useTableStyles();\n    const getClass = (column: any) => {\n        console.log(\"asdasdacc\", column)\n        console.log(\"datatata\", data)\n        console.log(\"columnscolumns\", columns)\n        if (!column.property) return classes.column\n\n        if (!column.property.disableCustomStyles &&\n            (column.property.dataType === \"number\" ||\n                column.property.dataType === \"string\" ||\n                column.property.dataType === \"timestamp\")\n        ) {\n            return `${classes.column} ${classes.alignText} alignText`\n        } else return classes.column\n    }\n    useEffect(() => {\n        if (tableRef.current && data?.length) {\n            tableRef.current.scrollToTop(scrollRef.current);\n        }\n    }, [data?.length]);\n\n    const onColumnSort = (key: string) => {\n\n        const isDesc = sortByProperty === key && currentSort === \"desc\";\n        const isAsc = sortByProperty === key && currentSort === \"asc\";\n        const newSort = isAsc ? \"desc\" : (isDesc ? undefined : \"asc\");\n        const newSortProperty: string | undefined = isDesc ? undefined : key;\n\n        const newSortBy: [string, \"asc\" | \"desc\"] | undefined = newSort && newSortProperty ? [newSortProperty, newSort] : undefined;\n        if (filter) {\n            if (checkFilterCombination && !checkFilterCombination(filter, newSortBy)) {\n                if (onFilterUpdate)\n                    onFilterUpdate(undefined);\n            }\n        }\n\n        if (onResetPagination) {\n            onResetPagination();\n        }\n\n        if (onSortByUpdate) {\n            onSortByUpdate(newSortBy);\n        }\n\n        scrollToTop();\n    };\n\n\n    const [isSelected, setIsSelected] = React.useState(undefined);\n\n    const selectAll = () => {\n        const checkbox = document.querySelectorAll(\".select-all\")[0].getElementsByTagName(\"input\")[0] as any;\n        if (isSelected === undefined) {\n            checkbox.click()\n            setTimeout(() => {\n                checkbox.click()\n            }, 100)\n        } else {\n            checkbox.click()\n        }\n        setIsSelected(checkbox.checked)\n    }\n\n    const resetSort = () => {\n        if (onSortByUpdate)\n            onSortByUpdate(undefined);\n    };\n\n    const scrollToTop = () => {\n        if (tableRef.current) {\n            scrollRef.current = 0;\n            tableRef.current.scrollToTop(0);\n        }\n    };\n    const onScroll = ({ scrollTop, scrollUpdateWasRequested }: {\n        scrollLeft: number;\n        scrollTop: number;\n        horizontalScrollDirection: \"forward\" | \"backward\";\n        verticalScrollDirection: \"forward\" | \"backward\";\n        scrollUpdateWasRequested: boolean;\n    }) => {\n        const prudentTime = Date.now() - endReachedTimestampRef.current > 3000;\n        if (!scrollUpdateWasRequested && prudentTime) {\n            scrollRef.current = scrollTop;\n        }\n    };\n\n    const onEndReachedInternal = () => {\n        endReachedTimestampRef.current = Date.now();\n        if (onEndReached)\n            onEndReached();\n    };\n\n    const clickRow = (props: { rowData: T; rowIndex: number; rowKey: string; event: React.SyntheticEvent }) => {\n        if (!onRowClick)\n            return;\n        onRowClick(props);\n    };\n\n    const headerRenderer = ({ columnIndex }: any) => {\n\n        const column = columns[columnIndex - 1];\n\n        const filterForThisProperty: [TableWhereFilterOp, any] | undefined =\n            column && filter && filter[column.key]\n                ? filter[column.key]\n                : undefined;\n\n        const onInternalFilterUpdate = (filterForProperty?: [TableWhereFilterOp, any]) => {\n\n            let newFilterValue: TableFilterValues<any> = filter ? { ...filter } : {};\n\n            if (!filterForProperty) {\n                delete newFilterValue[column.key];\n            } else {\n                newFilterValue[column.key] = filterForProperty;\n            }\n\n            const newSortBy: [string, \"asc\" | \"desc\"] | undefined = sortByProperty && currentSort ? [sortByProperty, currentSort] : undefined;\n            const isNewFilterCombinationValid = !checkFilterCombination || checkFilterCombination(newFilterValue, newSortBy);\n            if (!isNewFilterCombinationValid) {\n                newFilterValue = filterForProperty ? { [column.key]: filterForProperty } as TableFilterValues<T> : {};\n            }\n\n            if (onFilterUpdate) onFilterUpdate(newFilterValue);\n\n            if (column.key !== sortByProperty) {\n                resetSort();\n            }\n        };\n\n        return (\n\n            <ErrorBoundary>\n                {columnIndex === 0\n                    ? <div className={classes.header}\n                           style={{\n                               display: \"flex\",\n                               justifyContent: \"center\",\n                               alignItems: \"center\",\n                               width: \"100%\",\n                               padding: 0\n                           }}>\n                        <p style={{\n                            margin: 0,\n                            width: \"45px\"\n                        }}>ID</p>\n\n                        <Tooltip title={\"Select All\"} className={\"select-all\"}>\n                            <Checkbox\n                                checked={isSelected}\n                                onChange={selectAll}\n                            />\n                        </Tooltip>\n                    </div>\n                    : <TableHeader\n                        onFilterUpdate={onInternalFilterUpdate}\n                        filter={filterForThisProperty}\n                        sort={sortByProperty === column.key ? currentSort : undefined}\n                        onColumnSort={onColumnSort}\n                        column={column}/>\n\n                }\n            </ErrorBoundary>\n        );\n    };\n\n\n    function buildErrorView() {\n        return (\n            <Box display=\"flex\"\n                 flexDirection={\"column\"}\n                 justifyContent=\"center\"\n                 margin={6}>\n\n                <Typography variant={\"h6\"}>\n                    {\"Error fetching data from the data source\"}\n                </Typography>\n\n                {error?.name && <Typography>\n                    {error?.name}\n                </Typography>}\n\n                {error?.message && <Typography>\n                    {error?.message}\n                </Typography>}\n\n            </Box>\n\n        );\n    }\n\n    function buildEmptyView() {\n        if (loading)\n            return <CircularProgressCenter/>;\n        return (\n            <Box display=\"flex\"\n                 flexDirection={\"column\"}\n                 alignItems=\"center\"\n                 justifyContent=\"center\"\n                 width={\"100%\"}\n                 height={\"100%\"}\n                 padding={2}>\n                <Box padding={1}>\n                    <AssignmentIcon/>\n                </Box>\n                <Typography>\n                    {emptyMessage}\n                </Typography>\n            </Box>\n        );\n    }\n\n    const onBaseTableColumnResize = useCallback(({\n                                                     column,\n                                                     width\n                                                 }: { column: ColumnShape; width: number }) => {\n        if (onColumnResize) {\n            onColumnResize({\n                width,\n                key: column.key as string,\n                column: column as TableColumn<any>\n            });\n        }\n    }, [onColumnResize]);\n\n    return (\n\n        <>\n\n            <Measure\n                bounds\n                onResize={setTableSize}>\n                {({ measureRef }) => {\n\n                    return (\n                        <div ref={measureRef}\n                             className={classes.tableContainer}\n                             css={baseTableCss}>\n\n                            {tableSize?.bounds &&\n                                <BaseTable\n                                    rowClassName={clsx(classes.tableRow, { [classes.tableRowClickable]: hoverRow })}\n                                    data={data}\n                                    onColumnResizeEnd={onBaseTableColumnResize}\n                                    width={tableSize.bounds.width}\n                                    height={tableSize.bounds.height}\n                                    emptyRenderer={error ? buildErrorView() : buildEmptyView()}\n                                    fixed\n                                    ignoreFunctionInColumnCompare={false}\n                                    rowHeight={getRowHeight(size)}\n                                    ref={tableRef}\n                                    onScroll={onScroll}\n                                    overscanRowCount={2}\n                                    onEndReachedThreshold={PIXEL_NEXT_PAGE_OFFSET}\n                                    onEndReached={onEndReachedInternal}\n                                    rowEventHandlers={\n                                        { onClick: clickRow as any }\n                                    }\n                                >\n\n                                    <Column\n                                        headerRenderer={headerRenderer}\n                                        cellRenderer={({\n                                                           rowData\n                                                       }: any) =>\n                                            idColumnBuilder\n                                                ? idColumnBuilder({\n                                                    size,\n                                                    entry: rowData\n                                                })\n                                                : null\n                                        }\n                                        align={\"center\"}\n                                        key={\"header-id\"}\n                                        dataKey={\"id\"}\n                                        flexShrink={0}\n                                        frozen={frozenIdColumn ? \"left\" : undefined}\n                                        width={160}/>\n\n                                    {columns.map((column) =>\n                                        <Column\n                                            key={column.key}\n                                            title={column.label}\n                                            className={({ rowData }) => {\n                                                const currentColumn: any = data?.filter((d: any) => d.id === rowData.id)[0]\n                                                if (currentColumn!.values.archived) {\n                                                    return `${getClass(column)} archived-row`\n                                                } else {\n                                                    return getClass(column)\n                                                }\n                                            }\n                                            }\n                                            style={{ color: column.property && column.property.textColor ? column.property.textColor : \"rgba(0, 0, 0, 0.87)\" }}\n                                            headerRenderer={headerRenderer}\n                                            cellRenderer={column.cellRenderer}\n                                            height={getRowHeight(size)}\n                                            align={column.align}\n                                            flexGrow={1}\n                                            flexShrink={0}\n                                            resizable={true}\n                                            size={size}\n                                            dataKey={column.key}\n                                            width={column.width}/>)\n                                    }\n                                </BaseTable>}\n                        </div>\n                    );\n                }}\n            </Measure>\n\n        </>\n    );\n}\n","import { useContext } from \"react\";\nimport { BreadcrumbContext } from \"../core/contexts/BreacrumbsContext\";\n\n\n/**\n * @category Hooks and utilities\n */\nexport interface BreadcrumbsController {\n    breadcrumbs: BreadcrumbEntry[];\n    set: (props: {\n        breadcrumbs: BreadcrumbEntry[];\n    }) => void;\n}\n\n/**\n * @category Hooks and utilities\n */\nexport interface BreadcrumbEntry {\n    title: string;\n    url: string;\n}\n\n/**\n * Hook to retrieve the BreadcrumbContext.\n *\n * Consider that in order to use this hook you need to have a parent\n * `FireCMS`\n *\n * @see BreadcrumbsController\n * @category Hooks and utilities\n */\nexport const useBreadcrumbsContext = (): BreadcrumbsController => useContext(BreadcrumbContext);\n","import React from \"react\";\nimport { Box, Typography } from \"@mui/material\";\n\nexport function NotFoundPage() {\n\n    return (\n        <Box\n            display=\"flex\"\n            width={\"100%\"}\n            height={\"100%\"}>\n            <Box m=\"auto\">\n                <Typography variant={\"h4\"} align={\"center\"} gutterBottom={true}>\n                    Page not found\n                </Typography>\n                <Typography align={\"center\"}>\n                    This page does not exist or you may not have access to it\n                </Typography>\n            </Box>\n        </Box>\n    );\n}\n\n","import React, { PropsWithChildren } from \"react\";\n\nimport { Route, Routes, useLocation } from \"react-router-dom\";\nimport { CMSView } from \"../models\";\nimport { EntityCollectionView, FireCMSHomePage } from \"./components\";\nimport { useNavigation } from \"../hooks\";\nimport { useBreadcrumbsContext } from \"../hooks/useBreadcrumbsContext\";\nimport { NotFoundPage } from \"./components/NotFoundPage\";\n\n/**\n * @category Components\n */\nexport type NavigationRoutesProps = {\n    /**\n     * In case you need to override the home page\n     */\n    HomePage?: React.ComponentType;\n};\n\n/**\n * This component is in charge of taking a {@link Navigation} and rendering\n * all the related routes (entity collection root views, custom views\n * or the home route).\n * This component needs a parent {@link FireCMS}\n *\n * @constructor\n * @category Components\n */\nexport function NavigationRoutes({ HomePage }: NavigationRoutesProps) {\n\n    const location = useLocation();\n    const navigationContext = useNavigation();\n    const navigation = navigationContext.navigation;\n\n    if (!navigation)\n        return <></>;\n\n    const state = location.state as any;\n    /**\n     * The location can be overridden if `base_location` is set in the\n     * state field of the current location. This can happen if you open\n     * a side entity, like `products`, from a different one, like `users`\n     */\n    const baseLocation = state && state.base_location ? state.base_location : location;\n\n    const customRoutes: JSX.Element[] = [];\n    if (navigation.views) {\n        const buildCMSViewRoute = (path: string, cmsView: CMSView) => {\n            return <Route\n                key={\"navigation_view_\" + path}\n                path={path}\n                element={\n                    <BreadcrumbUpdater\n                        path={path}\n                        key={`navigation_${path}`}\n                        title={cmsView.name}>\n                        {cmsView.view}\n                    </BreadcrumbUpdater>}\n            />;\n        };\n\n        navigation.views.forEach((cmsView) => {\n            if (Array.isArray(cmsView.path))\n                customRoutes.push(...cmsView.path.map(path => buildCMSViewRoute(path, cmsView)));\n            else\n                customRoutes.push(buildCMSViewRoute(cmsView.path, cmsView));\n        });\n    }\n\n    const collectionRoutes = [...navigation.collections]\n        // we reorder collections so that nested paths are included first\n        .sort((a, b) => b.path.length - a.path.length)\n        .map((collection) => {\n                const urlPath = navigationContext.buildUrlCollectionPath(collection.path);\n                return <Route path={urlPath + \"/*\"}\n                              key={`navigation_${collection.path}`}\n                              element={\n                                  <BreadcrumbUpdater\n                                      path={urlPath}\n                                      title={collection.name}>\n                                      <EntityCollectionView\n                                          path={collection.path}\n                                          collection={collection}/>\n                                  </BreadcrumbUpdater>\n                              }/>;\n            }\n        );\n\n    const homeRoute =\n        <Route path={\"/\"}\n               element={\n                   <BreadcrumbUpdater\n                       path={\"/\"}\n                       key={\"navigation_home\"}\n                       title={\"Home\"}>\n                       {HomePage ? <HomePage/> : <FireCMSHomePage/>}\n                   </BreadcrumbUpdater>\n               }/>;\n\n    const notFoundRoute = <Route path={\"*\"}\n                                 element={\n                                     <NotFoundPage/>\n                                 }/>;\n\n    return (\n        <Routes location={baseLocation}>\n\n            {collectionRoutes}\n\n            {customRoutes}\n\n            {homeRoute}\n\n            {notFoundRoute}\n\n        </Routes>\n    );\n}\n\n\ninterface BreadcrumbRouteProps {\n    title: string;\n    path: string;\n}\n\n/**\n * This component updates the breadcrumb in the app bar when rendered\n * @param children\n * @param title\n * @param path\n * @constructor\n * @category Components\n */\nfunction BreadcrumbUpdater({\n                               children,\n                               title,\n                               path\n                           }\n                               : PropsWithChildren<BreadcrumbRouteProps>) {\n\n    const breadcrumbsContext = useBreadcrumbsContext();\n    React.useEffect(() => {\n        breadcrumbsContext.set({\n            breadcrumbs: [{\n                title: title,\n                url: path\n            }]\n        });\n    }, [path, title]);\n\n    return <>{children}</>;\n}\n","import React from \"react\";\n\nexport function FireCMSLogo() {\n    return (\n        <svg\n            width=\"232\" height=\"232\"\n            viewBox=\"0 0 599 599\" version=\"1.1\"\n            xmlns=\"http://www.w3.org/2000/svg\">\n            <defs>\n                <radialGradient cx=\"28.6213569%\" cy=\"43.1133328%\"\n                                fx=\"28.6213569%\"\n                                fy=\"43.1133328%\" r=\"71.5003456%\"\n                                gradientTransform=\"translate(0.286214,0.431133),rotate(3.343450),scale(1.000000,0.996175),translate(-0.286214,-0.431133)\"\n                                id=\"radialGradient-1\">\n                    <stop stopColor=\"#FF5B79\" offset=\"0%\"/>\n                    <stop stopColor=\"#FA5574\" offset=\"28.0930803%\"/>\n                    <stop stopColor=\"#EC4C51\" offset=\"44.7242531%\"/>\n                    <stop stopColor=\"#9543C1\" offset=\"71.4578165%\"/>\n                    <stop stopColor=\"#3857B3\" offset=\"100%\"/>\n                </radialGradient>\n                <radialGradient cx=\"53.6205516%\" cy=\"47.2473036%\"\n                                fx=\"53.6205516%\"\n                                fy=\"47.2473036%\" r=\"50.8229649%\"\n                                gradientTransform=\"translate(0.536206,0.472473),rotate(90.000000),scale(1.000000,1.206631),translate(-0.536206,-0.472473)\"\n                                id=\"radialGradient-2\">\n                    <stop stopColor=\"#68294F\" stopOpacity=\"0\" offset=\"0%\"/>\n                    <stop stopColor=\"#5E2548\" stopOpacity=\"0.04641108\"\n                          offset=\"75.3503173%\"/>\n                    <stop stopColor=\"#0D060B\" stopOpacity=\"0.437431709\"\n                          offset=\"100%\"/>\n                </radialGradient>\n                <radialGradient cx=\"53.8605015%\" cy=\"48.1990423%\"\n                                fx=\"53.8605015%\"\n                                fy=\"48.1990423%\" r=\"59.9151549%\"\n                                gradientTransform=\"translate(0.538605,0.481990),rotate(180.000000),scale(1.000000,0.925027),translate(-0.538605,-0.481990)\"\n                                id=\"radialGradient-3\">\n                    <stop stopColor=\"#68294F\" stopOpacity=\"0\" offset=\"0%\"/>\n                    <stop stopColor=\"#5E2548\" stopOpacity=\"0.04641108\"\n                          offset=\"84.0867343%\"/>\n                    <stop stopColor=\"#FF0000\" stopOpacity=\"0.567324765\"\n                          offset=\"100%\"/>\n                </radialGradient>\n            </defs>\n            <g id=\"Page-1\" stroke=\"none\" strokeWidth=\"1\" fill=\"none\"\n               fillRule=\"evenodd\">\n                <g id=\"firecms_logo\">\n                    <circle fill=\"url(#radialGradient-1)\" cx=\"299.5\" cy=\"299.5\"\n                            r=\"299.5\"/>\n                    <circle fill=\"url(#radialGradient-2)\" cx=\"299.5\" cy=\"299.5\"\n                            r=\"299.5\"/>\n                    <circle fill=\"url(#radialGradient-3)\" cx=\"299.5\" cy=\"299.5\"\n                            r=\"299.5\"/>\n                </g>\n            </g>\n        </svg>\n    );\n\n}\n","import React, { useCallback, useMemo } from \"react\";\nimport {\n    Box,\n    Divider,\n    Link,\n    List,\n    ListItem,\n    Theme,\n    Typography\n} from \"@mui/material\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport makeStyles from \"@mui/styles/makeStyles\";\nimport { NavLink } from \"react-router-dom\";\nimport {\n    computeTopNavigation,\n    TopNavigationEntry,\n    TopNavigationResult\n} from \"./util/navigation_utils\";\nimport { useNavigation } from \"../hooks\";\nimport { FireCMSLogo } from \"./components/FireCMSLogo\";\n\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        logo: {\n            padding: theme.spacing(3),\n            maxWidth: 280\n        }\n    })\n);\n\n/**\n * Props used in case you need to override the default drawer\n * @category Core\n */\nexport interface DrawerProps {\n    logo: string | undefined,\n    closeDrawer: () => any,\n}\n\n/**\n * Default drawer used in the CMS\n * @category Core\n */\nexport function Drawer({\n                           logo,\n                           closeDrawer\n                       }: DrawerProps) {\n\n    const classes = useStyles();\n\n    const navigationContext = useNavigation();\n\n    const {\n        navigationEntries,\n        groups\n    }: TopNavigationResult = useMemo(() => computeTopNavigation(navigationContext, false), [navigationContext]);\n\n    const ungroupedNavigationViews = Object.values(navigationEntries).filter(e => !e.group);\n\n    const createNavigationListItem = useCallback((index: number, group: string, entry: TopNavigationEntry) =>\n        <ListItem\n            // @ts-ignore\n            button\n            key={`navigation_${index}`}\n            component={NavLink}\n            onClick={closeDrawer}\n            // @ts-ignore\n            style={({ isActive }) => ({\n                fontWeight: isActive ? \"600\" : \"500\",\n                background: isActive ? \"rgba(128,128,128,0.1)\" : \"inherit\"\n            })}\n            to={entry.url}\n        >\n            <Typography\n                variant={\"subtitle2\"}\n                sx={{\n                    fontWeight: \"inherit\",\n                    py: 0.5\n                }}>\n                {entry.name.toUpperCase()}\n            </Typography>\n        </ListItem>, [closeDrawer]);\n\n    let logoComponent;\n    if (logo) {\n        logoComponent = <img className={classes.logo}\n                             src={logo}\n                             alt={\"Logo\"}/>;\n    } else {\n        logoComponent = <div className={classes.logo}>\n            <FireCMSLogo/>\n        </div>;\n    }\n\n    return <>\n\n        <Link\n            key={\"breadcrumb-home\"}\n            color=\"inherit\"\n            onClick={closeDrawer}\n            component={NavLink}\n\n            to={navigationContext.homeUrl}>\n            {logoComponent}\n        </Link>\n\n        <List>\n\n            {groups.map((group) => (\n                <React.Fragment\n                    key={`drawer_group_${group}`}>\n                    <Divider key={`divider_${group}`}/>\n                    <Box pt={2} pl={2} pr={2} pb={0.5}>\n                        <Typography variant={\"caption\"}\n                                    color={\"textSecondary\"}\n                                    className={\"weight-500\"}>\n                            {group.toUpperCase()}\n                        </Typography>\n                    </Box>\n                    {Object.values(navigationEntries)\n                        .filter(e => e.group === group)\n                        .map((view, index) => createNavigationListItem(index, group, view))}\n                </React.Fragment>\n            ))}\n\n            {ungroupedNavigationViews.length > 0 &&\n            <Divider key={\"divider_ungrouped\"}/>}\n\n            {ungroupedNavigationViews.map((view, index) => createNavigationListItem(index, \"none\", view))}\n\n        </List>\n\n    </>;\n}\n","/* @jsxImportSource @emotion/react */\nimport React from \"react\";\nimport {\n    AppBar,\n    Avatar,\n    Box,\n    Breadcrumbs,\n    Button,\n    Chip,\n    Hidden,\n    IconButton,\n    Link,\n    Slide,\n    Theme,\n    Toolbar,\n    Typography\n} from \"@mui/material\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport makeStyles from \"@mui/styles/makeStyles\";\nimport MenuIcon from \"@mui/icons-material/Menu\";\nimport Brightness5Icon from \"@mui/icons-material/Brightness5\";\nimport Brightness3Icon from \"@mui/icons-material/Brightness3\";\nimport NavigateNextIcon from \"@mui/icons-material/NavigateNext\";\nimport { Link as ReactLink } from \"react-router-dom\";\nimport { ErrorBoundary } from \"./ErrorBoundary\";\nimport { useAuthController, useModeState } from \"../../hooks\";\nimport { useBreadcrumbsContext } from \"../../hooks/useBreadcrumbsContext\";\n\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        appbar: {},\n        menuButton: {\n            marginRight: theme.spacing(2)\n        },\n        breadcrumb: {\n            backgroundColor: theme.palette.grey[100],\n            height: theme.spacing(3),\n            color: theme.palette.grey[800],\n            fontWeight: theme.typography.fontWeightMedium,\n            \"&:hover, &:focus\": {\n                cursor: \"pointer\",\n                backgroundColor: theme.palette.grey[300]\n            },\n            \"&:active\": {\n                boxShadow: theme.shadows[1],\n                backgroundColor: theme.palette.grey[400]\n            }\n        }\n    })\n);\n\n\ninterface CMSAppBarProps {\n    title: string;\n    handleDrawerToggle: () => void,\n    /**\n     * A component that gets rendered on the upper side of the main toolbar\n     */\n    toolbarExtraWidget?: React.ReactNode;\n}\n\n\nexport function FireCMSAppBar({\n                                  title,\n                                  handleDrawerToggle,\n                                  toolbarExtraWidget\n                              }: CMSAppBarProps) {\n\n    const classes = useStyles();\n\n    const breadcrumbsContext = useBreadcrumbsContext();\n    const { breadcrumbs } = breadcrumbsContext;\n\n    const authController = useAuthController();\n    const { mode, toggleMode } = useModeState();\n\n    const initial = authController.user?.displayName\n        ? authController.user.displayName[0].toUpperCase()\n        : (authController.user?.email ? authController.user.email[0].toUpperCase() : \"A\");\n\n    return (\n        <Slide\n            direction=\"down\" in={true} mountOnEnter unmountOnExit>\n            <AppBar\n                className={classes.appbar}\n                position={\"relative\"}\n                elevation={1}>\n                <Toolbar>\n                    <IconButton\n                        color=\"inherit\"\n                        aria-label=\"Open drawer\"\n                        edge=\"start\"\n                        onClick={handleDrawerToggle}\n                        className={classes.menuButton}\n                        size=\"large\">\n                        <MenuIcon/>\n                    </IconButton>\n\n                    <Hidden lgDown>\n                        <Box mr={3}>\n                            <Link\n                                underline={\"none\"}\n                                key={\"breadcrumb-home\"}\n                                color=\"inherit\"\n                                component={ReactLink}\n                                to={\"/\"}>\n                                <Typography variant=\"h6\" noWrap>\n                                    {title}\n                                </Typography>\n                            </Link>\n                        </Box>\n                    </Hidden>\n\n                    <Box mr={2}>\n                        <Breadcrumbs\n                            separator={<NavigateNextIcon\n                                htmlColor={\"rgb(0,0,0,0.87)\"}\n                                fontSize=\"small\"/>}\n                            aria-label=\"breadcrumb\">\n                            {breadcrumbs.map((entry, index) => (\n                                <Link\n                                    underline={\"none\"}\n                                    key={`breadcrumb-${index}`}\n                                    color=\"inherit\"\n                                    component={ReactLink}\n                                    to={entry.url}>\n                                    <Chip\n                                        classes={{ root: classes.breadcrumb }}\n                                        label={entry.title}\n                                    />\n                                </Link>)\n                            )\n                            }\n                        </Breadcrumbs>\n                    </Box>\n\n                    <Box flexGrow={1}/>\n\n                    {toolbarExtraWidget &&\n                    <ErrorBoundary>\n                        {\n                            toolbarExtraWidget\n                        }\n                    </ErrorBoundary>}\n\n\n                    <Box p={1} mr={1}>\n                        <IconButton\n                            color=\"inherit\"\n                            aria-label=\"Open drawer\"\n                            edge=\"start\"\n                            onClick={() => toggleMode()}\n                            size=\"large\">\n                            {mode === \"dark\"\n                                ? <Brightness3Icon/>\n                                : <Brightness5Icon/>}\n                        </IconButton>\n                    </Box>\n\n                    <Box p={1} mr={1}>\n                        {authController.user && authController.user.photoURL\n                            ? <Avatar\n                                src={authController.user.photoURL}/>\n                            : <Avatar>{initial}</Avatar>\n                        }\n                    </Box>\n\n                    <Button variant=\"text\"\n                            color=\"inherit\"\n                            onClick={authController.signOut}>\n                        Log Out\n                    </Button>\n\n                </Toolbar>\n            </AppBar>\n        </Slide>\n    );\n}\n","import React, { PropsWithChildren } from \"react\";\n\nimport { Drawer as MuiDrawer, Theme } from \"@mui/material\";\nimport { createStyles, makeStyles } from \"@mui/styles\";\nimport { Drawer as FireCMSDrawer, DrawerProps } from \"./Drawer\";\nimport { FireCMSAppBar } from \"./internal/FireCMSAppBar\";\nimport { useNavigation } from \"../hooks\";\nimport { CircularProgressCenter } from \"./components\";\n\n\n/**\n * @category Core\n */\nexport interface ScaffoldProps {\n\n    /**\n     * Name of the app, displayed as the main title and in the tab title\n     */\n    name: string;\n\n    /**\n     * Logo to be displayed in the drawer of the CMS\n     */\n    logo?: string;\n\n    /**\n     * A component that gets rendered on the upper side of the main toolbar\n     */\n    toolbarExtraWidget?: React.ReactNode;\n\n    /**\n     * In case you need to override the view that gets rendered as a drawer\n     * @see FireCMSDrawer\n     */\n    Drawer?: React.ComponentType<DrawerProps>;\n\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        main: {\n            display: \"flex\",\n            flexDirection: \"column\",\n            width: \"100vw\",\n            height: \"100vh\"\n        },\n        content: {\n            flexGrow: 1,\n            width: \"100%\",\n            height: \"100%\",\n            overflow: \"auto\"\n        },\n        drawerPaper: {\n            width: 280\n        }\n    })\n);\n\n/**\n * This view acts as a scaffold for FireCMS.\n *\n * It is in charge of displaying the navigation drawer, top bar and main\n * collection views.\n * This component needs a parent {@link FireCMS}\n *\n * @param props\n * @constructor\n * @category Core\n */\nexport function Scaffold(props: PropsWithChildren<ScaffoldProps>) {\n\n    const {\n        children,\n        name,\n        logo,\n        toolbarExtraWidget,\n        Drawer\n    } = props;\n\n    const classes = useStyles();\n\n    const navigationContext = useNavigation();\n    const [drawerOpen, setDrawerOpen] = React.useState(false);\n\n    const handleDrawerToggle = () => setDrawerOpen(!drawerOpen);\n    const closeDrawer = () => setDrawerOpen(false);\n\n    const UsedDrawer = Drawer || FireCMSDrawer;\n\n    return (\n\n        <>\n            <nav>\n                <MuiDrawer\n                    variant=\"temporary\"\n                    anchor={\"left\"}\n                    open={drawerOpen}\n                    onClose={closeDrawer}\n                    classes={{\n                        paper: classes.drawerPaper\n                    }}\n                    ModalProps={{\n                        keepMounted: true\n                    }}\n                >\n                    {!navigationContext.navigation ? <CircularProgressCenter/> : <UsedDrawer logo={logo} closeDrawer={closeDrawer}/>}\n\n                </MuiDrawer>\n            </nav>\n\n            <div className={classes.main}>\n\n                <FireCMSAppBar title={name}\n                               handleDrawerToggle={handleDrawerToggle}\n                               toolbarExtraWidget={toolbarExtraWidget}/>\n                <main\n                    className={classes.content}>\n                    {children}\n                </main>\n            </div>\n\n        </>\n    );\n\n\n}\n\n","import * as React from \"react\";\nimport { Transition } from \"react-transition-group\";\nimport { debounce, ownerWindow, useForkRef, useTheme } from \"@mui/material\";\n\n// Translate the node so it can't be seen on the screen.\n// Later, we're going to translate the node back to its original location with `none`.\nfunction getTranslateValue(node: any) {\n    const rect = node.getBoundingClientRect();\n    const containerWindow = ownerWindow(node);\n    let transform;\n\n    if (node.fakeTransform) {\n        transform = node.fakeTransform;\n    } else {\n        const computedStyle = containerWindow.getComputedStyle(node);\n        transform =\n            computedStyle.getPropertyValue(\"-webkit-transform\") ||\n            computedStyle.getPropertyValue(\"transform\");\n    }\n\n    let offsetX = 0;\n\n    if (transform && transform !== \"none\" && typeof transform === \"string\") {\n        const transformValues = transform.split(\"(\")[1].split(\")\")[0].split(\",\");\n        offsetX = parseInt(transformValues[4], 10);\n    }\n\n    return `translateX(${containerWindow.innerWidth}px) translateX(${offsetX - rect.left}px)`;\n}\n\nexport function setTranslateValue(node: any) {\n    const transform = getTranslateValue(node);\n\n    if (transform) {\n        node.style.webkitTransform = transform;\n        node.style.transform = transform;\n    }\n}\n\n/**\n * The Slide transition is used by the [Drawer](/components/drawers/) component.\n * It uses [react-transition-group](https://github.com/reactjs/react-transition-group) internally.\n */\nexport const SlideFade = React.forwardRef(function SlideFade(props: SlideProps, ref) {\n    const {\n        children,\n        in: inProp,\n        timeout,\n        onExitAnimation,\n        ...other\n    } = props;\n\n    const theme: any = useTheme();\n    const childrenRef = React.useRef<any>(null);\n    const handleRefIntermediary = useForkRef(children.ref, childrenRef);\n    const handleRef = useForkRef(handleRefIntermediary, ref);\n\n    const normalizedTransitionCallback = (callback: any) => (isAppearing: boolean) => {\n        if (callback) {\n            // onEnterXxx and onExitXxx callbacks have a different arguments.length value.\n            if (isAppearing === undefined) {\n                callback(childrenRef.current);\n            } else {\n                callback(childrenRef.current, isAppearing);\n            }\n        }\n    };\n\n    const handleEnter = normalizedTransitionCallback((node: any) => {\n        setTranslateValue(node);\n        reflow(node);\n    });\n\n    const handleEntering = normalizedTransitionCallback((node: any) => {\n        const transitionProps = getTransitionProps(\n            { timeout },\n            {\n                mode: \"enter\"\n            }\n        );\n        node.style.webkitTransition = theme.transitions.create(\"-webkit-transform\", {\n            ...transitionProps,\n            easing: theme.transitions.easing.easeOut\n        });\n\n        node.style.transition = theme.transitions.create(\"transform\", {\n            ...transitionProps,\n            easing: theme.transitions.easing.easeOut\n        });\n\n        node.style.webkitTransform = \"none\";\n        node.style.transform = \"none\";\n        node.style.opacity = 1;\n    });\n\n\n    const handleExit: any = normalizedTransitionCallback((node: any) => {\n        const transitionProps = getTransitionProps(\n            { timeout },\n            {\n                mode: \"exit\"\n            }\n        );\n\n        node.style.opacity = 0.5;\n        node.style.webkitTransition = theme.transitions.create([\"-webkit-transform\", \"opacity\"], {\n            ...transitionProps,\n            easing: theme.transitions.easing.sharp\n        });\n\n        node.style.transition = theme.transitions.create([\"transform\", \"opacity\"], {\n            ...transitionProps,\n            easing: theme.transitions.easing.sharp\n        });\n\n        setTranslateValue(node);\n    });\n\n    const handleExited: any = normalizedTransitionCallback((node: any) => {\n        // No need for transitions when the component is hidden\n        node.style.webkitTransition = \"\";\n        node.style.transition = \"\";\n\n    });\n\n    const updatePosition = React.useCallback(() => {\n        if (childrenRef.current) {\n            setTranslateValue(childrenRef.current);\n        }\n    }, []);\n\n    React.useEffect(() => {\n        // Skip configuration where the position is screen size invariant.\n        if (inProp) {\n            return undefined;\n        }\n\n        const handleResize = debounce(() => {\n            if (childrenRef.current) {\n                setTranslateValue(childrenRef.current);\n            }\n        });\n\n        const containerWindow = ownerWindow(childrenRef.current);\n        containerWindow.addEventListener(\"resize\", handleResize);\n        return () => {\n            handleResize.clear();\n            containerWindow.removeEventListener(\"resize\", handleResize);\n        };\n    }, [inProp]);\n\n    React.useEffect(() => {\n        if (!inProp) {\n            // We need to update the position of the drawer when the direction change and\n            // when it's hidden.d\n            updatePosition();\n        }\n    }, [inProp, updatePosition]);\n\n    return (\n        <Transition\n            nodeRef={childrenRef}\n            onEnter={handleEnter}\n            onEntering={handleEntering}\n            onExit={handleExit}\n            onExited={handleExited}\n            appear={true}\n            in={inProp}\n            timeout={timeout}\n            {...other}\n        >\n            {(state: any, childProps: any) => {\n                return React.cloneElement(children, {\n                    ref: handleRef,\n                    style: {\n                        visibility: state === \"exited\" && !inProp ? \"hidden\" : undefined,\n                        ...children.props.style\n                    },\n                    ...childProps\n                });\n            }}\n        </Transition>\n    );\n});\n\n\ninterface SlideProps {\n    /**\n     * A single child content element.\n     */\n    children: any;\n    /**\n     * If `true`, the component will transition in.\n     */\n    in: boolean;\n    /**\n     * The duration for the transition, in milliseconds.\n     * You may specify a single timeout for all transitions, or individually with an object.\n     * @default {\n     *   enter: duration.enteringScreen,\n     *   exit: duration.leavingScreen,\n     * }\n     */\n    timeout: { enter: number, exit: number };\n\n    onExitAnimation?: () => void;\n}\n\nconst reflow = (node: any) => node.scrollTop;\n\nfunction getTransitionProps(props: any, options: any) {\n    const { timeout } = props;\n\n    return {\n        duration:\n            typeof timeout === \"number\"\n                ? timeout\n                : timeout[options.mode] || 0\n    };\n}\n","import React from \"react\";\nimport clsx from \"clsx\";\nimport { Backdrop, Modal, Paper, Theme } from \"@mui/material\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport makeStyles from \"@mui/styles/makeStyles\";\nimport { SlideFade } from \"./SlideFadeTransition\";\n\nexport interface EntityDrawerProps {\n\n    /**\n     * The contents of the drawer.\n     */\n    children: React.ReactNode,\n\n    /**\n     * Callback fired when the component requests to be closed.\n     *\n     * @param {object} event The event source of the callback.\n     */\n    onClose?: () => void,\n\n    /**\n     * If `true`, the drawer is open.\n     */\n    open: boolean,\n\n    /**\n     * The offset position of this view determines if it needs to be translated\n     * when nested\n     */\n    offsetPosition: number;\n\n    onExitAnimation?: () => void;\n\n}\n\nexport interface StyleProps {\n    offsetPosition: number;\n}\n\nconst useStyles = makeStyles<Theme, StyleProps>((theme: Theme) => createStyles({\n    /* Styles applied to the root element. */\n    root: {},\n    /* Styles applied to the `Paper` component. */\n    paper: {\n        height: \"100%\",\n        WebkitOverflowScrolling: \"touch\", // Add iOS momentum scrolling.\n        position: \"fixed\",\n        outline: 0\n    },\n    paperAnchorRight: ({ offsetPosition }) => ({\n        left: \"auto\",\n        right: 0\n    }),\n    /* Styles applied to the `Modal` component. */\n    modal: {}\n}));\n\n\nconst defaultTransitionDuration = {\n    enter: 225,\n    exit: 175\n};\n\n/**\n * The props of the [Modal](/api/modal/) component are available\n * when `variant=\"temporary\"` is set.\n */\nexport const SideDialogDrawer = React.forwardRef<HTMLDivElement, EntityDrawerProps>(function EntityDrawer(props, ref) {\n\n    const {\n        children,\n        onClose,\n        open,\n        offsetPosition,\n        onExitAnimation\n    } = props;\n\n    const classes = useStyles({ offsetPosition });\n\n    const drawer = (\n        <Paper\n            elevation={1}\n            square\n            style={{\n                transition: \"transform 1000ms cubic-bezier(0.33, 1, 0.68, 1)\",\n                transform: `translateX(-${(offsetPosition) * 240}px)`\n            }}\n            className={clsx(\n                classes.paper,\n                classes.paperAnchorRight\n            )}\n        >\n            {children}\n        </Paper>\n    );\n\n\n    const slidingDrawer = (\n        <SlideFade\n            in={open}\n            timeout={defaultTransitionDuration}\n            onExitAnimation={onExitAnimation}\n        >\n            {drawer}\n        </SlideFade>\n    );\n\n    return (\n        <Modal\n            BackdropProps={{\n                transitionDuration: defaultTransitionDuration\n            }}\n            BackdropComponent={Backdrop}\n            className={clsx(classes.root, classes.modal)}\n            open={open}\n            onClose={onClose}\n            ref={ref}\n            keepMounted={true}\n            // disableEnforceFocus related to https://github.com/Camberi/firecms/issues/50\n            disableEnforceFocus={true}\n        >\n            {slidingDrawer}\n        </Modal>\n    );\n});\n\n\n","export const CONTAINER_WIDTH = \"560px\";\nexport const CONTAINER_FULL_WIDTH = \"100vw\";\n\nexport const TAB_WIDTH = \"55vw\";\n","import React, {\n    lazy,\n    Suspense,\n    useCallback,\n    useEffect,\n    useMemo,\n    useState\n} from \"react\";\nimport {\n    Box,\n    CircularProgress,\n    Divider,\n    IconButton,\n    Tab,\n    Tabs,\n    Theme,\n    useMediaQuery,\n    useTheme\n} from \"@mui/material\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport makeStyles from \"@mui/styles/makeStyles\";\nimport CloseIcon from \"@mui/icons-material/Close\";\nimport clsx from \"clsx\";\nimport {\n    Entity,\n    EntityCallbacks,\n    EntityCollection,\n    EntitySchema,\n    EntitySchemaResolver,\n    EntityStatus,\n    EntityValues,\n    PermissionsBuilder,\n    ResolvedEntitySchema\n} from \"../../models\";\nimport { CircularProgressCenter } from \"../components\";\nimport { removeInitialAndTrailingSlashes } from \"../util/navigation_utils\";\n\nimport { CONTAINER_FULL_WIDTH, CONTAINER_WIDTH, TAB_WIDTH } from \"./common\";\nimport { ErrorBoundary } from \"./ErrorBoundary\";\nimport {\n    saveEntityWithCallbacks,\n    useAuthController,\n    useDataSource,\n    useEntityFetch,\n    useFireCMSContext,\n    useSideEntityController,\n    useSnackbarController\n} from \"../../hooks\";\nimport { canEdit } from \"../util/permissions\";\nimport { computeSchema } from \"../utils\";\n\nconst EntityCollectionView = lazy(() => import(\"../components/EntityCollectionView\")) as any;\nconst EntityForm = lazy(() => import(\"../../form/EntityForm\")) as any;\nconst EntityPreview = lazy(() => import(\"../components/EntityPreview\")) as any;\n\nconst useStylesSide = makeStyles<Theme, { containerWidth?: string }>((theme: Theme) =>\n    createStyles({\n        container: ({ containerWidth }) => ({\n            display: \"flex\",\n            flexDirection: \"column\",\n            width: containerWidth,\n            height: \"100%\",\n            [theme.breakpoints.down(\"sm\")]: {\n                width: CONTAINER_FULL_WIDTH\n            },\n            transition: \"width 250ms ease-in-out\"\n        }),\n        containerWide: ({ containerWidth }) => ({\n            width: `calc(${TAB_WIDTH} + ${containerWidth})`,\n            [theme.breakpoints.down(\"lg\")]: {\n                width: CONTAINER_FULL_WIDTH\n            }\n        }),\n        subcollectionPanel: {\n            width: TAB_WIDTH,\n            height: \"100%\",\n            overflow: \"auto\",\n            borderLeft: `1px solid ${theme.palette.divider}`,\n            [theme.breakpoints.down(\"lg\")]: {\n                borderLeft: \"inherit\",\n                width: CONTAINER_FULL_WIDTH\n            }\n        },\n        tabsContainer: ({ containerWidth }) => ({\n            flexGrow: 1,\n            height: \"100%\",\n            width: `calc(${TAB_WIDTH} + ${containerWidth})`,\n            [theme.breakpoints.down(\"lg\")]: {\n                width: CONTAINER_FULL_WIDTH\n            },\n            display: \"flex\",\n            overflow: \"auto\",\n            flexDirection: \"row\"\n        }),\n        form: ({ containerWidth }) => ({\n            width: containerWidth,\n            maxWidth: \"100%\",\n            height: \"100%\",\n            overflow: \"auto\",\n            [theme.breakpoints.down(\"sm\")]: {\n                maxWidth: CONTAINER_FULL_WIDTH,\n                width: CONTAINER_FULL_WIDTH\n            }\n        }),\n        tabBar: {\n            paddingLeft: theme.spacing(1),\n            paddingRight: theme.spacing(1),\n            paddingTop: theme.spacing(0)\n        },\n        tab: {\n            fontSize: \"0.875rem\",\n            minWidth: \"140px\"\n        }\n    })\n);\n\n\nexport interface EntityViewProps<M, UserType> {\n    path: string;\n    schema: EntitySchema<M> | EntitySchemaResolver<M>;\n    entityId?: string;\n    copy?: boolean;\n    selectedSubpath?: string;\n    permissions?: PermissionsBuilder<M, UserType>;\n    callbacks?: EntityCallbacks<M>;\n    subcollections?: EntityCollection[];\n    width?: number | string;\n    onModifiedValues: (modified: boolean) => void;\n}\n\n\nexport function EntityView<M extends { [Key: string]: any }, UserType>({\n                                                                           path,\n                                                                           entityId,\n                                                                           callbacks,\n                                                                           selectedSubpath,\n                                                                           copy,\n                                                                           permissions,\n                                                                           schema: schemaOrResolver,\n                                                                           subcollections,\n                                                                           onModifiedValues,\n                                                                           width\n                                                                       }: EntityViewProps<M, UserType>) {\n\n    const resolvedWidth: string | undefined = typeof width === \"number\" ? `${width}px` : width;\n    const classes = useStylesSide({ containerWidth: resolvedWidth ?? CONTAINER_WIDTH });\n\n    const dataSource = useDataSource();\n    const sideEntityController = useSideEntityController();\n    const snackbarContext = useSnackbarController();\n    const context = useFireCMSContext();\n    const authController = useAuthController<UserType>();\n\n    const [status, setStatus] = useState<EntityStatus>(copy ? \"copy\" : (entityId ? \"existing\" : \"new\"));\n    const [currentEntityId, setCurrentEntityId] = useState<string | undefined>(entityId);\n    const [readOnly, setReadOnly] = useState<boolean>(false);\n    const [tabsPosition, setTabsPosition] = React.useState(-1);\n\n    const [modifiedValues, setModifiedValues] = useState<EntityValues<any> | undefined>();\n\n    const {\n        entity,\n        dataLoading,\n        // eslint-disable-next-line no-unused-vars\n        dataLoadingError\n    } = useEntityFetch({\n        path,\n        entityId: currentEntityId,\n        schema: schemaOrResolver,\n        useCache: false\n    });\n\n    const resolvedSchema:ResolvedEntitySchema<M> = useMemo(() => computeSchema({\n        schemaOrResolver,\n        path,\n        entityId,\n        values: modifiedValues,\n        previousValues: entity?.values\n    }), [schemaOrResolver, path, entityId, modifiedValues]);\n\n    useEffect(() => {\n        function beforeunload(e: any) {\n            if (modifiedValues) {\n                e.preventDefault();\n                e.returnValue = `You have unsaved changes in this ${resolvedSchema.name}. Are you sure you want to leave this page?`;\n            }\n        }\n\n        if (typeof window !== \"undefined\")\n            window.addEventListener(\"beforeunload\", beforeunload);\n\n        return () => {\n            if (typeof window !== \"undefined\")\n                window.removeEventListener(\"beforeunload\", beforeunload);\n        };\n\n    }, [modifiedValues, window]);\n\n    const customViews = resolvedSchema.views;\n    const customViewsCount = customViews?.length ?? 0;\n\n    useEffect(() => {\n        if (entity)\n            setReadOnly(!canEdit(permissions, entity, authController, path, context));\n    }, [entity, permissions]);\n\n    const theme = useTheme();\n    const largeLayout = useMediaQuery(theme.breakpoints.up(\"lg\"));\n\n    useEffect(() => {\n        if (!selectedSubpath)\n            setTabsPosition(-1);\n\n        if (customViews) {\n            const index = customViews\n                .map((c) => c.path)\n                .findIndex((p) => p === selectedSubpath);\n            setTabsPosition(index);\n        }\n\n        if (subcollections && selectedSubpath) {\n            const index = subcollections\n                .map((c) => c.path)\n                .findIndex((p) => p === selectedSubpath);\n            setTabsPosition(index + customViewsCount);\n        }\n    }, [selectedSubpath]);\n\n\n    const onPreSaveHookError = useCallback((e: Error) => {\n        snackbarContext.open({\n            type: \"error\",\n            title: \"Error before saving\",\n            message: e?.message\n        });\n        console.error(e);\n    }, []);\n\n    const onSaveSuccessHookError = useCallback((e: Error) => {\n        snackbarContext.open({\n            type: \"error\",\n            title: `${resolvedSchema.name}: Error after saving (entity is saved)`,\n            message: e?.message\n        });\n        console.error(e);\n    }, []);\n\n    const onSaveSuccess = useCallback((updatedEntity: Entity<M>) => {\n\n        setCurrentEntityId(updatedEntity.id);\n\n        snackbarContext.open({\n            type: \"success\",\n            message: `${resolvedSchema.name}: Saved correctly`\n        });\n\n        setStatus(\"existing\");\n        onModifiedValues(false);\n\n        if (tabsPosition === -1)\n            sideEntityController.close();\n\n    }, []);\n\n    const onSaveFailure = useCallback((e: Error) => {\n\n        snackbarContext.open({\n            type: \"error\",\n            title: `${resolvedSchema.name}: Error saving`,\n            message: e?.message\n        });\n\n        console.error(\"Error saving entity\", path, entityId);\n        console.error(e);\n    }, []);\n\n    const onEntitySave = useCallback(async ({\n                                                schema,\n                                                path,\n                                                entityId,\n                                                values,\n                                                previousValues\n                                            }: {\n        schema: EntitySchema<M>,\n        path: string,\n        entityId: string | undefined,\n        values: EntityValues<M>,\n        previousValues?: EntityValues<M>,\n    }): Promise<void> => {\n\n        if (!status)\n            return;\n\n        return saveEntityWithCallbacks({\n            path,\n            entityId,\n            callbacks,\n            values,\n            previousValues,\n            schema,\n            status,\n            dataSource,\n            context,\n            onSaveSuccess,\n            onSaveFailure,\n            onPreSaveHookError,\n            onSaveSuccessHookError\n        });\n    }, [status, callbacks, dataSource, context, onSaveSuccess, onSaveFailure, onPreSaveHookError, onSaveSuccessHookError]);\n\n    const onDiscard = useCallback(() => {\n        if (tabsPosition === -1)\n            sideEntityController.close();\n    }, [sideEntityController, tabsPosition]);\n\n    const body = !readOnly\n? (\n            <Suspense fallback={<CircularProgressCenter/>}>\n                <EntityForm\n                    key={`form_${path}_${entity?.id ?? \"new\"}`}\n                    status={status}\n                    path={path}\n                    schemaOrResolver={schemaOrResolver}\n                    onEntitySave={onEntitySave as any}\n                    onDiscard={onDiscard}\n                    onValuesChanged={setModifiedValues}\n                    onModified={onModifiedValues}\n                    entity={entity}/>\n            </Suspense>\n    )\n: (\n        <Suspense fallback={<CircularProgressCenter/>}>\n            <EntityPreview\n                entity={entity}\n                path={path}\n                schema={resolvedSchema}/>\n        </Suspense>\n    );\n\n    const customViewsView: JSX.Element[] | undefined = customViews && customViews.map(\n        (customView, colIndex) => {\n            return (\n                <Box\n                    className={classes.subcollectionPanel}\n                    key={`custom_view_${customView.path}_${colIndex}`}\n                    role=\"tabpanel\"\n                    flexGrow={1}\n                    height={\"100%\"}\n                    width={\"100%\"}\n                    hidden={tabsPosition !== colIndex}>\n                    <ErrorBoundary>\n                        {customView.builder({\n                            schema: resolvedSchema,\n                            entity,\n                            modifiedValues: modifiedValues ?? entity?.values\n                        })}\n                    </ErrorBoundary>\n                </Box>\n            );\n        }\n    );\n\n    const subCollectionsViews = subcollections && subcollections.map(\n        (subcollection, colIndex) => {\n            const absolutePath = entity ? `${entity?.path}/${entity?.id}/${removeInitialAndTrailingSlashes(subcollection.path)}` : undefined;\n\n            return (\n                <Box\n                    className={classes.subcollectionPanel}\n                    key={`subcol_${subcollection.name}_${colIndex}`}\n                    role=\"tabpanel\"\n                    flexGrow={1}\n                    hidden={tabsPosition !== colIndex + customViewsCount}>\n                    {entity && absolutePath\n                        ? <Suspense fallback={<CircularProgressCenter/>}>\n                            <EntityCollectionView\n                                path={absolutePath}\n                                collection={subcollection}/>\n                        </Suspense>\n                        : <Box m={3}\n                             display={\"flex\"}\n                             alignItems={\"center\"}\n                             justifyContent={\"center\"}>\n                            <Box>\n                                You need to save your entity before\n                                adding additional collections\n                            </Box>\n                        </Box>\n                    }\n                </Box>\n            );\n        }\n    );\n\n    const getSelectedSubpath = useCallback((value: number) => {\n        if (value === -1) return undefined;\n\n        if (customViews && value < customViewsCount) {\n            return customViews[value].path;\n        }\n\n        if (subcollections) {\n            return subcollections[value - customViewsCount].path;\n        }\n\n        throw Error(\"Something is wrong in getSelectedSubpath\");\n    }, [customViews]);\n\n    const onSideTabClick = useCallback((value: number) => {\n        setTabsPosition(value);\n        if (entityId) {\n            sideEntityController.open({\n                path,\n                entityId,\n                selectedSubpath: getSelectedSubpath(value),\n                overrideSchemaRegistry: false\n            });\n        }\n    }, []);\n\n    const header = (\n        <Box sx={{\n            paddingLeft: 2,\n            paddingRight: 2,\n            paddingTop: 2,\n            display: \"flex\",\n            alignItems: \"center\",\n            backgroundColor: theme.palette.mode === \"light\" ? theme.palette.background.default : theme.palette.background.paper\n        }}\n        >\n\n            <IconButton onClick={(e) => sideEntityController.close()}\n                        size=\"large\">\n                <CloseIcon/>\n            </IconButton>\n\n            <Tabs\n                value={tabsPosition === -1 ? 0 : false}\n                indicatorColor=\"secondary\"\n                textColor=\"inherit\"\n                scrollButtons=\"auto\"\n            >\n                <Tab\n                    label={resolvedSchema.name}\n                    classes={{\n                        root: classes.tab\n                    }}\n                    wrapped={true}\n                    onClick={() => {\n                        onSideTabClick(-1);\n                    }}/>\n            </Tabs>\n\n            <Box flexGrow={1}/>\n\n            {dataLoading &&\n            <CircularProgress size={16} thickness={8}/>}\n\n            <Tabs\n                value={tabsPosition >= 0 ? tabsPosition : false}\n                indicatorColor=\"secondary\"\n                textColor=\"inherit\"\n                onChange={(ev, value) => {\n                    onSideTabClick(value);\n                }}\n                className={classes.tabBar}\n                variant=\"scrollable\"\n                scrollButtons=\"auto\"\n            >\n\n                {customViews && customViews.map(\n                    (view) =>\n                        <Tab\n                            classes={{\n                                root: classes.tab\n                            }}\n                            wrapped={true}\n                            key={`entity_detail_custom_tab_${view.name}`}\n                            label={view.name}/>\n                )}\n\n                {subcollections && subcollections.map(\n                    (subcollection) =>\n                        <Tab\n                            classes={{\n                                root: classes.tab\n                            }}\n                            wrapped={true}\n                            key={`entity_detail_collection_tab_${subcollection.name}`}\n                            label={subcollection.name}/>\n                )}\n\n            </Tabs>\n        </Box>\n\n    );\n\n    return <div\n        className={clsx(classes.container, { [classes.containerWide]: tabsPosition !== -1 })}>\n        {\n            dataLoading\n                ? <CircularProgressCenter/>\n                : <>\n\n                    {header}\n\n                    <Divider/>\n\n                    <div className={classes.tabsContainer}>\n\n                        <Box\n                            role=\"tabpanel\"\n                            hidden={!largeLayout && tabsPosition !== -1}\n                            className={classes.form}>\n                            {body}\n                        </Box>\n\n                        {customViewsView}\n\n                        {subCollectionsViews}\n\n                    </div>\n\n                </>\n        }\n\n    </div>;\n}\n\n","import React, { useCallback } from \"react\";\nimport { Blocker, Transition } from \"history\";\nimport { UNSAFE_NavigationContext, useNavigate } from \"react-router-dom\";\nimport Button from \"@mui/material/Button\";\nimport Dialog from \"@mui/material/Dialog\";\nimport DialogActions from \"@mui/material/DialogActions\";\nimport DialogContent from \"@mui/material/DialogContent\";\nimport DialogContentText from \"@mui/material/DialogContentText\";\nimport DialogTitle from \"@mui/material/DialogTitle\";\n\nexport function useNavigationUnsavedChangesDialog(when: boolean, onSuccess: () => void):\n    {\n        navigationWasBlocked: boolean,\n        handleCancel: () => void,\n        handleOk: () => void\n    } {\n\n    const [nextLocation, setNextLocation] = React.useState<any | undefined>();\n    const { navigator } = React.useContext(UNSAFE_NavigationContext);\n\n    const navigate = useNavigate();\n\n    const handleCancel = () => {\n        setNextLocation(undefined);\n    };\n\n    const handleOk = () => {\n        onSuccess();\n        setNextLocation(undefined);\n        navigate(-1);\n    };\n\n    const blocker: Blocker = useCallback(({ action, location: nextLocation, retry }) => {\n        switch (action) {\n            case \"REPLACE\": {\n                retry();\n                return;\n            }\n            case \"POP\": {\n                setNextLocation(nextLocation);\n\n            }\n        }\n    }, []);\n\n    React.useEffect(() => {\n        if (!when) return;\n        if (nextLocation) return;\n        if (!(\"block\" in navigator)) return;\n        const unblock = (navigator as any).block((tx: Transition) => {\n            const autoUnblockingTx = {\n                ...tx,\n                retry() {\n                    unblock();\n                    tx.retry();\n                }\n            };\n            blocker(autoUnblockingTx);\n        });\n\n        return unblock;\n    }, [navigator, blocker, when, nextLocation]);\n\n    return { navigationWasBlocked: Boolean(nextLocation), handleCancel, handleOk };\n}\n\nexport interface UnsavedChangesDialogProps {\n    open: boolean;\n    schemaName: string;\n    handleOk: () => void;\n    handleCancel: () => void;\n}\n\nexport function UnsavedChangesDialog({\n                                         open,\n                                         handleOk,\n                                         handleCancel,\n                                         schemaName\n                                     }: UnsavedChangesDialogProps) {\n\n    return (\n        <Dialog\n            open={open}\n            onClose={handleCancel}\n            aria-labelledby=\"alert-dialog-title\"\n            aria-describedby=\"alert-dialog-description\"\n        >\n            <DialogTitle id=\"alert-dialog-title\">\n                {\"Unsaved changes\"}\n            </DialogTitle>\n            <DialogContent>\n                <DialogContentText id=\"alert-dialog-description\">\n                    You have unsaved changes in this <b>{schemaName}</b>.\n                </DialogContentText>\n                <DialogContentText id=\"alert-dialog-description\">\n                    Are you sure you want to leave this page?\n                </DialogContentText>\n            </DialogContent>\n            <DialogActions>\n                <Button onClick={handleCancel} autoFocus> Cancel </Button>\n                <Button onClick={handleOk}> Ok </Button>\n            </DialogActions>\n        </Dialog>\n    );\n}\n","import React, { useMemo, useState } from \"react\";\nimport { EntityCollectionResolver, SideEntityPanelProps } from \"../models\";\nimport { SideDialogDrawer } from \"./internal/SideDialogDrawer\";\nimport { EntityView } from \"./internal/EntityView\";\nimport { CONTAINER_WIDTH } from \"./internal/common\";\nimport { useNavigation, useSideEntityController } from \"../hooks\";\nimport { ErrorBoundary } from \"./internal/ErrorBoundary\";\nimport {\n    UnsavedChangesDialog,\n    useNavigationUnsavedChangesDialog\n} from \"./internal/useUnsavedChangesDialog\";\nimport { computeSchema } from \"./utils\";\n\n/**\n * This is the component in charge of rendering the side dialogs used\n * for editing entities. Use the {@link useSideEntityController} to open\n * and control the dialogs.\n * This component needs a parent {@link FireCMS}\n * {@see useSideEntityController}\n * @category Components\n */\nexport function SideEntityDialogs() {\n\n    const sideEntityController = useSideEntityController();\n\n    const sidePanels = sideEntityController.sidePanels;\n\n    //  we add an extra closed drawer, that it is used to maintain the transition when a drawer is removed\n    const allPanels = [...sidePanels, undefined];\n\n    return <>\n        {\n            allPanels.map((panel: SideEntityPanelProps | undefined, index) =>\n                (\n                    <SideEntityDialog\n                        key={`side_entity_dialog_${index}`}\n                        panel={panel}\n                        offsetPosition={sidePanels.length - index - 1}/>\n\n                ))\n        }\n    </>;\n}\n\nfunction SideEntityDialog({\n                              panel,\n                              offsetPosition\n                          }: { panel?: SideEntityPanelProps, offsetPosition: number }) {\n\n    // have the original values of the form changed?\n    const [modifiedValues, setModifiedValues] = useState(false);\n    // was the closing of the dialog requested by the drawer\n    const [drawerCloseRequested, setDrawerCloseRequested] = useState(false);\n\n    const {\n        navigationWasBlocked,\n        handleOk: handleNavigationOk,\n        handleCancel: handleNavigationCancel\n    } = useNavigationUnsavedChangesDialog(\n        modifiedValues && !drawerCloseRequested,\n        () => setModifiedValues(false)\n    );\n\n    const handleDrawerCloseOk = () => {\n        setModifiedValues(false);\n        setDrawerCloseRequested(false);\n        sideEntityController.close();\n    };\n    const handleDrawerCloseCancel = () => {\n        setDrawerCloseRequested(false);\n    };\n\n    const sideEntityController = useSideEntityController();\n    const navigationContext = useNavigation();\n\n\n    const schemaProps: EntityCollectionResolver | undefined = !panel ? undefined : navigationContext.getCollectionResolver(panel.path, panel.entityId);\n    if (panel && !schemaProps) {\n        throw Error(\"ERROR: You are trying to open an entity with no schema defined.\");\n    }\n\n    const schema = useMemo(() => {\n        if (!panel) return undefined;\n        return computeSchema({\n            schemaOrResolver: schemaProps!.schemaResolver,\n            path: panel.path,\n            entityId: panel.entityId\n        });\n    }, [panel, schemaProps]);\n\n\n    if (!panel || !schema) {\n        return <SideDialogDrawer\n            open={false}\n            offsetPosition={offsetPosition}>\n            <div style={{ width: CONTAINER_WIDTH }}/>\n        </SideDialogDrawer>;\n    }\n\n    return (\n        <>\n\n            <SideDialogDrawer\n                open={Boolean(panel)}\n                onClose={() => {\n                    if (modifiedValues) {\n                        setDrawerCloseRequested(true);\n                    } else {\n                        sideEntityController.close();\n                    }\n                }}\n                offsetPosition={offsetPosition}\n            >\n                 <ErrorBoundary>\n                    <EntityView\n                        {...schemaProps}\n                        {...panel}\n                        schema={schemaProps!.schemaResolver}\n                        onModifiedValues={setModifiedValues}\n                    />\n                </ErrorBoundary>\n            </SideDialogDrawer>\n\n            <UnsavedChangesDialog\n                open={navigationWasBlocked || drawerCloseRequested}\n                handleOk={drawerCloseRequested ? handleDrawerCloseOk : handleNavigationOk}\n                handleCancel={drawerCloseRequested ? handleDrawerCloseCancel : handleNavigationCancel}\n                schemaName={schema.name}/>\n\n        </>\n    );\n}\n\n","import { pink, red } from \"@mui/material/colors\";\nimport { createTheme, Theme } from \"@mui/material\";\n\n/**\n * Use this function to build the default FireCMS MUI5 theme,\n * with some overrides.\n * @category Hooks and utilities\n */\nexport const createCMSDefaultTheme = (\n    { mode, primaryColor, secondaryColor, fontFamily }: {\n        mode: \"light\" | \"dark\";\n        primaryColor?: string;\n        secondaryColor?: string;\n        fontFamily?: string;\n    }): Theme => {\n\n    const original = createTheme({\n        palette: {\n            mode: mode,\n            background: {\n                default: mode === \"dark\" ? \"#242424\" : \"#f6f7f8\"\n                // default: mode === \"dark\" ? \"#242424\" : \"rgb(240 240 240)\"\n            },\n            primary: {\n                main: primaryColor || \"#0070f4\"\n            },\n            secondary: {\n                main: secondaryColor || pink[\"400\"]\n            },\n            error: {\n                main: red.A400\n            }\n        },\n        typography: {\n            fontFamily: fontFamily || \"\\\"Rubik\\\", \\\"Roboto\\\", \\\"Helvetica\\\", \\\"Arial\\\", sans-serif\",\n            fontWeightMedium: 500,\n            h6: {\n                fontWeight: 500,\n                fontSize: \"1.15rem\"\n            }\n        },\n        components: {\n            MuiButton: {\n                styleOverrides: {\n                    root: {\n                        borderRadius: 4\n                    }\n                }\n            },\n            MuiTableRow: {\n                styleOverrides: {\n                    root: {\n                        \"&:last-child td\": {\n                            borderBottom: 0\n                        }\n                    }\n                }\n            },\n            MuiTypography: {\n                styleOverrides: {\n                    root: {\n                        \"&.mono\": {\n                            fontFamily: \"'Space Mono', 'Lucida Console', monospace\"\n                        },\n                        \"&.weight-500\": {\n                            fontWeight: 500\n                        }\n                    }\n                }\n            },\n            MuiInputBase: {\n                styleOverrides: {\n                    root: {\n                        \"&.mono\": {\n                            fontFamily: \"'Space Mono', 'Lucida Console', monospace\"\n                        }\n                    }\n                }\n            }\n        }\n    });\n\n    return {\n        ...original\n        // shadows: original.shadows.map((value, index) => {\n        //     if (index == 1) return \"0 1px 1px 0 rgb(0 0 0 / 16%)\";\n        //     else return value;\n        // })\n    };\n};\n","import {\n    AdditionalColumnDelegate,\n    ArrayProperty,\n    BooleanProperty,\n    CMSType,\n    EntityCallbacks,\n    EntityCollection,\n    EntitySchema,\n    EnumValueConfig,\n    EnumValues,\n    GeopointProperty,\n    MapProperty,\n    Navigation,\n    NavigationBuilder,\n    NumberProperty,\n    Properties,\n    PropertiesOrBuilder,\n    PropertyBuilder,\n    PropertyOrBuilder,\n    ReferenceProperty,\n    StringProperty,\n    TimestampProperty,\n    User\n} from \"../models\";\n\n\n/**\n * Identity function we use to defeat the type system of Typescript and build\n * navigation objects with all its properties\n * @param navigation\n * @category Builder\n */\nexport function buildNavigation<UserType>(\n    navigation: Navigation | NavigationBuilder<UserType>\n): Navigation | NavigationBuilder<UserType> {\n    return navigation;\n}\n\n/**\n * Identity function we use to defeat the type system of Typescript and build\n * collection views with all its properties\n * @param collectionView\n * @category Builder\n */\nexport function buildCollection<M extends { [Key: string]: any },\n    AdditionalKey extends string = string>(\n    collectionView: EntityCollection<M, AdditionalKey>\n): EntityCollection<M, AdditionalKey> {\n    return collectionView;\n}\n\n/**\n * Identity function we use to defeat the type system of Typescript and preserve\n * the schema keys\n * @param schema\n * @category Builder\n */\nexport function buildSchema<M extends { [Key: string]: any }>(\n    schema: EntitySchema<M>\n): EntitySchema<M> {\n    return schema;\n}\n\n/**\n * Identity function we use to defeat the type system of Typescript and preserve\n * the property keys.\n * @param property\n * @category Builder\n */\nexport function buildProperty<T extends CMSType, P extends PropertyOrBuilder<T, any> = PropertyOrBuilder<T, any>>(\n    property: P\n): P extends StringProperty ? StringProperty :\n    P extends NumberProperty ? NumberProperty :\n        P extends BooleanProperty ? BooleanProperty :\n            P extends TimestampProperty ? TimestampProperty :\n                P extends GeopointProperty ? GeopointProperty :\n                    P extends ReferenceProperty ? ReferenceProperty :\n                        P extends ArrayProperty ? ArrayProperty :\n                            P extends MapProperty ? MapProperty :\n                                P extends PropertyBuilder<T, any> ? PropertyBuilder<T, any> : any {\n    return property as any;\n}\n\n/**\n * Identity function we use to defeat the type system of Typescript and preserve\n * the properties keys.\n * @param properties\n * @category Builder\n */\nexport function buildProperties<M>(\n    properties: Properties<M>\n): Properties<M> {\n    return properties;\n}\n\n/**\n * Identity function we use to defeat the type system of Typescript and preserve\n * the properties keys.\n * @param propertiesOrBuilder\n * @category Builder\n */\nexport function buildPropertiesOrBuilder<M>(\n    propertiesOrBuilder: PropertiesOrBuilder<M>\n): PropertiesOrBuilder<M> {\n    return propertiesOrBuilder;\n}\n\n/**\n * Identity function we use to defeat the type system of Typescript and preserve\n * the properties keys.\n * @param enumValues\n * @category Builder\n */\nexport function buildEnumValues(\n    enumValues: EnumValues\n): EnumValues {\n    return enumValues;\n}\n\n/**\n * Identity function we use to defeat the type system of Typescript and preserve\n * the properties keys.\n * @param enumValueConfig\n * @category Builder\n */\nexport function buildEnumValueConfig(\n    enumValueConfig: EnumValueConfig\n): EnumValueConfig {\n    return enumValueConfig;\n}\n\n/**\n * Identity function we use to defeat the type system of Typescript and preserve\n * the properties keys.\n * @param callbacks\n * @category Builder\n */\nexport function buildEntityCallbacks<M>(\n    callbacks: EntityCallbacks<M>\n): EntityCallbacks<M> {\n    return callbacks;\n}\n\n/**\n * Identity function we use to defeat the type system of Typescript and build\n * additional column delegates views with all its properties\n * @param additionalColumnDelegate\n * @category Builder\n */\nexport function buildAdditionalColumnDelegate<M extends { [Key: string]: any }, AdditionalKey extends string = string, UserType = User>(\n    additionalColumnDelegate: AdditionalColumnDelegate<M, AdditionalKey, UserType>\n): AdditionalColumnDelegate<M, AdditionalKey, UserType> {\n    return additionalColumnDelegate;\n}\n","import { useEffect, useState } from \"react\";\n\nimport {\n    Auth,\n    FacebookAuthProvider,\n    fetchSignInMethodsForEmail,\n    getAuth,\n    GithubAuthProvider,\n    GoogleAuthProvider,\n    OAuthProvider,\n    onAuthStateChanged,\n    signInWithEmailAndPassword,\n    signInWithPopup,\n    signOut,\n    TwitterAuthProvider,\n    User as FirebaseUser\n} from \"firebase/auth\";\nimport { FirebaseApp } from \"firebase/app\";\nimport { AuthDelegate } from \"../../models\";\nimport {\n    FirebaseAuthDelegate,\n    FirebaseSignInOption,\n    FirebaseSignInProvider\n} from \"../models/auth\";\nimport {\n    createUserWithEmailAndPassword,\n    signInAnonymously\n} from \"@firebase/auth\";\n\ninterface FirebaseAuthHandlerProps {\n    firebaseApp?: FirebaseApp;\n    signInOptions: Array<FirebaseSignInProvider | FirebaseSignInOption>;\n}\n\n/**\n * Use this hook to build an {@link AuthDelegate} based on Firebase Auth\n * @category Firebase\n */\nexport const useFirebaseAuthDelegate = (\n    {\n        firebaseApp,\n        signInOptions\n    }: FirebaseAuthHandlerProps): FirebaseAuthDelegate => {\n\n    const [loggedUser, setLoggedUser] = useState<FirebaseUser | null | undefined>(undefined); // logged user, anonymous or logged out\n    const [authProviderError, setAuthProviderError] = useState<any>();\n    const [initialLoading, setInitialLoading] = useState(true);\n    const [authLoading, setAuthLoading] = useState(true);\n    const [loginSkipped, setLoginSkipped] = useState<boolean>(false);\n\n    function skipLogin() {\n        setLoginSkipped(true);\n        setLoggedUser(null);\n    }\n\n    useEffect(() => {\n        if (!firebaseApp) return;\n        const auth = getAuth(firebaseApp);\n        setLoggedUser(auth.currentUser)\n        return onAuthStateChanged(\n            auth,\n            updateFirebaseUser,\n            error => setAuthProviderError(error)\n        );\n    }, [firebaseApp]);\n\n    const updateFirebaseUser = async (firebaseUser: FirebaseUser | null) => {\n        setLoggedUser(firebaseUser);\n        setInitialLoading(false);\n        setAuthLoading(false);\n    };\n\n    function onSignOut() {\n        const auth = getAuth(firebaseApp);\n        signOut(auth)\n            .then(_ => {\n                setLoggedUser(null);\n                setAuthProviderError(null);\n            });\n        setLoginSkipped(false);\n    }\n\n    const getProviderOptions = (providerId: FirebaseSignInProvider): FirebaseSignInOption | undefined => {\n        return signInOptions.find((option) => {\n            if (option === null) throw Error(\"useFirebaseAuthDelegate\");\n            if (typeof option === \"object\" && option.provider === providerId)\n                return option as FirebaseSignInOption;\n            return undefined;\n        }) as FirebaseSignInOption | undefined;\n    }\n\n    const googleLogin = () => {\n        const provider = new GoogleAuthProvider();\n        const options = getProviderOptions(\"google.com\");\n        if (options?.scopes)\n            options.scopes.forEach((scope) => provider.addScope(scope));\n        if (options?.customParameters)\n            provider.setCustomParameters(options.customParameters);\n        const auth = getAuth();\n        signInWithPopup(auth, provider).catch(setAuthProviderError);\n    }\n\n    function doOauthLogin(auth: Auth, provider: OAuthProvider | FacebookAuthProvider | GithubAuthProvider | TwitterAuthProvider) {\n        setAuthLoading(true);\n        signInWithPopup(auth, provider)\n            .catch(setAuthProviderError)\n            .then(() => setAuthLoading(false));\n    }\n\n    const anonymousLogin = () => {\n        const auth = getAuth();\n        setAuthLoading(true);\n        signInAnonymously(auth)\n            .catch(setAuthProviderError)\n            .then(() => setAuthLoading(false));\n    }\n\n    const appleLogin = () => {\n        const provider = new OAuthProvider(\"apple.com\");\n        const options = getProviderOptions(\"apple.com\");\n        if (options?.scopes)\n            options.scopes.forEach((scope) => provider.addScope(scope));\n        if (options?.customParameters)\n            provider.setCustomParameters(options.customParameters);\n        const auth = getAuth();\n        doOauthLogin(auth, provider);\n    }\n\n    const facebookLogin = () => {\n        const provider = new FacebookAuthProvider();\n        const options = getProviderOptions(\"facebook.com\");\n        if (options?.scopes)\n            options.scopes.forEach((scope) => provider.addScope(scope));\n        if (options?.customParameters)\n            provider.setCustomParameters(options.customParameters);\n        const auth = getAuth();\n        doOauthLogin(auth, provider);\n    }\n\n    const githubLogin = () => {\n        const provider = new GithubAuthProvider();\n        const options = getProviderOptions(\"github.com\");\n        if (options?.scopes)\n            options.scopes.forEach((scope) => provider.addScope(scope));\n        if (options?.customParameters)\n            provider.setCustomParameters(options.customParameters);\n        const auth = getAuth();\n        doOauthLogin(auth, provider);\n    }\n\n    const microsoftLogin = () => {\n        const provider = new OAuthProvider(\"microsoft.com\");\n        const options = getProviderOptions(\"microsoft.com\");\n        if (options?.scopes)\n            options.scopes.forEach((scope) => provider.addScope(scope));\n        if (options?.customParameters)\n            provider.setCustomParameters(options.customParameters);\n        const auth = getAuth();\n        doOauthLogin(auth, provider);\n    }\n\n    const twitterLogin = () => {\n        const provider = new TwitterAuthProvider();\n        const options = getProviderOptions(\"twitter.com\");\n        if (options?.customParameters)\n            provider.setCustomParameters(options.customParameters);\n        const auth = getAuth();\n        doOauthLogin(auth, provider);\n    }\n\n    const emailPasswordLogin = (email: string, password: string) => {\n        const auth = getAuth();\n        setAuthLoading(true);\n        signInWithEmailAndPassword(auth, email, password)\n            .catch(setAuthProviderError)\n            .then(() => setAuthLoading(false));\n    }\n\n    const registerWithPasswordEmail = (email: string, password: string) => {\n        const auth = getAuth();\n        setAuthLoading(true);\n        createUserWithEmailAndPassword(auth, email, password)\n            .catch(setAuthProviderError)\n            .then(() => setAuthLoading(false));\n    }\n\n    const getSignInMethodsForEmail = (email: string): Promise<string[]> => {\n        const auth = getAuth();\n        setAuthLoading(true);\n        return fetchSignInMethodsForEmail(auth, email)\n            .then((res) => {\n                setAuthLoading(false);\n                return res;\n            });\n    }\n\n    return {\n        user: loggedUser ?? null,\n        authError: authProviderError,\n        authLoading,\n        initialLoading,\n        signOut: onSignOut,\n        loginSkipped,\n        skipLogin,\n        googleLogin,\n        anonymousLogin,\n        appleLogin,\n        facebookLogin,\n        githubLogin,\n        microsoftLogin,\n        twitterLogin,\n        emailPasswordLogin,\n        fetchSignInMethodsForEmail: getSignInMethodsForEmail,\n        createUserWithEmailAndPassword: registerWithPasswordEmail\n    };\n};\n","import {\n    DataSource,\n    DeleteEntityProps,\n    Entity,\n    EntityReference,\n    EntitySchema,\n    EntitySchemaResolver,\n    EntityValues,\n    FetchCollectionProps,\n    FetchEntityProps,\n    FilterValues,\n    GeoPoint,\n    ListenCollectionProps,\n    ListenEntityProps,\n    Properties,\n    Property,\n    ResolvedEntitySchema,\n    SaveEntityProps,\n    WhereFilterOp\n} from \"../../models\";\nimport {\n    computeSchema,\n    sanitizeData,\n    updateAutoValues\n} from \"../../core/utils\";\nimport {\n    collection,\n    CollectionReference,\n    deleteDoc,\n    doc,\n    DocumentReference,\n    DocumentSnapshot,\n    Firestore,\n    GeoPoint as FirestoreGeoPoint,\n    getDoc,\n    getDocs,\n    getFirestore,\n    limit as limitClause,\n    onSnapshot,\n    orderBy as orderByClause,\n    Query,\n    query,\n    serverTimestamp,\n    setDoc,\n    startAfter as startAfterClause,\n    Timestamp,\n    where as whereClause\n} from \"firebase/firestore\";\nimport { FirebaseApp } from \"firebase/app\";\nimport { FirestoreTextSearchController } from \"../models/text_search\";\nimport { useEffect, useRef } from \"react\";\n\n/**\n * @category Firebase\n */\nexport interface FirestoreDataSourceProps {\n    firebaseApp?: FirebaseApp,\n    textSearchController?: FirestoreTextSearchController,\n}\n\n/**\n * Use this hook to build a {@link DataSource} based on Firestore\n * @param firebaseApp\n * @param textSearchController\n * @category Firebase\n */\nexport function useFirestoreDataSource({\n                                           firebaseApp,\n                                           textSearchController\n                                       }: FirestoreDataSourceProps): DataSource {\n\n    const firestoreRef = useRef<Firestore>();\n    const firestore = firestoreRef.current;\n\n    useEffect(() => {\n        if (!firebaseApp) return;\n        firestoreRef.current = getFirestore(firebaseApp);\n    }, [firebaseApp]);\n\n\n    /**\n     *\n     * @param doc\n     * @param path\n     * @param resolvedSchema\n     * @category Firestore\n     */\n    function createEntityFromSchema<M extends { [Key: string]: any }>\n    (\n        doc: DocumentSnapshot,\n        path: string,\n        resolvedSchema: ResolvedEntitySchema<M>\n    ): Entity<M> {\n\n        const values = firestoreToCMSModel(doc.data());\n        const data = doc.data()\n            ? resolvedSchema.properties\n                ? sanitizeData(values as EntityValues<M>, resolvedSchema.properties)\n                : doc.data()\n            : undefined;\n        return {\n            id: doc.id,\n            path: getCMSPathFromFirestorePath(doc.ref.path),\n            values: data\n        };\n    }\n\n    function buildQuery<M>(path: string, filter: FilterValues<M> | undefined, orderBy: string | undefined, order: \"desc\" | \"asc\" | undefined, startAfter: any[] | undefined, limit: number | undefined) {\n\n        if (!firestore) throw Error(\"useFirestoreDataSource Firestore not initialised\");\n\n        const collectionReference: Query = collection(firestore, path);\n\n        const queryParams = [];\n        if (filter) {\n            Object.entries(filter)\n                .filter(([_, entry]) => !!entry)\n                .forEach(([key, filterParameter]) => {\n                    const [op, value] = filterParameter as [WhereFilterOp, any];\n                    queryParams.push(whereClause(key, op, cmsToFirestoreModel(value, firestore)));\n                });\n        }\n\n        if (filter && orderBy && order) {\n            Object.entries(filter).forEach(([key, value]) => {\n                if (key !== orderBy) {\n                    queryParams.push(orderByClause(key, \"asc\"));\n                }\n            });\n        }\n\n        if (orderBy && order) {\n            queryParams.push(orderByClause(orderBy, order));\n        }\n\n        if (startAfter) {\n            queryParams.push(startAfterClause(startAfter));\n        }\n\n        if (limit) {\n            queryParams.push(limitClause(limit));\n        }\n\n        return query(collectionReference, ...queryParams);\n    }\n\n    function getAndBuildEntity<M>(path: string,\n                                  entityId: string,\n                                  schema: EntitySchema<M> | EntitySchemaResolver<M>) {\n        if (!firestore) throw Error(\"useFirestoreDataSource Firestore not initialised\");\n\n        return getDoc(doc(firestore, path, entityId))\n            .then((docSnapshot) => {\n                const resolvedSchema = computeSchema({\n                    schemaOrResolver: schema,\n                    entityId: docSnapshot.id,\n                    path\n                });\n                return createEntityFromSchema(docSnapshot, path, resolvedSchema);\n            });\n    }\n\n    async function performTextSearch<M>(path: string,\n                                        searchString: string,\n                                        schema: EntitySchema<M> | EntitySchemaResolver<M>): Promise<Entity<M>[]> {\n        if (!textSearchController)\n            throw Error(\"Trying to make text search without specifying a FirestoreTextSearchController\");\n        const ids = await textSearchController({ path, searchString });\n        if (ids === undefined)\n            throw Error(\"The current path is not supported by the specified FirestoreTextSearchController\");\n        const promises: Promise<Entity<M> | null>[] = ids\n            .map(async (entityId) => {\n                    try {\n                        return await getAndBuildEntity(path, entityId, schema);\n                    } catch (e) {\n                        console.error(e);\n                        return null;\n                    }\n                }\n            );\n        return Promise.all(promises)\n            .then((res) => res.filter((e) => e !== null && e.values) as Entity<M>[]);\n    }\n\n    return {\n\n        /**\n         * Fetch entities in a Firestore path\n         * @param path\n         * @param schema\n         * @param filter\n         * @param limit\n         * @param startAfter\n         * @param searchString\n         * @param orderBy\n         * @param order\n         * @return Function to cancel subscription\n         * @see useCollectionFetch if you need this functionality implemented as a hook\n         * @category Firestore\n         */\n        fetchCollection<M extends { [Key: string]: any }>({\n                                                              path,\n                                                              schema,\n                                                              filter,\n                                                              limit,\n                                                              startAfter,\n                                                              searchString,\n                                                              orderBy,\n                                                              order\n                                                          }: FetchCollectionProps<M>\n        ): Promise<Entity<M>[]> {\n\n            if (searchString) {\n                return performTextSearch(path, searchString, schema);\n            }\n\n            console.debug(\"Fetching collection\", path, limit, filter, startAfter, orderBy, order);\n            const query = buildQuery(path, filter, orderBy, order, startAfter, limit);\n\n            const resolvedSchema = computeSchema({\n                schemaOrResolver: schema,\n                path\n            });\n            return getDocs(query)\n                .then((snapshot) =>\n                    snapshot.docs.map((doc) => createEntityFromSchema(doc, path, resolvedSchema)));\n        },\n\n\n        /**\n         * Listen to a entities in a given path\n         * @param path\n         * @param schema\n         * @param onSnapshot\n         * @param onError\n         * @param filter\n         * @param limit\n         * @param startAfter\n         * @param orderBy\n         * @param order\n         * @return Function to cancel subscription\n         * @see useCollectionFetch if you need this functionality implemented as a hook\n         * @category Firestore\n         */\n        listenCollection<M extends { [Key: string]: any }>(\n            {\n                path,\n                schema,\n                filter,\n                limit,\n                startAfter,\n                searchString,\n                orderBy,\n                order,\n                onUpdate,\n                onError\n            }: ListenCollectionProps<M>\n        ): () => void {\n\n            console.debug(\"Listening collection\", path, limit, filter, startAfter, orderBy, order);\n\n            const query = buildQuery(path, filter, orderBy, order, startAfter, limit);\n\n            if (searchString) {\n                performTextSearch(path, searchString, schema)\n                    .then(onUpdate)\n                    .catch((e) => {\n                        if (onError) onError(e);\n                    });\n                return () => {\n                };\n            }\n\n            const resolvedSchema = computeSchema({\n                schemaOrResolver: schema,\n                path\n            });\n\n            return onSnapshot(query,\n                {\n                    next: (snapshot) => {\n                        onUpdate(snapshot.docs.map((doc) => createEntityFromSchema(doc, path, resolvedSchema)));\n                    },\n                    error: onError\n                }\n            );\n        },\n\n\n        /**\n         * Retrieve an entity given a path and a schema\n         * @param path\n         * @param entityId\n         * @param schema\n         * @category Firestore\n         */\n        fetchEntity<M extends { [Key: string]: any }>({\n                                                          path,\n                                                          entityId,\n                                                          schema\n                                                      }: FetchEntityProps<M>\n        ): Promise<Entity<M>> {\n            return getAndBuildEntity(path, entityId, schema);\n        },\n\n        /**\n         *\n         * @param path\n         * @param entityId\n         * @param schema\n         * @param onUpdate\n         * @param onError\n         * @return Function to cancel subscription\n         * @category Firestore\n         */\n        listenEntity<M extends { [Key: string]: any }>(\n            {\n                path,\n                entityId,\n                schema,\n                onUpdate,\n                onError\n            }: ListenEntityProps<M>): () => void {\n            if (!firestore) throw Error(\"useFirestoreDataSource Firestore not initialised\");\n            // console.debug(\"Listening entity\", path, entityId);\n            return onSnapshot(\n                doc(firestore, path, entityId),\n                {\n                    next: (docSnapshot) => {\n                        const resolvedSchema = computeSchema({\n                            schemaOrResolver: schema,\n                            entityId: docSnapshot.id,\n                            path\n                        });\n                        onUpdate(createEntityFromSchema(docSnapshot, path, resolvedSchema));\n                    },\n                    error: onError\n                }\n            );\n        },\n\n\n        /**\n         * Save entity to the specified path. Note that Firestore does not allow\n         * undefined values.\n         * @param path\n         * @param entityId\n         * @param values\n         * @param schema\n         * @param status\n         * @category Firestore\n         */\n        saveEntity: async function <M extends { [Key: string]: any }>(\n            {\n                path,\n                entityId,\n                values,\n                schema,\n                status\n            }: SaveEntityProps<M>): Promise<Entity<M>> {\n\n            if (!firestore) throw Error(\"useFirestoreDataSource Firestore not initialised\");\n            const resolvedSchema = computeSchema({\n                schemaOrResolver: schema,\n                entityId,\n                path\n            });\n            const properties: Properties<M> = resolvedSchema.properties;\n            const collectionReference: CollectionReference = collection(firestore, path);\n\n            const updatedFirestoreValues: EntityValues<M> = updateAutoValues(\n                {\n                    inputValues: values,\n                    properties,\n                    status,\n                    timestampNowValue: serverTimestamp(),\n                    referenceConverter: (value: EntityReference) => doc(firestore, value.path, value.id),\n                    geopointConverter: (value: GeoPoint) => new FirestoreGeoPoint(value.latitude, value.longitude)\n                });\n\n            console.debug(\"Saving entity\", path, entityId, updatedFirestoreValues);\n\n            let documentReference: DocumentReference;\n            if (entityId)\n                documentReference = doc(collectionReference, entityId);\n            else\n                documentReference = doc(collectionReference);\n\n            return setDoc(documentReference, updatedFirestoreValues, { merge: true }).then(() => ({\n                id: documentReference.id,\n                path: documentReference.path,\n                values: firestoreToCMSModel(updatedFirestoreValues) as EntityValues<M>\n            }));\n        },\n\n        /**\n         * Delete an entity\n         * @param entity\n         * @param schema\n         * @category Firestore\n         */\n        async deleteEntity<M extends { [Key: string]: any }>(\n            {\n                entity\n            }: DeleteEntityProps<M>\n        ): Promise<void> {\n            if (!firestore) throw Error(\"useFirestoreDataSource Firestore not initialised\");\n            return deleteDoc(doc(firestore, entity.path, entity.id));\n        },\n\n        /**\n         * Check if the given property is unique in the given collection\n         * @param path Collection path\n         * @param name of the property\n         * @param value\n         * @param property\n         * @param entityId\n         * @return `true` if there are no other fields besides the given entity\n         * @category Firestore\n         */\n        checkUniqueField(\n            path: string,\n            name: string,\n            value: any,\n            property: Property,\n            entityId?: string\n        ): Promise<boolean> {\n\n            if (!firestore) throw Error(\"useFirestoreDataSource Firestore not initialised\");\n\n            console.debug(\"Check unique field entity\", path, name, value, entityId);\n\n            if (property.dataType === \"array\") {\n                console.error(\"checkUniqueField received an array\");\n            }\n\n            if (value === undefined || value === null) {\n                return Promise.resolve(true);\n            }\n            const q = query(collection(firestore, path), whereClause(name, \"==\", value));\n            return getDocs(q)\n                .then((snapshots) =>\n                    snapshots.docs.filter(doc => doc.id !== entityId).length === 0\n                );\n\n        }\n    };\n\n}\n\n\n/**\n * Recursive function that converts Firestore data types into CMS or plain\n * JS types.\n * FireCMS uses Javascript dates internally instead of Firestore timestamps.\n * This makes it easier to interact with the rest of the libraries and\n * bindings.\n * Also, Firestore references are replaced with {@link EntityReference}\n * @param data\n * @category Firestore\n */\nexport function firestoreToCMSModel<M>(data: any): any {\n    const traverse = (input: any): any => {\n        if (input == null) return input;\n        if (serverTimestamp().isEqual(input)) {\n            return null;\n        }\n        if (input instanceof Timestamp) {\n            return input.toDate();\n        }\n        if (input instanceof GeoPoint) {\n            return new GeoPoint(input.latitude, input.longitude);\n        }\n        if (input instanceof DocumentReference) {\n            return new EntityReference(input.id, getCMSPathFromFirestorePath(input.path));\n        }\n        if (Array.isArray(input)) {\n            return input.map(traverse);\n        }\n        if (typeof input === \"object\") {\n            const result = {}\n            for (const key of Object.keys(input)) {\n                result[key] = traverse(input[key]);\n            }\n            return result;\n        }\n        return input;\n    }\n    return traverse(data)\n}\n\nexport function cmsToFirestoreModel(data: any, firestore: Firestore): any {\n    if (Array.isArray(data)) {\n        return data.map(v => cmsToFirestoreModel(v, firestore));\n    } else if (data instanceof EntityReference) {\n        return doc(firestore, data.path, data.id);\n    } else if (data instanceof GeoPoint) {\n        return new FirestoreGeoPoint(data.latitude, data.longitude);\n    } else if (typeof data === \"object\") {\n        return Object.entries(data)\n            .map(([key, v]) => ({ [key]: cmsToFirestoreModel(v, firestore) }))\n            .reduce((a, b) => ({ ...a, ...b }), {});\n    }\n    return data;\n}\n\n/**\n * Remove id from Firestore path\n * @param fsPath\n */\nfunction getCMSPathFromFirestorePath(fsPath: string): string {\n    let to = fsPath.lastIndexOf(\"/\");\n    to = to === -1 ? fsPath.length : to;\n    return fsPath.substring(0, to);\n}\n","import { FirebaseApp } from \"firebase/app\";\nimport {\n    FirebaseStorage,\n    getDownloadURL,\n    getStorage,\n    ref,\n    uploadBytes\n} from \"firebase/storage\";\nimport { StorageSource, UploadFileProps } from \"../../models\";\nimport { useEffect, useState } from \"react\";\n\n/**\n * @category Firebase\n */\nexport interface FirebaseStorageSourceProps {\n    firebaseApp?: FirebaseApp\n}\n\n/**\n * Use this hook to build an {@link StorageSource} based on Firebase storage\n * @category Firebase\n */\nexport function useFirebaseStorageSource({ firebaseApp }: FirebaseStorageSourceProps): StorageSource {\n\n    const [storage, setStorage] = useState<FirebaseStorage>();\n\n    useEffect(() => {\n        if (!firebaseApp) return;\n        setStorage(getStorage(firebaseApp));\n    }, [firebaseApp]);\n\n    const urlsCache: any = {};\n\n    return {\n        uploadFile({ file, fileName, path, metadata }: UploadFileProps)\n            : Promise<any> {\n            if (!storage) throw Error(\"useFirebaseStorageSource Firebase not initialised\");\n            const usedFilename = fileName ?? file.name;\n            console.debug(\"Uploading file\", usedFilename, file, path, metadata);\n            return uploadBytes(ref(storage, `${path}/${usedFilename}`), file, metadata).then(snapshot => ({\n                path: snapshot.ref.fullPath\n            }));\n        },\n\n        getDownloadURL(storagePath: string): Promise<string> {\n            if (!storage) throw Error(\"useFirebaseStorageSource Firebase not initialised\");\n            if (urlsCache[storagePath])\n                return urlsCache[storagePath];\n            const downloadURL = getDownloadURL(ref(storage, storagePath));\n            urlsCache[storagePath] = downloadURL;\n            return downloadURL;\n        }\n    };\n}\n","import React, { useCallback, useEffect } from \"react\";\n\nimport { FirebaseApp, initializeApp } from \"firebase/app\";\n\n/**\n * @category Firebase\n */\nexport interface InitialiseFirebaseResult {\n    firebaseConfigLoading: boolean,\n    firebaseApp?: FirebaseApp;\n    configError?: string,\n    firebaseConfigError?: Error\n}\n\n/**\n * Function used to initialise Firebase, either by using the provided config,\n * or by fetching it by Firebase Hosting, if not specified.\n *\n * It works as a hook that gives you the loading state and the used\n * configuration.\n *\n * You most likely only need to use this if you are developing a custom app\n * that is not using {@link FirebaseCMSApp}. You can also not use this component\n * and initialise Firebase yourself.\n *\n * @param onFirebaseInit\n * @param firebaseConfig\n * @category Firebase\n */\nexport function useInitialiseFirebase({ firebaseConfig, onFirebaseInit }: {\n    onFirebaseInit?: ((config: object) => void) | undefined,\n    firebaseConfig: Object | undefined\n}): InitialiseFirebaseResult {\n\n    const [firebaseApp, setFirebaseApp] = React.useState<FirebaseApp | undefined>();\n    const [firebaseConfigLoading, setFirebaseConfigLoading] = React.useState<boolean>(false);\n    const [configError, setConfigError] = React.useState<string>();\n    const [firebaseConfigError, setFirebaseConfigError] = React.useState<Error | undefined>();\n\n    const initFirebase = useCallback((config: Object) => {\n        try {\n            const initialisedFirebaseApp = initializeApp(config);\n            setFirebaseConfigError(undefined);\n            setFirebaseConfigLoading(false);\n            if (onFirebaseInit)\n                onFirebaseInit(config);\n            setFirebaseApp(initialisedFirebaseApp);\n        } catch (e: any) {\n            console.error(e);\n            setFirebaseConfigError(e);\n        }\n    }, [onFirebaseInit]);\n\n    useEffect(() => {\n\n        setFirebaseConfigLoading(true);\n\n        if (firebaseConfig) {\n            console.log(\"Using specified config\", firebaseConfig);\n            initFirebase(firebaseConfig);\n        } else if (process.env.NODE_ENV === \"production\") {\n            fetch(\"/__/firebase/init.json\")\n                .then(async response => {\n                    console.debug(\"Firebase init response\", response.status);\n                    if (response && response.status < 300) {\n                        const config = await response.json();\n                        console.log(\"Using configuration fetched from Firebase Hosting\", config);\n                        initFirebase(config);\n                    }\n                })\n                .catch(e => {\n                        setFirebaseConfigLoading(false);\n                        setConfigError(\n                            \"Could not load Firebase configuration from Firebase hosting. \" +\n                            \"If the app is not deployed in Firebase hosting, you need to specify the configuration manually\" +\n                            e.toString()\n                        );\n                    }\n                );\n        } else {\n            setFirebaseConfigLoading(false);\n            setConfigError(\n                \"You need to deploy the app to Firebase hosting or specify a Firebase configuration object\"\n            );\n        }\n    }, [firebaseConfig, initFirebase]);\n\n    return {\n        firebaseApp,\n        firebaseConfigLoading,\n        configError,\n        firebaseConfigError\n    };\n}\n","export const googleIcon = (mode: \"light\" | \"dark\") => <>\n    <svg\n        xmlns=\"http://www.w3.org/2000/svg\"\n        viewBox=\"0 0 64 64\"\n        width={32}\n        height={32}\n    >\n        <linearGradient\n            id=\"95yY7w43Oj6n2vH63j6HJb\"\n            x1=\"29.401\"\n            x2=\"29.401\"\n            y1=\"4.064\"\n            y2=\"106.734\"\n            gradientTransform=\"matrix(1 0 0 -1 0 66)\"\n            gradientUnits=\"userSpaceOnUse\"\n        >\n            <stop offset=\"0\" stopColor=\"#ff5840\"/>\n            <stop offset=\".007\" stopColor=\"#ff5840\"/>\n            <stop offset=\".989\" stopColor=\"#fa528c\"/>\n            <stop offset=\"1\" stopColor=\"#fa528c\"/>\n        </linearGradient>\n        <path\n            fill=\"url(#95yY7w43Oj6n2vH63j6HJb)\"\n            d=\"M47.46,15.5l-1.37,1.48c-1.34,1.44-3.5,1.67-5.15,0.6c-2.71-1.75-6.43-3.13-11-2.37 c-4.94,0.83-9.17,3.85-11.64, 7.97l-8.03-6.08C14.99,9.82,23.2,5,32.5,5c5,0,9.94,1.56,14.27,4.46 C48.81,10.83,49.13,13.71,47.46,15.5z\"\n        />\n        <linearGradient\n            id=\"95yY7w43Oj6n2vH63j6HJc\"\n            x1=\"12.148\"\n            x2=\"12.148\"\n            y1=\".872\"\n            y2=\"47.812\"\n            gradientTransform=\"matrix(1 0 0 -1 0 66)\"\n            gradientUnits=\"userSpaceOnUse\"\n        >\n            <stop offset=\"0\" stopColor=\"#feaa53\"/>\n            <stop offset=\".612\" stopColor=\"#ffcd49\"/>\n            <stop offset=\"1\" stopColor=\"#ffde44\"/>\n        </linearGradient>\n        <path\n            fill=\"url(#95yY7w43Oj6n2vH63j6HJc)\"\n            d=\"M16.01,30.91c-0.09,2.47,0.37,4.83,1.27,6.96l-8.21,6.05c-1.35-2.51-2.3-5.28-2.75-8.22 c-1.06-6.88,0.54-13.38, 3.95-18.6l8.03,6.08C16.93,25.47,16.1,28.11,16.01,30.91z\"\n        />\n        <linearGradient\n            id=\"95yY7w43Oj6n2vH63j6HJd\"\n            x1=\"29.76\"\n            x2=\"29.76\"\n            y1=\"32.149\"\n            y2=\"-6.939\"\n            gradientTransform=\"matrix(1 0 0 -1 0 66)\"\n            gradientUnits=\"userSpaceOnUse\"\n        >\n            <stop offset=\"0\" stopColor=\"#42d778\"/>\n            <stop offset=\".428\" stopColor=\"#3dca76\"/>\n            <stop offset=\"1\" stopColor=\"#34b171\"/>\n        </linearGradient>\n        <path\n            fill=\"url(#95yY7w43Oj6n2vH63j6HJd)\"\n            d=\"M50.45,51.28c-4.55,4.07-10.61,6.57-17.36,6.71C22.91,58.2,13.66,52.53,9.07,43.92l8.21-6.05 C19.78,43.81, 25.67,48,32.5,48c3.94,0,7.52-1.28,10.33-3.44L50.45,51.28z\"\n        />\n        <linearGradient\n            id=\"95yY7w43Oj6n2vH63j6HJe\"\n            x1=\"46\"\n            x2=\"46\"\n            y1=\"3.638\"\n            y2=\"35.593\"\n            gradientTransform=\"matrix(1 0 0 -1 0 66)\"\n            gradientUnits=\"userSpaceOnUse\"\n        >\n            <stop offset=\"0\" stopColor=\"#155cde\"/>\n            <stop offset=\".278\" stopColor=\"#1f7fe5\"/>\n            <stop offset=\".569\" stopColor=\"#279ceb\"/>\n            <stop offset=\".82\" stopColor=\"#2cafef\"/>\n            <stop offset=\"1\" stopColor=\"#2eb5f0\"/>\n        </linearGradient>\n        <path\n            fill=\"url(#95yY7w43Oj6n2vH63j6HJe)\"\n            d=\"M59,31.97c0.01,7.73-3.26,14.58-8.55,19.31l-7.62-6.72c2.1-1.61,3.77-3.71,4.84-6.15\n        c0.29-0.66-0.2-1.41-0.92-1.41H37c-2.21,0-4-1.79-4-4v-2c0-2.21,1.79-4,4-4h17C56.75,27,59,29.22,59,31.97z\"\n        />\n    </svg>\n</>;\n\nexport const appleIcon = (mode: \"light\" | \"dark\") => <svg width={32} height={32}\n                                                          viewBox=\"0 0 56 56\"\n                                                          style={{ transform: \"scale(2.8)\" }}\n                                                          version=\"1.1\"\n                                                          xmlns=\"http://www.w3.org/2000/svg\">\n    <g stroke={mode === \"light\" ? \"#424245\" : \"white\"} strokeWidth=\"0.5\"\n       fillRule=\"evenodd\">\n        <path\n            d=\"M28.2226562,20.3846154 C29.0546875,20.3846154 30.0976562,19.8048315 30.71875,19.0317864 C31.28125,18.3312142 31.6914062,17.352829 31.6914062,16.3744437 C31.6914062,16.2415766 31.6796875,16.1087095 31.65625,16 C30.7304687,16.0362365 29.6171875,16.640178 28.9492187,17.4494596 C28.421875,18.06548 27.9414062,19.0317864 27.9414062,20.0222505 C27.9414062,20.1671964 27.9648438,20.3121424 27.9765625,20.3604577 C28.0351562,20.3725366 28.1289062,20.3846154 28.2226562,20.3846154 Z M25.2929688,35 C26.4296875,35 26.9335938,34.214876 28.3515625,34.214876 C29.7929688,34.214876 30.109375,34.9758423 31.375,34.9758423 C32.6171875,34.9758423 33.4492188,33.792117 34.234375,32.6325493 C35.1132812,31.3038779 35.4765625,29.9993643 35.5,29.9389701 C35.4179688,29.9148125 33.0390625,28.9122695 33.0390625,26.0979021 C33.0390625,23.6579784 34.9140625,22.5588048 35.0195312,22.474253 C33.7773438,20.6382708 31.890625,20.5899555 31.375,20.5899555 C29.9804688,20.5899555 28.84375,21.4596313 28.1289062,21.4596313 C27.3554688,21.4596313 26.3359375,20.6382708 25.1289062,20.6382708 C22.8320312,20.6382708 20.5,22.5950413 20.5,26.2911634 C20.5,28.5861411 21.3671875,31.013986 22.4335938,32.5842339 C23.3476562,33.9129053 24.1445312,35 25.2929688,35 Z\"\n            fill={mode === \"light\" ? \"#424245\" : \"white\"} fillRule=\"nonzero\"/>\n    </g>\n</svg>;\n\nexport const githubIcon = (mode: \"light\" | \"dark\") => <svg\n    fill={mode === \"light\" ? \"#1c1e21\" : \"white\"}\n    role=\"img\"\n    viewBox=\"0 0 24 24\"\n    width={28}\n    height={28}\n    xmlns=\"http://www.w3.org/2000/svg\">\n    <path\n        d=\"M12 .297c-6.63 0-12 5.373-12 12 0 5.303 3.438 9.8 8.205 11.385.6.113.82-.258.82-.577 0-.285-.01-1.04-.015-2.04-3.338.724-4.042-1.61-4.042-1.61C4.422 18.07 3.633 17.7 3.633 17.7c-1.087-.744.084-.729.084-.729 1.205.084 1.838 1.236 1.838 1.236 1.07 1.835 2.809 1.305 3.495.998.108-.776.417-1.305.76-1.605-2.665-.3-5.466-1.332-5.466-5.93 0-1.31.465-2.38 1.235-3.22-.135-.303-.54-1.523.105-3.176 0 0 1.005-.322 3.3 1.23.96-.267 1.98-.399 3-.405 1.02.006 2.04.138 3 .405 2.28-1.552 3.285-1.23 3.285-1.23.645 1.653.24 2.873.12 3.176.765.84 1.23 1.91 1.23 3.22 0 4.61-2.805 5.625-5.475 5.92.42.36.81 1.096.81 2.22 0 1.606-.015 2.896-.015 3.286 0 .315.21.69.825.57C20.565 22.092 24 17.592 24 12.297c0-6.627-5.373-12-12-12\"/>\n</svg>;\n\n\nexport const facebookIcon = (mode: \"light\" | \"dark\") => <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    width={28} height={28}\n    viewBox=\"0 0 90 90\">\n    <g>\n        <path\n            d=\"M90,15.001C90,7.119,82.884,0,75,0H15C7.116,0,0,7.119,0,15.001v59.998   C0,82.881,7.116,90,15.001,90H45V56H34V41h11v-5.844C45,25.077,52.568,16,61.875,16H74v15H61.875C60.548,31,59,32.611,59,35.024V41   h15v15H59v34h16c7.884,0,15-7.119,15-15.001V15.001z\"\n            fill={mode === \"light\" ? \"#39569c\" : \"white\"}/>\n    </g>\n</svg>;\n\nexport const microsoftIcon = (mode: \"light\" | \"dark\") => <svg\n    xmlns=\"http://www.w3.org/2000/svg\" width={28} height={28}\n    viewBox=\"0 0 480 480\">\n    <g>\n        <path\n            d=\"M0.176,224L0.001,67.963l192-26.072V224H0.176z M224.001,37.241L479.937,0v224H224.001V37.241z M479.999,256l-0.062,224   l-255.936-36.008V256H479.999z M192.001,439.918L0.157,413.621L0.147,256h191.854V439.918z\"\n            fill={mode === \"light\" ? \"#00a2ed\" : \"white\"}/>\n    </g>\n</svg>;\n\nexport const twitterIcon = (mode: \"light\" | \"dark\") => <svg\n    xmlns=\"http://www.w3.org/2000/svg\" width={28} height={28}\n    viewBox=\"0 0 24 24\">\n    <path fill={mode === \"light\" ? \"#00acee\" : \"white\"}\n          d=\"M24 4.557c-.883.392-1.832.656-2.828.775 1.017-.609 1.798-1.574 2.165-2.724-.951.564-2.005.974-3.127 1.195-.897-.957-2.178-1.555-3.594-1.555-3.179 0-5.515 2.966-4.797 6.045-4.091-.205-7.719-2.165-10.148-5.144-1.29 2.213-.669 5.108 1.523 6.574-.806-.026-1.566-.247-2.229-.616-.054 2.281 1.581 4.415 3.949 4.89-.693.188-1.452.232-2.224.084.626 1.956 2.444 3.379 4.6 3.419-2.07 1.623-4.678 2.348-7.29 2.04 2.179 1.397 4.768 2.212 7.548 2.212 9.142 0 14.307-7.721 13.995-14.646.962-.695 1.797-1.562 2.457-2.549z\"/>\n</svg>;\n\n","import React, { ReactNode, useEffect, useRef, useState } from \"react\";\n\nimport {\n    Box,\n    Button,\n    CircularProgress,\n    Fade,\n    Grid,\n    IconButton,\n    Slide,\n    TextField,\n    Theme,\n    Typography\n} from \"@mui/material\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport makeStyles from \"@mui/styles/makeStyles\";\n\nimport { FirebaseApp } from \"firebase/app\";\nimport { FireCMSLogo } from \"../../core/components/FireCMSLogo\";\nimport { useAuthController, useModeState } from \"../../hooks\";\nimport {\n    FirebaseAuthDelegate,\n    FirebaseSignInOption,\n    FirebaseSignInProvider\n} from \"../models/auth\";\nimport {\n    appleIcon,\n    facebookIcon,\n    githubIcon,\n    googleIcon,\n    microsoftIcon,\n    twitterIcon\n} from \"./social_icons\";\nimport { ErrorView } from \"../../core\";\nimport EmailIcon from \"@mui/icons-material/Email\";\nimport ArrowBackIcon from \"@mui/icons-material/ArrowBack\";\nimport PersonOutlineIcon from \"@mui/icons-material/PersonOutline\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        logo: {\n            padding: theme.spacing(3),\n            width: 260,\n            height: 260\n        }\n    })\n);\n\n/**\n * @category Firebase\n */\nexport interface FirebaseLoginViewProps {\n    logo?: string;\n    allowSkipLogin?: boolean;\n    signInOptions: Array<FirebaseSignInProvider | FirebaseSignInOption>;\n    firebaseApp: FirebaseApp;\n    authDelegate: FirebaseAuthDelegate;\n    /**\n     * Prevent users from creating new users in when the `signInOptions` value\n     * is `password`. This does not apply to the rest of login providers.\n     */\n    disableSignupScreen?: boolean;\n    /**\n     * Display this component when no user is found a user tries to log in\n     * when the `signInOptions` value is `password`.\n     */\n    NoUserComponent?: ReactNode;\n}\n\n/**\n * Use this component to render a login view, that updates\n * the state of the {@link AuthController} based on the result\n * @constructor\n * @category Firebase\n */\nexport function FirebaseLoginView({\n                                      allowSkipLogin,\n                                      logo,\n                                      signInOptions,\n                                      firebaseApp,\n                                      authDelegate,\n                                      NoUserComponent,\n                                      disableSignupScreen = false\n                                  }: FirebaseLoginViewProps) {\n    const classes = useStyles();\n    const authController = useAuthController();\n    const modeState = useModeState();\n\n    const [passwordLoginSelected, setPasswordLoginSelected] = useState(false);\n\n    const resolvedSignInOptions: FirebaseSignInProvider[] = signInOptions.map((o) => {\n        if (typeof o === \"object\") {\n            return o.provider;\n        } else return o as FirebaseSignInProvider;\n    })\n\n    function buildErrorView() {\n        let errorView: any;\n        const ignoredCodes = [\"auth/popup-closed-by-user\", \"auth/cancelled-popup-request\"];\n        if (authDelegate.authError) {\n            if (authDelegate.authError.code === \"auth/operation-not-allowed\") {\n                errorView =\n                    <>\n                        <Box p={1}>\n                            <ErrorView\n                                error={\"You need to enable the corresponding login provider in your Firebase project\"}/>\n                        </Box>\n\n                        {firebaseApp &&\n                        <Box p={1}>\n                            <a href={`https://console.firebase.google.com/project/${firebaseApp.options.projectId}/authentication/providers`}\n                               rel=\"noopener noreferrer\"\n                               target=\"_blank\">\n                                <Button variant=\"text\"\n                                        color=\"primary\">\n                                    Open Firebase configuration\n                                </Button>\n                            </a>\n                        </Box>}\n                    </>;\n            } else if (!ignoredCodes.includes(authDelegate.authError.code)) {\n                console.error(authDelegate.authError);\n                errorView =\n                    <Box p={1}>\n                        <ErrorView error={authDelegate.authError.message}/>\n                    </Box>;\n            }\n        }\n        return errorView;\n    }\n\n    let logoComponent;\n    if (logo) {\n        logoComponent = <img className={classes.logo}\n                             src={logo}\n                             alt={\"Logo\"}/>;\n    } else {\n        logoComponent = <div className={classes.logo}>\n            <FireCMSLogo/>\n        </div>;\n    }\n\n    let notAllowedMessage: string | undefined;\n    if (authController.notAllowedError) {\n        if (typeof authController.notAllowedError === \"string\") {\n            notAllowedMessage = authController.notAllowedError;\n        } else if (authController.notAllowedError instanceof Error) {\n            notAllowedMessage = authController.notAllowedError.message;\n        } else {\n            notAllowedMessage = \"It looks like you don't have access to the CMS, based on the specified Authenticator configuration\";\n        }\n    }\n\n\n    return (\n        <Fade\n            in={true}\n            timeout={500}\n            mountOnEnter\n            unmountOnExit>\n            <Box sx={{\n                display: \"flex\",\n                flexDirection: \"column\",\n                justifyContent: \"center\",\n                alignItems: \"center\",\n                minHeight: \"100vh\",\n                p: 2\n            }}>\n                <Box sx={{\n                    display: \"flex\",\n                    flexDirection: \"column\",\n                    alignItems: \"center\",\n                    width: \"100%\",\n                    maxWidth: 340\n                }}>\n\n                    <Box m={1}>\n                        {logoComponent}\n                    </Box>\n\n                    {notAllowedMessage &&\n                    <Box p={2}>\n                        <ErrorView\n                            error={notAllowedMessage}/>\n                    </Box>}\n\n                    {buildErrorView()}\n\n                    {!passwordLoginSelected && <>\n\n                        {buildOauthLoginButtons(authDelegate, resolvedSignInOptions, modeState.mode)}\n\n                        {resolvedSignInOptions.includes(\"password\") &&\n                        <LoginButton\n                            text={\"Email/password\"}\n                            icon={<EmailIcon fontSize={\"large\"}/>}\n                            onClick={() => setPasswordLoginSelected(true)}/>}\n\n\n                        {resolvedSignInOptions.includes(\"anonymous\") &&\n                        <LoginButton\n                            text={\"Log in anonymously\"}\n                            icon={<PersonOutlineIcon fontSize={\"large\"}/>}\n                            onClick={authDelegate.anonymousLogin}/>}\n\n                        {allowSkipLogin &&\n                        <Box m={1}>\n                            <Button onClick={authDelegate.skipLogin}>\n                                Skip login\n                            </Button>\n                        </Box>\n                        }\n\n                    </>}\n\n                    {passwordLoginSelected && <LoginForm\n                        authDelegate={authDelegate}\n                        onClose={() => setPasswordLoginSelected(false)}\n                        mode={modeState.mode}\n                        NoUserComponent={NoUserComponent}\n                        disableSignupScreen={disableSignupScreen}\n                    />}\n\n                </Box>\n            </Box>\n        </Fade>\n    );\n}\n\nfunction LoginButton({\n                         icon,\n                         onClick,\n                         text\n                     }: { icon: React.ReactNode, onClick: () => void, text: string }) {\n    return (\n        <Box m={0.5} width={\"100%\"}>\n            <Button fullWidth\n                    variant=\"outlined\"\n                    onClick={onClick}>\n                <Box sx={{\n                    p: \"1\",\n                    display: \"flex\",\n                    width: \"240px\",\n                    height: \"32px\",\n                    alignItems: \"center\",\n                    justifyItems: \"center\"\n                }}>\n                    <Box sx={{\n                        display: \"flex\",\n                        flexDirection: \"column\",\n                        width: \"32px\",\n                        alignItems: \"center\",\n                        justifyItems: \"center\"\n                    }}>\n                        {icon}\n                    </Box>\n                    <Box sx={{\n                        flexGrow: 1,\n                        pl: 2,\n                        textAlign: \"center\"\n                    }}>{text}</Box>\n                </Box>\n            </Button>\n        </Box>\n    )\n}\n\nfunction LoginForm({\n                       onClose,\n                       authDelegate,\n                       mode,\n                       NoUserComponent,\n                       disableSignupScreen\n                   }: {\n    onClose: () => void,\n    authDelegate: FirebaseAuthDelegate,\n    mode: \"light\" | \"dark\",\n    NoUserComponent?: ReactNode,\n    disableSignupScreen: boolean\n}) {\n\n    const passwordRef = useRef<HTMLInputElement | null>(null);\n\n    const [email, setEmail] = useState<string>();\n    const [availableProviders, setAvailableProviders] = useState<string[] | undefined>();\n    const [password, setPassword] = useState<string>();\n\n    const shouldShowEmail = availableProviders === undefined;\n    const loginMode = availableProviders && availableProviders.includes(\"password\");\n    const otherProvidersMode = availableProviders && !availableProviders.includes(\"password\") && availableProviders.length > 0;\n    const registrationMode = availableProviders && !availableProviders.includes(\"password\");\n\n    useEffect(() => {\n        console.log(\"loginMode\", loginMode);\n        if ((loginMode || registrationMode) && passwordRef.current) {\n            passwordRef.current.focus()\n        }\n    }, [loginMode, registrationMode]);\n\n    useEffect(() => {\n        if (!document) return;\n        const escFunction = (event: any) => {\n            if (event.keyCode === 27) {\n                onClose();\n            }\n        };\n        document.addEventListener(\"keydown\", escFunction, false);\n        return () => {\n            document.removeEventListener(\"keydown\", escFunction, false);\n        };\n    }, [document]);\n\n    function handleEnterEmail() {\n        if (email) {\n            authDelegate.fetchSignInMethodsForEmail(email).then((availableProviders) => {\n                console.log(availableProviders);\n                setAvailableProviders(availableProviders)\n            });\n        }\n    }\n\n    function handleEnterPassword() {\n        if (email && password) {\n            authDelegate.emailPasswordLogin(email, password);\n        }\n    }\n\n    function handleRegistration() {\n        if (email && password) {\n            authDelegate.createUserWithEmailAndPassword(email, password);\n        }\n    }\n\n    const onBackPressed = () => {\n        if (shouldShowEmail) {\n            onClose();\n        } else {\n            setAvailableProviders(undefined);\n        }\n    }\n\n    const handleSubmit = (event: any) => {\n        event.preventDefault();\n        if (shouldShowEmail) {\n            handleEnterEmail();\n        } else if (loginMode) {\n            handleEnterPassword();\n        } else if (registrationMode) {\n            handleRegistration();\n        }\n    }\n\n    const label = registrationMode\n        ? \"No user found with that email. Pick a password to create a new account\"\n        : (loginMode ? \"Please enter your password\" : \"Please enter your email\");\n    const button = registrationMode ? \"Create account\" : (loginMode ? \"Login\" : \"Ok\");\n\n    if (otherProvidersMode) {\n        return (\n            <Grid container spacing={1}>\n                <Grid item xs={12}>\n                    <IconButton\n                        onClick={onBackPressed}>\n                        <ArrowBackIcon sx={{ width: 20, height: 20 }}/>\n                    </IconButton>\n                </Grid>\n\n                <Grid item xs={12} sx={{ p: 1 }}>\n                    <Typography align={\"center\"} variant={\"subtitle2\"}>\n                        You already have an account\n                    </Typography>\n                    <Typography align={\"center\"} variant={\"body2\"}>\n                        You can use one of these\n                        methods to login with {email}\n                    </Typography>\n                </Grid>\n\n                <Grid item xs={12}>\n                    {availableProviders && buildOauthLoginButtons(authDelegate, availableProviders, mode)}\n                </Grid>\n            </Grid>\n        );\n    }\n\n    return (\n        <Slide\n            direction=\"up\"\n            in={true}\n            mountOnEnter\n            unmountOnExit>\n            <form onSubmit={handleSubmit}>\n                <Grid container spacing={1}>\n                    <Grid item xs={12}>\n                        <IconButton\n                            onClick={onBackPressed}>\n                            <ArrowBackIcon sx={{ width: 20, height: 20 }}/>\n                        </IconButton>\n                    </Grid>\n\n                    <Grid item xs={12} sx={{\n                        p: 1,\n                        display: (registrationMode && disableSignupScreen) ? \"none\" : \"flex\"\n                    }}>\n                        <Typography align={\"center\"}\n                                    variant={\"subtitle2\"}>{label}</Typography>\n                    </Grid>\n\n                    <Grid item xs={12}\n                          sx={{ display: shouldShowEmail ? \"inherit\" : \"none\" }}>\n                        <TextField placeholder=\"Email\" fullWidth autoFocus\n                                   value={email}\n                                   disabled={authDelegate.authLoading}\n                                   type=\"email\"\n                                   onChange={(event) => setEmail(event.target.value)}/>\n                    </Grid>\n\n                    <Grid item xs={12}>\n                        {registrationMode && NoUserComponent}\n                    </Grid>\n\n                    <Grid item xs={12}\n                          sx={{ display: loginMode || (registrationMode && !disableSignupScreen) ? \"inherit\" : \"none\" }}>\n                        <TextField placeholder=\"Password\" fullWidth\n                                   value={password}\n                                   disabled={authDelegate.authLoading}\n                                   inputRef={passwordRef}\n                                   type=\"password\"\n                                   onChange={(event) => setPassword(event.target.value)}/>\n                    </Grid>\n\n                    <Grid item xs={12}>\n                        <Box sx={{\n                            display: (registrationMode && disableSignupScreen) ? \"none\" : \"flex\",\n                            justifyContent: \"end\",\n                            alignItems: \"center\",\n                            width: \"100%\"\n                        }}>\n\n                            {authDelegate.authLoading &&\n                            <CircularProgress sx={{ p: 1 }} size={16}\n                                              thickness={8}/>\n                            }\n\n                            <Button type=\"submit\">\n                                {button}\n                            </Button>\n                        </Box>\n                    </Grid>\n                </Grid>\n            </form>\n        </Slide>\n    );\n\n}\n\nfunction buildOauthLoginButtons(authDelegate: FirebaseAuthDelegate, providers: string[], mode: \"light\" | \"dark\") {\n    return <>\n        {providers.includes(\"google.com\") && <LoginButton\n            text={\"Sign in with Google\"}\n            icon={googleIcon(mode)}\n            onClick={authDelegate.googleLogin}/>}\n\n        {providers.includes(\"microsoft.com\") && <LoginButton\n            text={\"Sign in with Microsoft\"}\n            icon={microsoftIcon(mode)}\n            onClick={authDelegate.microsoftLogin}/>}\n\n        {providers.includes(\"apple.com\") && <LoginButton\n            text={\"Sign in with Apple\"}\n            icon={appleIcon(mode)}\n            onClick={authDelegate.appleLogin}/>}\n\n        {providers.includes(\"github.com\") && <LoginButton\n            text={\"Sign in with Github\"}\n            icon={githubIcon(mode)}\n            onClick={authDelegate.githubLogin}/>}\n\n        {providers.includes(\"facebook.com\") && <LoginButton\n            text={\"Sign in with Facebook\"}\n            icon={facebookIcon(mode)}\n            onClick={authDelegate.facebookLogin}/>}\n\n        {providers.includes(\"twitter.com\") && <LoginButton\n            text={\"Sign in with Twitter\"}\n            icon={twitterIcon(mode)}\n            onClick={authDelegate.twitterLogin}/>}\n    </>\n}\n","import React from \"react\";\n\nimport { GoogleAuthProvider } from \"firebase/auth\";\nimport { CssBaseline, ThemeProvider } from \"@mui/material\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nimport {\n    CircularProgressCenter,\n    createCMSDefaultTheme,\n    FireCMS,\n    NavigationRoutes,\n    Scaffold,\n    SideEntityDialogs\n} from \"../core\";\n\nimport { FirebaseCMSAppProps } from \"./FirebaseCMSAppProps\";\nimport { useFirebaseAuthDelegate } from \"./hooks/useFirebaseAuthDelegate\";\nimport { useFirestoreDataSource } from \"./hooks/useFirestoreDataSource\";\nimport { useFirebaseStorageSource } from \"./hooks/useFirebaseStorageSource\";\nimport { useInitialiseFirebase } from \"./hooks/useInitialiseFirebase\";\nimport { FirebaseLoginView } from \"./components/FirebaseLoginView\";\nimport { FirebaseAuthDelegate } from \"./models/auth\";\n\nconst DEFAULT_SIGN_IN_OPTIONS = [\n    GoogleAuthProvider.PROVIDER_ID\n];\n\n/**\n * This is the default implementation of a FireCMS app using the Firebase services\n * as a backend.\n * You can use this component as a full app, by specifying collections and\n * entity schemas.\n *\n * This component is in charge of initialising Firebase, with the given\n * configuration object.\n *\n * If you are building a larger app and need finer control, you can use\n * {@link FireCMS}, {@link Scaffold}, {@link SideEntityDialogs}\n * and {@link NavigationRoutes} instead.\n *\n * @param props\n * @constructor\n * @category Firebase\n */\nexport function FirebaseCMSApp({\n                                   name,\n                                   logo,\n                                   toolbarExtraWidget,\n                                   authentication,\n                                   schemaOverrideHandler,\n                                   navigation,\n                                   textSearchController,\n                                   allowSkipLogin,\n                                   signInOptions = DEFAULT_SIGN_IN_OPTIONS,\n                                   firebaseConfig,\n                                   onFirebaseInit,\n                                   primaryColor,\n                                   secondaryColor,\n                                   fontFamily,\n                                   dateTimeFormat,\n                                   locale,\n                                   HomePage,\n                                   basePath,\n                                   baseCollectionPath,\n                                   LoginViewProps\n                               }: FirebaseCMSAppProps) {\n\n    const {\n        firebaseApp,\n        firebaseConfigLoading,\n        configError,\n        firebaseConfigError\n    } = useInitialiseFirebase({ onFirebaseInit, firebaseConfig });\n\n    const authDelegate: FirebaseAuthDelegate = useFirebaseAuthDelegate({\n        firebaseApp,\n        signInOptions\n    });\n\n    const dataSource = useFirestoreDataSource({\n        firebaseApp: firebaseApp,\n        textSearchController\n    });\n    const storageSource = useFirebaseStorageSource({ firebaseApp: firebaseApp });\n\n    if (configError) {\n        return <div> {configError} </div>;\n    }\n\n    if (firebaseConfigError) {\n        return <div>\n            It seems like the provided Firebase config is not correct. If you\n            are using the credentials provided automatically by Firebase\n            Hosting, make sure you link your Firebase app to Firebase\n            Hosting.\n        </div>;\n    }\n\n    if (firebaseConfigLoading || !firebaseApp) {\n    return <>\n        <CssBaseline/>\n        <CircularProgressCenter/>\n    </>;\n    }\n\n    return (\n        <BrowserRouter basename={basePath}>\n            <FireCMS navigation={navigation}\n                     authDelegate={authDelegate}\n                     authentication={authentication}\n                     schemaOverrideHandler={schemaOverrideHandler}\n                     dateTimeFormat={dateTimeFormat}\n                     dataSource={dataSource}\n                     storageSource={storageSource}\n                     entityLinkBuilder={({ entity }) => `https://console.firebase.google.com/project/${firebaseApp.options.projectId}/firestore/data/${entity.path}/${entity.id}`}\n                     locale={locale}\n                     basePath={basePath}\n                     baseCollectionPath={baseCollectionPath}>\n                {({ context, mode, loading }) => {\n\n                    const theme = createCMSDefaultTheme({\n                        mode,\n                        primaryColor,\n                        secondaryColor,\n                        fontFamily\n                    });\n\n                    let component;\n                    if (loading) {\n                        component = <CircularProgressCenter/>;\n                    } else if (!context.authController.canAccessMainView) {\n                        component = (\n                            <FirebaseLoginView\n                                logo={logo}\n                                allowSkipLogin={allowSkipLogin}\n                                signInOptions={signInOptions ?? DEFAULT_SIGN_IN_OPTIONS}\n                                firebaseApp={firebaseApp}\n                                authDelegate={authDelegate}\n                                {...LoginViewProps}\n                                />\n                        );\n                    } else {\n                        component = (\n                            <Scaffold name={name}\n                                      logo={logo}\n                                      toolbarExtraWidget={toolbarExtraWidget}>\n                                <NavigationRoutes HomePage={HomePage}/>\n                                <SideEntityDialogs/>\n                            </Scaffold>\n                        );\n                    }\n\n                    return (\n                        <ThemeProvider theme={theme}>\n                            <CssBaseline/>\n                            {component}\n                        </ThemeProvider>\n                    );\n                }}\n            </FireCMS>\n        </BrowserRouter>\n    );\n}\n","import { SearchIndex } from \"algoliasearch\";\n\n/**\n * Use this controller to return a list of ids from a search index, given a\n * `path` and a `searchString`.\n * Firestore does not support text search directly so we need to rely on an external\n * index, such as Algolia.\n * Note that you will get text search requests for collections that have the\n * `textSearchEnabled` flag set to `true`.\n * @see performAlgoliaTextSearch\n * @category Firebase\n */\nexport type FirestoreTextSearchController = (props: { path: string, searchString: string }) => Promise<readonly string[]> | undefined;\n\n/**\n * Utility function to perform a text search in an algolia index,\n * returning the ids of the entities.\n * @param index\n * @param query\n * @category Firebase\n */\nexport function performAlgoliaTextSearch(index: SearchIndex, query: string): Promise<readonly string[]> {\n\n    console.log(\"Performing Algolia query\", index, query);\n    return index\n        .search(query)\n        .then(({ hits }: any) => {\n            return hits.map((hit: any) => hit.objectID as string);\n        })\n        .catch((err: any) => {\n            console.log(err);\n            return [];\n        });\n}\n"],"names":["DEFAULT_STATE","isOpen","close","open","props","SnackbarContext","React","createContext","SnackbarProvider","children","setIsOpen","useState","title","setTitle","undefined","message","setMessage","type","setType","_jsxs","_jsx","_","FireCMSContextInstance","sideEntityController","navigationContext","dataSource","storageSource","authController","snackbarController","FireCMSContextProvider","context","DEFAULT_BREADCRUMBS_CONTROLLER","breadcrumbs","set","BreadcrumbContext","BreadcrumbsProvider","setBreadcrumbs","DEFAULT_MODE_STATE","mode","setMode","toggleMode","ModeStateContext","ModeProvider","prefersDarkModeQuery","useMediaQuery","prefersDarkModeStorage","localStorage","getItem","prefersDarkMode","useEffect","setItem","removeItem","s","removeInitialSlash","removeTrailingSlash","startsWith","slice","endsWith","path","collections","subpaths","removeInitialAndTrailingSlashes","split","length","Error","getCollectionFromCollectionsInternal","collectionViews","subpathCombinations","getCollectionPathsCombinations","result","i","subpathCombination","navigationEntry","find","entry","subcollections","newPath","replace","join","entries","splice","push","includeHiddenViews","navigation","navigationEntries","map","collection","url","buildUrlCollectionPath","name","description","group","views","view","hideFromNavigation","buildCMSUrlPath","Array","isArray","filter","groups","from","Set","Object","values","e","Boolean","currentFullPath","collectionPath","restOfThePath","nextSegments","entityId","fullPath","parentCollection","customViews","schema","customView","getNavigationEntriesFromPathInternal","NEW_URL_HASH","useBuildSideEntityController","location","useLocation","navigate","useNavigate","initialised","useRef","sidePanels","setSidePanels","state","baseLocation","base_location","updatePanels","useCallback","newPanels","removeAllOverridesExcept","panels","statePanel","current","isUrlCollectionPath","pathname","newFlag","hash","entityOrCollectionPath","urlPathToDataPath","buildSidePanelsFromUrl","lastSidePanel","locationPanels","selectedSubpath","copy","width","schemaProps","permissions","schemaOrResolver","overrideSchemaRegistry","setOverride","schemaConfig","schemaResolver","callbacks","cleanPath","updatedPanel","updatedPanels","newPanel","navigationViewsForPath","lastCollectionPath","previousEntry","EntityReference","id","constructor","pathWithId","GeoPoint","latitude","longitude","pick","obj","args","reduce","res","key","item","target","source","output","assign","isObject","keys","forEach","mergeDeep","o","includes","pathSegments","getValueInPath","v","Date","toLocaleString","ignoreUnknown","propertyOrBuilder","previousValues","propertyOverride","console","debug","property","readOnly","dataType","autoValue","disabled","hidden","properties","computeProperties","propertiesOrBuilder","originalSchema","buildPropertyFrom","a","b","defaultValues","propertyDefaultValue","value","initPropertyValue","defaultValue","initWithProperties","inputValues","status","timestampNowValue","referenceConverter","geopointConverter","traverseValues","inputValue","validation","required","entity","operation","updatedValues","updatedValue","traverseValue","of","oneOf","typeField","valueField","childProperty","basePath","baseCollectionPath","navigationOrBuilder","schemaOverrideHandler","dateTimeFormat","locale","userConfigPersistence","setNavigation","navigationLoading","setNavigationLoading","navigationLoadingError","setNavigationLoadingError","schemaConfigRecord","cleanBasePath","cleanBaseCollectionPath","homeUrl","fullCollectionPath","canAccessMainView","getNavigation","navigationOrCollections","user","then","catch","getSchemaOverride","collectionOverride","getCollectionConfig","buildSchemaResolver","schemaOverride","storedProperties","getCollectionOverride","dynamicCollectionConfig","getCollectionResolver","baseCollection","getCollectionByPath","resolvedCollection","sidePanelKey","getSidePanelKey","overriddenProps","resolvedProps","shouldOverrideRegistry","entityRefs","currentKey","onCollectionModifiedForUser","partialCollection","currentStoredConfig","onCollectionModified","loading","authDelegate","authentication","setUser","authLoading","setAuthLoading","notAllowedError","setNotAllowedError","extra","setExtra","loginSkipped","authenticationEnabled","useMemo","initialLoading","signOut","checkAuthentication","delegateUser","Function","allowed","data","storageKey","stripCollectionPath","JSON","stringify","parse","saveStorageCollectionConfig","getStorageCollectionConfig","DEFAULT_COLLECTION_PATH","entityLinkBuilder","usedBasePath","usedBasedCollectionPath","dateUtilsLocale","locales","useBuildAuthController","useBuildStorageConfigurationPersistence","useBuildNavigationContext","AdapterDateFns","DateFnsUtils","useStyles","makeStyles","theme","createStyles","flexCenter","display","alignItems","smallMargin","margin","spacing","text","paddingLeft","error","tooltip","classes","body","clsx","builder","setLoading","setResult","unmounted","AsyncPreviewComponent","memo","AsyncPreviewComponentInternal","ErrorBoundary","Component","hasError","getDerivedStateFromError","componentDidCatch","errorInfo","render","str","chr","charCodeAt","Math","abs","CHIP_COLORS","blueLighter","color","cyanLighter","tealLighter","greenLighter","yellowLighter","orangeLighter","redLighter","pinkLighter","purpleLighter","grayLighter","blueLight","cyanLight","tealLight","greenLight","yellowLight","orangeLight","redLight","pinkLight","purpleLight","grayLight","blueDark","cyanDark","tealDark","greenDark","yellowDark","orangeDark","redDark","pinkDark","purpleDark","grayDark","blueDarker","cyanDarker","tealDarker","greenDarker","yellowDarker","orangeDarker","redDarker","pinkDarker","purpleDarker","grayDarker","seed","hashString","colorKeys","index","enumValues","Map","get","labelOrConfig","getLabelOrConfigFrom","label","root","maxWidth","backgroundColor","fontWeight","typography","fontWeightRegular","enumKey","small","enumValue","toString","buildEnumLabel","colorSchemaKey","getColorSchemaKey","colorSeed","outlined","getColorSchemeForKey","getColorSchemeForSeed","size","config","previewAsTag","_Fragment","array","flexDirection","arrayWrap","flexWrap","arrayItem","stringProperty","ofProperty","fontSize","lineHeight","fontFamily","stopPropagation","borderRadius","height","TINY_THUMBNAIL","SMALL_THUMBNAIL","REGULAR_THUMBNAIL","image","maxHeight","imageWrap","position","justifyContent","imageSize","imageTiny","objectFit","copyIcon","bottom","right","palette","common","white","previewIcon","onHover","setOnHover","getThumbnailMeasure","imageStyle","navigator","clipboard","writeText","previewProperties","mapProperties","Table","borderBottom","TableCell","defaultDateFormat","useFireCMSContext","useContext","filterValues","sortBy","itemCount","searchString","entitiesDisplayedFirst","sortByProperty","currentSort","useDataSource","initialEntities","setData","dataLoading","setDataLoading","dataLoadingError","setDataLoadingError","noMoreToLoad","setNoMoreToLoad","updateData","entities","displayedFirstId","has","onEntitiesUpdate","onError","listenCollection","onUpdate","limit","startAfter","orderBy","order","fetchCollection","CACHE","useCache","setEntity","onEntityUpdate","updatedEntity","listenEntity","fetchEntity","onSaveSuccess","onSaveFailure","onPreSaveHookError","onSaveSuccessHookError","onPreSave","resolvedSchema","computeSchema","saveEntity","onDeleteSuccess","onDeleteFailure","onPreDeleteHookError","onDeleteSuccessHookError","entityDeleteProps","onPreDelete","deleteEntity","onDelete","setValue","clearedValueRef","shouldClearValueIfDisabled","clearOnDisabled","resultPromises","Promise","resolve","entityCollectionResolver","all","resolveNavigationFrom","finally","useSnackbarController","useModeState","useClipboard","options","onSuccess","disableClipboardAPI","copiedDuration","ref","isCoppied","setIsCoppied","setClipbaord","setTimeout","isSupported","handleError","handleSuccess","copyToClipboard","err","clearClipboard","action","cut","element","isInput","tagName","input","innerText","appConfig","dateFormat","formattedDate","format","arrayItemBig","link","wordBreak","fontWeightMedium","preventDefault","marginRight","mediaType","storageMeta","content","renderUrlComponent","renderSkeletonImageThumbnail","renderSkeletonText","arrayProperty","renderArrayOfMaps","renderArrayEnumTableCell","renderGenericArrayCell","renderArrayOfStrings","renderMap","renderReference","tableProperties","renderSkeletonIcon","renderUrlAudioComponent","renderUrlVideo","renderUrlFile","StorageThumbnail","StorageThumbnailInternal","areEqual","prevProps","nextProps","URL_CACHE","storage","useStorageSource","storagePathOrDownloadUrl","setUrl","storeUrl","getDownloadURL","downloadURL","childSize","ReferencePreview","ReferencePreviewComponent","onClick","reference","useNavigation","useSideEntityController","collectionResolver","useEntityFetch","listProperties","buildError","flexGrow","whiteSpace","overflow","textOverflow","clickableStyles","tabindex","lighten","background","default","darken","transition","boxShadow","cursor","padding","itemsAlign","tableNoBottomBorder","verticalAlignTop","verticalAlign","mapProperty","mapPropertyKeys","fieldProps","Preview","createElement","customProps","markdown","buildWrongValueType","multiline","getIconForProperty","valuePreview","iconCell","paddingTop","titleCell","EntityPreview","getIdIcon","columnWidth","email","getPropertyColumnWidth","includeSubcollections","initialDisplayedProperties","excludedProperties","additionalColumns","subCollections","hiddenColumnIds","propertyKey","columnIds","column","p","c","columnId","subCollectionIds","getSubcollectionColumnId","subColId","search","shape","alpha","black","marginLeft","breakpoints","up","searchIcon","pointerEvents","inputRoot","minHeight","inputInput","transitions","create","inputActive","onTextSearch","searchText","setSearchText","active","setActive","handler","clearTimeout","clearText","event","toolbar","down","paddingRight","divider","actions","selectRoot","marginTop","paddingBottom","primary","useTheme","largeLayout","filterView","filterIsSet","clearFilter","sizeSelect","Select","evt","onSizeChanged","MenuListProps","disablePadding","style","elevation","InputBase","toUpperCase","useTableStyles","tableContainer","headerTypography","textTransform","header","secondary","tableRow","tableRowClickable","cellButtonsWrap","cellButtons","minWidth","cellButtonsId","textAlign","selectContainer","verticalLine","top","opacity","isSelected","isAllSelected","selectionEnabled","toggleEntitySelection","selectAll","onCopyClicked","onEditClicked","onDeleteClicked","editEnabled","deleteEnabled","anchorEl","setAnchorEl","openMenu","currentTarget","onCheckboxChange","onCheckboxChange1","onDeleteClick","onCopyClick","useCellStyles","tableCell","border","contain","removePadding","paper","align","fullWidth","fullHeight","light","selected","saved","success","iconsTop","arrow","centered","faded","maskImage","scrollable","TableCellInternal","focused","disabledTooltip","allowScroll","openPopup","select","showExpandIcon","createRef","isOverflowing","setIsOverflowing","getRowHeight","internalSaved","setInternalSaved","iconRef","focus","preventScroll","removeSavedState","doOpenPopup","cellRect","getBoundingClientRect","detail","onSelect","onFocus","onMeasure","contentRect","bounds","newOverflowingValue","cellClasses","measuredDiv","measureRef","isEqual","yup","addMethod","mapper","test","customFieldValidator","objectSchema","mapPropertyToYup","object","propertyContext","log","getYupStringSchema","getYupNumberSchema","getYupBooleanSchema","getYupMapObjectSchema","getYupArraySchema","getYupDateSchema","getYupGeoPointSchema","getYupReferenceSchema","parentProperty","childName","string","requiredMessage","enumToObjectEntries","nullable","notRequired","unique","min","max","matches","matchesMessage","trim","lowercase","uppercase","number","typeError","lessThan","moreThan","positive","negative","integer","date","boolean","uniqueInArray","arrayUniqueFields","hasUniqueInArrayModifier","useInputStyles","resize","outline","updateValue","internalValue","setInternalValue","focusedState","doUpdate","emptyInitialValue","selectionStart","selectionEnd","newValue","multiple","setPreventOutsideClick","valueType","setOpen","handleOpen","handleClose","validValue","parseFloat","chip","isEnumValueDisabled","numberInput","onBlur","propStringValue","numberValue","isNaN","regexp","checked","dateValue","params","MuiTextField","InputProps","disableUnderline","usedProperty","multiselect","onSingleValueSet","getReferenceFrom","onMultipleEntitiesSelected","selectedIds","valueNotSet","getPreviewSizeFrom","m","buildSingleReferenceField","buildMultipleReferenceField","dropZone","hasValue","activeDrop","borderColor","acceptDrop","rejectDrop","arrayEntry","arrayEntryHovered","boxSizing","thumbnailCloseIcon","zIndex","entityValues","previewSize","multipleFilesSupported","fileNameBuilder","file","fileName","storagePathBuilder","storagePath","warn","StorageUpload","onChange","previewSizeInput","autoFocus","metadata","internalInitialValue","getRandomId","initialValue","floor","random","Number","MAX_SAFE_INTEGER","items","indexOf","onExternalDrop","acceptedFiles","newInternalValue","removeDuplicates","onFileUploadComplete","uploadedPath","uploadPathOrDownloadUrl","postProcess","fieldValue","onClear","clearedStoragePathOrDownloadUrl","getRootProps","getInputProps","isDragActive","isDragAccept","isDragReject","useDropzone","accept","noClick","noKeyboard","onDrop","rootProps","helpText","renderProperty","child","StorageItemPreview","StorageUploadProgress","fill","snackbarContext","setError","mounted","upload","uploadFile","PropertyTableCellInternal","setFocused","onValueChange","useClearRestoreValue","setSaved","customField","Field","customPreview","isReadOnly","disabledMessage","validate","innerComponent","isAStorageProperty","numberProperty","PropertyTableCell","containerRef","x","y","onMove","relX","relY","onMouseDown","button","screenX","screenY","document","addEventListener","onMouseMove","onMouseUp","removeEventListener","update","left","setSize","useLayoutEffect","window","innerWidth","innerHeight","updateSize","buildEntry","onInternalIdAdded","includeAddButton","internalIdsMap","getHashValue","internalIdsRef","internalIds","setInternalIds","newInternalIds","hashValue","newInternalId","arrayHelpers","insertInEnd","newIds","remove","onDragEnd","destination","sourceIndex","destinationIndex","temp","move","droppableProvided","droppableSnapshot","droppableProps","innerRef","internalId","provided","snapshot","draggableProps","marginBottom","dragHandleProps","placeholder","longDescription","formStyles","inputLabel","shrinkInputLabel","showError","touched","includeDescription","shouldAlwaysRerender","shrink","MuiSelect","eventValue","borderTopLeftRadius","borderTopRightRadius","main","grey","nonActiveDrop","uploadItem","uploadItemSmall","tableMode","isSubmitting","isDraggingOver","noDragEventsBubbling","setInitialValue","moveItem","fromIndex","toIndex","allowInfinity","isMultiline","valueIsInfinity","Infinity","inputType","numValue","filledInput","rows","formControl","transform","SwitchFieldComponent","forwardRef","setFocus","SwitchField","sx","handleEntityClick","handleClickOpen","clearValue","seeEntityDetails","onClose","missingEntity","allProperties","buildEntityView","underlyingValueHasChanged","lastAddedId","setLastAddedId","buildPropertyField","partOfArray","typeInternal","setTypeInternal","typeFieldName","valueFieldName","field","form","setFieldTouched","setFieldValue","onEntryClick","entryValue","component","ReadOnlyField","ArrayEnumSelect","StorageUploadField","ArrayOfReferencesField","ArrayDefaultField","ArrayOneOfField","MapField","ReferenceField","DateTimeField","TextField","MarkdownField","componentProps","FieldComponent","FastField","customFieldProps","meta","getIn","errors","submitCount","cmsFieldProps","pickOnlySomeKeys","handleAddProperty","isHidden","entryKey","buildPickKeysSelect","ErrorFocus","isValidating","useFormikContext","errorElement","querySelector","scrollableParent","getScrollableParent","scrollTo","scrollTop","behavior","isScrollable","ele","hasScrollableContent","scrollHeight","clientHeight","overflowYStyle","getComputedStyle","overflowY","isOverflowHidden","parentNode","largePadding","buttons","oneOfInput","customId","idSetAutomatically","hasEnumValues","inputProps","className","endAdornment","variant","stickyButtons","backdropFilter","borderTop","container","EntityForm","onEntitySave","onDiscard","onModified","onValuesChanged","initialResolvedSchema","baseDataSourceValues","formRef","setCustomId","customIdError","setCustomIdError","savingError","setSavingError","initialValuesRef","initialValues","mustSetCustomId","underlyingChanges","latestValue","saveValues","formikActions","setSubmitting","savedEntityId","setTouched","uniqueFieldValidator","checkUniqueField","validationSchema","getYupEntitySchema","handleSubmit","dirty","modified","formValue","formFields","cmsFormFieldProps","buildButtons","ElementResizeListener","onResize","rafRef","objectRef","onResizeRef","_onResize","cancelAnimationFrame","requestAnimationFrame","onLoad","contentDocument","defaultView","alignSelf","popup","userSelect","popupInner","visibility","tableKey","columnIndex","onCellValueChange","popupLocation","setPopupLocation","windowSize","useWindowSize","initialPositionSet","draggableBoundingRect","useDraggable","getInitialLocation","normalizePosition","updatePopupLocation","newPosition","adaptResize","saveValue","handleChange","draggable","inlineEditing","displayedProperties","selectedCell","setSelectedCell","popupCell","setPopupCell","preventOutsideClick","additionalColumnsMap","aC","escFunction","keyCode","unselect","cell","onPopupClose","buildFilterEnumValues","buildFilterableFromProperty","auth","useAuthController","isGlobalAdmin","admin","newProps","k","onlyForGlobalAdmin","propertyCellRenderer","rowData","rowIndex","dataKey","inlineEditingEnabled","checkInlineEditing","isFocused","additionalCellRenderer","additionalColumn","dependencies","allColumns","getCellAlignment","icon","hoverOrOpen","sortable","cellRenderer","columns","popupFormField","DEFAULT_PAGE_SIZE","CollectionTable","CollectionTableInternal","toolbarActionsBuilder","tableRowActionsBuilder","onEntityClick","onColumnResize","hoverRow","initialFilter","initialSort","filterCombinations","textSearchEnabled","paginationEnabled","pagination","pageSize","setItemCount","setFilterValues","setSortBy","subcollectionColumns","subcollection","buttonContent","useColumnIds","onCellChanged","saveProps","saveEntityWithCallbacks","useBuildColumnsFromSchema","hideInTable","setSearchString","useCollectionFetch","loadNextPage","resetPagination","buildIdColumn","onRowClick","newSearchString","isFilterCombinationValid","indexes","sortKey","sortDirection","filterKeys","filtersCount","compositeIndex","every","dialogBody","onSingleEntitySelected","selectedEntityIds","selectedEntities","setSelectedEntities","entityOrEntitiesToDelete","onEntityDelete","onMultipleEntitiesDelete","other","entityOrEntities","setUsedEntityOrEntities","multipleEntities","setMultipleEntities","revisedEntityOrEntities","handleCancel","performDelete","deleteEntityWithCallbacks","handleOk","results","some","dialogTitle","additionalData","exportConfig","headers","getExportHeaders","exportableData","getExportableData","headersData","entryToCSVRow","h","csvData","downloadBlob","mergedData","processCSVValues","additional","childKey","getHeaders","flat","prefix","processCSVValue","getTime","String","replaceAll","filename","contentType","blob","Blob","URL","createObjectURL","pom","href","setAttribute","click","INITIAL_DOCUMENTS_LIMIT","dataRef","additionalDataRef","hasLargeAmountOfData","setHasLargeAmountOfData","fetchLargeDataAccepted","setFetchLargeDataAccepted","doDownload","downloadCSV","updateEntities","pendingDownload","additionalColumnsData","fetchAdditionalColumns","resolvedColumnsValues","onFetchError","needsToAcceptFetchAllData","onOkClicked","DEFAULT_PERMISSIONS","edit","delete","permission","checkHasPermissionOnEntity","collectionData","d","new1","isEntitySelected","isAllEntitiesSelected","EntityCollectionView","deleteEntityClicked","setDeleteEntityClicked","exportable","selectionController","useSelectionController","usedSelectionController","onNewClick","internalOnEntityDelete","_path","internalOnMultipleEntitiesDelete","canEdit","updatedFields","defaultSize","direction","vertical","horizontal","createEnabled","canCreate","canDelete","clickedEntity","addButton","multipleDeleteEnabled","extraActions","exportButton","card","computeTopNavigation","allGroups","ReactLink","buildNavigationCard","baseTableCss","operationLabels","in","multipleSelectOperations","possibleOperations","fieldOperation","setOperation","op","val","prevOpIsArray","newOpIsArray","hasNewValue","updateFilter","parseInt","Tooltip","valueSetToTrue","valueSet","headerInternal","headerTitle","flexShrink","headerTitleInternal","headerIcon","headerIconButton","TableHeader","TableHeaderInternal","sort","onColumnSort","onFilterUpdate","handleSettingsClick","filterForProperty","hideFilter","filterInternal","setFilterInternal","submit","reset","filterConfig","filterValue","setFilterValue","createFilterField","PIXEL_NEXT_PAGE_OFFSET","alignText","idColumnBuilder","onResetPagination","onEndReached","frozenIdColumn","checkFilterCombination","emptyMessage","onSortByUpdate","tableSize","setTableSize","tableRef","scrollRef","endReachedTimestampRef","getClass","disableCustomStyles","scrollToTop","isDesc","isAsc","newSort","newSortProperty","newSortBy","setIsSelected","checkbox","querySelectorAll","getElementsByTagName","resetSort","onScroll","scrollUpdateWasRequested","prudentTime","now","onEndReachedInternal","clickRow","headerRenderer","filterForThisProperty","onInternalFilterUpdate","newFilterValue","isNewFilterCombinationValid","onBaseTableColumnResize","buildErrorView","buildEmptyView","currentColumn","archived","textColor","useBreadcrumbsContext","HomePage","customRoutes","buildCMSViewRoute","cmsView","collectionRoutes","urlPath","homeRoute","notFoundRoute","breadcrumbsContext","logo","closeDrawer","ungroupedNavigationViews","createNavigationListItem","NavLink","isActive","py","logoComponent","appbar","menuButton","breadcrumb","shadows","handleDrawerToggle","toolbarExtraWidget","initial","displayName","photoURL","drawerPaper","Drawer","drawerOpen","setDrawerOpen","UsedDrawer","FireCMSDrawer","MuiDrawer","keepMounted","node","rect","containerWindow","ownerWindow","fakeTransform","computedStyle","getPropertyValue","offsetX","transformValues","getTranslateValue","webkitTransform","SlideFade","inProp","timeout","onExitAnimation","childrenRef","handleRefIntermediary","useForkRef","handleRef","normalizedTransitionCallback","callback","isAppearing","handleEnter","setTranslateValue","reflow","handleEntering","transitionProps","getTransitionProps","webkitTransition","easing","easeOut","handleExit","sharp","handleExited","updatePosition","handleResize","debounce","clear","childProps","cloneElement","duration","WebkitOverflowScrolling","paperAnchorRight","offsetPosition","modal","defaultTransitionDuration","enter","exit","SideDialogDrawer","drawer","slidingDrawer","transitionDuration","Backdrop","CONTAINER_WIDTH","CONTAINER_FULL_WIDTH","TAB_WIDTH","lazy","useStylesSide","containerWidth","containerWide","subcollectionPanel","borderLeft","tabsContainer","tabBar","tab","onModifiedValues","resolvedWidth","setStatus","currentEntityId","setCurrentEntityId","setReadOnly","tabsPosition","setTabsPosition","modifiedValues","setModifiedValues","returnValue","beforeunload","customViewsCount","findIndex","customViewsView","colIndex","subCollectionsViews","absolutePath","getSelectedSubpath","onSideTabClick","ev","when","nextLocation","setNextLocation","UNSAFE_NavigationContext","blocker","retry","unblock","block","tx","autoUnblockingTx","navigationWasBlocked","schemaName","Dialog","DialogTitle","DialogContent","DialogContentText","DialogActions","Button","allPanels","panel","drawerCloseRequested","setDrawerCloseRequested","handleNavigationOk","handleNavigationCancel","useNavigationUnsavedChangesDialog","handleDrawerCloseOk","handleDrawerCloseCancel","createCMSDefaultTheme","primaryColor","secondaryColor","original","createTheme","pink","red","A400","h6","components","MuiButton","styleOverrides","MuiTableRow","MuiTypography","MuiInputBase","collectionView","enumValueConfig","additionalColumnDelegate","useFirebaseAuthDelegate","firebaseApp","signInOptions","loggedUser","setLoggedUser","authProviderError","setAuthProviderError","setInitialLoading","setLoginSkipped","getAuth","currentUser","onAuthStateChanged","updateFirebaseUser","firebaseUser","getProviderOptions","providerId","option","provider","googleLogin","GoogleAuthProvider","scopes","scope","addScope","customParameters","setCustomParameters","signInWithPopup","anonymousLogin","signInAnonymously","appleLogin","OAuthProvider","doOauthLogin","facebookLogin","FacebookAuthProvider","githubLogin","GithubAuthProvider","microsoftLogin","twitterLogin","TwitterAuthProvider","emailPasswordLogin","password","signInWithEmailAndPassword","registerWithPasswordEmail","createUserWithEmailAndPassword","getSignInMethodsForEmail","fetchSignInMethodsForEmail","authError","onSignOut","skipLogin","textSearchController","firestoreRef","firestore","getFirestore","createEntityFromSchema","doc","firestoreToCMSModel","sanitizeData","getCMSPathFromFirestorePath","collectionReference","queryParams","filterParameter","whereClause","cmsToFirestoreModel","orderByClause","startAfterClause","limitClause","query","getAndBuildEntity","getDoc","docSnapshot","ids","promises","performTextSearch","buildQuery","getDocs","docs","onSnapshot","next","updatedFirestoreValues","updateAutoValues","serverTimestamp","FirestoreGeoPoint","documentReference","setDoc","merge","deleteDoc","q","snapshots","traverse","Timestamp","toDate","DocumentReference","fsPath","to","lastIndexOf","substring","setStorage","getStorage","urlsCache","usedFilename","uploadBytes","firebaseConfig","onFirebaseInit","setFirebaseApp","firebaseConfigLoading","setFirebaseConfigLoading","configError","setConfigError","firebaseConfigError","setFirebaseConfigError","initFirebase","initialisedFirebaseApp","initializeApp","process","fetch","response","json","googleIcon","appleIcon","githubIcon","facebookIcon","microsoftIcon","twitterIcon","allowSkipLogin","NoUserComponent","disableSignupScreen","modeState","passwordLoginSelected","setPasswordLoginSelected","resolvedSignInOptions","errorView","ignoredCodes","code","projectId","notAllowedMessage","buildOauthLoginButtons","justifyItems","pl","passwordRef","setEmail","availableProviders","setAvailableProviders","setPassword","shouldShowEmail","loginMode","otherProvidersMode","registrationMode","onBackPressed","handleEnterEmail","handleEnterPassword","handleRegistration","providers","DEFAULT_SIGN_IN_OPTIONS","PROVIDER_ID","LoginViewProps","useInitialiseFirebase","useFirestoreDataSource","useFirebaseStorageSource","hits","hit","objectID"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIA,MAAMA,aAAgB,GAAA;AAAA,EAClBC,MAAQ,EAAA,KAAA;AAAA,EACRC,OAAO,MAAM;AAAA,GACZ;AAAA,EACDC,IAAAA,EAAM,CAACC,KAGD,KAAA;AAAA,GACL;AARiB,CAAA,CAAA;AAWTC,MAAAA,eAAAA,GAAkBC,cAAMC,CAAAA,aAAAA,CAAkCP,aAAxC,CAAA,CAAA;AAExB,MAAMQ,mBAA6B,CAAC;AAAA,EAAEC,QAAAA;AAAAA,CAAe,KAAA;AAElD,EAAA,MAAA,CAACR,MAAAA,EAAQS,SAAaC,CAAAA,GAAAA,QAAAA,CAAS,KAAD,CAAA,CAAA;AAC9B,EAAA,MAAA,CAACC,KAAAA,EAAOC,QAAYF,CAAAA,GAAAA,QAAAA,CAA6BG,KAArB,CAAA,CAAA,CAAA;AAC5B,EAAA,MAAA,CAACC,OAAAA,EAASC,UAAcL,CAAAA,GAAAA,QAAAA,CAA6BG,KAArB,CAAA,CAAA,CAAA;AACtC,EAAA,MAAM,CAACG,IAAAA,EAAMC,OAAWP,CAAAA,GAAAA,QAAAA,CAA0CG,KAAlC,CAAA,CAAA,CAAA;AAE1BZ,EAAAA,MAAAA,QAAQ,MAAM;AAChBQ,IAAAA,SAAAA,CAAU,KAAD,CAAA,CAAA;AACTG,IAAAA,QAAAA,CAASC,KAAD,CAAA,CAAA,CAAA;AACRE,IAAAA,UAAAA,CAAWF,KAAD,CAAA,CAAA,CAAA;AACVI,IAAAA,OAAAA,CAAQJ,KAAD,CAAA,CAAA,CAAA;AAAA,GAJX,CAAA;AAOA,EAAMX,MAAAA,IAAAA,GAAO,CAACC,KAIR,KAAA;AACI,IAAA,MAAA;AAAA,MAAEa,IAAAA,EAAAA,KAAAA;AAAAA,MAAMF,OAAAA,EAAAA,QAAAA;AAAAA,MAASH,KAAAA,EAAAA,MAAAA;AAAAA,KAAUR,GAAAA,KAAAA,CAAAA;AACjCc,IAAAA,OAAAA,CAAQD,KAAD,CAAA,CAAA;AACPD,IAAAA,UAAAA,CAAWD,QAAD,CAAA,CAAA;AACVF,IAAAA,QAAAA,CAASD,MAAD,CAAA,CAAA;AACRF,IAAAA,SAAAA,CAAU,IAAD,CAAA,CAAA;AAAA,GATb,CAAA;AAaI,EAAA,uBAAAS,IAAA,CAAC,gBAAgB,QAAjB,EAAA;AAAA,IACI,KAAO,EAAA;AAAA,MACHlB,MAAAA;AAAAA,MACAC,KAAAA;AAAAA,MACAC,IAAAA;AAAAA,KAJR;AAAA,IAQKM,QAAAA,EAAAA,CAAAA,QAED,kBAAAW,GAAA,CAAC,QAAD,EAAA;AAAA,MAAU,IAAMnB,EAAAA,MAAAA;AAAAA,MACN,gBAAkB,EAAA,GAAA;AAAA,MAClB,OAAA,EAAUoB,OAAMnB,KAF1B,EAAA;AAAA,MAAA,QAAA,uBAGK,KAAD,EAAA;AAAA,QAAO,SAAW,EAAA,CAAA;AAAA,QACX,OAAQ,EAAA,QAAA;AAAA,QACR,OAAA,EAAUmB,OAAMnB,KAFvB,EAAA;AAAA,QAGO,QAAUe,EAAAA,IAAAA;AAAAA,QAHjB,QAAA,EAAA,CAKKL,KAAS,oBAAAQ,GAAA,CAAA,KAAA,EAAA;AAAA,UAAMR,QAAAA,EAAAA,KAAAA;AAAAA,SALpB,CAAA,EAMKG,OAAW,oBAAAK,GAAA,CAAA,KAAA,EAAA;AAAA,UAAML,QAAAA,EAAAA,OAAAA;AAAAA,SANtB,CAAA,CAAA;AAAA,OAAA,CAAA;AAAA,KAbR,CAAA,CAAA;AAAA,GADJ,CAAA,CAAA;AA2BH,CAAA;;AClEYO,MAAAA,sBAAAA,GAAyBhB,eAAMC,aAA8B,CAAA;AAAA,EACtEgB,sBAAsB,EAAM;AAAA,EAC5BC,mBAAmB,EAAM;AAAA,EACzBC,YAAY,EAAM;AAAA,EAClBC,eAAe,EAAM;AAAA,EACrBC,gBAAgB,EAAM;AAAA,EACtBC,oBAAoB,EAAA;AANkD,CAApC,CAAA,CAAA;AAc/B,MAAMC,yBAA4E,CAAC;AAAA,EACIpB,QAAAA;AAAAA,EACGqB,GAAAA,OAAAA;AAAAA,CACD,KAAA;AAGxF,EAAA,uBAAAV,GAAA,CAAC,uBAAuB,QAAxB,EAAA;AAAA,IACI,KAAOU,EAAAA,OAAAA;AAAAA,IAENrB,QAAAA;AAAAA,GAJT,CAAA,CAAA;AAOH,CAAA;;ACxBD,MAAMsB,8BAAiC,GAAA;AAAA,EACnCC,aAAa,EADsB;AAAA,EAEnCC,GAAAA,EAAK,CAAC7B,KAEA,KAAA;AAAA,GACL;AALkC,CAAA,CAAA;AAS1B8B,MAAAA,iBAAAA,GAAoB5B,cAAMC,CAAAA,aAAAA,CAAqCwB,8BAA3C,CAAA,CAAA;AAO1B,MAAMI,sBAA0D,CAAC;AAAA,EAAE1B,QAAAA;AAAAA,CAAe,KAAA;AAE/E,EAAA,MAAA,CAACuB,WAAAA,EAAaI,cAAkBzB,CAAAA,GAAAA,QAAAA,CAA4B,EAApB,CAAA,CAAA;AAE9C,EAAMsB,MAAAA,GAAAA,GAAM,CAAC7B,KAEP,KAAA;AACFgC,IAAAA,cAAAA,CAAehC,MAAM4B,WAAP,CAAA,CAAA;AAAA,GAHlB,CAAA;AAOI,EAAA,uBAAAZ,GAAA,CAAC,kBAAkB,QAAnB,EAAA;AAAA,IACI,KAAO,EAAA;AAAA,MACHY,WAAAA;AAAAA,MACAC,GAAAA;AAAAA,KAHR;AAAA,IAMKxB,QAAAA;AAAAA,GAPT,CAAA,CAAA;AAUH,CAAA;;ACtCD,MAAM4B,kBAAgC,GAAA;AAAA,EAClCC,IAAM,EAAA,OAAA;AAAA,EACNC,OAAAA,EAAS,CAACD,IAA2B,KAAA;AAAA,GACpC;AAAA,EACDE,YAAY,MAAM;AAAA,GACjB;AALiC,CAAA,CAAA;AASzBC,MAAAA,gBAAAA,GAAmBnC,cAAMC,CAAAA,aAAAA,CAAyB8B,kBAA/B,CAAA,CAAA;AAOzB,MAAMK,eAA4C,CAAC;AAAA,EAAEjC,QAAAA;AAAAA,CAAe,KAAA;AAEvE,EAAMkC,MAAAA,oBAAAA,GAAuBC,cAAc,8BAAD,CAAA,CAAA;AACpCC,EAAAA,MAAAA,sBAAAA,GAAyCC,YAAaC,CAAAA,OAAAA,CAAQ,mBAArB,CAAA,IAA6C,OAAOD,YAAaC,CAAAA,OAAAA,CAAQ,mBAArB,CAAA,KAA8C,MAAS,GAAA,IAAA,CAAA;AAC1J,EAAA,MAAMC,kBAAkBH,sBAA0BF,IAAAA,oBAAAA,CAAAA;AAClD,EAAA,MAAM,CAACL,IAAMC,EAAAA,OAAAA,CAAAA,GAAW5B,QAA2BqC,CAAAA,eAAAA,GAAkB,SAAS,OAA9C,CAAA,CAAA;AAEhCC,EAAAA,SAAAA,CAAU,MAAM;AACZV,IAAQS,OAAAA,CAAAA,eAAAA,GAAkB,SAAS,OAA5B,CAAA,CAAA;AAAA,GACV,EAAE,CAACA,eAAD,CAFM,CAAA,CAAA;AAIHR,EAAAA,MAAAA,aAAa,MAAM;AACjBF,IAAAA,IAAAA,SAAS,OAAS,EAAA;AAClB,MAAA,IAAI,CAACK,oBAAAA;AACDG,QAAaI,YAAAA,CAAAA,OAAAA,CAAQ,qBAAqB,MAA1C,CAAA,CAAA;AAAA;AAEAJ,QAAAA,YAAAA,CAAaK,WAAW,mBAAxB,CAAA,CAAA;AACJZ,MAAAA,OAAAA,CAAQ,MAAD,CAAA,CAAA;AAAA,KACJ,MAAA;AACH,MAAII,IAAAA,oBAAAA;AACAG,QAAaI,YAAAA,CAAAA,OAAAA,CAAQ,qBAAqB,OAA1C,CAAA,CAAA;AAAA;AAEAJ,QAAAA,YAAAA,CAAaK,WAAW,mBAAxB,CAAA,CAAA;AACJZ,MAAAA,OAAAA,CAAQ,OAAD,CAAA,CAAA;AAAA,KACV;AAAA,GAbL,CAAA;AAiBI,EAAA,uBAAAnB,GAAA,CAAC,iBAAiB,QAAlB,EAAA;AAAA,IACI,KAAO,EAAA;AAAA,MACHkB,IAAAA;AAAAA,MACAC,OAAAA;AAAAA,MACAC,UAAAA;AAAAA,KAJR;AAAA,IAOK/B,QAAAA;AAAAA,GART,CAAA,CAAA;AAWH,CAAA;;ACxDM,SAAA,+BAAA,CAAyC2C,CAAmB,EAAA;AAC/D,EAAOC,OAAAA,kBAAAA,CAAmBC,mBAAoBF,CAAAA,CAAD,CAApB,CAAA,CAAA;AAC5B,CAAA;AAEM,SAAA,kBAAA,CAA4BA,CAAW,EAAA;AAC1C,EAAIA,IAAAA,CAAAA,CAAEG,WAAW,GAAb,CAAA;AACA,IAAOH,OAAAA,CAAAA,CAAEI,MAAM,CAAR,CAAA,CAAA;AAAA;AACN,IAAOJ,OAAAA,CAAAA,CAAAA;AACf,CAAA;AAEM,SAAA,mBAAA,CAA6BA,CAAW,EAAA;AACvCA,EAAAA,IAAAA,CAAAA,CAAEK,SAAS,GAAX,CAAA;AACA,IAAOL,OAAAA,CAAAA,CAAEI,KAAM,CAAA,CAAA,EAAG,CAAX,CAAA,CAAA,CAAA;AAAA;AACN,IAAOJ,OAAAA,CAAAA,CAAAA;AACf,CAAA;AAwBM,SAAA,mBAAA,CAAgCM,MAAcC,WAAmE,EAAA;AAEpH,EAAA,IAAI,CAACA,WAAAA;AACD,IAAO7C,OAAAA,KAAAA,CAAAA,CAAAA;AAEL8C,EAAAA,MAAAA,QAAWC,GAAAA,+BAAAA,CAAgCH,IAAD,CAAA,CAAOI,MAAM,GAA5C,CAAA,CAAA;AACjB,EAAIF,IAAAA,QAAAA,CAASG,MAAS,GAAA,CAAA,KAAM,CAAG,EAAA;AAC3B,IAAMC,MAAAA,KAAAA,CAAO,yDAAwDN,IAA1D,CAAA,CAAA,CAAA,CAAA;AAAA,GACd;AAEMO,EAAAA,OAAAA,oCAAqCJ,CAAAA,+BAAAA,CAAgCH,IAAD,CAAA,EAAQC,WAAxC,CAAA,CAAA;AAE9C,CAAA;AAED,SAAA,oCAAA,CAAgFD,MAAcQ,eAAmE,EAAA;AAEvJN,EAAAA,MAAAA,QAAWC,GAAAA,+BAAAA,CAAgCH,IAAD,CAAA,CAAOI,MAAM,GAA5C,CAAA,CAAA;AACjB,EAAMK,MAAAA,mBAAAA,GAAsBC,+BAA+BR,QAAD,CAAA,CAAA;AAE1D,EAAIS,IAAAA,MAAAA,CAAAA;AACJ,EAAA,KAAA,IAASC,CAAI,GAAA,CAAA,EAAGA,CAAIH,GAAAA,mBAAAA,CAAoBJ,QAAQO,CAAK,EAAA,EAAA;AACjD,IAAA,MAAMC,qBAAqBJ,mBAAoBG,CAAAA,CAAAA,CAAAA,CAAAA;AAC/C,IAAA,MAAME,kBAAkBN,eAAmBA,IAAAA,eAAAA,CAAgBO,KAAMC,CAAUA,KAAAA,KAAAA,KAAAA,CAAMhB,SAASa,kBAA/C,CAAA,CAAA;AAE3C,IAAA,IAAIC,eAAiB,EAAA;AAEbD,MAAAA,IAAAA,uBAAuBb,IAAM,EAAA;AAC7BW,QAASG,MAAAA,GAAAA,eAAAA,CAAAA;AAAAA,OACZ,MAAA,IAAUA,gBAAgBG,cAAgB,EAAA;AACjCC,QAAAA,MAAAA,OAAUlB,GAAAA,IAAAA,CAAKmB,OAAQN,CAAAA,kBAAAA,EAAoB,EAAjC,CAAA,CAAqCT,KAAM,CAAA,GAA3C,CAAgDN,CAAAA,KAAAA,CAAM,CAAtD,CAAA,CAAyDsB,KAAK,GAA9D,CAAA,CAAA;AAChB,QAAA,IAAIF,QAAQb,MAAS,GAAA,CAAA;AACjBM,UAASJ,MAAAA,GAAAA,oCAAAA,CAAqCW,OAASJ,EAAAA,eAAAA,CAAgBG,cAA1B,CAAA,CAAA;AAAA,OACpD;AAAA,KACJ;AACD,IAAIN,IAAAA,MAAAA;AAAQ,MAAA,MAAA;AAAA,GACf;AACD,EAAOA,OAAAA,MAAAA,CAAAA;AACV,CAAA;AAOM,SAAA,8BAAA,CAAwCT,QAA8B,EAAA;AACzE,EAAA,MAAMmB,OAAUnB,GAAAA,QAAAA,CAASG,MAAS,GAAA,CAAA,IAAKH,SAASG,MAAS,GAAA,CAAA,KAAM,CAAIH,GAAAA,QAAAA,CAASoB,MAAO,CAAA,CAAA,EAAGpB,QAASG,CAAAA,MAAAA,GAAS,CAArC,CAA0CH,GAAAA,QAAAA,CAAAA;AAE7G,EAAA,MAAMG,SAASgB,OAAQhB,CAAAA,MAAAA,CAAAA;AACvB,EAAA,MAAMM,SAAmB,EAAzB,CAAA;AACA,EAAA,KAAA,IAASC,IAAIP,MAAQO,EAAAA,CAAAA,GAAI,CAAGA,EAAAA,CAAAA,GAAIA,IAAI,CAAG,EAAA;AACnCD,IAAOY,MAAAA,CAAAA,IAAAA,CAAKF,QAAQvB,KAAM,CAAA,CAAA,EAAGc,CAAjB,CAAoBQ,CAAAA,IAAAA,CAAK,GAAzB,CAAZ,CAAA,CAAA;AAAA,GACH;AACD,EAAOT,OAAAA,MAAAA,CAAAA;AAEV,CAAA;AAcM,SAAA,oBAAA,CACH7C,mBACA0D,kBACmB,EAAA;AAEnB,EAAA,MAAMC,aAAa3D,iBAAkB2D,CAAAA,UAAAA,CAAAA;AACrC,EAAA,IAAI,CAACA,UAAAA;AACD,IAAA,MAAMnB,MAAM,+EAAD,CAAA,CAAA;AAEf,EAAA,MAAMoB,oBAA0C,CAC5C,GAAGD,UAAWxB,CAAAA,WAAAA,CAAY0B,IAAIC,CAAe,UAAA,MAAA;AAAA,IACzCC,GAAK/D,EAAAA,iBAAAA,CAAkBgE,sBAAuBF,CAAAA,UAAAA,CAAW5B,IAApD,CAAA;AAAA,IACL+B,MAAMH,UAAWG,CAAAA,IAAAA;AAAAA,IACjBC,aAAaJ,UAAWI,CAAAA,WAAAA;AAAAA,IACxBC,OAAOL,UAAWK,CAAAA,KAAAA;AAAAA,GAJnB,CAAA,CAAA,EAMH,GAAIR,CAAAA,UAAAA,CAAWS,KAAS,IAAA,EAAIP,EAAAA,GAAAA,CAAIQ,CAC5BX,IAAAA,KAAAA,kBAAAA,IAAsB,CAACW,IAAAA,CAAKC,kBACrB,GAAA;AAAA,IACCP,GAAK/D,EAAAA,iBAAAA,CAAkBuE,eAAgBC,CAAAA,KAAAA,CAAMC,OAAQJ,CAAAA,IAAAA,CAAKnC,IAAnB,CAAA,GAA2BmC,IAAKnC,CAAAA,IAAAA,CAAK,CAAKmC,CAAAA,GAAAA,IAAAA,CAAKnC,IAAjF,CAAA;AAAA,IACL+B,MAAMI,IAAKJ,CAAAA,IAAAA;AAAAA,IACXC,aAAaG,IAAKH,CAAAA,WAAAA;AAAAA,IAClBC,OAAOE,IAAKF,CAAAA,KAAAA;AAAAA,GAJb,GAMD7E,MARP,CASEoF,CAAAA,MAAAA,CAAQL,UAAS,CAAC,CAACA,IATrB,CAPyC,CAAA,CAAA;AAmBhD,EAAA,MAAMM,SAAmBH,KAAMI,CAAAA,IAAAA,CAAK,IAAIC,GACpCC,CAAAA,MAAAA,CAAOC,OAAOnB,iBAAd,CAAA,CAAiCC,IAAImB,CAAKA,CAAAA,KAAAA,CAAAA,CAAEb,KAA5C,CAAmDO,CAAAA,MAAAA,CAAOO,OAA1D,CACFF,CAAAA,CAAAA,QAFuB,CAAA,CAAA;AAIlB,EAAA,OAAA;AAAA,IAAEnB,iBAAAA;AAAAA,IAAmBe,MAAAA;AAAAA,GAA5B,CAAA;AACH;;AC/GM,SAAA,oCAAA,CAAgF/F,KAKtD,EAAA;AAEvB,EAAA,MAAA;AAAA,IACFsD,IAAAA;AAAAA,IACAC,WAAAA;AAAAA,IACA+C,eAAAA;AAAAA,GACAtG,GAAAA,KAAAA,CAAAA;AAEEwD,EAAAA,MAAAA,QAAWC,GAAAA,+BAAAA,CAAgCH,IAAD,CAAA,CAAOI,MAAM,GAA5C,CAAA,CAAA;AACjB,EAAMK,MAAAA,mBAAAA,GAAsBC,+BAA+BR,QAAD,CAAA,CAAA;AAEpDS,EAAAA,MAAAA,SAAuC,EAA7C,CAAA;AACA,EAAA,KAAA,IAASC,CAAI,GAAA,CAAA,EAAGA,CAAIH,GAAAA,mBAAAA,CAAoBJ,QAAQO,CAAK,EAAA,EAAA;AACjD,IAAA,MAAMC,qBAAqBJ,mBAAoBG,CAAAA,CAAAA,CAAAA,CAAAA;AAE/C,IAAA,MAAMgB,aAAa3B,WAAeA,IAAAA,WAAAA,CAAYc,KAAMC,CAAUA,KAAAA,KAAAA,KAAAA,CAAMhB,SAASa,kBAA3C,CAAA,CAAA;AAElC,IAAA,IAAIe,UAAY,EAAA;AACNqB,MAAAA,MAAAA,cAAAA,GAAiBD,mBAAmBA,eAAgB3C,CAAAA,MAAAA,GAAS,IAC5D2C,eAAkB,GAAA,GAAA,GAAMpB,UAAW5B,CAAAA,IAAAA,GACpC4B,UAAW5B,CAAAA,IAAAA,CAAAA;AAEjBW,MAAAA,MAAAA,CAAOY,IAAK,CAAA;AAAA,QACRhE,IAAM,EAAA,YAAA;AAAA,QACNyC,IAAMiD,EAAAA,cAAAA;AAAAA,QACNrB,UAAAA;AAAAA,OAHJ,CAAA,CAAA;AAKA,MAAMsB,MAAAA,aAAAA,GAAgB/C,gCAAgCA,+BAAgCH,CAAAA,IAAD,EAAOmB,OAAQN,CAAAA,kBAAAA,EAAoB,EAAlE,CAAD,CAAA,CAAA;AACrD,MAAMsC,MAAAA,YAAAA,GAAeD,cAAc7C,MAAS,GAAA,CAAA,GAAI6C,cAAc9C,KAAM,CAAA,GAApB,IAA2B,EAA3E,CAAA;AACA,MAAI+C,IAAAA,YAAAA,CAAa9C,SAAS,CAAG,EAAA;AACzB,QAAA,MAAM+C,WAAWD,YAAa,CAAA,CAAA,CAAA,CAAA;AAC9B,QAAME,MAAAA,QAAAA,GAAWJ,iBAAiB,GAAMG,GAAAA,QAAAA,CAAAA;AACxCzC,QAAAA,MAAAA,CAAOY,IAAK,CAAA;AAAA,UACRhE,IAAM,EAAA,QAAA;AAAA,UACN6F,QAAAA;AAAAA,UACApD,IAAMiD,EAAAA,cAAAA;AAAAA,UACNK,gBAAkB1B,EAAAA,UAAAA;AAAAA,SAJtB,CAAA,CAAA;AAMA,QAAIuB,IAAAA,YAAAA,CAAa9C,SAAS,CAAG,EAAA;AACnBa,UAAAA,MAAAA,UAAUiC,YAAarD,CAAAA,KAAAA,CAAM,CAAnB,CAAA,CAAsBsB,KAAK,GAA3B,CAAA,CAAA;AAChB,UAAMmC,MAAAA,WAAAA,GAAc3B,WAAW4B,MAAOtB,CAAAA,KAAAA,CAAAA;AACtC,UAAA,MAAMuB,aAAaF,WAAeA,IAAAA,WAAAA,CAAYxC,KAAMC,CAAUA,KAAAA,KAAAA,KAAAA,CAAMhB,SAASkB,OAA3C,CAAA,CAAA;AAClC,UAAA,IAAIuC,UAAY,EAAA;AACNzD,YAAAA,MAAAA,KAAAA,GAAOgD,mBAAmBA,eAAgB3C,CAAAA,MAAAA,GAAS,IAClD2C,eAAkB,GAAA,GAAA,GAAMS,UAAWzD,CAAAA,IAAAA,GACpCyD,UAAWzD,CAAAA,IAAAA,CAAAA;AACjBW,YAAAA,MAAAA,CAAOY,IAAK,CAAA;AAAA,cACRhE,IAAM,EAAA,aAAA;AAAA,cACNyC,IAAMA,EAAAA,KAAAA;AAAAA,cACNmC,IAAMsB,EAAAA,UAAAA;AAAAA,aAHV,CAAA,CAAA;AAAA,WAKH,MAAA,IAAU7B,WAAWX,cAAgB,EAAA;AAClCN,YAAOY,MAAAA,CAAAA,IAAAA,CAAK,GAAGmC,oCAAqC,CAAA;AAAA,cAChD1D,IAAMkB,EAAAA,OAAAA;AAAAA,cACNqC,WAAAA;AAAAA,cACAtD,aAAa2B,UAAWX,CAAAA,cAAAA;AAAAA,cACxB+B,eAAiBK,EAAAA,QAAAA;AAAAA,aAJ8B,CAAnD,CAAA,CAAA;AAAA,WAMH;AAAA,SACJ;AAAA,OACJ;AACD,MAAA,MAAA;AAAA,KACH;AAAA,GAEJ;AACD,EAAO1C,OAAAA,MAAAA,CAAAA;AACV;;ACvFD,MAAMgD,YAAe,GAAA,KAAA,CAAA;AAERC,MAAAA,4BAAAA,GAA+B,CAAC9F,iBAA+D,KAAA;AAElG+F,EAAAA,MAAAA,WAAWC,WAAjB,EAAA,CAAA;AACMC,EAAAA,MAAAA,WAAWC,WAAjB,EAAA,CAAA;AACA,EAAMC,MAAAA,WAAAA,GAAcC,OAAgB,KAAV,CAAA,CAAA;AACpB,EAAA,MAAA,CAACC,UAAAA,EAAYC,aAAiBnH,CAAAA,GAAAA,QAAAA,CAAiC,EAAzB,CAAA,CAAA;AAE5C,EAAMgD,MAAAA,WAAAA,GAAcnC,kBAAkB2D,UAAYxB,EAAAA,WAAAA,CAAAA;AAElD,EAAA,MAAMoE,QAAQR,QAASQ,CAAAA,KAAAA,CAAAA;AACvB,EAAA,MAAMC,YAAeD,GAAAA,KAAAA,IAASA,KAAME,CAAAA,aAAAA,GAAgBF,MAAME,aAAgBV,GAAAA,QAAAA,CAAAA;AAEpEW,EAAAA,MAAAA,YAAAA,GAAeC,WAAY,CAAA,CAACC,SAAsC,KAAA;AACpEN,IAAAA,aAAAA,CAAcM,SAAD,CAAA,CAAA;AACb5G,IAAAA,iBAAAA,CAAkB6G,yBAAyBD,SAA3C,CAAA,CAAA;AAAA,GAF4B,EAG7B,EAH6B,CAAA,CAAA;AAKhCnF,EAAAA,SAAAA,CAAU,MAAM;AACRzB,IAAAA,IAAAA,kBAAkBmG,WAAa,EAAA;AAC/B,MAAIJ,IAAAA,QAAAA,EAAUQ,KAASA,IAAAA,KAAAA,CAAMO,MAAQ,EAAA;AAC3BC,QAAAA,MAAAA,aAAaR,KAAMO,CAAAA,MAAAA,CAAAA;AACzBJ,QAAAA,YAAAA,CAAaK,UAAD,CAAA,CAAA;AAAA,OACT,MAAA;AACHL,QAAAA,YAAAA,CAAa,EAAD,CAAA,CAAA;AAAA,OACf;AAAA,KACJ;AAAA,KACF,CAACX,QAAAA,EAAUQ,KAAOvG,EAAAA,iBAAAA,CAAkBmG,WAApC,CATM,CAAA,CAAA;AAYT1E,EAAAA,SAAAA,CAAU,MAAM;AACZ,IAAIU,IAAAA,WAAAA,IAAe,CAACgE,WAAAA,CAAYa,OAAS,EAAA;AACjChH,MAAAA,IAAAA,iBAAkBiH,CAAAA,mBAAAA,CAAoBlB,QAASmB,CAAAA,QAA/C,CAA0D,EAAA;AACpDC,QAAAA,MAAAA,OAAAA,GAAUpB,QAASqB,CAAAA,IAAAA,KAAU,CAAGvB,CAAAA,EAAAA,YAAAA,CAAAA,CAAAA,CAAAA;AAChCwB,QAAAA,MAAAA,sBAAyBrH,GAAAA,iBAAAA,CAAkBsH,iBAAkBvB,CAAAA,QAAAA,CAASmB,QAA7C,CAAA,CAAA;AACzBb,QAAAA,MAAAA,WAAakB,GAAAA,sBAAAA,CAAuBF,sBAAwBlF,EAAAA,WAAAA,EAAagF,OAAtC,CAAA,CAAA;AACzCT,QAAAA,YAAAA,CAAaL,WAAD,CAAA,CAAA;AAAA,OACf;AACDF,MAAAA,WAAAA,CAAYa,OAAU,GAAA,IAAA,CAAA;AAAA,KACzB;AAAA,GACF,EAAA,CAACjB,QAAU5D,EAAAA,WAAAA,EAAakE,UAAxB,CAVM,CAAA,CAAA;AAYT,EAAM3H,MAAAA,KAAAA,GAAQiI,YAAY,MAAM;AAE5B,IAAA,IAAIN,WAAW9D,MAAW,KAAA,CAAA;AACtB,MAAA,OAAA;AAEEiF,IAAAA,MAAAA,aAAAA,GAAgBnB,UAAWA,CAAAA,UAAAA,CAAW9D,MAAS,GAAA,CAAA,CAAA,CAAA;AAC/CkF,IAAAA,MAAAA,cAAAA,GAAiB1B,QAAUQ,EAAAA,KAAAA,IAASA,KAAMO,CAAAA,MAAAA,CAAAA;AAChD,IAAIW,IAAAA,cAAAA,IAAkBA,cAAelF,CAAAA,MAAAA,GAAS,CAAG,EAAA;AAC7C,MAAsB,CAAC,GAAGkF,eAAezF,KAAM,CAAA,CAAA,EAAG,EAAxB,CAAJ,EAAA;AAEtBiE,MAAAA,QAAAA,CAAS,CAAD,CAAA,CAAA,CAAA;AAAA,KACL,MAAA;AACG7C,MAAAA,MAAAA,OAAUpD,GAAAA,iBAAAA,CAAkBgE,sBAAuBwD,CAAAA,aAAAA,CAActF,IAAvD,CAAA,CAAA;AAEhB+D,MAAAA,QAAAA,CAAS7C,OAAS,EAAA;AAAA,QAAEC,OAAS,EAAA,IAAA;AAAA,OAArB,CAAA,CAAA;AAAA,KACX;AAAA,GAEF,EAAA,CAACgD,UAAYN,EAAAA,QAAb,CAjBsB,CAAA,CAAA;AAmBzB,EAAMpH,MAAAA,IAAAA,GAAOgI,YAAY,CAAC;AAAA,IACRzE,IAAAA;AAAAA,IACAoD,QAAAA;AAAAA,IACAoC,eAAAA;AAAAA,IACAC,IAAAA;AAAAA,IACAC,KAAAA;AAAAA,IACGC,GAAAA,WAAAA;AAAAA,GACqB,KAAA;AAEtC,IAAIF,IAAAA,IAAAA,IAAQ,CAACrC,QAAU,EAAA;AACb9C,MAAAA,MAAAA,MAAM,+DAAD,CAAA,CAAA;AAAA,KACd;AAEGqF,IAAAA,IAAAA,WAAAA,iBACanC,MAAWpG,KAAAA,KAAAA,CAAAA,IACpBuI,YAAYC,WAAgBxI,KAAAA,KAAAA,CAAAA,IAC5BuI,WAAY1E,CAAAA,cAAAA,KAAmB7D,KAAY,CAAA,CAAA,EAAA;AAC/C,MAAA,MAAMwI,cAAcD,WAAYC,CAAAA,WAAAA,CAAAA;AAChC,MAAA,MAAMC,mBAAmBF,WAAYnC,CAAAA,MAAAA,CAAAA;AACrC,MAAA,MAAMvC,iBAAiB0E,WAAY1E,CAAAA,cAAAA,CAAAA;AACnC,MAAA,MAAM6E,yBAAyBH,WAAYG,CAAAA,sBAAAA,CAAAA;AAC3ChI,MAAAA,iBAAAA,CAAkBiI,WACd,CAAA;AAAA,QACI/F,IAAAA;AAAAA,QACAoD,QAAAA;AAAAA,QACA4C,YAAc,EAAA;AAAA,UACVJ,WAAAA;AAAAA,UACApC,MAAQ,EAAA,OAAOqC,gBAAqB,KAAA,UAAA,GAAaA,gBAAmBzI,GAAAA,KAAAA,CAAAA;AAAAA,UACpE6I,cAAgB,EAAA,OAAOJ,gBAAqB,KAAA,UAAA,GAAaA,gBAAmBzI,GAAAA,KAAAA,CAAAA;AAAAA,UAC5E6D,cAAAA;AAAAA,UACAiF,WAAWP,WAAYO,CAAAA,SAAAA;AAAAA,SAR/B;AAAA,QAUIJ,sBAAAA;AAAAA,OAXR,CAAA,CAAA;AAAA,KAcH;AAED,IAAMK,MAAAA,SAAAA,GAAYhG,gCAAgCH,IAAD,CAAA,CAAA;AACjD,IAAA,MAAMkB,OAAUkC,GAAAA,QAAAA,GACVtF,iBAAkBgE,CAAAA,sBAAAA,CAAwB,GAAEqE,SAAa/C,CAAAA,CAAAA,EAAAA,QAAAA,CAAAA,CAAAA,EAAYoC,eAAmB,IAAA,EAAA,CAAA,CAAxF,CACA1H,GAAAA,iBAAAA,CAAkBgE,sBAAwB,CAAA,CAAA,EAAEqE,aAAaxC,YAAzD,CAAA,CAAA,CAAA,CAAA;AAEN,IAAA,MAAM2B,gBAAgBnB,UAAW9D,CAAAA,MAAAA,GAAS,IAAI8D,UAAWA,CAAAA,UAAAA,CAAW9D,SAAS,CAAKjD,CAAAA,GAAAA,KAAAA,CAAAA,CAAAA;AAGlF,IAAA,IAAIgG,YACAkC,aACAA,IAAAA,aAAAA,CAActF,SAASA,IACvBsF,IAAAA,aAAAA,EAAelC,aAAaA,QAAU,EAAA;AAEtC,MAAA,MAAMgD,YAAqC,GAAA;AAAA,QACpCd,GAAAA,aAAAA;AAAAA,QACHE,eAAAA;AAAAA,OAFJ,CAAA;AAIA,MAAMa,MAAAA,aAAAA,GAAgB,CAAC,GAAGlC,UAAAA,CAAWrE,MAAM,CAAG,EAAA,CAAA,CAApB,GAAyBsG,YAA7B,CAAA,CAAA;AACtB5B,MAAAA,YAAAA,CAAa6B,aAAD,CAAA,CAAA;AACZtC,MAAAA,QAAAA,CACIjG,kBAAkBgE,sBAAwB,CAAA,CAAA,EAAEqE,aAAa/C,QAAYoC,CAAAA,CAAAA,EAAAA,eAAAA,IAAmB,IAAxF,CACA,EAAA;AAAA,QACIrE,OAAS,EAAA,IAAA;AAAA,QACTkD,KAAO,EAAA;AAAA,UACHE,aAAeD,EAAAA,YAAAA;AAAAA,UACfM,MAAQyB,EAAAA,aAAAA;AAAAA,SAFL;AAAA,OAJP,CAAA,CAAA;AAAA,KAWL,MAAA;AACGC,MAAAA,MAAAA,QAAiC,GAAA;AAAA,QACnCtG,IAAAA;AAAAA,QACAoD,QAAAA;AAAAA,QACAqC,IAAAA,EAAMA,SAASrI,KAAaqI,CAAAA,IAAAA,IAAAA;AAAAA,QAC5BC,KAAAA;AAAAA,QACAF,eAAAA;AAAAA,OALJ,CAAA;AAOA,MAAA,MAAMa,aAAgB,GAAA,CAAC,GAAGlC,UAAAA,EAAYmC,QAAhB,CAAA,CAAA;AACtB9B,MAAAA,YAAAA,CAAa6B,aAAD,CAAA,CAAA;AACZtC,MAAAA,QAAAA,CACI7C,OACA,EAAA;AAAA,QACImD,KAAO,EAAA;AAAA,UACHE,aAAeD,EAAAA,YAAAA;AAAAA,UACfM,MAAQyB,EAAAA,aAAAA;AAAAA,SAFL;AAAA,OAHP,CAAA,CAAA;AAAA,KASX;AAAA,GACF,EAAA,CAAClC,UAAYN,EAAAA,QAAb,CAvFqB,CAAA,CAAA;AAyFjB,EAAA,OAAA;AAAA,IACHM,UAAAA;AAAAA,IACA3H,KAAAA;AAAAA,IACAC,IAAAA;AAAAA,GAHJ,CAAA;AAKH,CAAA,CAAA;AAED,SAAgCuD,sBAAAA,CAAAA,IAAAA,EAAcC,aAAiCgF,OAA0C,EAAA;AAE/GsB,EAAAA,MAAAA,yBAAwD7C,oCAAqC,CAAA;AAAA,IAC/F1D,IAAAA;AAAAA,IACAC,WAAAA;AAAAA,GAF8F,CAAA,CAAA;AAKlG,EAAA,MAAMkE,aAAqC,EAA3C,CAAA;AACIqC,EAAAA,IAAAA,kBAAqB,GAAA,EAAA,CAAA;AACzB,EAAA,KAAA,IAAS5F,CAAI,GAAA,CAAA,EAAGA,CAAI2F,GAAAA,sBAAAA,CAAuBlG,QAAQO,CAAK,EAAA,EAAA;AACpD,IAAA,MAAME,kBAAkByF,sBAAuB3F,CAAAA,CAAAA,CAAAA,CAAAA;AAE/C,IAAIE,IAAAA,eAAAA,CAAgBvD,SAAS,YAAc,EAAA;AACvCiJ,MAAAA,kBAAAA,GAAqB1F,eAAgBd,CAAAA,IAAAA,CAAAA;AAAAA,KACxC;AAEGY,IAAAA,IAAAA,IAAI,CAAG,EAAA;AACP,MAAM6F,MAAAA,aAAAA,GAAgBF,uBAAuB3F,CAAI,GAAA,CAAA,CAAA,CAAA;AACjD,MAAIE,IAAAA,eAAAA,CAAgBvD,SAAS,QAAU,EAAA;AACnC,QAAIkJ,IAAAA,aAAAA,CAAclJ,SAAS,YAAc,EAAA;AACrC4G,UAAAA,UAAAA,CAAW5C,IAAK,CAAA;AAAA,YACRvB,MAAMc,eAAgBd,CAAAA,IAAAA;AAAAA,YACtBoD,UAAUtC,eAAgBsC,CAAAA,QAAAA;AAAAA,YAC1BqC,IAAM,EAAA,KAAA;AAAA,WAHd,CAAA,CAAA;AAAA,SAMH;AAAA,OACJ,MAAA,IAAU3E,eAAgBvD,CAAAA,IAAAA,KAAS,aAAe,EAAA;AAC/C,QAAIkJ,IAAAA,aAAAA,CAAclJ,SAAS,QAAU,EAAA;AAC3B+H,UAAAA,MAAAA,aAAAA,GAAsCnB,UAAWA,CAAAA,UAAAA,CAAW9D,MAAS,GAAA,CAAA,CAAA,CAAA;AACvEiF,UAAAA,IAAAA,aAAAA;AACAA,YAAcE,aAAAA,CAAAA,eAAAA,GAAkB1E,gBAAgBqB,IAAKnC,CAAAA,IAAAA,CAAAA;AAAAA,SAC5D;AAAA,OACJ,MAAA,IAAUc,eAAgBvD,CAAAA,IAAAA,KAAS,YAAc,EAAA;AAC9C,QAAIkJ,IAAAA,aAAAA,CAAclJ,SAAS,QAAU,EAAA;AAC3B+H,UAAAA,MAAAA,aAAAA,GAAsCnB,UAAWA,CAAAA,UAAAA,CAAW9D,MAAS,GAAA,CAAA,CAAA,CAAA;AACvEiF,UAAAA,IAAAA,aAAAA;AACAA,YAAcE,aAAAA,CAAAA,eAAAA,GAAkB1E,gBAAgBc,UAAW5B,CAAAA,IAAAA,CAAAA;AAAAA,SAClE;AAAA,OACJ;AAAA,KACJ;AAAA,GAEJ;AAED,EAAA,IAAIiF,OAAS,EAAA;AACTd,IAAAA,UAAAA,CAAW5C,IAAK,CAAA;AAAA,MACZvB,IAAMwG,EAAAA,kBAAAA;AAAAA,MACNf,IAAM,EAAA,KAAA;AAAA,KAFV,CAAA,CAAA;AAAA,GAIH;AAED,EAAOtB,OAAAA,UAAAA,CAAAA;AACV;;ACxGM,MAAMuC,eAAgB,CAAA;AAAA,EAIhBC,EAAAA,CAAAA;AAAAA,EAKA3G,IAAAA,CAAAA;AAAAA,EAET4G,WAAAA,CAAYD,IAAY3G,IAAc,EAAA;AAC7B2G,IAAAA,IAAAA,CAAAA,EAAKA,GAAAA,EAAAA,CAAAA;AACL3G,IAAAA,IAAAA,CAAAA,IAAOA,GAAAA,IAAAA,CAAAA;AAAAA,GACf;AAAA,EAAA,IAEG6G,UAAa,GAAA;AACb,IAAQ,OAAA,CAAA,EAAE,IAAK7G,CAAAA,IAAAA,CAAAA,CAAAA,EAAQ,IAAK2G,CAAAA,EAAAA,CAAAA,CAAAA,CAAAA;AAAAA,GAC/B;AAlBwB,CAAA;AAqBtB,MAAMG,QAAS,CAAA;AAAA,EAKTC,QAAAA,CAAAA;AAAAA,EAIAC,SAAAA,CAAAA;AAAAA,EAETJ,WAAAA,CAAYG,UAAkBC,SAAmB,EAAA;AACxCD,IAAAA,IAAAA,CAAAA,QAAWA,GAAAA,QAAAA,CAAAA;AACXC,IAAAA,IAAAA,CAAAA,SAAYA,GAAAA,SAAAA,CAAAA;AAAAA,GACpB;AAdiB;;AC1ITC,MAAAA,IAAAA,GAAyC,CAACC,GAAAA,EAAAA,GAAaC,IAAiB,MAAA;AAAA,EAAA,GAC9EA,IAAKC,CAAAA,MAAAA,CAAO,CAACC,GAAAA,EAAKC,GAAS,MAAA;AAAA,IAAKD,GAAAA,GAAAA;AAAAA,IAAAA,CAAMC,MAAMJ,GAAII,CAAAA,GAAAA,CAAAA;AAAAA,GAApC,CAAA,EAA6C,EAAzD,CAAA;AAD8E,CAAA,CAAA,CAAA;AAI9E,SAAA,QAAA,CAAkBC,IAAW,EAAA;AAChC,EAAA,OAAQA,QAAQ,OAAOA,IAAAA,KAAS,YAAY,CAACjF,KAAAA,CAAMC,QAAQgF,IAAd,CAAA,CAAA;AAChD,CAAA;AAEM,SAAA,SAAA,CAAsBC,QAAWC,MAAgB,EAAA;AAC9CC,EAAAA,MAAAA,MAAW9E,GAAAA,MAAAA,CAAO+E,MAAO,CAAA,IAAIH,MAAlB,CAAA,CAAA;AACbI,EAAAA,IAAAA,QAASJ,CAAAA,MAAD,CAAYI,IAAAA,QAAAA,CAASH,MAAD,CAAU,EAAA;AACtC7E,IAAAA,MAAAA,CAAOiF,IAAKJ,CAAAA,MAAZ,CAAoBK,CAAAA,OAAAA,CAAQR,CAAO,GAAA,KAAA;AAC/B,MAAIM,IAAAA,QAAAA,CAASH,MAAOH,CAAAA,GAAAA,CAAR,CAAe,EAAA;AACnB,QAAA,IAAA,EAASE,GAAAA,IAAAA,MAAAA,CAAAA;AACT5E,UAAAA,MAAAA,CAAO+E,OAAOD,MAAQ,EAAA;AAAA,YAAA,CAAGJ,MAAMG,MAAOH,CAAAA,GAAAA,CAAAA;AAAAA,WAAtC,CAAA,CAAA;AAAA;AAEA,UAACI,OAAeJ,GAAOS,CAAAA,GAAAA,SAAAA,CAAWP,MAAeF,CAAAA,GAAAA,CAAAA,EAAMG,OAAOH,GAA9B,CAAA,CAAA,CAAA;AAAA,OACjC,MAAA;AACH1E,QAAAA,MAAAA,CAAO+E,OAAOD,MAAQ,EAAA;AAAA,UAAA,CAAGJ,MAAMG,MAAOH,CAAAA,GAAAA,CAAAA;AAAAA,SAAtC,CAAA,CAAA;AAAA,OACH;AAAA,KARL,CAAA,CAAA;AAAA,GAUH;AACD,EAAOI,OAAAA,MAAAA,CAAAA;AACV,CAAA;AAEM,SAAA,cAAA,CAAwBM,GAAuBhI,IAAmB,EAAA;AACrE,EAAI,IAAA,OAAOgI,MAAM,QAAU,EAAA;AACnBhI,IAAAA,IAAAA,QAAQgI,CAAG,EAAA;AACX,MAAA,OAAQA,CAAUhI,CAAAA,IAAAA,CAAAA,CAAAA;AAAAA,KACrB;AACD,IAAIA,IAAAA,IAAAA,CAAKiI,QAAS,CAAA,GAAd,CAAoB,EAAA;AACpB,MAAMC,MAAAA,YAAAA,GAAelI,IAAKI,CAAAA,KAAAA,CAAM,GAAX,CAAA,CAAA;AACd+H,MAAAA,OAAAA,cAAAA,CAAgBH,CAAUE,CAAAA,YAAAA,CAAa,CAAKA,CAAAA,CAAAA,EAAAA,YAAAA,CAAapI,MAAM,CAAnB,CAAA,CAAsBsB,IAAK,CAAA,GAA3B,CAA9B,CAAA,CAAA;AAAA,KACxB;AAAA,GACJ;AACD,EAAOhE,OAAAA,KAAAA,CAAAA,CAAAA;AACV,CAAA;AAEM,SAAA,YAAA,CAAyBgL,CAAM,EAAA;AAClC,EAAA,IAAI,CAACA,CAAAA;AAAG,IAAO,OAAA,IAAA,CAAA;AACf,EAAI,IAAA,OAAOA,MAAM,QAAU,EAAA;AACvB,IAAA,IAAI,IAAQA,IAAAA,CAAAA;AACR,MAAA,OAAQA,CAAUzB,CAAAA,EAAAA,CAAAA;AAAAA,SAAAA,IACbyB,CAAaC,YAAAA,IAAAA;AAClB,MAAA,OAAOD,EAAEE,cAAF,EAAA,CAAA;AAAA,SAAA,IACFF,CAAatB,YAAAA,QAAAA;AAClB,MAAA,OAAO5B,KAAKkD,CAAD,CAAA,CAAA;AAAA,GAClB;AACMlD,EAAAA,OAAAA,KAAKkD,CAAG,EAAA;AAAA,IAAEG,aAAe,EAAA,IAAA;AAAA,GAArB,CAAA,CAAA;AACd;;AC1CA,SAAA,iBAAA,CAAA;AAAA,EACIC,iBAAAA;AAAAA,EACA3F,MAAAA;AAAAA,EACA4F,cAAAA;AAAAA,EACAzI,IAAAA;AAAAA,EACAoD,QAAAA;AAAAA,EACAsF,gBAAAA;AAAAA,CASiB,EAAA;AACd/H,EAAAA,IAAAA,MAAAA,CAAAA;AACJ,EAAI,IAAA,OAAO6H,sBAAsB,UAAY,EAAA;AACzC7H,IAAAA,MAAAA,GAAS6H,iBAAkB,CAAA;AAAA,MAAE3F,MAAAA;AAAAA,MAAQ4F,cAAAA;AAAAA,MAAgBrF,QAAAA;AAAAA,MAAUpD,IAAAA;AAAAA,KAArC,CAAA,CAAA;AACtB,IAAA,IAAA,CAACW,MAAQ,EAAA;AACTgI,MAAAA,OAAAA,CAAQC,KAAM,CAAA,iEAAA,EAAmE5I,IAAMoD,EAAAA,QAAAA,EAAUoF,iBAAjG,CAAA,CAAA;AACA,MAAO,OAAA,IAAA,CAAA;AAAA,KACV;AAAA,GACE,MAAA;AACH7H,IAAS6H,MAAAA,GAAAA,iBAAAA,CAAAA;AAAAA,GACZ;AACGE,EAAAA,IAAAA,gBAAAA;AACA/H,IAASoH,MAAAA,GAAAA,SAAAA,CAAUpH,QAAQ+H,gBAAT,CAAA,CAAA;AAEtB,EAAO/H,OAAAA,MAAAA,CAAAA;AACV;;ACzBM,SAAA,UAAA,CAAoBkI,QAAkC,EAAA;AACzD,EAAA,IAAIA,QAASC,CAAAA,QAAAA;AACT,IAAO,OAAA,IAAA,CAAA;AACX,EAAID,IAAAA,QAAAA,CAASE,aAAa,WAAa,EAAA;AACnC,IAAA,IAAIF,QAASG,CAAAA,SAAAA;AACT,MAAO,OAAA,IAAA,CAAA;AAAA,GACd;AACD,EAAIH,IAAAA,QAAAA,CAASE,aAAa,WAAa,EAAA;AAC5B,IAAA,OAAA,CAACF,QAAS7I,CAAAA,IAAAA,CAAAA;AAAAA,GACpB;AACD,EAAO,OAAA,KAAA,CAAA;AACV,CAAA;AAEM,SAAA,QAAA,CAAkB6I,QAAkC,EAAA;AACvD,EAAA,OAAO,OAAOA,QAASI,CAAAA,QAAAA,KAAa,YAAYlG,OAAQ8F,CAAAA,QAAAA,CAASI,SAASC,MAAnB,CAAA,CAAA;AAC1D,CAAA;AAYG,SAAA,aAAA,CAAA;AAAA,EAAErD,gBAAAA;AAAAA,EAAkB7F,IAAAA;AAAAA,EAAMoD,QAAAA;AAAAA,EAAUP,MAAAA;AAAAA,EAAQ4F,cAAAA;AAAAA,CAMhB,EAAA;AAE5B,EAAI,IAAA,OAAO5C,qBAAqB,UAAY,EAAA;AACxC,IAAA,OAAOA,gBAAiB,CAAA;AAAA,MAAEzC,QAAAA;AAAAA,MAAUP,MAAAA;AAAAA,MAAQ4F,cAAAA;AAAAA,KAArB,CAAA,CAAA;AAAA,GACpB,MAAA;AAEGU,IAAAA,MAAAA,aAAaC,iBAAkB,CAAA;AAAA,MACjCC,qBAAqBxD,gBAAiBsD,CAAAA,UAAAA;AAAAA,MACtCnJ,IAAAA;AAAAA,MACAoD,QAAAA;AAAAA,MACAP,MAAAA;AAAAA,MACA4F,cAAAA;AAAAA,KALgC,CAAA,CAAA;AAQ7B,IAAA,OAAA;AAAA,MACA5C,GAAAA,gBAAAA;AAAAA,MACHsD,UAAAA;AAAAA,MACAG,cAAgBzD,EAAAA,gBAAAA;AAAAA,KAHpB,CAAA;AAAA,GAKH;AACJ,CAAA;AAYG,SAAA,iBAAA,CAAA;AAAA,EAAEwD,mBAAAA;AAAAA,EAAqBrJ,IAAAA;AAAAA,EAAMoD,QAAAA;AAAAA,EAAUP,MAAAA;AAAAA,EAAQ4F,cAAAA;AAAAA,CAM7B,EAAA;AAClB,EAAO7F,OAAAA,MAAAA,CAAOvB,QAAQgI,mBAAf,CAAA,CACF1H,IAAI,CAAC,CAAC2F,KAAKkB,iBAAuB,CAAA,KAAA;AACzBK,IAAAA,MAAAA,WAAWU,iBAAkB,CAAA;AAAA,MAC/Bf,iBAAAA;AAAAA,MACA3F,MAAAA,EAAQA,UAAU,EAFa;AAAA,MAG/B4F,cAAAA,EAAgBA,cAAkB5F,IAAAA,MAAAA,IAAU,EAHb;AAAA,MAI/B7C,IAAAA;AAAAA,MACAoD,QAAAA;AAAAA,KAL8B,CAAA,CAAA;AAOlC,IAAA,IAAIyF,QAAa,KAAA,IAAA;AAAM,MAAO,OAAA,IAAA,CAAA;AACvB,IAAA,OAAA;AAAA,MAAA,CACFvB,GAAMuB,GAAAA,QAAAA;AAAAA,KADX,CAAA;AAAA,GAVD,CAcFrG,CAAAA,MAAAA,CAAQgH,CAAMA,CAAAA,KAAAA,CAAAA,KAAM,IAdlB,CAeFpC,CAAAA,MAAAA,CAAO,CAACoC,CAAAA,EAAGC,CAAO,MAAA;AAAA,IAAKD,GAAAA,CAAAA;AAAAA,IAAMC,GAAAA,CAAAA;AAAAA,GAAX,CAAA,EAAiB,EAfjC,CAAA,CAAA;AAgBV,CAAA;AAIM,SAAA,kBAAA,CACNN,YAA2BO,aAA2D,EAAA;AACnF,EAAO9G,OAAAA,MAAAA,CAAOvB,QAAQ8H,UAAf,CAAA,CACFxH,IAAI,CAAC,CAAC2F,KAAKuB,QAAc,CAAA,KAAA;AACtB,IAAA,MAAMc,oBAAuBD,GAAAA,aAAAA,IAAiBpC,GAAOoC,IAAAA,aAAAA,GAAiBA,cAAsBpC,GAAOlK,CAAAA,GAAAA,KAAAA,CAAAA,CAAAA;AAC7FwM,IAAAA,MAAAA,KAAQC,GAAAA,iBAAAA,CAAkBvC,GAAKuB,EAAAA,QAAAA,EAAsBc,oBAA5B,CAAA,CAAA;AAC/B,IAAOC,OAAAA,KAAAA,KAAUxM,KAAY,CAAA,GAAA,EAAK,GAAA;AAAA,MAAA,CAAGkK,GAAMsC,GAAAA,KAAAA;AAAAA,KAA3C,CAAA;AAAA,GAJD,CAAA,CAMFxC,MAAO,CAAA,CAACoC,GAAGC,CAAO,MAAA;AAAA,IAAKD,GAAAA,CAAAA;AAAAA,IAAMC,GAAAA,CAAAA;AAAAA,GAAX,CAAA,EAAiB,EANjC,CAAA,CAAA;AAOV,CAAA;AAED,SAA2BnC,iBAAAA,CAAAA,GAAAA,EAAauB,UAAoBiB,YAAmB,EAAA;AACvEF,EAAAA,IAAAA,KAAAA,CAAAA;AACAf,EAAAA,IAAAA,QAASE,CAAAA,QAAAA,KAAa,KAASF,IAAAA,QAAAA,CAASM,UAAY,EAAA;AACpDS,IAAQG,KAAAA,GAAAA,kBAAAA,CAAmBlB,QAASM,CAAAA,UAAAA,EAA0BW,YAApC,CAAA,CAAA;AAAA,GAC7B,MAAA,IAAUA,iBAAiB1M,KAAW,CAAA,EAAA;AACnCwM,IAAQE,KAAAA,GAAAA,YAAAA,CAAAA;AAAAA,GACL,MAAA;AACHF,IAAQxM,KAAAA,GAAAA,KAAAA,CAAAA,CAAAA;AAAAA,GACX;AACD,EAAOwM,OAAAA,KAAAA,CAAAA;AACV,CAAA;AAOkE,SAAA,gBAAA,CAAA;AAAA,EACII,WAAAA;AAAAA,EACAb,UAAAA;AAAAA,EACAc,MAAAA;AAAAA,EACAC,iBAAAA;AAAAA,EACAC,kBAAAA;AAAAA,EACAC,iBAAAA;AAAAA,CASoB,EAAA;AAChFC,EAAAA,OAAAA,cACHL,CAAAA,WAAAA,EACAb,UACA,EAAA,CAACmB,YAAYzB,QAAa,KAAA;AACtB,IAAIA,IAAAA,QAAAA,CAASE,aAAa,WAAa,EAAA;AAC/BkB,MAAAA,IAAAA,MAAW,KAAA,UAAA,IAAcpB,QAASG,CAAAA,SAAAA,KAAc,WAAa,EAAA;AAC7D,QAAOkB,OAAAA,iBAAAA,CAAAA;AAAAA,OADX,MAAA,IAEYD,CAAW,MAAA,KAAA,KAAA,IAASA,MAAW,KAAA,MAAA,eAC7BjB,SAAc,KAAA,WAAA,IAAeH,QAASG,CAAAA,SAAAA,KAAc,WAAc,CAAA,EAAA;AAC5E,QAAOkB,OAAAA,iBAAAA,CAAAA;AAAAA,OACJ,MAAA;AACH,QAAOI,OAAAA,UAAAA,CAAAA;AAAAA,OACV;AAAA,KACMH,MAAAA,IAAAA,kBAAAA,IAAsBtB,QAASE,CAAAA,QAAAA,KAAa,WAAa,EAAA;AAC5DuB,MAAAA,IAAAA,sBAAsB5D,eAAiB,EAAA;AAChCyD,QAAAA,OAAAA,mBAAmBG,UAAD,CAAA,CAAA;AAAA,OAC5B;AAAA,KACMF,MAAAA,IAAAA,iBAAAA,IAAqBvB,QAASE,CAAAA,QAAAA,KAAa,UAAY,EAAA;AAC1DuB,MAAAA,IAAAA,sBAAsBxD,QAAU,EAAA;AACzBsD,QAAAA,OAAAA,kBAAkBE,UAAD,CAAA,CAAA;AAAA,OAC3B;AAAA,KACE,MAAA;AACH,MAAOA,OAAAA,UAAAA,CAAAA;AAAAA,KACV;AAAA,GAvBY,CAAA,CAAA;AA0BxB,CAAA;AASM,SAAA,YAAA,CAEHzH,QACAsG,UACF,EAAA;AACE,EAAA,MAAMxI,MAAckC,GAAAA,MAAAA,CAAAA;AACpBD,EAAAA,MAAAA,CAAOvB,QAAQ8H,UAAf,CAAA,CACKrB,QAAQ,CAAC,CAACR,KAAKuB,QAAc,CAAA,KAAA;AAC1B,IAAIhG,IAAAA,MAAAA,IAAUA,OAAOyE,GAASlK,CAAAA,KAAAA,KAAAA,CAAAA;AAAWuD,MAAAA,MAAAA,CAAO2G,OAAOzE,MAAOyE,CAAAA,GAAAA,CAAAA,CAAAA;AAAAA,SAAAA,IACpDuB,SAAsB0B,UAAYC,EAAAA,QAAAA;AAAU7J,MAAAA,MAAAA,CAAO2G,GAAO,CAAA,GAAA,IAAA,CAAA;AAAA,GAH5E,CAAA,CAAA;AAKA,EAAO3G,OAAAA,MAAAA,CAAAA;AACV,CAAA;AAEM,SAAA,gBAAA,CAA0B8J,MAAsC,EAAA;AAC5D,EAAA,OAAA,IAAI/D,eAAAA,CAAgB+D,MAAO9D,CAAAA,EAAAA,EAAI8D,OAAOzK,IAAtC,CAAA,CAAA;AACV,CAAA;AAIGgK,SAAAA,cAAAA,CAAAA,WAAAA,EACAb,YACAuB,SACe,EAAA;AACf,EAAMC,MAAAA,aAAAA,GAAgB/H,OAAOvB,OAAQ8H,CAAAA,UAAf,EACjBxH,GAAI,CAAA,CAAC,CAAC2F,GAAAA,EAAKuB,QAAc,CAAA,KAAA;AAChByB,IAAAA,MAAAA,UAAAA,GAAaN,eAAgBA,WAAoB1C,CAAAA,GAAAA,CAAAA,CAAAA;AACjDsD,IAAAA,MAAAA,YAAeC,GAAAA,aAAAA,CAAcP,UAAYzB,EAAAA,QAAAA,EAAsB6B,SAAnC,CAAA,CAAA;AAClC,IAAA,IAAIE,YAAiBxN,KAAAA,KAAAA,CAAAA;AAAW,MAAA,OAAO,EAAP,CAAA;AACxB,IAAA,OAAA;AAAA,MAAA,CAAGkK,GAAMsD,GAAAA,YAAAA;AAAAA,KAAjB,CAAA;AAAA,GALc,CAAA,CAOjBxD,MAAO,CAAA,CAACoC,GAAGC,CAAO,MAAA;AAAA,IAAKD,GAAAA,CAAAA;AAAAA,IAAMC,GAAAA,CAAAA;AAAAA,GAAtB,CAAA,EAA4B,EAPlB,CAAA,CAAA;AAQf,EAAA,OAAA;AAAA,IAAKO,GAAAA,WAAAA;AAAAA,IAAgBW,GAAAA,aAAAA;AAAAA,GAA5B,CAAA;AACH,CAAA;AAE6BL,SAAAA,aAAAA,CAAAA,UAAAA,EACAzB,UACA6B,SAAyD,EAAA;AAEnF,EAAId,IAAAA,KAAAA,CAAAA;AACAf,EAAAA,IAAAA,QAASE,CAAAA,QAAAA,KAAa,KAASF,IAAAA,QAAAA,CAASM,UAAY,EAAA;AACpDS,IAAAA,KAAAA,GAAQS,cAAeC,CAAAA,UAAAA,EAAYzB,QAASM,CAAAA,UAAAA,EAA0BuB,SAAhD,CAAA,CAAA;AAAA,GACzB,MAAA,IAAU7B,QAASE,CAAAA,QAAAA,KAAa,OAAS,EAAA;AAClCF,IAAAA,IAAAA,QAASiC,CAAAA,EAAAA,IAAMxI,KAAMC,CAAAA,OAAAA,CAAQ+H,UAAd,CAA2B,EAAA;AAC1CV,MAAQU,KAAAA,GAAAA,UAAAA,CAAW3I,IAAKmB,CAAM+H,CAAAA,KAAAA,aAAAA,CAAc/H,GAAG+F,QAASiC,CAAAA,EAAAA,EAAgBJ,SAA7B,CAAnC,CAAA,CAAA;AAAA,eACD7B,QAASkC,CAAAA,KAAAA,IAASzI,KAAMC,CAAAA,OAAAA,CAAQ+H,UAAd,CAA2B,EAAA;AAC9CU,MAAAA,MAAAA,SAAAA,GAAYnC,QAASkC,CAAAA,KAAAA,CAAOC,SAAa,IAAA,MAAA,CAAA;AACzCC,MAAAA,MAAAA,UAAAA,GAAapC,QAASkC,CAAAA,KAAAA,CAAOE,UAAc,IAAA,OAAA,CAAA;AACjDrB,MAAQU,KAAAA,GAAAA,UAAAA,CAAW3I,IAAKmB,CAAM,CAAA,KAAA;AAC1B,QAAA,IAAIA,CAAM,KAAA,IAAA;AAAM,UAAO,OAAA,IAAA,CAAA;AACvB,QAAA,IAAI,OAAOA,CAAM,KAAA,QAAA;AAAU,UAAOA,OAAAA,CAAAA,CAAAA;AAClC,QAAA,MAAMvF,OAAOuF,CAAEkI,CAAAA,SAAAA,CAAAA,CAAAA;AACTE,QAAAA,MAAAA,aAAAA,GAAgBrC,QAASkC,CAAAA,KAAAA,CAAO5B,UAAW5L,CAAAA,IAAAA,CAAAA,CAAAA;AACjD,QAAI,IAAA,CAACA,QAAQ,CAAC2N,aAAAA;AAAe,UAAOpI,OAAAA,CAAAA,CAAAA;AAC7B,QAAA,OAAA;AAAA,UAAA,CACFkI,SAAYzN,GAAAA,IAAAA;AAAAA,UAAAA,CACZ0N,UAAaJ,GAAAA,aAAAA,CAAc/H,CAAEmI,CAAAA,UAAAA,CAAAA,EAAaC,eAAeR,SAA/B,CAAA;AAAA,SAF/B,CAAA;AAAA,OANI,CAAA,CAAA;AAAA,KAWL,MAAA;AACHd,MAAQU,KAAAA,GAAAA,UAAAA,CAAAA;AAAAA,KACX;AAAA,GACE,MAAA;AACHV,IAAQc,KAAAA,GAAAA,SAAAA,CAAUJ,YAAYzB,QAAb,CAAA,CAAA;AAAA,GACpB;AAED,EAAOe,OAAAA,KAAAA,CAAAA;AACV;;ACjOmD,SAAA,yBAAA,CAAA;AAAA,EACIuB,QAAAA;AAAAA,EACAC,kBAAAA;AAAAA,EACAnN,cAAAA;AAAAA,EACAoN,mBAAAA;AAAAA,EACAC,qBAAAA;AAAAA,EACAC,cAAAA;AAAAA,EACAC,MAAAA;AAAAA,EACAzN,UAAAA;AAAAA,EACAC,aAAAA;AAAAA,EACAyN,qBAAAA;AAAAA,CAYlC,EAAA;AAElB,EAAA,MAAM,CAAChK,UAAAA,EAAYiK,aAAiBzO,CAAAA,GAAAA,QAAAA,CAAiCG,KAAzB,CAAA,CAAA,CAAA;AACtC,EAAA,MAAA,CAACuO,iBAAAA,EAAmBC,oBAAwB3O,CAAAA,GAAAA,QAAAA,CAAkB,KAAV,CAAA,CAAA;AAC1D,EAAA,MAAM,CAAC4O,sBAAAA,EAAwBC,yBAA6B7O,CAAAA,GAAAA,QAAAA,CAA4BG,KAApB,CAAA,CAAA,CAAA;AAEpE,EAAM2O,MAAAA,kBAAAA,GAAqB7H,MAAiG,CAAA,EAA3F,CAAA,CAAA;AACjC,EAAM8H,MAAAA,aAAAA,GAAgB7L,gCAAgCgL,QAAD,CAAA,CAAA;AACrD,EAAMc,MAAAA,uBAAAA,GAA0B9L,gCAAgCiL,kBAAD,CAAA,CAAA;AAEzDc,EAAAA,MAAAA,OAAAA,GAAUF,aAAiB,GAAA,CAAA,CAAA,EAAGA,aAAkB,CAAA,CAAA,GAAA,GAAA,CAAA;AAEtD,EAAA,MAAMG,kBAAqBH,GAAAA,aAAAA,GAAiB,CAAGA,CAAAA,EAAAA,aAAAA,CAAAA,CAAAA,EAAiBC,4BAA6B,CAAGA,CAAAA,EAAAA,uBAAAA,CAAAA,CAAAA,CAAAA;AAEhG,EAAMhI,MAAAA,WAAAA,GAAcxC,YAAYxB,WAAgB7C,KAAAA,KAAAA,CAAAA,CAAAA;AAEhDmC,EAAAA,SAAAA,CAAU,MAAM;AACZ,IAAI,IAAA,CAACtB,eAAemO,iBAAmB,EAAA;AACnC,MAAA,OAAA;AAAA,KACH;AACDR,IAAAA,oBAAAA,CAAqB,IAAD,CAAA,CAAA;AACpBS,IAAc,aAAA,CAAA;AAAA,MACVC,uBAAyBjB,EAAAA,mBAAAA;AAAAA,MACzBkB,MAAMtO,cAAesO,CAAAA,IAAAA;AAAAA,MACrBtO,cAAAA;AAAAA,MACAsN,cAAAA;AAAAA,MACAC,MAAAA;AAAAA,MACAzN,UAAAA;AAAAA,MACAC,aAAAA;AAAAA,KAPS,CAAA,CAQVwO,IAAK,CAAA,CAAC7L,MAAuB,KAAA;AAC5B+K,MAAAA,aAAAA,CAAc/K,MAAD,CAAA,CAAA;AACbiL,MAAAA,oBAAAA,CAAqB,KAAD,CAAA,CAAA;AAAA,KAVxB,CAWGa,CAAAA,KAAAA,CAAMX,yBAXT,CAAA,CAAA;AAAA,GAYD,EAAA,CAAC7N,cAAesO,CAAAA,IAAAA,EAAMtO,cAAemO,CAAAA,iBAAAA,EAAmBf,mBAAqBpN,EAAAA,cAAAA,EAAgBsN,cAAgBC,EAAAA,MAAAA,EAAQzN,UAAYC,EAAAA,aAAjI,CAjBM,CAAA,CAAA;AAoBT,EAAM0O,MAAAA,iBAAAA,GAAoBjI,WAAY,CAAA,CAAgBzE,IAAqD,KAAA;AACvG,IAAA,IAAI,CAACyL,qBAAAA;AACD,MAAOrO,OAAAA,KAAAA,CAAAA,CAAAA;AACLuP,IAAAA,MAAAA,kBAAAA,GAAqBlB,qBAAsBmB,CAAAA,mBAAAA,CAAuB5M,IAA7C,CAAA,CAAA;AACpB2M,IAAAA,OAAAA,kBAAoBnJ,EAAAA,MAAAA,CAAAA;AAAAA,GAC9B,EAAE,CAACiI,qBAAD,CALkC,CAAA,CAAA;AAOrC,EAAMoB,MAAAA,mBAAAA,GAAsBpI,YAAY,CAAyC;AAAA,IACIjB,MAAAA;AAAAA,IACAxD,IAAAA;AAAAA,GAAAA,KAEjF,CAAC;AAAA,IACIoD,QAAAA;AAAAA,IACAP,MAAAA;AAAAA,IACA4F,cAAAA;AAAAA,GACgC,KAAA;AAEjC,IAAMqE,MAAAA,cAAAA,GAAiBJ,kBAAqB1M,IAAJ,CAAA,CAAA;AACxC,IAAM+M,MAAAA,gBAAAA,GAAqD5E,cAAe2E,CAAAA,cAAAA,EAAgB,YAAjB,CAAA,CAAA;AAEnE3D,IAAAA,MAAAA,aAAaC,iBAAkB,CAAA;AAAA,MACjCC,qBAAqB7F,MAAO2F,CAAAA,UAAAA;AAAAA,MAC5BnJ,IAAAA;AAAAA,MACAoD,QAAAA;AAAAA,MACAP,MAAAA,EAAQA,UAAUW,MAAOkG,CAAAA,aAAAA;AAAAA,MACzBjB,cAAAA;AAAAA,KALgC,CAAA,CAAA;AAQjC,IAAA,OAAA;AAAA,MACAjF,GAAAA,MAAAA;AAAAA,MACH2F,UAAAA,EAAYpB,SAAUoB,CAAAA,UAAAA,EAAY4D,gBAAb,CAAA;AAAA,MACrBzD,cAAgB9F,EAAAA,MAAAA;AAAAA,KAHpB,CAAA;AAAA,GAKH,EAAE,CAACkJ,iBAAD,CA1BoC,CAAA,CAAA;AA4BvC,EAAMM,MAAAA,qBAAAA,GAAwBvI,WAAY,CAAA,CAAgBzE,IAAyD,KAAA;AAC/G,IAAA,IAAI,CAACyL,qBAAAA;AACD,MAAOrO,OAAAA,KAAAA,CAAAA,CAAAA;AACL6P,IAAAA,MAAAA,uBAA0B,GAAA;AAAA,MAAKxB,GAAAA,qBAAAA,CAAsBmB,oBAAuB5M,IAA7C,CAAA;AAAA,KAArC,CAAA;AACOiN,IAAAA,OAAAA,uBAAwBzJ,CAAAA,MAAAA,CAAAA;AAC/B,IAAOyJ,OAAAA,uBAAAA,CAAAA;AAAAA,GACV,EAAE,CAACxB,qBAAD,CANsC,CAAA,CAAA;AASzC,EAAA,MAAMyB,qBAAwBzI,GAAAA,WAAAA,CAAY,CAAmCzE,IAAAA,EAAcoD,UAAmBxB,UAAkE,KAAA;AAE5K,IAAA,MAAM3B,cAAcwB,UAAYxB,EAAAA,WAAAA,CAAAA;AAEhC,IAAA,MAAMkN,iBAAiBvL,UAAe3B,KAAAA,WAAAA,IAAemN,oBAAuBjN,+BAAgCH,CAAAA,IAAD,GAAQC,WAA3C,CAAA,CAAA,CAAA;AAExE,IAAM0M,MAAAA,kBAAAA,GAAqBK,sBAAsBhN,IAAD,CAAA,CAAA;AAE1CqN,IAAAA,MAAAA,kBAAqBF,GAAAA,cAAAA,GAAiBpF,SAAUoF,CAAAA,cAAAA,EAAgBR,kBAAjB,CAAuCvP,GAAAA,KAAAA,CAAAA,CAAAA;AAE5F,IAAMkQ,MAAAA,YAAAA,GAAeC,eAAgBvN,CAAAA,IAAAA,EAAMoD,QAAP,CAAA,CAAA;AAEpC,IAAA,IAAIzC,SAA4C,EAAhD,CAAA;AAEA,IAAM6M,MAAAA,eAAAA,GAAkBzB,mBAAmBjH,OAAQwI,CAAAA,YAAAA,CAAAA,CAAAA;AACnD,IAAMG,MAAAA,aAAAA,GAA+DnC,yBAAyBA,qBAAsB,CAAA;AAAA,MAChHlI,QAAAA;AAAAA,MACApD,IAAAA,EAAMG,gCAAgCH,IAAD,CAAA;AAAA,KAF0E,CAAA,CAAA;AAKnH,IAAIyN,IAAAA,aAAAA;AACA9M,MAAS8M,MAAAA,GAAAA,aAAAA,CAAAA;AAEb,IAAA,IAAID,eAAiB,EAAA;AAEXE,MAAAA,MAAAA,sBAAyBF,GAAAA,eAAAA,CAAgB1H,sBAA2B1I,KAAAA,KAAAA,CAAAA,IAAaoQ,eAAgB1H,CAAAA,sBAAAA,CAAAA;AACvG,MAAI4H,IAAAA,sBAAAA;AACA/M,QAAS,MAAA,GAAA;AAAA,UACF6M,GAAAA,eAAAA;AAAAA,UACH5H,WAAAA,EAAajF,MAAOiF,CAAAA,WAAAA,IAAe4H,eAAgB5H,CAAAA,WAAAA;AAAAA,UACnDK,cAAAA,EAAgBtF,MAAOsF,CAAAA,cAAAA,IAAkBuH,eAAgBvH,CAAAA,cAAAA;AAAAA,UACzDhF,cAAAA,EAAgBN,MAAOM,CAAAA,cAAAA,IAAkBuM,eAAgBvM,CAAAA,cAAAA;AAAAA,UACzDiF,SAAAA,EAAWvF,MAAOuF,CAAAA,SAAAA,IAAasH,eAAgBtH,CAAAA,SAAAA;AAAAA,SAL1C,CAAA;AAAA;AAQTvF,QAAS,MAAA,GAAA;AAAA,UACFA,GAAAA,MAAAA;AAAAA,UACHiF,WAAAA,EAAa4H,eAAgB5H,CAAAA,WAAAA,IAAejF,MAAOiF,CAAAA,WAAAA;AAAAA,UACnDK,cAAAA,EAAgBuH,eAAgBvH,CAAAA,cAAAA,IAAkBtF,MAAOsF,CAAAA,cAAAA;AAAAA,UACzDhF,cAAAA,EAAgBuM,eAAgBvM,CAAAA,cAAAA,IAAkBN,MAAOM,CAAAA,cAAAA;AAAAA,UACzDiF,SAAAA,EAAWsH,eAAgBtH,CAAAA,SAAAA,IAAavF,MAAOuF,CAAAA,SAAAA;AAAAA,SALnD,CAAA;AAAA,KAQP;AACD,IAAA,IAAImH,kBAAoB,EAAA;AACpB,MAAA,MAAM7J,SAAS6J,kBAAmB7J,CAAAA,MAAAA,CAAAA;AAClC,MAAA,MAAMvC,iBAAiBoM,kBAAmBpM,CAAAA,cAAAA,CAAAA;AAC1C,MAAA,MAAMiF,YAAYmH,kBAAmBnH,CAAAA,SAAAA,CAAAA;AACrC,MAAA,MAAMN,cAAcyH,kBAAmBzH,CAAAA,WAAAA,CAAAA;AACvCjF,MAAS,MAAA,GAAA;AAAA,QACFA,GAAAA,MAAAA;AAAAA,QACHsF,cAAAA,EAAgBtF,MAAOsF,CAAAA,cAAAA,IAAkB4G,mBAAoB,CAAA;AAAA,UACzDrJ,MAAAA;AAAAA,UACAxD,IAAAA;AAAAA,SAFwD,CAAA;AAAA,QAI5DiB,cAAAA,EAAgBN,OAAOM,cAAkBA,IAAAA,cAAAA;AAAAA,QACzCiF,SAAAA,EAAWvF,OAAOuF,SAAaA,IAAAA,SAAAA;AAAAA,QAC/BN,WAAAA,EAAajF,OAAOiF,WAAeA,IAAAA,WAAAA;AAAAA,OARvC,CAAA;AAAA,KAUH;AACGjF,IAAAA,IAAAA,MAAUiC,IAAAA,MAAAA,CAAOiF,IAAKlH,CAAAA,MAAZ,EAAoBN,MAAQ,EAAA;AACtC,MAAI,IAAA,CAACM,OAAOsF,cAAgB,EAAA;AACpB,QAAA,IAAA,CAACtF,MAAO6C,CAAAA,MAAAA;AACR,UAAMlD,MAAAA,KAAAA,CAAO,kCAAiCgN,YAAnC,CAAA,CAAA,CAAA,CAAA;AACf3M,QAAAA,MAAAA,CAAOsF,iBAAiB4G,mBAAoB,CAAA;AAAA,UACxCrJ,QAAQ7C,MAAO6C,CAAAA,MAAAA;AAAAA,UACfxD,IAAAA;AAAAA,SAFuC,CAAA,CAAA;AAAA,OAI9C;AAAA,KACJ;AAEM,IAAA,OAAA;AAAA,MAAKqN,GAAAA,kBAAAA;AAAAA,MAAwB1M,GAAAA,MAAAA;AAAAA,KAApC,CAAA;AAAA,KAED,CAACc,UAAAA,EAAYxB,aAAa+M,qBAAuB1B,EAAAA,qBAAAA,EAAuBuB,mBAAxE,CAzEsC,CAAA,CAAA;AA2EzC,EAAM9G,MAAAA,WAAAA,GAActB,YAAY,CAAC;AAAA,IACIzE,IAAAA;AAAAA,IACAoD,QAAAA;AAAAA,IACA4C,YAAAA;AAAAA,IACAF,sBAAAA;AAAAA,GAOhC,KAAA;AAED,IAAMwB,MAAAA,GAAAA,GAAMiG,eAAgBvN,CAAAA,IAAAA,EAAMoD,QAAP,CAAA,CAAA;AACvB,IAAA,IAAA,CAAC4C,YAAc,EAAA;AACf,MAAA,OAAO+F,mBAAmBjH,OAAQwC,CAAAA,GAAAA,CAAAA,CAAAA;AAClC,MAAOlK,OAAAA,KAAAA,CAAAA,CAAAA;AAAAA,KACJ,MAAA;AAEH2O,MAAAA,kBAAAA,CAAmBjH,QAAQwC,GAAO,CAAA,GAAA;AAAA,QAC3BtB,GAAAA,YAAAA;AAAAA,QACHF,sBAAAA;AAAAA,OAFJ,CAAA;AAIA,MAAOwB,OAAAA,GAAAA,CAAAA;AAAAA,KACV;AAAA,GAxB0B,EAyB5B,EAzB4B,CAAA,CAAA;AA2B/B,EAAM3C,MAAAA,wBAAAA,GAA2BF,WAAY,CAAA,CAACkJ,UAEtC,KAAA;AACJ,IAAM9F,MAAAA,IAAAA,GAAO8F,UAAWhM,CAAAA,GAAAA,CAAI,CAAC;AAAA,MACI3B,IAAAA;AAAAA,MACAoD,QAAAA;AAAAA,KACEmK,KAAAA,eAAAA,CAAgBvN,IAAMoD,EAAAA,QAAP,CAHrC,CAAA,CAAA;AAIbR,IAAAA,MAAAA,CAAOiF,IAAKkE,CAAAA,kBAAAA,CAAmBjH,OAA/B,CAAA,CAAwCgD,QAAS8F,CAAe,UAAA,KAAA;AAC5D,MAAI,IAAA,CAAC/F,IAAKI,CAAAA,QAAAA,CAAS2F,UAAd,CAAA;AACD,QAAA,OAAO7B,mBAAmBjH,OAAQ8I,CAAAA,UAAAA,CAAAA,CAAAA;AAAAA,KAF1C,CAAA,CAAA;AAAA,GAPwC,EAWzC,EAXyC,CAAA,CAAA;AAa5C,EAAA,MAAM7I,sBAAsBN,WACxB,CAAA,CAACzE,IAA0BG,KAAAA,+BAAAA,CAAgCH,OAAO,GAAR,CAAA,CAAaH,UAAWM,CAAAA,+BAAAA,CAAgCgM,kBAAD,CAAuB,GAAA,GAA7G,CAC3B,EAAA,CAACA,kBAAD,CAFmC,CAAA,CAAA;AAIjC/G,EAAAA,MAAAA,iBAAAA,GAAoBX,WAAY,CAAA,CAACzE,IAAyB,KAAA;AAC5D,IAAIA,IAAAA,IAAAA,CAAKH,WAAWsM,kBAAhB,CAAA;AACA,MAAOnM,OAAAA,IAAAA,CAAKmB,OAAQgL,CAAAA,kBAAAA,EAAoB,EAAjC,CAAA,CAAA;AACX,IAAM7L,MAAAA,KAAAA,CAAM,iCAAiC6L,kBAAlC,CAAA,CAAA;AAAA,GACd,EAAE,CAACA,kBAAD,CAJkC,CAAA,CAAA;AAM/BrK,EAAAA,MAAAA,sBAAAA,GAAyB2C,WAAY,CAAA,CAACzE,IAA0B,KAAA,CAAA,EAAEoL,kBAAsBjL,CAAAA,CAAAA,EAAAA,+BAAAA,CAAgCH,IAAD,CAAA,CAAA,CAAA,EACzH,CAACoL,kBAAD,CADsC,CAAA,CAAA;AAGpC/I,EAAAA,MAAAA,eAAAA,GAAkBoC,YAAY,CAACzE,IAAAA,KAA0B,IAAGG,+BAAgCH,CAAAA,IAAD,CAC7F,CAAA,CAAA,EAAA,EAD+B,CAAA,CAAA;AAGnC,EAAA,MAAM6N,2BAA8BpJ,GAAAA,WAAAA,CAAY,CAAgBzE,IAAAA,EAAc8N,iBAAkD,KAAA;AAC5H,IAAA,IAAIrC,qBAAuB,EAAA;AACvB,MAAMsC,MAAAA,mBAAAA,GAAsBtC,qBAAsBmB,CAAAA,mBAAAA,CAAoB5M,IAA1C,CAAA,CAAA;AAC5ByL,MAAAA,qBAAAA,CAAsBuC,oBAAqBhO,CAAAA,IAAAA,EAAM+H,SAAUgG,CAAAA,mBAAAA,EAAqBD,iBAAtB,CAA1D,CAAA,CAAA;AAAA,KACH;AAAA,GACJ,EAAE,CAACrC,qBAAD,CAL4C,CAAA,CAAA;AAOxC,EAAA,OAAA;AAAA,IACHhK,UAAAA;AAAAA,IACAwM,OAAStC,EAAAA,iBAAAA;AAAAA,IACTE,sBAAAA;AAAAA,IACAK,OAAAA;AAAAA,IACAf,QAAAA;AAAAA,IACAC,kBAAAA;AAAAA,IACAyC,2BAAAA;AAAAA,IACA5J,WAAAA;AAAAA,IACAiJ,qBAAAA;AAAAA,IACAnH,WAAAA;AAAAA,IACApB,wBAAAA;AAAAA,IACAI,mBAAAA;AAAAA,IACAK,iBAAAA;AAAAA,IACAtD,sBAAAA;AAAAA,IACAO,eAAAA;AAAAA,GAfJ,CAAA;AAiBH,CAAA;AAED,MAAMgK,gBAAgB,OAA6B;AAAA,EACIC,uBAAAA;AAAAA,EACAC,IAAAA;AAAAA,EACAtO,cAAAA;AAAAA,EACAsN,cAAAA;AAAAA,EACAC,MAAAA;AAAAA,EACAzN,UAAAA;AAAAA,EACAC,aAAAA;AAAAA,CAW7B,KAAA;AAEtB,EAAIsE,IAAAA,KAAAA,CAAMC,OAAQ+J,CAAAA,uBAAd,CAAwC,EAAA;AACjC,IAAA,OAAA;AAAA,MACHrM,WAAaqM,EAAAA,uBAAAA;AAAAA,KADjB,CAAA;AAAA,GAGH,MAAA,IAAU,OAAOA,uBAAAA,KAA4B,UAAY,EAAA;AACtD,IAAA,OAAOA,uBAAwB,CAAA;AAAA,MAC3BC,IAAAA;AAAAA,MACAtO,cAAAA;AAAAA,MACAsN,cAAAA;AAAAA,MACAC,MAAAA;AAAAA,MACAzN,UAAAA;AAAAA,MACAC,aAAAA;AAAAA,KAN0B,CAAA,CAAA;AAAA,GAQ3B,MAAA;AACH,IAAOsO,OAAAA,uBAAAA,CAAAA;AAAAA,GACV;AACJ,CAAA,CAAA;AAGM,SAAA,eAAA,CAAyBtM,MAAcoD,QAAmB,EAAA;AACzDA,EAAAA,IAAAA,QAAAA;AACA,IAAA,OAAQ,CAAEjD,EAAAA,+BAAAA,CAAgCH,IAAD,CAAA,CAAA,CAAA,EAAUG,gCAAgCiD,QAAD,CAAA,CAAA,CAAA,CAAA;AAAA;AAElF,IAAA,OAAOjD,gCAAgCH,IAAD,CAAA,CAAA;AAC7C;;AChUgD,SAAA,sBAAA,CAAA;AAAA,EACNkO,YAAAA;AAAAA,EACAC,cAAAA;AAAAA,EACA5C,cAAAA;AAAAA,EACAC,MAAAA;AAAAA,EACAzN,UAAAA;AAAAA,EACAC,aAAAA;AAAAA,CAQd,EAAA;AAEzB,EAAA,MAAM,CAACuO,IAAAA,EAAM6B,OAAWnR,CAAAA,GAAAA,QAAAA,CAAsB,IAAd,CAAA,CAAA;AAC1B,EAAA,MAAA,CAACoR,WAAAA,EAAaC,cAAkBrR,CAAAA,GAAAA,QAAAA,CAAkB,KAAV,CAAA,CAAA;AACxC,EAAA,MAAA,CAACsR,eAAAA,EAAiBC,kBAAsBvR,CAAAA,GAAAA,QAAAA,CAAc,KAAN,CAAA,CAAA;AAChD,EAAA,MAAA,CAACwR,KAAOC,EAAAA,QAAAA,CAAAA,GAAYzR,QAA1B,EAAA,CAAA;AAEA,EAAA,MAAM0R,eAAeT,YAAaS,CAAAA,YAAAA,CAAAA;AAE5BC,EAAAA,MAAAA,qBAAwBT,GAAAA,cAAAA,KAAmB/Q,KAAa,CAAA,IAAA,CAAC,CAAC+Q,cAAAA,CAAAA;AAChE,EAAM/B,MAAAA,iBAAAA,GAAqB,EAACwC,qBAAyB7L,IAAAA,OAAAA,CAAQwJ,IAAD,CAAUxJ,IAAAA,OAAAA,CAAQ4L,YAAD,CAAA,KAAmB,CAACJ,eAAAA,CAAAA;AAE3FtQ,EAAAA,MAAAA,cAAAA,GAA2C4Q,QAAQ,OAAO;AAAA,IAC5DtC,IAAAA;AAAAA,IACAoC,YAAAA;AAAAA,IACAvC,iBAAAA;AAAAA,IACA0C,cAAAA,EAAgBZ,aAAaY,cAAkB,IAAA,KAAA;AAAA,IAC/CT,WAAAA;AAAAA,IACAE,eAAAA;AAAAA,IACAQ,SAASb,YAAaa,CAAAA,OAAAA;AAAAA,IACtBN,KAAAA;AAAAA,IACAC,QAAAA;AAAAA,IACAR,YAAAA;AAAAA,GAV4D,CAAA,EAW5D,CAACA,YAAcG,EAAAA,WAAAA,EAAajC,mBAAmBqC,KAAOE,EAAAA,YAAAA,EAAcJ,eAAiBhC,EAAAA,IAArF,CAXoD,CAAA,CAAA;AAaxD,EAAMyC,MAAAA,mBAAAA,GAAsBvK,YAAY,YAAY;AAChD,IAAA,MAAMwK,eAAef,YAAa3B,CAAAA,IAAAA,CAAAA;AAClC,IAAI4B,IAAAA,cAAAA,YAA0Be,YAAYD,YAAc,EAAA;AACpDX,MAAAA,cAAAA,CAAe,IAAD,CAAA,CAAA;AACV,MAAA,IAAA;AACA,QAAMa,MAAAA,OAAAA,GAAU,MAAMhB,cAAe,CAAA;AAAA,UACjC5B,IAAM0C,EAAAA,YAAAA;AAAAA,UACNhR,cAAAA;AAAAA,UACAsN,cAAAA;AAAAA,UACAC,MAAAA;AAAAA,UACAzN,UAAAA;AAAAA,UACAC,aAAAA;AAAAA,SANgC,CAAA,CAAA;AAQhCmR,QAAAA,IAAAA,OAAAA;AACAf,UAAAA,OAAAA,CAAQa,YAAD,CAAA,CAAA;AAAA;AAEPT,UAAAA,kBAAAA,CAAmB,IAAD,CAAA,CAAA;AAAA,eACjB1L,CAAP,EAAA;AACE0L,QAAAA,kBAAAA,CAAmB1L,CAAD,CAAA,CAAA;AAClBoL,QAAAA,YAAAA,CAAaa,OAAb,EAAA,CAAA;AAAA,OACH;AACDT,MAAAA,cAAAA,CAAe,KAAD,CAAA,CAAA;AAAA,KACX,MAAA;AACHF,MAAAA,OAAAA,CAAQa,YAAD,CAAA,CAAA;AAAA,KACV;AAAA,GACF,EAAA,CAACf,YAAa3B,CAAAA,IAAd,CAzBoC,CAAA,CAAA;AA2BvChN,EAAAA,SAAAA,CAAU,MAAM;AACZyP,IAAmB,mBAAA,EAAA,CAAA;AAAA,GACpB,EAAA,CAACd,YAAa3B,CAAAA,IAAAA,EAAMyC,mBAApB,CAFM,CAAA,CAAA;AAKT,EAAO/Q,OAAAA,cAAAA,CAAAA;AACV;;AC3ED,SAAA,mBAAA,CAA6B+B,IAAsB,EAAA;AAC/C,EAAA,OAAOA,KACFI,KAAM,CAAA,GADJ,EAEFoC,MAAO,CAAA,CAACM,GAAGlC,CAAMA,KAAAA,CAAAA,GAAI,CAAM,KAAA,CAFzB,EAGFwG,MAAO,CAAA,CAACoC,GAAGC,CAAO,KAAA,CAAA,EAAED,KAAKC,CAHvB,CAAA,CAAA,CAAA,CAAA;AAIV,CAAA;AAEmF,SAAA,uCAAA,GAAA;AAChF,EAAA,SAAA,2BAAA,CAAwCzJ,MAAcoP,IAAkC,EAAA;AACpF,IAAMC,MAAAA,UAAAA,GAAc,CAAoBC,kBAAAA,EAAAA,mBAAAA,CAAoBtP,IAAD,CAAA,CAAA,CAAA,CAAA;AAC3DZ,IAAAA,YAAAA,CAAaI,OAAQ6P,CAAAA,UAAAA,EAAYE,IAAKC,CAAAA,SAAAA,CAAUJ,IAAf,CAAjC,CAAA,CAAA;AAAA,GACH;AAED,EAAA,SAAA,0BAAA,CAAuCpP,IAA0C,EAAA;AAC7E,IAAMqP,MAAAA,UAAAA,GAAc,CAAoBC,kBAAAA,EAAAA,mBAAAA,CAAoBtP,IAAD,CAAA,CAAA,CAAA,CAAA;AAC3D,IAAMuH,MAAAA,IAAAA,GAAOnI,YAAaC,CAAAA,OAAAA,CAAQgQ,UAArB,CAAA,CAAA;AACN9H,IAAAA,OAAAA,IAAOgI,GAAAA,IAAAA,CAAKE,KAAMlI,CAAAA,IAAX,IAAmB,EAAjC,CAAA;AAAA,GACH;AAEM,EAAA,OAAA;AAAA,IACHyG,oBAAsB0B,EAAAA,2BAAAA;AAAAA,IACtB9C,mBAAqB+C,EAAAA,0BAAAA;AAAAA,GAFzB,CAAA;AAIH;;ACFD,MAAMC,uBAA0B,GAAA,IAAA,CAAA;AAgHzB,SAAA,OAAA,CAA2BlT,KAA+B,EAAA;AAEvD,EAAA,MAAA;AAAA,IACFK,QAAAA;AAAAA,IACA0E,UAAY4J,EAAAA,mBAAAA;AAAAA,IACZwE,iBAAAA;AAAAA,IACA1B,cAAAA;AAAAA,IACA5C,cAAAA;AAAAA,IACAC,MAAAA;AAAAA,IACA0C,YAAAA;AAAAA,IACA5C,qBAAAA;AAAAA,IACAtN,aAAAA;AAAAA,IACAD,UAAAA;AAAAA,IACAoN,QAAAA;AAAAA,IACAC,kBAAAA;AAAAA,GACA1O,GAAAA,KAAAA,CAAAA;AAEJ,EAAA,MAAMoT,eAAe3E,QAAY,IAAA,GAAA,CAAA;AACjC,EAAA,MAAM4E,0BAA0B3E,kBAAsBwE,IAAAA,uBAAAA,CAAAA;AAEhDI,EAAAA,MAAAA,eAAAA,GAAkBxE,MAASyE,GAAAA,OAAAA,CAAQzE,MAAUpO,CAAAA,GAAAA,KAAAA,CAAAA,CAAAA;AAC7Ca,EAAAA,MAAAA,iBAAiBiS,sBAAuB,CAAA;AAAA,IAC1ChC,YAAAA;AAAAA,IACAC,cAAAA;AAAAA,IACA5C,cAAAA;AAAAA,IACAC,MAAAA;AAAAA,IACAzN,UAAAA;AAAAA,IACAC,aAAAA;AAAAA,GANyC,CAAA,CAAA;AASvCyN,EAAAA,MAAAA,wBAAwB0E,uCAA9B,EAAA,CAAA;AAEMrS,EAAAA,MAAAA,oBAAoBsS,yBAA0B,CAAA;AAAA,IAChDjF,QAAU2E,EAAAA,YAAAA;AAAAA,IACV1E,kBAAoB2E,EAAAA,uBAAAA;AAAAA,IACpB9R,cAAAA;AAAAA,IACAoN,mBAAAA;AAAAA,IACAE,cAAAA;AAAAA,IACAC,MAAAA;AAAAA,IACAzN,UAAAA;AAAAA,IACAC,aAAAA;AAAAA,IACAsN,qBAAAA;AAAAA,IACAG,qBAAAA;AAAAA,GAV+C,CAAA,CAAA;AAanD,EAAM5N,MAAAA,oBAAAA,GAAuB+F,6BAA6B9F,iBAAD,CAAA,CAAA;AAEzD,EAAA,MAAMmQ,OAAUhQ,GAAAA,cAAAA,CAAeoQ,WAAepQ,IAAAA,cAAAA,CAAe6Q,kBAAkBhR,iBAAkBmQ,CAAAA,OAAAA,CAAAA;AAE7FnQ,EAAAA,IAAAA,kBAAkB+N,sBAAwB,EAAA;AAEtC,IAAA,4BAAA,KAAA,EAAA;AAAA,MACI,QAAA,EAAA,iBAAAnO,GAAA,CAAA,GAAA,EAAA;AAAA,QAAA,QAAA,EAAA,yDAAA;AAAA,OAAA,CACA,kBAAAA,GAAA,CAAA,GAAA,EAAA;AAAA,QAAA,UAAII,iBAAkB+N,CAAAA,sBAAAA;AAAAA,OAF1B,CAAA,CAAA;AAAA,KADJ,CAAA,CAAA;AAAA,GAMH;AAED,EAAA,2BACK,YAAD,EAAA;AAAA,IAAA,QAAA,sBACK,gBAAD,EAAA;AAAA,MACI,QAAA,kBAACnO,GAAA,CAAA,eAAA,CAAgB,QAAjB,EAAA;AAAA,QAAA,UACMQ,CAAuB,kBAAA,KAAA;AAEfE,UAAAA,MAAAA,OAA0B,GAAA;AAAA,YAC5BH,cAAAA;AAAAA,YACAJ,oBAAAA;AAAAA,YACAgS,iBAAAA;AAAAA,YACAtE,cAAAA;AAAAA,YACAC,MAAAA;AAAAA,YACA1N,iBAAAA;AAAAA,YACAC,UAAAA;AAAAA,YACAC,aAAAA;AAAAA,YACAE,kBAAAA;AAAAA,WATJ,CAAA;AAaI,UAAA,2BAAC,sBAAD,EAAA;AAAA,YAA4BE,GAAAA,OAAAA;AAAAA,YAA5B,QAAA,sBACK,mBAAD,EAAA;AAAA,cAAA,QAAA,sBACK,oBAAD,EAAA;AAAA,gBACI,WAAaiS,EAAAA,cAAAA;AAAAA,gBACb,KAAOC,EAAAA,YAAAA;AAAAA,gBACP,MAAQN,EAAAA,eAAAA;AAAAA,gBACJ,QAAA,kBAACtS,GAAA,CAAA,gBAAA,CAAiB,QAAlB,EAAA;AAAA,kBAAA,UACK,CAAC;AAAA,oBAAEkB,IAAAA;AAAAA,mBAAW,KAAA;AACX,oBAAA,OAAO7B,QAAS,CAAA;AAAA,sBACZqB,OAAAA;AAAAA,sBACAQ,IAAAA;AAAAA,sBACAqP,OAAAA;AAAAA,qBAHW,CAAA,CAAA;AAAA,mBAKlB;AAAA,iBAPL,CAAA;AAAA,eAJR,CAAA;AAAA,aADJ,CAAA;AAAA,WAFR,CAAA,CAAA;AAAA,SAoBH;AAAA,OAnCL,CAAA;AAAA,KADJ,CAAA;AAAA,GAFR,CAAA,CAAA;AA4CH;;AC3OM,MAAMsC,WAAYC,GAAAA,UAAAA,CAAW,CAACC,KAAAA,KACjCC,YAAa,CAAA;AAAA,EACTC,UAAY,EAAA;AAAA,IACRC,OAAS,EAAA,MAAA;AAAA,IACTC,UAAY,EAAA,QAAA;AAAA,GAHP;AAAA,EAKTC,WAAa,EAAA;AAAA,IACTC,MAAAA,EAAQN,KAAMO,CAAAA,OAAAA,CAAQ,CAAd,CAAA;AAAA,GANH;AAAA,EAQTC,IAAM,EAAA;AAAA,IACFC,WAAAA,EAAaT,KAAMO,CAAAA,OAAAA,CAAQ,CAAd,CAAA;AAAA,GADX;AARG,CAAD,CADmB,CAAA,CAAA;AA+BT,SAAA,SAAA,CAAA;AAAA,EACIG,KAAAA;AAAAA,EACAC,OAAAA;AAAAA,CACmC,EAAA;AACvDC,EAAAA,MAAAA,UAAUd,WAAhB,EAAA,CAAA;AACA,EAAMe,MAAAA,IAAAA,wBACF,KAAA,EAAA;AAAA,IACI,SAAWC,EAAAA,IAAAA,CAAKF,OAAQV,CAAAA,UAAAA,EAAYU,QAAQP,WAA7B,CAAA;AAAA,IADnB,QAAA,EAAA,iBAEIpT,GAAA,CAAC,SAAD,EAAA;AAAA,MAAW,QAAU,EAAA,OAAA;AAAA,MAAS,KAAO,EAAA,OAAA;AAAA,KAArC,CACA,kBAAAA,GAAA,CAAA,KAAA,EAAA;AAAA,MAAK,WAAW2T,OAAQJ,CAAAA,IAAAA;AAAAA,MAAOE,QAAAA,EAAAA,KAAAA;AAAAA,KAHnC,CAAA,CAAA;AAAA,GADJ,CAAA,CAAA;AAQA,EAAA,IAAIC,OAAS,EAAA;AACT,IAAA,2BACK,OAAD,EAAA;AAAA,MAAS,KAAOA,EAAAA,OAAAA;AAAAA,MACXE,QAAAA,EAAAA,IAAAA;AAAAA,KAFT,CAAA,CAAA;AAAA,GAKH;AACD,EAAOA,OAAAA,IAAAA,CAAAA;AACV;;AClDD,SACI,6BAAA,CAAA;AAAA,EACIE,OAAAA;AAAAA,CACwC,EAAA;AAEtC,EAAA,MAAA,CAACvD,OAAAA,EAASwD,UAAcxU,CAAAA,GAAAA,QAAAA,CAAkB,IAAV,CAAA,CAAA;AACtC,EAAA,MAAM,CAAC0D,MAAAA,EAAQ+Q,SAAazU,CAAAA,GAAAA,QAAAA,CAA0B,IAAlB,CAAA,CAAA;AAEpCsC,EAAAA,SAAAA,CAAU,MAAM;AACRoS,IAAAA,IAAAA,SAAY,GAAA,KAAA,CAAA;AAChBH,IAAAA,OAAAA,CACKhF,KAAMnF,CAAQ,GAAA,KAAA;AACP,MAAA,IAAA,CAACsK,SAAW,EAAA;AACZF,QAAAA,UAAAA,CAAW,KAAD,CAAA,CAAA;AACVC,QAAAA,SAAAA,CAAUrK,GAAD,CAAA,CAAA;AAAA,OACZ;AAAA,KALT,CAOKoF,CAAAA,KAAAA,CAAM0E,CAAS,KAAA,KAAA;AACZM,MAAAA,UAAAA,CAAW,KAAD,CAAA,CAAA;AACV9I,MAAAA,OAAAA,CAAQwI,MAAMA,KAAd,CAAA,CAAA;AAAA,KATR,CAAA,CAAA;AAWA,IAAA,OAAO,MAAM;AACTQ,MAAY,SAAA,GAAA,IAAA,CAAA;AAAA,KADhB,CAAA;AAAA,GAGH,EAAE,CAACH,OAAD,CAhBM,CAAA,CAAA;AAkBT,EAAIvD,IAAAA,OAAAA;AACA,IAAA,2BAAQ,QAAD,EAAA;AAAA,MAAU,OAAQ,EAAA,MAAA;AAAA,KAAzB,CAAA,CAAA;AAEG,EAAA,uBAAAvQ,GAAA,CAAC,MAAM,QAAP,EAAA;AAAA,IAAiBiD,QAAAA,EAAAA,MAAAA;AAAAA,GAAxB,CAAA,CAAA;AAEH,CAAA;AAQYiR,MAAAA,qBAAAA,GAAwBhV,KAAMiV,CAAAA,IAAAA,CAAKC,6BAAX;;AC3CxBC,MAAAA,aAAAA,SAAsBnV,eAAMoV,SAAqC,CAAA;AAAA,EAC1EpL,YAAYlK,KAAY,EAAA;AACpB,IAAA,KAAA,CAAMA,KAAN,CAAA,CAAA;AACA,IAAA,IAAA,CAAK2H,KAAQ,GAAA;AAAA,MAAE4N,QAAU,EAAA,KAAA;AAAA,KAAzB,CAAA;AAAA,GACH;AAAA,EAAA,OAGMC,yBAAyBf,KAAc,EAAA;AACnC,IAAA,OAAA;AAAA,MAAEc,QAAU,EAAA,IAAA;AAAA,KAAnB,CAAA;AAAA,GACH;AAAA,EAGDE,iBAAAA,CAAkBhB,OAAciB,SAAsB,EAAA;AAAA,GAErD;AAAA,EAEDC,MAAS,GAAA;AACL,IAAI,IAAA,IAAA,CAAKhO,MAAM4N,QAAU,EAAA;AACrB,MAAA,4BACK,GAAD,EAAA;AAAA,QACI,OAAS,EAAA,MAAA;AAAA,QACT,aAAe,EAAA,QAAA;AAAA,QACf,CAAG,EAAA,GAAA;AAAA,QAHP,QAAA,EAAA,iBAIIxU,IAAA,CAAC,GAAD,EAAA;AAAA,UACI,OAAS,EAAA,MAAA;AAAA,UACT,UAAY,EAAA,QAAA;AAAA,UACZ,CAAG,EAAA,GAAA;AAAA,UAHP,QAAA,EAAA,iBAIIC,GAAA,CAAC,SAAD,EAAA;AAAA,YAAW,KAAO,EAAA,OAAA;AAAA,YAAS,QAAU,EAAA,OAAA;AAAA,WAJzC,CAKI,kBAAAA,GAAA,CAAC,GAAD,EAAA;AAAA,YAAK,UAAY,EAAA,CAAA;AAAA,YAAjB,QAAA,EAAA,OAAA;AAAA,WALJ,CAAA,CAAA;AAAA,SAJJ,CAWI,kBAAAA,GAAA,CAAC,UAAD,EAAA;AAAA,UAAY,OAAS,EAAA,SAAA;AAAA,UAArB,QAAA,EAAA,8BAAA;AAAA,SAXJ,CAAA,CAAA;AAAA,OADJ,CAAA,CAAA;AAAA,KAiBH;AAEM,IAAA,OAAA,KAAKhB,KAAMK,CAAAA,QAAAA,CAAAA;AAAAA,GACrB;AAtCyE;;ACNvE,SAAA,UAAA,CAAoBuV,GAAqB,EAAA;AACxCpN,EAAAA,IAAAA,IAAO,GAAA,CAAA,CAAA;AAAG,EAAItE,IAAAA,CAAAA,CAAAA;AAAG,EAAI2R,IAAAA,GAAAA,CAAAA;AACzB,EAAA,KAAK3R,CAAI,GAAA,CAAA,EAAGA,CAAI0R,GAAAA,GAAAA,CAAIjS,QAAQO,CAAK,EAAA,EAAA;AAC7B2R,IAAMD,GAAAA,GAAAA,GAAAA,CAAIE,WAAW5R,CAAf,CAAA,CAAA;AACNsE,IAASA,IAAAA,GAAAA,CAAAA,IAAAA,IAAQ,KAAKA,IAAQqN,GAAAA,GAAAA,CAAAA;AAC9BrN,IAAQ,IAAA,IAAA,CAAA,CAAA;AAAA,GACX;AACD,EAAOuN,OAAAA,IAAAA,CAAKC,IAAIxN,IAAT,CAAA,CAAA;AACV;;ACAM,MAAMyN,WAA+C,GAAA;AAAA,EACxDC,WAAa,EAAA;AAAA,IAAEC,KAAO,EAAA,SAAA;AAAA,IAAW5B,IAAM,EAAA,SAAA;AAAA,GADiB;AAAA,EAExD6B,WAAa,EAAA;AAAA,IAAED,KAAO,EAAA,SAAA;AAAA,IAAW5B,IAAM,EAAA,SAAA;AAAA,GAFiB;AAAA,EAGxD8B,WAAa,EAAA;AAAA,IAAEF,KAAO,EAAA,SAAA;AAAA,IAAW5B,IAAM,EAAA,SAAA;AAAA,GAHiB;AAAA,EAIxD+B,YAAc,EAAA;AAAA,IAAEH,KAAO,EAAA,SAAA;AAAA,IAAW5B,IAAM,EAAA,SAAA;AAAA,GAJgB;AAAA,EAKxDgC,aAAe,EAAA;AAAA,IAAEJ,KAAO,EAAA,SAAA;AAAA,IAAW5B,IAAM,EAAA,SAAA;AAAA,GALe;AAAA,EAMxDiC,aAAe,EAAA;AAAA,IAAEL,KAAO,EAAA,SAAA;AAAA,IAAW5B,IAAM,EAAA,SAAA;AAAA,GANe;AAAA,EAOxDkC,UAAY,EAAA;AAAA,IAAEN,KAAO,EAAA,SAAA;AAAA,IAAW5B,IAAM,EAAA,SAAA;AAAA,GAPkB;AAAA,EAQxDmC,WAAa,EAAA;AAAA,IAAEP,KAAO,EAAA,SAAA;AAAA,IAAW5B,IAAM,EAAA,SAAA;AAAA,GARiB;AAAA,EASxDoC,aAAe,EAAA;AAAA,IAAER,KAAO,EAAA,SAAA;AAAA,IAAW5B,IAAM,EAAA,SAAA;AAAA,GATe;AAAA,EAUxDqC,WAAa,EAAA;AAAA,IAAET,KAAO,EAAA,MAAA;AAAA,IAAQ5B,IAAM,EAAA,SAAA;AAAA,GAVoB;AAAA,EAYxDsC,SAAW,EAAA;AAAA,IAAEV,KAAO,EAAA,SAAA;AAAA,IAAW5B,IAAM,EAAA,SAAA;AAAA,GAZmB;AAAA,EAaxDuC,SAAW,EAAA;AAAA,IAAEX,KAAO,EAAA,SAAA;AAAA,IAAW5B,IAAM,EAAA,SAAA;AAAA,GAbmB;AAAA,EAcxDwC,SAAW,EAAA;AAAA,IAAEZ,KAAO,EAAA,SAAA;AAAA,IAAW5B,IAAM,EAAA,SAAA;AAAA,GAdmB;AAAA,EAexDyC,UAAY,EAAA;AAAA,IAAEb,KAAO,EAAA,SAAA;AAAA,IAAW5B,IAAM,EAAA,SAAA;AAAA,GAfkB;AAAA,EAgBxD0C,WAAa,EAAA;AAAA,IAAEd,KAAO,EAAA,SAAA;AAAA,IAAW5B,IAAM,EAAA,SAAA;AAAA,GAhBiB;AAAA,EAiBxD2C,WAAa,EAAA;AAAA,IAAEf,KAAO,EAAA,SAAA;AAAA,IAAW5B,IAAM,EAAA,SAAA;AAAA,GAjBiB;AAAA,EAkBxD4C,QAAU,EAAA;AAAA,IAAEhB,KAAO,EAAA,SAAA;AAAA,IAAW5B,IAAM,EAAA,SAAA;AAAA,GAlBoB;AAAA,EAmBxD6C,SAAW,EAAA;AAAA,IAAEjB,KAAO,EAAA,SAAA;AAAA,IAAW5B,IAAM,EAAA,SAAA;AAAA,GAnBmB;AAAA,EAoBxD8C,WAAa,EAAA;AAAA,IAAElB,KAAO,EAAA,SAAA;AAAA,IAAW5B,IAAM,EAAA,SAAA;AAAA,GApBiB;AAAA,EAqBxD+C,SAAW,EAAA;AAAA,IAAEnB,KAAO,EAAA,MAAA;AAAA,IAAQ5B,IAAM,EAAA,SAAA;AAAA,GArBsB;AAAA,EAuBxDgD,QAAU,EAAA;AAAA,IAAEpB,KAAO,EAAA,SAAA;AAAA,IAAW5B,IAAM,EAAA,MAAA;AAAA,GAvBoB;AAAA,EAwBxDiD,QAAU,EAAA;AAAA,IAAErB,KAAO,EAAA,SAAA;AAAA,IAAW5B,IAAM,EAAA,MAAA;AAAA,GAxBoB;AAAA,EAyBxDkD,QAAU,EAAA;AAAA,IAAEtB,KAAO,EAAA,SAAA;AAAA,IAAW5B,IAAM,EAAA,MAAA;AAAA,GAzBoB;AAAA,EA0BxDmD,SAAW,EAAA;AAAA,IAAEvB,KAAO,EAAA,SAAA;AAAA,IAAW5B,IAAM,EAAA,MAAA;AAAA,GA1BmB;AAAA,EA2BxDoD,UAAY,EAAA;AAAA,IAAExB,KAAO,EAAA,SAAA;AAAA,IAAW5B,IAAM,EAAA,MAAA;AAAA,GA3BkB;AAAA,EA4BxDqD,UAAY,EAAA;AAAA,IAAEzB,KAAO,EAAA,SAAA;AAAA,IAAW5B,IAAM,EAAA,MAAA;AAAA,GA5BkB;AAAA,EA6BxDsD,OAAS,EAAA;AAAA,IAAE1B,KAAO,EAAA,SAAA;AAAA,IAAW5B,IAAM,EAAA,MAAA;AAAA,GA7BqB;AAAA,EA8BxDuD,QAAU,EAAA;AAAA,IAAE3B,KAAO,EAAA,SAAA;AAAA,IAAW5B,IAAM,EAAA,MAAA;AAAA,GA9BoB;AAAA,EA+BxDwD,UAAY,EAAA;AAAA,IAAE5B,KAAO,EAAA,SAAA;AAAA,IAAW5B,IAAM,EAAA,MAAA;AAAA,GA/BkB;AAAA,EAgCxDyD,QAAU,EAAA;AAAA,IAAE7B,KAAO,EAAA,MAAA;AAAA,IAAQ5B,IAAM,EAAA,MAAA;AAAA,GAhCuB;AAAA,EAkCxD0D,UAAY,EAAA;AAAA,IAAE9B,KAAO,EAAA,SAAA;AAAA,IAAW5B,IAAM,EAAA,SAAA;AAAA,GAlCkB;AAAA,EAmCxD2D,UAAY,EAAA;AAAA,IAAE/B,KAAO,EAAA,SAAA;AAAA,IAAW5B,IAAM,EAAA,SAAA;AAAA,GAnCkB;AAAA,EAoCxD4D,UAAY,EAAA;AAAA,IAAEhC,KAAO,EAAA,SAAA;AAAA,IAAW5B,IAAM,EAAA,SAAA;AAAA,GApCkB;AAAA,EAqCxD6D,WAAa,EAAA;AAAA,IAAEjC,KAAO,EAAA,SAAA;AAAA,IAAW5B,IAAM,EAAA,SAAA;AAAA,GArCiB;AAAA,EAsCxD8D,YAAc,EAAA;AAAA,IAAElC,KAAO,EAAA,SAAA;AAAA,IAAW5B,IAAM,EAAA,SAAA;AAAA,GAtCgB;AAAA,EAuCxD+D,YAAc,EAAA;AAAA,IAAEnC,KAAO,EAAA,SAAA;AAAA,IAAW5B,IAAM,EAAA,SAAA;AAAA,GAvCgB;AAAA,EAwCxDgE,SAAW,EAAA;AAAA,IAAEpC,KAAO,EAAA,SAAA;AAAA,IAAW5B,IAAM,EAAA,SAAA;AAAA,GAxCmB;AAAA,EAyCxDiE,UAAY,EAAA;AAAA,IAAErC,KAAO,EAAA,SAAA;AAAA,IAAW5B,IAAM,EAAA,SAAA;AAAA,GAzCkB;AAAA,EA0CxDkE,YAAc,EAAA;AAAA,IAAEtC,KAAO,EAAA,SAAA;AAAA,IAAW5B,IAAM,EAAA,SAAA;AAAA,GA1CgB;AAAA,EA2CxDmE,UAAY,EAAA;AAAA,IAAEvC,KAAO,EAAA,MAAA;AAAA,IAAQ5B,IAAM,EAAA,MAAA;AAAA,GAAvB;AA3C4C,CAAA,CAAA;AA8CrD,SAAA,qBAAA,CAA+BoE,IAA+B,EAAA;AACjE,EAAMnQ,MAAAA,IAAAA,GAAeoQ,WAAWD,IAAD,CAAA,CAAA;AAC/B,EAAME,MAAAA,SAAAA,GAAY3S,MAAOiF,CAAAA,IAAAA,CAAK8K,WAAZ,CAAA,CAAA;AAClB,EAAM6C,MAAAA,KAAAA,GAAQtQ,OAAOqQ,SAAUlV,CAAAA,MAAAA,CAAAA;AAC/B,EAAA,OAAOsS,YAAY4C,SAAUC,CAAAA,KAAAA,CAAAA,CAAAA,CAAAA;AAChC,CAAA;AAEM,SAAA,oBAAA,CAA8BlO,GAAiC,EAAA;AAC3DqL,EAAAA,OAAAA,WAAYrL,CAAAA,GAAAA,CAAAA,CAAAA;AACtB;;AC7DM,SAAA,mBAAA,CAA6BmO,UAAuE,EAAA;AAChGA,EAAAA,OAAAA,UAAAA,YAAsBC,GACvBpT,GAAAA,KAAAA,CAAMI,IAAK+S,CAAAA,UAAAA,CAAWpU,SAAtB,CAAA,GACAuB,MAAOvB,CAAAA,OAAAA,CAAkCoU,UAAzC,CAAA,CAAA;AACT,CAAA;AAEM,SAAA,oBAAA,CAA8BA,YAAwBnO,GAA4D,EAAA;AACrH,EAAA,OAAOmO,sBAAsBC,GACvBD,GAAAA,UAAAA,CAAWE,GAAIrO,CAAAA,GAAf,IACAmO,UAAWnO,CAAAA,GAAAA,CAAAA,CAAAA;AACpB,CAAA;AAEM,SAAA,iBAAA,CAA2BmO,YAAwBnO,GAA6C,EAAA;AACnG,EAAMsO,MAAAA,aAAAA,GAAgBC,oBAAqBJ,CAAAA,UAAAA,EAAYnO,GAAb,CAAA,CAAA;AAC1C,EAAA,IAAI,OAAOsO,aAAAA,KAAkB,QAAY,IAAA,OAAA,IAAWA,aAAe,EAAA;AACxDA,IAAAA,OAAAA,aAAc/C,CAAAA,KAAAA,CAAAA;AAAAA,GACxB;AACD,EAAOzV,OAAAA,KAAAA,CAAAA,CAAAA;AACV,CAAA;AAEM,SAAA,mBAAA,CAA6BwY,aAA0C,EAAA;AACnE,EAAA,OAAA,OAAOA,aAAkB,KAAA,QAAA,IAAaA,aAAkC3M,CAAAA,QAAAA,CAAAA;AAClF,CAAA;AAGM,SAAA,cAAA,CACH2M,aACkB,EAAA;AAClB,EAAA,IAAIA,aAAkBxY,KAAAA,KAAAA,CAAAA;AAClB,IAAOA,OAAAA,KAAAA,CAAAA,CAAAA;AACX,EAAI,IAAA,OAAOwY,kBAAkB,QAAU,EAAA;AAC5BA,IAAAA,OAAAA,aAAcE,CAAAA,KAAAA,CAAAA;AAAAA,GAClB,MAAA;AACH,IAAOF,OAAAA,aAAAA,CAAAA;AAAAA,GACV;AACJ;;ACrBD,MAAMrF,WAAYC,GAAAA,UAAAA,CAA2D,CAACC,KAAAA,KAC1EC,YAAa,CAAA;AAAA,EACTqF,IAAM,EAAA;AAAA,IACFC,QAAU,EAAA,MAAA;AAAA,IACVC,iBAAiB,CAAC;AAAA,MACIzS,MAAAA;AAAAA,MACA2N,KAAAA;AAAAA,KACEA,KAAAA,KAAAA,GAAQ,SAAS3N,MAAOqP,CAAAA,KAAAA;AAAAA,GAN3C;AAAA,EAQTiD,KAAO,EAAA;AAAA,IACHjD,OAAO,CAAC;AAAA,MAAErP,MAAAA;AAAAA,MAAQ2N,KAAAA;AAAAA,KAAYA,KAAAA,KAAAA,GAAQ,QAAQ3N,MAAOyN,CAAAA,IAAAA;AAAAA,IACrDiF,UAAAA,EAAYzF,MAAM0F,UAAWC,CAAAA,iBAAAA;AAAAA,GAF1B;AARE,CAAD,CADY,CAAA,CAAA;AA0BG,SAAA,cAAA,CAAA;AAAA,EACIX,UAAAA;AAAAA,EACAY,OAAAA;AAAAA,EACAC,KAAAA;AAAAA,CACoB,EAAA;AACnD,EAAMC,MAAAA,SAAAA,GAAYF,YAAYjZ,KAAYyY,CAAAA,GAAAA,oBAAAA,CAAqBJ,YAAYY,OAAQG,CAAAA,QAAAA,EAArB,CAAmCpZ,GAAAA,KAAAA,CAAAA,CAAAA;AACjG,EAAM0Y,MAAAA,KAAAA,GAAQW,eAAeF,SAAD,CAAA,CAAA;AACtBG,EAAAA,MAAAA,cAAiBC,GAAAA,iBAAAA,CAAkBlB,UAAYY,EAAAA,OAAAA,CAAQG,UAArB,CAAA,CAAA;AACxC,EAAA,2BAAQ,UAAD,EAAA;AAAA,IACH,WAAY,CAAEH,EAAAA,OAAAA,CAAAA,CAAAA;AAAAA,IACd,cAAA;AAAA,IACA,KAAA,EAAOP,KAAU1Y,KAAAA,KAAAA,CAAAA,GAAY0Y,KAAQO,GAAAA,OAAAA;AAAAA,IACrC,OAAO,CAACP,KAAAA;AAAAA,IACR,QAAU,EAAA,KAAA;AAAA,IACV,KAAA;AAAA,GANJ,CAAA,CAAA;AAOH,CAAA;AAe0B,SAAA,UAAA,CAAA;AAAA,EACIc,SAAAA;AAAAA,EACAd,KAAAA;AAAAA,EACAY,cAAAA;AAAAA,EACAvF,KAAAA;AAAAA,EACA0F,QAAAA;AAAAA,EACAP,KAAAA;AAAAA,CACc,EAAA;AAEnC9S,EAAAA,MAAAA,MAASqL,GAAAA,OAAAA,CAAQ,MACnB6H,cAAAA,GACMI,oBAAqBJ,CAAAA,cAAD,CACpBK,GAAAA,qBAAAA,CAAsBH,SAAD,CAAA,EAAa,CAACA,SAAAA,EAAWF,cAAZ,CAHtB,CAAA,CAAA;AAIhBrF,EAAAA,MAAAA,UAAUd,WAAU,CAAA;AAAA,IAAE/M,MAAAA;AAAAA,IAAQ2N,KAAAA;AAAAA,GAAX,CAAA,CAAA;AAEzB,EAAA,2BACK,IAAD,EAAA;AAAA,IACI,OAAS,EAAA;AAAA,MACL4E,MAAM1E,OAAQ0E,CAAAA,IAAAA;AAAAA,MACdD,OAAOzE,OAAQyE,CAAAA,KAAAA;AAAAA,KAHvB;AAAA,IAKI,IAAA,EAAMQ,QAAQ,OAAU,GAAA,QAAA;AAAA,IACxB,OAAA,EAASO,WAAW,UAAa,GAAA,QAAA;AAAA,IACjC,KAAA;AAAA,GARR,CAAA,CAAA;AAWH;;ACzF6B,SAAA,aAAA,CAAA;AAAA,EACI9U,IAAAA;AAAAA,EACA6H,KAAAA;AAAAA,EACAf,QAAAA;AAAAA,EACAmO,IAAAA;AAAAA,CACkD,EAAA;AAEhF,EAAInO,IAAAA,QAAAA,CAASoO,QAAQxB,UAAY,EAAA;AACvBY,IAAAA,MAAAA,OAAUzM,GAAAA,KAAAA,CAAAA;AAChB,IAAM6L,MAAAA,UAAAA,GAAa5M,SAASoO,MAAOxB,CAAAA,UAAAA,CAAAA;AACnC,IAAA,2BAAQ,cAAD,EAAA;AAAA,MACH,OAAA;AAAA,MACA,UAAA;AAAA,MACA,OAAOuB,IAAS,KAAA,SAAA;AAAA,KAHpB,CAAA,CAAA;AAAA,GAIH,MAAA,IAAUnO,QAASoO,CAAAA,MAAAA,EAAQC,YAAc,EAAA;AACtC,IAAA,2BACK,aAAD,EAAA;AAAA,MAAA,QAAA,sBACK,UAAD,EAAA;AAAA,QACI,WAAWnV,IAAQ,IAAA,EAAA;AAAA,QACnB,KAAO6H,EAAAA,KAAAA;AAAAA,QACP,OAAOoN,IAAS,KAAA,SAAA;AAAA,OAHpB,CAAA;AAAA,KAFR,CAAA,CAAA;AAAA,GAQG,MAAA;AACI,IAAA,2BAAAG,QAAA,EAAA;AAAA,MACFvN,QAAAA,EAAAA,KAAAA,KAAgB3B,KAAAA,CAAAA,QAAAA,CAAS,IAAf,CACL2B,GAAAA,KAAAA,CAAMxJ,KAAM,CAAA,IAAZ,EAAkBuB,GAAI,CAAA,CAAC2Q,GAAKkD,EAAAA,KAAAA,yBAC1B,KAAA,EAAA;AAAA,QAAsClD,QAAAA,EAAAA,GAAAA;AAAAA,OAA3B,EAAA,CAAA,eAAA,EAAiBkD,KAA5B,CAAA,CAAA,CADF,CAEA5L,GAAAA,KAAAA,CAAAA;AAAAA,KAJV,CAAA,CAAA;AAAA,GAMH;AACJ;;AC7BM,MAAM2G,WAAYC,GAAAA,UAAAA,CAAW,CAACC,KAAAA,KACjCC,YAAa,CAAA;AAAA,EACT0G,KAAO,EAAA;AAAA,IACHxG,OAAS,EAAA,MAAA;AAAA,IACTyG,aAAe,EAAA,QAAA;AAAA,GAHV;AAAA,EAKTC,SAAW,EAAA;AAAA,IACP1G,OAAS,EAAA,MAAA;AAAA,IACT2G,QAAU,EAAA,MAAA;AAAA,GAPL;AAAA,EASTC,SAAW,EAAA;AAAA,IACPzG,MAAAA,EAAQN,KAAMO,CAAAA,OAAAA,CAAQ,GAAd,CAAA;AAAA,GADD;AATF,CAAD,CADmB,CAAA,CAAA;AAmBG,SAAA,qBAAA,CAAA;AAAA,EACIjP,IAAAA;AAAAA,EACA6H,KAAAA;AAAAA,EACAf,QAAAA;AAAAA,EACAmO,IAAAA;AAAAA,CACgC,EAAA;AAEhE3F,EAAAA,MAAAA,UAAUd,WAAhB,EAAA,CAAA;AAEI,EAAA,IAAA,CAAC1H,SAASiC,EAAMjC,IAAAA,QAAAA,CAASE,aAAa,OAAWF,IAAAA,QAAAA,CAASiC,GAAG/B,QAAa,KAAA,QAAA;AAC1E,IAAA,MAAMzI,MAAM,sDAAD,CAAA,CAAA;AAEXsJ,EAAAA,IAAAA,KAAS,IAAA,CAACtH,KAAMC,CAAAA,OAAAA,CAAQqH,KAAd,CAAsB,EAAA;AACzB,IAAA,2BAAA,KAAA,EAAA;AAAA,MAAA,UAAO,CAAoBA,kBAAAA,EAAAA,KAAAA,CAAAA,CAAAA;AAAAA,KAAlC,CAAA,CAAA;AAAA,GACH;AACD,EAAA,MAAM6N,iBAAiB5O,QAASiC,CAAAA,EAAAA,CAAAA;AAG5B,EAAA,2BAAA,KAAA,EAAA;AAAA,IAAK,WAAWuG,OAAQ+F,CAAAA,KAAAA;AAAAA,IACnBxN,QAAAA,EAAAA,SACDA,KAAMjI,CAAAA,GAAAA,CAAI,CAACyG,CAAGoN,EAAAA,KAAAA,yBACV,KAAA,EAAA;AAAA,MAAK,WAAWnE,OAAQmG,CAAAA,SAAAA;AAAAA,MAAxB,QAAA,sBAEK,aAAD,EAAA;AAAA,QAAA,QAAA,sBACK,aAAD,EAAA;AAAA,UAAe,IAAA;AAAA,UACA,QAAUC,EAAAA,cAAAA;AAAAA,UACV,KAAOrP,EAAAA,CAAAA;AAAAA,UACP,IAAA;AAAA,SAHf,CAAA;AAAA,OADJ,CAAA;AAAA,KADO,EAAA,CAAA,sBAAA,EAAwBrG,IAAQyT,CAAAA,CAAAA,EAAAA,KAAAA,CAAAA,CAD3C,CADJ,CAAA;AAAA,GAHR,CAAA,CAAA;AAgBH;;ACpDM,MAAMjF,WAAYC,GAAAA,UAAAA,CAAW,CAACC,KAAAA,KACjCC,YAAa,CAAA;AAAA,EACT4G,SAAW,EAAA;AAAA,IACP1G,OAAS,EAAA,MAAA;AAAA,IACT2G,QAAU,EAAA,MAAA;AAAA,GAHL;AAAA,EAKTC,SAAW,EAAA;AAAA,IACPzG,MAAAA,EAAQN,KAAMO,CAAAA,OAAAA,CAAQ,GAAd,CAAA;AAAA,GADD;AALF,CAAD,CADmB,CAAA,CAAA;AAeF,SAAA,gBAAA,CAAA;AAAA,EACIjP,IAAAA;AAAAA,EACA6H,KAAAA;AAAAA,EACA6L,UAAAA;AAAAA,EACAuB,IAAAA;AAAAA,CAMlC,EAAA;AAEO3F,EAAAA,MAAAA,UAAUd,WAAhB,EAAA,CAAA;AAGI,EAAA,2BAAA,KAAA,EAAA;AAAA,IAAK,WAAWc,OAAQiG,CAAAA,SAAAA;AAAAA,IAAxB,UACK1N,KACAA,IAAAA,KAAAA,CAAgBjI,GAAI,CAAA,CAAC0U,SAASb,KAAU,KAAA;AAE7B,MAAA,2BAAA,KAAA,EAAA;AAAA,QAAK,WAAWnE,OAAQmG,CAAAA,SAAAA;AAAAA,QAAxB,QAAA,sBAEK,aAAD,EAAA;AAAA,UAAA,QAAA,sBACK,cAAD,EAAA;AAAA,YACI,OAAA;AAAA,YACA,UAAA;AAAA,YACA,OAAOR,IAAS,KAAA,SAAA;AAAA,WAHpB,CAAA;AAAA,SADJ,CAAA;AAAA,OAFJ,EACW,CAAoBjV,kBAAAA,EAAAA,IAAAA,CAAAA,CAAAA,EAAQyT,KADvC,CAAA,CAAA,CAAA,CAAA;AAAA,KAFZ,CAAA;AAAA,GAHR,CAAA,CAAA;AAmBH;;ACpDwC,SAAA,wBAAA,CAAA;AAAA,EACIzT,IAAAA;AAAAA,EACA6H,KAAAA;AAAAA,EACAf,QAAAA;AAAAA,EACAmO,IAAAA;AAAAA,CAC2C,EAAA;AAEhFnO,EAAAA,IAAAA,SAASE,QAAa,KAAA,OAAA;AACtB,IAAA,MAAMzI,MAAM,iDAAD,CAAA,CAAA;AAEToX,EAAAA,MAAAA,aAAa7O,QAASiC,CAAAA,EAAAA,CAAAA;AACxB,EAAA,IAAA,CAAC4M,WAAWT,MAAQxB,EAAAA,UAAAA;AACpB,IAAA,MAAMnV,MAAM,iDAAD,CAAA,CAAA;AAEf,EAAA,IAAI,CAACsJ,KAAAA;AAAO,IAAO,OAAA,IAAA,CAAA;AAEnB,EAAM6L,MAAAA,UAAAA,GAAaiC,WAAWT,MAAQxB,EAAAA,UAAAA,CAAAA;AAEtC,EAAA,2BAAQ,gBAAD,EAAA;AAAA,IAAkB,IAAA;AAAA,IACA,KAAA;AAAA,IACA,UAAA;AAAA,IACA,IAAA;AAAA,GAHzB,CAAA,CAAA;AAIH;;ACtB8B,SAAA,cAAA,CAAA;AAAA,EACI1T,IAAAA;AAAAA,EACA6H,KAAAA;AAAAA,EACAf,QAAAA;AAAAA,EACAmO,IAAAA;AAAAA,CACmD,EAAA;AAE3EpN,EAAAA,OAAAA,KAAAA,uBACA,QAAD,EAAA;AAAA,IAAU,KAAM,EAAA,WAAA;AAAA,GADV,CAEN,mBAAAlM,GAAA,CAAC,oBAAD,EAAA;AAAA,IAAsB,KAAM,EAAA,UAAA;AAAA,GAFlC,CAAA,CAAA;AAGH;;ACNwB,SAAA,QAAA,CAAA;AAAA,EACI+J,MAAAA;AAAAA,CACc,EAAA;AACvC,EAAA,2BAAQ,eAAD,EAAA;AAAA,IAAiB,MAAQ,EAAA,OAAOA,MAAW,KAAA,QAAA,GAAWA,MAAS,GAAA,EAAA;AAAA,IAC9C,KAAO,EAAA;AAAA,MACHkQ,QAAU,EAAA,SAAA;AAAA,MACVC,UAAY,EAAA,SAAA;AAAA,MACZC,UAAY,EAAA,SAAA;AAAA,KAJjC;AAAA,IAMiB,UAAY,EAAA;AAAA,MACRrO,CAAAA,EAAI9M,CAAU,KAAA,qBAAAgB,GAAA;QAAOhB,GAAAA,KAAAA;AAAAA,QACJ,OAAA,EAAUoG,CAAMA,CAAAA,KAAAA,CAAAA,CAAEgV,eADrB,EAAA;AAAA,QAEG,MAAO,EAAA,QAAA;AAAA,QAFV,UAEoBpb,KAAMK,CAAAA,QAAAA;AAAAA,OAF1B,CAAA;AAAA,KADN;AAAA,GANpC,CAAA,CAAA;AAYH;;ACrBD,MAAMwT,WAAAA,GAAYC,UAAkBC,CAAAA,CAAAA,KAAAA,KAASC,YAAa,CAAA;AAAA,EAClDqF,IAAM,EAAA;AAAA,IACFgC,YAAc,EAAA,QAAA;AAAA,IACd9B,eAAiB,EAAA,uBAAA;AAAA,IACjBvQ,KAAO,EAAA,MAAA;AAAA,IACPsS,MAAQ,EAAA,KAAA;AAAA,IACRpH,OAAS,EAAA,cAAA;AAAA,GALP;AAD4C,CAAD,CAA7B,CAAA,CAAA;AAcC,SAAA,UAAA,GAAA;AACnBS,EAAAA,MAAAA,UAAUd,WAAhB,EAAA,CAAA;AAEI,EAAA,2BAAA,KAAA,EAAA;AAAA,IAAK,WAAWc,OAAQ0E,CAAAA,IAAAA;AAAAA,GAD5B,CAAA,CAAA;AAGH;;ACrBM,MAAMkC,cAAiB,GAAA,EAAA,CAAA;AACvB,MAAMC,eAAkB,GAAA,GAAA,CAAA;AACxB,MAAMC,iBAAoB,GAAA,GAAA,CAAA;AAE1B,SAAA,mBAAA,CAA6BnB,IAA2B,EAAA;AAC3D,EAAA,IAAIA,IAAS,KAAA,MAAA;AACT,IAAOiB,OAAAA,cAAAA,CAAAA;AAAAA,OAAAA,IACFjB,IAAS,KAAA,OAAA;AACd,IAAOkB,OAAAA,eAAAA,CAAAA;AAAAA,OAAAA,IACFlB,IAAS,KAAA,SAAA;AACd,IAAOmB,OAAAA,iBAAAA,CAAAA;AAAAA;AACN,IAAA,MAAM7X,MAAM,2BAAD,CAAA,CAAA;AACnB,CAAA;AAEM,SAAA,kBAAA,CAA4B0W,IAAmC,EAAA;AAClE,EAAQA,QAAAA,IAAAA;AAAAA,IACC,KAAA,IAAA,CAAA;AAAA,IACA,KAAA,GAAA;AACD,MAAO,OAAA,MAAA,CAAA;AAAA,IACN,KAAA,GAAA;AACD,MAAO,OAAA,OAAA,CAAA;AAAA,IACN,KAAA,GAAA,CAAA;AAAA,IACA,KAAA,IAAA;AACD,MAAO,OAAA,SAAA,CAAA;AAAA,IAAA;AAED1W,MAAAA,MAAAA,MAAM,6CAAD,CAAA,CAAA;AAAA,GAAA;AAEtB;;ACjBD,MAAMiQ,WAAAA,GAAYC,UAAyCC,CAAAA,CAAAA,KAAAA,KAASC,YAAa,CAAA;AAAA,EACzE0H,KAAO,EAAA;AAAA,IACHpC,QAAU,EAAA,MAAA;AAAA,IACVqC,SAAW,EAAA,MAAA;AAAA,IACXN,YAAc,EAAA,KAAA;AAAA,GAJuD;AAAA,EAMzEO,SAAW,EAAA;AAAA,IACPC,QAAU,EAAA,UAAA;AAAA,IACVvC,QAAU,EAAA,MAAA;AAAA,IACVqC,SAAW,EAAA,MAAA;AAAA,IACXzH,OAAS,EAAA,MAAA;AAAA,IACTC,UAAY,EAAA,QAAA;AAAA,IACZ2H,cAAgB,EAAA,QAAA;AAAA,IAChB9S,OAAO,CAAC;AAAA,MAAE+S,SAAAA;AAAAA,KAAgBA,KAAAA,SAAAA;AAAAA,IAC1BT,QAAQ,CAAC;AAAA,MAAES,SAAAA;AAAAA,KAAgBA,KAAAA,SAAAA;AAAAA,GAd0C;AAAA,EAgBzEC,SAAW,EAAA;AAAA,IACPH,QAAU,EAAA,UAAA;AAAA,IACVI,SAAW,EAAA,OAAA;AAAA,IACXjT,OAAO,CAAC;AAAA,MAAE+S,SAAAA;AAAAA,KAAgBA,KAAAA,SAAAA;AAAAA,IAC1BT,QAAQ,CAAC;AAAA,MAAES,SAAAA;AAAAA,KAAgBA,KAAAA,SAAAA;AAAAA,IAC3BV,YAAc,EAAA,KAAA;AAAA,IACdM,SAAW,EAAA,MAAA;AAAA,GAtB0D;AAAA,EAwBzEO,QAAU,EAAA;AAAA,IACNb,YAAc,EAAA,QAAA;AAAA,IACdQ,QAAU,EAAA,UAAA;AAAA,IACVM,MAAQ,EAAA,CAAA,CAAA;AAAA,IACRC,KAAO,EAAA,EAAA;AAAA,IACP7C,eAAAA,EAAiBxF,KAAMsI,CAAAA,OAAAA,CAAQC,MAAOC,CAAAA,KAAAA;AAAAA,GA7B+B;AAAA,EA+BzEC,WAAa,EAAA;AAAA,IACTnB,YAAc,EAAA,QAAA;AAAA,IACdQ,QAAU,EAAA,UAAA;AAAA,IACVM,MAAQ,EAAA,CAAA,CAAA;AAAA,IACRC,KAAO,EAAA,CAAA,CAAA;AAAA,IACP7C,eAAAA,EAAiBxF,KAAMsI,CAAAA,OAAAA,CAAQC,MAAOC,CAAAA,KAAAA;AAAAA,GAL7B;AA/B4D,CAAD,CAApD,CAAA,CAAA;AAoDC,SAAA,YAAA,CAAA;AAAA,EAAEjC,IAAAA;AAAAA,EAAMnV,GAAAA;AAAAA,CAA0B,EAAA;AAErD,EAAA,MAAA,CAACsX,OAAAA,EAASC,UAAcnc,CAAAA,GAAAA,QAAAA,CAAS,KAAD,CAAA,CAAA;AAEtC,EAAMwb,MAAAA,SAAAA,GAAY5J,QAAQ,MAAMwK,mBAAAA,CAAoBrC,IAAD,CAAQ,EAAA,CAACA,IAAD,CAAlC,CAAA,CAAA;AACnB3F,EAAAA,MAAAA,UAAUd,WAAU,CAAA;AAAA,IAAEkI,SAAAA;AAAAA,GAAH,CAAA,CAAA;AAErBzB,EAAAA,IAAAA,SAAS,MAAQ,EAAA;AAEb,IAAA,2BAAA,KAAA,EAAA;AAAA,MAAK,GAAKnV,EAAAA,GAAAA;AAAAA,MAEL,WAAWwP,OAAQqH,CAAAA,SAAAA;AAAAA,KADd,EAAA,wBAAwB7W,GADlC,CAAA,CAAA;AAAA,GAIP;AAEKyX,EAAAA,MAAAA,UACF,GAAA;AAAA,IACItD,QAAU,EAAA,MAAA;AAAA,IACVqC,SAAW,EAAA,MAAA;AAAA,IACXN,YAAc,EAAA,KAAA;AAAA,GAJtB,CAAA;AAQI,EAAA,4BAAA,KAAA,EAAA;AAAA,IACI,WAAW1G,OAAQiH,CAAAA,SAAAA;AAAAA,IAEnB,YAAA,EAAc,MAAMc,UAAAA,CAAW,IAAD,CAAA;AAAA,IAC9B,WAAA,EAAa,MAAMA,UAAAA,CAAW,IAAD,CAAA;AAAA,IAC7B,YAAA,EAAc,MAAMA,UAAAA,CAAW,KAAD,CAAA;AAAA,IAE9B,QAAA,EAAA,iBAAA1b,GAAA,CAAA,KAAA,EAAA;AAAA,MAAK,GAAKmE,EAAAA,GAAAA;AAAAA,MACL,WAAWwP,OAAQ+G,CAAAA,KAAAA;AAAAA,MACnB,KAAOkB,EAAAA,UAAAA;AAAAA,KAThB,CAAA,EAWKH,OACG,oBAAA1b,IAAA,CAAA0Z,QAAA,EAAA;AAAA,MAAA,QAAA,EAAA,iBACIzZ,GAAA,CAAC,OAAD,EAAA;AAAA,QAAS,KAAM,EAAA,uBAAA;AAAA,QACX,QAAA,sBAAA,KAAA,EAAA;AAAA,UAAK,WAAW2T,OAAQuH,CAAAA,QAAAA;AAAAA,UAAxB,QAAA,sBACK,UAAD,EAAA;AAAA,YACI,IAAM,EAAA,OAAA;AAAA,YACN,SAAU9V,CAAM,CAAA,KAAA;AACZA,cAAAA,CAAAA,CAAEgV,eAAF,EAAA,CAAA;AACAyB,cAAUC,SAAAA,CAAAA,SAAAA,CAAUC,UAAU5X,GAA9B,CAAA,CAAA;AAAA,aAJR;AAAA,YAAA,QAAA,sBAMK,gBAAD,EAAA;AAAA,cAAkB,SAAW,EAAA,MAAA;AAAA,cAAQ,QAAU,EAAA,OAAA;AAAA,aAA/C,CAAA;AAAA,WANJ,CAAA;AAAA,SADJ,CAAA;AAAA,OAFR,CAaI,kBAAAnE,GAAA,CAAC,OAAD,EAAA;AAAA,QAAS,KAAM,EAAA,uBAAA;AAAA,QACX,QAAA,sBAAA,GAAA,EAAA;AAAA,UACI,WAAW2T,OAAQ6H,CAAAA,WAAAA;AAAAA,UACnB,IAAMrX,EAAAA,GAAAA;AAAAA,UACN,GAAI,EAAA,qBAAA;AAAA,UACJ,MAAO,EAAA,QAAA;AAAA,UAJX,QAAA,sBAKK,UAAD,EAAA;AAAA,YACI,IAAM,EAAA,OAAA;AAAA,YACN,OAAA,EAAUiB,CAAMA,CAAAA,KAAAA,CAAAA,CAAEgV,eAFtB,EAAA;AAAA,YAAA,QAAA,sBAGK,aAAD,EAAA;AAAA,cAAe,SAAW,EAAA,MAAA;AAAA,cAAQ,QAAU,EAAA,OAAA;AAAA,aAA5C,CAAA;AAAA,WAHJ,CAAA;AAAA,SALJ,CAAA;AAAA,OAdR,CAAA,CAAA;AAAA,KAZR,CAAA,CAAA;AAAA,GAES,EAAA,mBAAmBjW,GAF5B,CAAA,CAAA;AA2CP;;ACzHkC,SAAA,kBAAA,CAAA;AAAA,EACOE,IAAAA;AAAAA,EACA6H,KAAAA;AAAAA,EACAf,QAAAA;AAAAA,EACAmO,IAAAA;AAAAA,CACgC,EAAA;AAElEnO,EAAAA,IAAAA,QAAAA,CAASE,aAAa,OAAW,IAAA,CAACF,SAASiC,EAAMjC,IAAAA,QAAAA,CAASiC,GAAG/B,QAAa,KAAA,KAAA;AAC1E,IAAA,MAAMzI,MAAM,mDAAD,CAAA,CAAA;AAEf,EAAM6I,MAAAA,UAAAA,GAAeN,SAA2BiC,EAAmB3B,CAAAA,UAAAA,CAAAA;AAC/D,EAAA,IAAA,CAACA,UAAY,EAAA;AACb,IAAM7I,MAAAA,KAAAA,CAAO,4FAA2FyB,IAA7F,CAAA,CAAA,CAAA,CAAA;AAAA,GACd;AACKc,EAAAA,MAAAA,MAAS+G,GAAAA,KAAAA,CAAAA;AACf,EAAM8P,MAAAA,iBAAAA,GAAsB7Q,SAA2BiC,EAAmB4O,CAAAA,iBAAAA,CAAAA;AAE1E,EAAA,IAAI,CAAC7W,MAAAA;AAAQ,IAAO,OAAA,IAAA,CAAA;AAGhB8W,EAAAA,IAAAA,aAAgBD,GAAAA,iBAAAA,CAAAA;AACpB,EAAA,IAAI,CAACC,aAAAA,IAAiB,CAACA,aAAAA,CAActZ,MAAQ,EAAA;AACzCsZ,IAAgB/W,aAAAA,GAAAA,MAAAA,CAAOiF,KAAKsB,UAAZ,CAAA,CAAA;AACZ6N,IAAAA,IAAAA,IAAAA;AACA2C,MAAgBA,aAAAA,GAAAA,aAAAA,CAAc7Z,KAAM,CAAA,CAAA,EAAG,CAAvB,CAAA,CAAA;AAAA,GACvB;AAED,EAAA,2BACK8Z,OAAD,EAAA;AAAA,IAAO,IAAK,EAAA,OAAA;AAAA,IAAZ,QAAA,sBACK,SAAD,EAAA;AAAA,MACK/W,UAAAA,MACDA,IAAAA,MAAAA,CAAOlB,GAAI,CAAA,CAACyG,GAAGoN,KAAU,KAAA;AACrB,QAAA,2BACK,QAAD,EAAA;AAAA,UACU,EAAI,EAAA;AAAA,YACoC,kCAAA,EAAA;AAAA,cAChCqE,YAAc,EAAA,CAAA;AAAA,aADkB;AAAA,WAFlD;AAAA,UAMKF,UAAAA,aAAiBA,IAAAA,aAAAA,CAAchY,GAC3B2F,CAAAA,CAAAA,GAAAA,yBACIwS,WAAD,EAAA;AAAA,YAEI,SAAU,EAAA,IAAA;AAAA,YAFd,QAAA,sBAIK,aAAD,EAAA;AAAA,cAAA,QAAA,sBACK,gBAAD,EAAA;AAAA,gBACI,IAAMxS,EAAAA,GAAAA;AAAAA,gBACN,OAAQc,CAAUd,CAAAA,GAAAA,CAAAA;AAAAA,gBAClB,UAAU6B,UAAW7B,CAAAA,GAAAA,CAAAA;AAAAA,gBACrB,IAAM,EAAA,OAAA;AAAA,eAJV,CAAA;AAAA,aADJ,CAAA;AAAA,WAJJ,EACU,CAAaA,WAAAA,EAAAA,GAAAA,CAAAA,CADvB,CAFU,CAAA;AAAA,SANtB,EAAgB,CAAQc,MAAAA,EAAAA,CAAAA,CAAAA,CAAAA,EAAKoN,KAA7B,CAAA,CAAA,CAAA,CAAA;AAAA,OAFR,CAAA;AAAA,KAFJ,CAAA;AAAA,GAFR,CAAA,CAAA;AAkCH;;AC/D6B,SAAA,aAAA,CAAA;AAAA,EACIzT,IAAAA;AAAAA,EACA6H,KAAAA;AAAAA,EACAf,QAAAA;AAAAA,EACAmO,IAAAA;AAAAA,CACkD,EAAA;AAEhF,EAAInO,IAAAA,QAAAA,CAASoO,QAAQxB,UAAY,EAAA;AACvBY,IAAAA,MAAAA,OAAUzM,GAAAA,KAAAA,CAAAA;AAChB,IAAM6L,MAAAA,UAAAA,GAAa5M,SAASoO,MAAOxB,CAAAA,UAAAA,CAAAA;AACnC,IAAA,2BAAQ,cAAD,EAAA;AAAA,MACH,OAAA;AAAA,MACA,UAAA;AAAA,MACA,OAAOuB,IAAS,KAAA,SAAA;AAAA,KAHpB,CAAA,CAAA;AAAA,GAIG,MAAA;AACI,IAAA,2BAAAG,QAAA,EAAA;AAAA,MAAGvN,QAAAA,EAAAA,KAAAA;AAAAA,KAAV,CAAA,CAAA;AAAA,GACH;AACJ;;ACzBM,MAAMmQ,iBAAoB,GAAA,yBAAA;;ACYpBC,MAAAA,iBAAAA,GAAoB,MAAMC,UAAAA,CAAWrc,sBAAD;;ACLL,SAAA,aAAA,GAAA;AAClCQ,EAAAA,MAAAA,UAAU4b,iBAAhB,EAAA,CAAA;AACO5b,EAAAA,OAAAA,OAAQL,CAAAA,UAAAA,CAAAA;AAClB;;AC0DG,SAAA,kBAAA,CAAA;AAAA,EACIiC,IAAAA;AAAAA,EACAiG,cAAAA;AAAAA,EACAiU,YAAAA;AAAAA,EACAC,MAAAA;AAAAA,EACAC,SAAAA;AAAAA,EACAC,YAAAA;AAAAA,EACAC,sBAAAA;AAAAA,CACkD,EAAA;AAEhDC,EAAAA,MAAAA,cAAAA,GAAiBJ,MAASA,GAAAA,MAAAA,CAAO,CAAK/c,CAAAA,GAAAA,KAAAA,CAAAA,CAAAA;AACtCod,EAAAA,MAAAA,WAAAA,GAAcL,MAASA,GAAAA,MAAAA,CAAO,CAAK/c,CAAAA,GAAAA,KAAAA,CAAAA,CAAAA;AAEnCW,EAAAA,MAAAA,aAAa0c,aAAnB,EAAA,CAAA;AACMC,EAAAA,MAAAA,kBAAkB7L,OAAQ,CAAA,MAAMyL,sBAAyBA,GAAAA,sBAAAA,CAAuB9X,OAAOM,CAAK,CAAA,KAAA,CAAC,CAACA,CAAAA,CAAED,MAAvC,CAAiD,GAAA,EAAI,EAAA,CAACyX,sBAAD,CAArF,CAAA,CAAA;AAC/B,EAAA,MAAM,CAAClL,IAAAA,EAAMuL,OAAW1d,CAAAA,GAAAA,QAAAA,CAAsByd,eAAd,CAAA,CAAA;AAE1B,EAAA,MAAA,CAACE,WAAAA,EAAaC,cAAkB5d,CAAAA,GAAAA,QAAAA,CAAkB,KAAV,CAAA,CAAA;AACxC,EAAA,MAAA,CAAC6d,gBAAkBC,EAAAA,mBAAAA,CAAAA,GAAuB9d,QAAhD,EAAA,CAAA;AACM,EAAA,MAAA,CAAC+d,YAAAA,EAAcC,eAAmBhe,CAAAA,GAAAA,QAAAA,CAAkB,KAAV,CAAA,CAAA;AAEhD,EAAMie,MAAAA,UAAAA,GAAazW,WAAY,CAAA,CAAC0W,QAA0B,KAAA;AAClD,IAAA,IAAA,CAACT,eAAiB,EAAA;AAClBC,MAAAA,OAAAA,CAAQQ,QAAD,CAAA,CAAA;AAAA,KACJ,MAAA;AACH,MAAMC,MAAAA,gBAAAA,GAAmB,IAAIzY,GAAI+X,CAAAA,eAAAA,CAAgB/Y,IAAKmB,CAAMA,CAAAA,KAAAA,CAAAA,CAAE6D,EAA7B,CAAR,CAAA,CAAA;AACzBgU,MAAAA,OAAAA,CAAQ,CAAC,GAAGD,eAAiB,EAAA,GAAGS,SAAS3Y,MAAQM,CAAAA,CAAAA,CAAAA,KAAM,CAACsY,gBAAAA,CAAiBC,GAAIvY,CAAAA,CAAAA,CAAE6D,EAAvB,CAAxB,CAAxB,CAAD,CAAA,CAAA;AAAA,KACV;AAAA,GACJ,EAAE,CAAC+T,eAAD,CAP2B,CAAA,CAAA;AAS9Bnb,EAAAA,SAAAA,CAAU,MAAM;AAEZsb,IAAAA,cAAAA,CAAe,IAAD,CAAA,CAAA;AAERS,IAAAA,MAAAA,gBAAAA,GAAmB,CAACH,QAA0B,KAAA;AAChDN,MAAAA,cAAAA,CAAe,KAAD,CAAA,CAAA;AACdE,MAAAA,mBAAAA,CAAoB3d,KAAD,CAAA,CAAA,CAAA;AACnB8d,MAAAA,UAAAA,CAAWC,QAAD,CAAA,CAAA;AACVF,MAAAA,eAAAA,CAAgB,CAACb,SAAAA,IAAae,QAAS9a,CAAAA,MAAAA,GAAS+Z,SAAjC,CAAA,CAAA;AAAA,KAJnB,CAAA;AAOA,IAAMmB,MAAAA,OAAAA,GAAU,CAACpK,KAAiB,KAAA;AAC9BxI,MAAQwI,OAAAA,CAAAA,KAAAA,CAAM,SAASA,KAAvB,CAAA,CAAA;AACA0J,MAAAA,cAAAA,CAAe,KAAD,CAAA,CAAA;AACdF,MAAAA,OAAAA,CAAQ,EAAD,CAAA,CAAA;AACPI,MAAAA,mBAAAA,CAAoB5J,KAAD,CAAA,CAAA;AAAA,KAJvB,CAAA;AAOIpT,IAAAA,IAAAA,WAAWyd,gBAAkB,EAAA;AAC7B,MAAA,OAAOzd,WAAWyd,gBAAoB,CAAA;AAAA,QAClCxb,IAAAA;AAAAA,QACAwD,MAAQyC,EAAAA,cAAAA;AAAAA,QACRwV,QAAUH,EAAAA,gBAAAA;AAAAA,QACVC,OAAAA;AAAAA,QACAlB,YAAAA;AAAAA,QACA7X,MAAQ0X,EAAAA,YAAAA;AAAAA,QACRwB,KAAOtB,EAAAA,SAAAA;AAAAA,QACPuB,UAAYve,EAAAA,KAAAA,CAAAA;AAAAA,QACZwe,OAASrB,EAAAA,cAAAA;AAAAA,QACTsB,KAAOrB,EAAAA,WAAAA;AAAAA,OAVJ,CAAA,CAAA;AAAA,KAYJ,MAAA;AACHzc,MAAAA,UAAAA,CAAW+d,eAAmB,CAAA;AAAA,QAC1B9b,IAAAA;AAAAA,QACAwD,MAAQyC,EAAAA,cAAAA;AAAAA,QACRoU,YAAAA;AAAAA,QACA7X,MAAQ0X,EAAAA,YAAAA;AAAAA,QACRwB,KAAOtB,EAAAA,SAAAA;AAAAA,QACPuB,UAAYve,EAAAA,KAAAA,CAAAA;AAAAA,QACZwe,OAASrB,EAAAA,cAAAA;AAAAA,QACTsB,KAAOrB,EAAAA,WAAAA;AAAAA,OARX,CAUKhO,CAAAA,IAAAA,CAAK8O,gBAVV,CAAA,CAWK7O,MAAM8O,OAXX,CAAA,CAAA;AAYO,MAAA,OAAA,MAAM;AAAA,OACZ,CAAA;AAAA,KACJ;AAAA,GACJ,EAAE,CAACvb,IAAMoa,EAAAA,SAAAA,EAAWI,aAAaD,cAAgBL,EAAAA,YAAAA,EAAcG,YAA7D,CA/CM,CAAA,CAAA;AAiDF,EAAA,OAAA;AAAA,IACHjL,IAAAA;AAAAA,IACAwL,WAAAA;AAAAA,IACAE,gBAAAA;AAAAA,IACAE,YAAAA;AAAAA,GAJJ,CAAA;AAOH;;ACnID,MAAMe,QAA+C,EAArD,CAAA;AAaI,SAAA,cAAA,CAAA;AAAA,EACI/b,IAAAA;AAAAA,EACAoD,QAAAA;AAAAA,EACAI,MAAAA;AAAAA,EACAwY,QAAW,GAAA,KAAA;AAAA,CAC+B,EAAA;AAExCje,EAAAA,MAAAA,aAAa0c,aAAnB,EAAA,CAAA;AACA,EAAM,MAAA,CAAChQ,MAAQwR,EAAAA,SAAAA,CAAAA,GAAahf,QAA5B,EAAA,CAAA;AACM,EAAA,MAAA,CAAC2d,WAAAA,EAAaC,cAAkB5d,CAAAA,GAAAA,QAAAA,CAAkB,IAAV,CAAA,CAAA;AACxC,EAAA,MAAA,CAAC6d,gBAAkBC,EAAAA,mBAAAA,CAAAA,GAAuB9d,QAAhD,EAAA,CAAA;AAEAsC,EAAAA,SAAAA,CAAU,MAAM;AAEZsb,IAAAA,cAAAA,CAAe,IAAD,CAAA,CAAA;AAERqB,IAAAA,MAAAA,cAAAA,GAAiB,CAACC,aAAyC,KAAA;AAC7DJ,MAAO,KAAA,CAAA,CAAA,EAAE/b,QAAQoD,QAAc+Y,CAAAA,CAAAA,CAAAA,GAAAA,aAAAA,CAAAA;AAC/BF,MAAAA,SAAAA,CAAUE,aAAD,CAAA,CAAA;AACTtB,MAAAA,cAAAA,CAAe,KAAD,CAAA,CAAA;AACdE,MAAAA,mBAAAA,CAAoB3d,KAAD,CAAA,CAAA,CAAA;AAAA,KAJvB,CAAA;AAOA,IAAMme,MAAAA,OAAAA,GAAU,CAACpK,KAAiB,KAAA;AAC9BxI,MAAQwI,OAAAA,CAAAA,KAAAA,CAAM,yBAAyBA,KAAvC,CAAA,CAAA;AACA0J,MAAAA,cAAAA,CAAe,KAAD,CAAA,CAAA;AACdoB,MAAAA,SAAAA,CAAU7e,KAAD,CAAA,CAAA,CAAA;AACT2d,MAAAA,mBAAAA,CAAoB5J,KAAD,CAAA,CAAA;AAAA,KAJvB,CAAA;AAOI6K,IAAAA,IAAAA,QAAYD,IAAAA,KAAAA,CAAO,CAAE/b,EAAAA,IAAAA,CAAAA,CAAAA,EAAQoD,QAAa,CAAA,CAAA,CAAA,EAAA;AAC1C6Y,MAAUF,SAAAA,CAAAA,KAAAA,CAAO,CAAE/b,EAAAA,IAAAA,CAAAA,CAAAA,EAAQoD,QAAlB,CAAA,CAAA,CAAA,CAAA,CAAA;AACTyX,MAAAA,cAAAA,CAAe,KAAD,CAAA,CAAA;AACdE,MAAAA,mBAAAA,CAAoB3d,KAAD,CAAA,CAAA,CAAA;AACZ,MAAA,OAAA,MAAM;AAAA,OACZ,CAAA;AAAA,KACJ,MAAA,IAAUgG,QAAYpD,IAAAA,IAAAA,IAAQwD,MAAQ,EAAA;AAC/BzF,MAAAA,IAAAA,WAAWqe,YAAc,EAAA;AACzB,QAAA,OAAOre,WAAWqe,YAAgB,CAAA;AAAA,UAC9Bpc,IAAAA;AAAAA,UACAoD,QAAAA;AAAAA,UACAI,MAAAA;AAAAA,UACAiY,QAAUS,EAAAA,cAAAA;AAAAA,UACVX,OAAAA;AAAAA,SALG,CAAA,CAAA;AAAA,OAOJ,MAAA;AACHxd,QAAAA,UAAAA,CAAWse,WAAe,CAAA;AAAA,UACtBrc,IAAAA;AAAAA,UACAoD,QAAAA;AAAAA,UACAI,MAAAA;AAAAA,SAHJ,CAKKgJ,CAAAA,IAAAA,CAAK0P,cALV,CAAA,CAMKzP,MAAM8O,OANX,CAAA,CAAA;AAOO,QAAA,OAAA,MAAM;AAAA,SACZ,CAAA;AAAA,OACJ;AAAA,KAGA,MAAA;AACDW,MAAAA,cAAAA,CAAe9e,KAAD,CAAA,CAAA,CAAA;AACP,MAAA,OAAA,MAAM;AAAA,OACZ,CAAA;AAAA,KACJ;AAAA,GACF,EAAA,CAACgG,QAAUpD,EAAAA,IAAX,CAnDM,CAAA,CAAA;AAqDF,EAAA,OAAA;AAAA,IACHyK,MAAAA;AAAAA,IACAmQ,WAAAA;AAAAA,IACAE,gBAAAA;AAAAA,GAHJ,CAAA;AAMH;;ACzD0D,eAAA,uBAAA,CAAA;AAAA,EACItX,MAAAA;AAAAA,EACAxD,IAAAA;AAAAA,EACAoD,QAAAA;AAAAA,EACA8C,SAAAA;AAAAA,EACArD,MAAAA;AAAAA,EACA4F,cAAAA;AAAAA,EACAwB,MAAAA;AAAAA,EACAlM,UAAAA;AAAAA,EACAK,OAAAA;AAAAA,EACAke,aAAAA;AAAAA,EACAC,aAAAA;AAAAA,EACAC,kBAAAA;AAAAA,EACAC,sBAAAA;AAAAA,CAK9C,EAAA;AAET9R,EAAAA,IAAAA,aAAAA,CAAAA;AAEAzE,EAAAA,IAAAA,WAAWwW,SAAW,EAAA;AAClB,IAAA,IAAA;AACMC,MAAAA,MAAAA,iBAAiBC,aAAc,CAAA;AAAA,QACjC/Z,MAAQ4F,EAAAA,cAAAA;AAAAA,QACRrF,QAAAA;AAAAA,QACAyC,gBAAkBrC,EAAAA,MAAAA;AAAAA,QAClBxD,IAAAA;AAAAA,OAJgC,CAAA,CAAA;AAMpC2K,MAAgB,aAAA,GAAA,MAAMzE,UAAUwW,SAAU,CAAA;AAAA,QACtClZ,MAAQmZ,EAAAA,cAAAA;AAAAA,QACR3c,IAAAA;AAAAA,QACAoD,QAAAA;AAAAA,QACAP,MAAAA;AAAAA,QACA4F,cAAAA;AAAAA,QACAwB,MAAAA;AAAAA,QACA7L,OAAAA;AAAAA,OAPkB,CAAA,CAAA;AAAA,aASjB0E,CAAP,EAAA;AACE6F,MAAAA,OAAAA,CAAQwI,MAAMrO,CAAd,CAAA,CAAA;AACA,MAAI0Z,IAAAA,kBAAAA;AACAA,QAAAA,kBAAAA,CAAmB1Z,CAAD,CAAA,CAAA;AACtB,MAAA,OAAA;AAAA,KACH;AAAA,GACE,MAAA;AACH6H,IAAgB9H,aAAAA,GAAAA,MAAAA,CAAAA;AAAAA,GACnB;AAEM9E,EAAAA,OAAAA,WAAW8e,UAAW,CAAA;AAAA,IACzBrZ,MAAAA;AAAAA,IACAxD,IAAAA;AAAAA,IACAoD,QAAAA;AAAAA,IACAP,MAAQ8H,EAAAA,aAAAA;AAAAA,IACRlC,cAAAA;AAAAA,IACAwB,MAAAA;AAAAA,GANG,CAOJuC,CAAAA,IAAAA,CAAM/B,CAAW,MAAA,KAAA;AACZ,IAAA,IAAA;AACIvE,MAAAA,IAAAA,WAAWoW,aAAe,EAAA;AACpBK,QAAAA,MAAAA,iBAAiBC,aAAc,CAAA;AAAA,UACjC/Z,MAAQ8H,EAAAA,aAAAA;AAAAA,UACRvH,QAAAA;AAAAA,UACAyC,gBAAkBrC,EAAAA,MAAAA;AAAAA,UAClBxD,IAAAA;AAAAA,SAJgC,CAAA,CAAA;AAMpCkG,QAAAA,SAAAA,CAAUoW,aAAc,CAAA;AAAA,UACpB9Y,MAAQmZ,EAAAA,cAAAA;AAAAA,UACR3c,IAAAA;AAAAA,UACAoD,UAAUqH,MAAO9D,CAAAA,EAAAA;AAAAA,UACjB9D,MAAQ8H,EAAAA,aAAAA;AAAAA,UACRlC,cAAAA;AAAAA,UACAwB,MAAAA;AAAAA,UACA7L,OAAAA;AAAAA,SAPJ,CAAA,CAAA;AAAA,OASH;AAAA,aACI0E,CAAP,EAAA;AACE,MAAI2Z,IAAAA,sBAAAA;AACAA,QAAAA,sBAAAA,CAAuB3Z,CAAD,CAAA,CAAA;AAAA,KAC7B;AACD,IAAIwZ,IAAAA,aAAAA;AACAA,MAAAA,aAAAA,CAAc7R,MAAD,CAAA,CAAA;AAAA,GA/Bd,CAiCFgC,CAAAA,KAAAA,CAAO3J,CAAM,CAAA,KAAA;AACNoD,IAAAA,IAAAA,WAAWqW,aAAe,EAAA;AACpBI,MAAAA,MAAAA,iBAAiBC,aAAc,CAAA;AAAA,QACjC/Z,MAAQ8H,EAAAA,aAAAA;AAAAA,QACRvH,QAAAA;AAAAA,QACAyC,gBAAkBrC,EAAAA,MAAAA;AAAAA,QAClBxD,IAAAA;AAAAA,OAJgC,CAAA,CAAA;AAMpCkG,MAAAA,SAAAA,CAAUqW,aAAc,CAAA;AAAA,QACpB/Y,MAAQmZ,EAAAA,cAAAA;AAAAA,QACR3c,IAAAA;AAAAA,QACAoD,QAAAA;AAAAA,QACAP,MAAQ8H,EAAAA,aAAAA;AAAAA,QACRlC,cAAAA;AAAAA,QACAwB,MAAAA;AAAAA,QACA7L,OAAAA;AAAAA,OAPJ,CAAA,CAAA;AAAA,KASH;AACD,IAAIme,IAAAA,aAAAA;AAAeA,MAAAA,aAAAA,CAAczZ,CAAD,CAAA,CAAA;AAAA,GAnDjC,CAAA,CAAA;AAqDV;;AC5G4D,eAAA,yBAAA,CAAA;AAAA,EACI/E,UAAAA;AAAAA,EACA0M,MAAAA;AAAAA,EACAjH,MAAAA;AAAAA,EACA0C,SAAAA;AAAAA,EACA4W,eAAAA;AAAAA,EACAC,eAAAA;AAAAA,EACAC,oBAAAA;AAAAA,EACAC,wBAAAA;AAAAA,EACA7e,OAAAA;AAAAA,CAM7C,EAAA;AAEhBuK,EAAAA,OAAAA,CAAQC,KAAM,CAAA,iBAAA,EAAmB6B,MAAOzK,CAAAA,IAAAA,EAAMyK,OAAO9D,EAArD,CAAA,CAAA;AAEA,EAAA,MAAMuW,iBAA4C,GAAA;AAAA,IAC9CzS,MAAAA;AAAAA,IACAjH,MAAAA;AAAAA,IACAJ,UAAUqH,MAAO9D,CAAAA,EAAAA;AAAAA,IACjB3G,MAAMyK,MAAOzK,CAAAA,IAAAA;AAAAA,IACb5B,OAAAA;AAAAA,GALJ,CAAA;AAQI8H,EAAAA,IAAAA,WAAWiX,WAAa,EAAA;AACpB,IAAA,IAAA;AACA,MAAMjX,MAAAA,SAAAA,CAAUiX,YAAYD,iBAAtB,CAAA,CAAA;AAAA,aACDpa,CAAP,EAAA;AACE6F,MAAAA,OAAAA,CAAQwI,MAAMrO,CAAd,CAAA,CAAA;AACA,MAAIka,IAAAA,oBAAAA;AACAA,QAAAA,oBAAAA,CAAqBvS,QAAQ3H,CAAT,CAAA,CAAA;AACxB,MAAO,OAAA,KAAA,CAAA;AAAA,KACV;AAAA,GACJ;AACM/E,EAAAA,OAAAA,WAAWqf,YAAa,CAAA;AAAA,IAC3B3S,MAAAA;AAAAA,GADG,CAEJ+B,CAAAA,IAAAA,CAAK,MAAM;AACVsQ,IAAAA,eAAAA,IAAmBA,gBAAgBrS,MAAD,CAAA,CAAA;AAC9B,IAAA,IAAA;AACIvE,MAAAA,IAAAA,WAAWmX,QAAU,EAAA;AACrBnX,QAAAA,SAAAA,CAAUmX,SAASH,iBAAnB,CAAA,CAAA;AAAA,OACH;AACD,MAAO,OAAA,IAAA,CAAA;AAAA,aACFpa,CAAP,EAAA;AACE,MAAIma,IAAAA,wBAAAA;AACAA,QAAAA,wBAAAA,CAAyBxS,QAAQ3H,CAAT,CAAA,CAAA;AAC5B,MAAO,OAAA,KAAA,CAAA;AAAA,KACV;AAAA,GAbE,CAcJ2J,CAAAA,KAAAA,CAAO3J,CAAM,CAAA,KAAA;AACZ,IAAIia,IAAAA,eAAAA;AAAiBA,MAAAA,eAAAA,CAAgBtS,QAAQ3H,CAAT,CAAA,CAAA;AACpC,IAAO,OAAA,KAAA,CAAA;AAAA,GAhBJ,CAAA,CAAA;AAkBV;;ACzFuD,SAAA,oBAAA,CAAA;AAAA,EACI+F,QAAAA;AAAAA,EACAe,KAAAA;AAAAA,EACA0T,QAAAA;AAAAA,CAMG,EAAA;AAErDC,EAAAA,MAAAA,eAAAA,GAAkBrZ,OAAiB,IAAX,CAAA,CAAA;AAC9B3E,EAAAA,SAAAA,CAAU,MAAM;AACZ,IAAMie,MAAAA,0BAAAA,GAA6B,OAAO3U,QAASI,CAAAA,QAAAA,KAAa,YAAYlG,OAAQ8F,CAAAA,QAAAA,CAASI,SAASwU,eAAnB,CAAA,CAAA;AACnF,IAAA,IAAID,0BAA4B,EAAA;AACxB5T,MAAAA,IAAAA,SAAS,IAAM,EAAA;AACf2T,QAAAA,eAAAA,CAAgBzY,OAAU8E,GAAAA,KAAAA,CAAAA;AAC1B0T,QAAAA,QAAAA,CAAS,IAAD,CAAA,CAAA;AAAA,OACX;AAAA,KACJ,MAAA,IAAUC,gBAAgBzY,OAAS,EAAA;AAChCwY,MAAAA,QAAAA,CAASC,gBAAgBzY,OAAjB,CAAA,CAAA;AACRyY,MAAAA,eAAAA,CAAgBzY,OAAU,GAAA,IAAA,CAAA;AAAA,KAC7B;AAAA,GACJ,EAAE,CAAC+D,QAAD,CAXM,CAAA,CAAA;AAYZ;;ACtBkD,SAAA,aAAA,GAAA;AACzCzK,EAAAA,MAAAA,UAAU4b,iBAAhB,EAAA,CAAA;AACO5b,EAAAA,OAAAA,OAAQN,CAAAA,iBAAAA,CAAAA;AAClB;;ACgDkD,SAAA,qBAAA,CAAA;AAAA,EACNkC,IAAAA;AAAAA,EACA5B,OAAAA;AAAAA,CAC2F,EAAA;AAGpI,EAAA,MAAML,aAAaK,OAAQL,CAAAA,UAAAA,CAAAA;AAC3B,EAAA,MAAMD,oBAAoBM,OAAQN,CAAAA,iBAAAA,CAAAA;AAClC,EAAM2D,MAAAA,UAAAA,GAAarD,QAAQN,iBAAkB2D,CAAAA,UAAAA,CAAAA;AAEzC,EAAA,IAAA,CAACA,UAAY,EAAA;AACPnB,IAAAA,MAAAA,MAAM,6EAAD,CAAA,CAAA;AAAA,GACd;AAGKoB,EAAAA,MAAAA,oBAAoBgC,oCAAqC,CAAA;AAAA,IAC3D1D,IAAAA;AAAAA,IACAC,aAAawB,UAAWxB,CAAAA,WAAAA;AAAAA,GAFkC,CAAA,CAAA;AAK9D,EAAMyd,MAAAA,cAAAA,GAA0Dhc,iBAAkBC,CAAAA,GAAAA,CAAKX,CAAU,KAAA,KAAA;AAC7F,IAAIA,IAAAA,KAAAA,CAAMzD,SAAS,YAAc,EAAA;AAC7B,MAAOogB,OAAAA,OAAAA,CAAQC,QAAQ5c,KAAhB,CAAA,CAAA;AAAA,KACV,MAAA,IAAUA,KAAMzD,CAAAA,IAAAA,KAAS,QAAU,EAAA;AAChC,MAAA,MAAMsgB,2BAA2B/f,iBAAkBoP,CAAAA,qBAAAA,CAAsBlM,KAAMhB,CAAAA,IAAAA,EAAMgB,MAAMoC,QAA1D,CAAA,CAAA;AACjC,MAAI,IAAA,CAACya,0BAA0B5X,cAAgB,EAAA;AAC3C,QAAM3F,MAAAA,KAAAA,CAAO,CAA+DU,6DAAAA,EAAAA,KAAAA,CAAMhB,IAAvE,CAAA,CAAA,CAAA,CAAA;AAAA,OACd;AAEMjC,MAAAA,OAAAA,WAAWse,WAAY,CAAA;AAAA,QAC1Brc,MAAMgB,KAAMhB,CAAAA,IAAAA;AAAAA,QACZoD,UAAUpC,KAAMoC,CAAAA,QAAAA;AAAAA,QAChBI,QAAQqa,wBAA0B5X,EAAAA,cAAAA;AAAAA,OAH/B,CAKFuG,CAAAA,IAAAA,CAAM/B,CAAW,MAAA,KAAA;AACP,QAAA,OAAA;AAAA,UAAKzJ,GAAAA,KAAAA;AAAAA,UAAOyJ,MAAAA;AAAAA,SAAnB,CAAA;AAAA,OAND,CAAA,CAAA;AAAA,KAQV,MAAA,IAAUzJ,KAAMzD,CAAAA,IAAAA,KAAS,aAAe,EAAA;AACrC,MAAOogB,OAAAA,OAAAA,CAAQC,QAAQ5c,KAAhB,CAAA,CAAA;AAAA,KACJ,MAAA;AACGV,MAAAA,MAAAA,MAAM,yCAAD,CAAA,CAAA;AAAA,KACd;AAAA,GArB2D,CAAA,CAAA;AAwBhE,EAAOqd,OAAAA,OAAAA,CAAQG,IAAIJ,cAAZ,CAAA,CAAA;AACV,CAAA;AAyBG,SAAA,yBAAA,CAAA;AAAA,EACI1d,IAAAA;AAAAA,CACuC,EAAA;AAErC5B,EAAAA,MAAAA,UAAoC4b,iBAA1C,EAAA,CAAA;AAEA,EAAM,MAAA,CAAC5K,IAAMuL,EAAAA,OAAAA,CAAAA,GAAW1d,QAAxB,EAAA,CAAA;AACM,EAAA,MAAA,CAAC2d,WAAAA,EAAaC,cAAkB5d,CAAAA,GAAAA,QAAAA,CAAkB,KAAV,CAAA,CAAA;AACxC,EAAA,MAAA,CAAC6d,gBAAkBC,EAAAA,mBAAAA,CAAAA,GAAuB9d,QAAhD,EAAA,CAAA;AAEAsC,EAAAA,SAAAA,CAAU,MAAM;AAEZ,IAAMkC,MAAAA,UAAAA,GAAarD,QAAQN,iBAAkB2D,CAAAA,UAAAA,CAAAA;AAC7C,IAAA,IAAIA,UAAY,EAAA;AACZoZ,MAAAA,cAAAA,CAAe,IAAD,CAAA,CAAA;AACdE,MAAAA,mBAAAA,CAAoB3d,KAAD,CAAA,CAAA,CAAA;AACnB2gB,MAAmC,qBAAA,CAAA;AAAA,QAAE/d,IAAAA;AAAAA,QAAM5B,OAAAA;AAAAA,OAAtB,CAChBoO,CAAAA,IAAAA,CAAMnF,CAAQ,GAAA,KAAA;AACXsT,QAAAA,OAAAA,CAAQtT,GAAD,CAAA,CAAA;AAAA,OAFf,CAAA,CAIKoF,KAAO3J,CAAAA,CAAAA,CAAAA,KAAMiY,mBAAoBjY,CAAAA,CAAD,CAJrC,CAAA,CAKKkb,OAAQ,CAAA,MAAMnD,cAAe,CAAA,KAAD,CALjC,CAAA,CAAA;AAAA,KAMH;AAAA,GAEF,EAAA,CAAC7a,IAAM5B,EAAAA,OAAP,CAdM,CAAA,CAAA;AAgBT,EAAI,IAAA,CAACA,OAAQN,CAAAA,iBAAAA,CAAkB2D,UAAY,EAAA;AAChC,IAAA,OAAA;AAAA,MAAEmZ,WAAa,EAAA,IAAA;AAAA,KAAtB,CAAA;AAAA,GACH;AAEM,EAAA,OAAA;AAAA,IAAExL,IAAAA;AAAAA,IAAMwL,WAAAA;AAAAA,IAAaE,gBAAAA;AAAAA,GAA5B,CAAA;AACH;;AC7JiD,SAAA,gBAAA,GAAA;AACxC1c,EAAAA,MAAAA,UAAU4b,iBAAhB,EAAA,CAAA;AACO5b,EAAAA,OAAAA,OAAQJ,CAAAA,aAAAA,CAAAA;AAClB;;ACE2F,SAAA,iBAAA,GAAA;AAClFI,EAAAA,MAAAA,UAAU4b,iBAAhB,EAAA,CAAA;AACO5b,EAAAA,OAAAA,OAAQH,CAAAA,cAAAA,CAAAA;AAClB;;ACH+D,SAAA,uBAAA,GAAA;AACtDG,EAAAA,MAAAA,UAAU4b,iBAAhB,EAAA,CAAA;AACO5b,EAAAA,OAAAA,OAAQP,CAAAA,oBAAAA,CAAAA;AAClB;;AC6BYogB,MAAAA,qBAAAA,GAAwB,MAAMhE,UAAAA,CAA+Btd,eAArB;;ACtBxCuhB,MAAAA,YAAAA,GAAe,MAAMjE,UAAAA,CAAWlb,gBAAD;;ACuD/Bof,MAAAA,YAAAA,GAAe,CACxBC,OACyB,KAAA;AACnB,EAAA,MAAA;AAAA,IAAEC,SAAAA;AAAAA,IAAW9C,OAAAA;AAAAA,IAAS+C,mBAAsB,GAAA,KAAA;AAAA,IAAOC,cAAAA;AAAAA,GAAAA,GACzDH,WAAW,EADX,CAAA;AAEA,EAAMI,MAAAA,GAAAA,GAAMta,OAAY,IAAN,CAAA,CAAA;AACZ,EAAA,MAAA,CAACua,SAAAA,EAAWC,YAAgBzhB,CAAAA,GAAAA,QAAAA,CAAS,KAAD,CAAA,CAAA;AACpC,EAAA,MAAA,CAACuc,SAAAA,EAAWmF,YAAgB1hB,CAAAA,GAAAA,QAAAA,CAAS,EAAD,CAAA,CAAA;AAE1CsC,EAAAA,SAAAA,CAAU,MAAM;AACRgf,IAAAA,IAAAA,cAAAA;AAAgBK,MAAAA,UAAAA,CAAW,MAAMF,YAAAA,CAAa,KAAD,CAAA,EAASH,cAA5B,CAAA,CAAA;AAAA,GACjC,EAAE,CAACE,SAAD,CAFM,CAAA,CAAA;AAIT,EAAMI,MAAAA,WAAAA,GAAc,MAAMtF,SAAAA,CAAUC,SAAcpc,KAAAA,KAAAA,CAAAA,CAAAA;AAE5C0hB,EAAAA,MAAAA,WAAAA,GAAcra,WAAY,CAAA,CAAC0M,KAAkB,KAAA;AAC/C,IAAIoK,IAAAA,OAAAA;AAASA,MAAAA,OAAAA,CAAQpK,KAAD,CAAA,CAAA;AAAA;AACf,MAAM,MAAA,IAAI7Q,MAAM6Q,KAAV,CAAA,CAAA;AAAA,GACd,EAAE,CAACoK,OAAD,CAH4B,CAAA,CAAA;AAKzBwD,EAAAA,MAAAA,aAAAA,GAAgBta,WAAY,CAAA,CAACwM,IAAiB,KAAA;AAChD,IAAIoN,IAAAA,SAAAA;AAAWA,MAAAA,SAAAA,CAAUpN,IAAD,CAAA,CAAA;AACxByN,IAAAA,YAAAA,CAAa,IAAD,CAAA,CAAA;AACZC,IAAAA,YAAAA,CAAa1N,IAAD,CAAA,CAAA;AAAA,GACf,EAAE,CAACoN,SAAD,CAJ8B,CAAA,CAAA;AAM3BW,EAAAA,MAAAA,eAAAA,GAAkBva,WAAY,CAAA,CAACwM,IAAiB,KAAA;AAClDsI,IAAUC,SAAAA,CAAAA,SAAAA,CACLC,SAAUxI,CAAAA,IADf,CAEKzE,CAAAA,IAAAA,CAAK,MAAMuS,aAAAA,CAAc9N,IAAD,CAF7B,CAGKxE,CAAAA,KAAAA,CAAOwS,CAAQ,GAAA,KAAA;AACZH,MAAAA,WAAAA,CAAYG,GAAD,CAAA,CAAA;AACXP,MAAAA,YAAAA,CAAa,KAAD,CAAA,CAAA;AAAA,KALpB,CAAA,CAAA;AAAA,GAOD,EAAA,CAACI,WAAaC,EAAAA,aAAd,CARgC,CAAA,CAAA;AAU7BG,EAAAA,MAAAA,iBAAiB,MAAM;AACrBL,IAAAA,IAAAA,aAAe,EAAA;AACftF,MAAUC,SAAAA,CAAAA,SAAAA,CAAUC,UAAU,EAA9B,CAAA,CAAA;AAAA,KACH;AAAA,GAHL,CAAA;AAMMhU,EAAAA,MAAAA,IAAAA,GAAO,CAACwL,IACVkO,KAAAA,MAAAA,CAAO,QAAQ,OAAOlO,IAAAA,KAAS,QAAW7T,GAAAA,KAAAA,CAAAA,GAAY6T,IAAhD,CAAA,CAAA;AAEV,EAAMmO,MAAAA,GAAAA,GAAM,MAAMD,MAAAA,CAAO,KAAD,CAAA,CAAA;AAExB,EAAA,MAAMA,MAAS1a,GAAAA,WAAAA,CACX,CAACiG,SAAAA,GAAY,QAAQuG,IAAkB,KAAA;AACnC,IAAA,MAAMoO,UAAUb,GAAI1Z,CAAAA,OAAAA,CAAAA;AAEpB,IAAA,MAAMwa,UACFD,OACCA,KAAAA,OAAAA,CAAQE,OAAY,KAAA,OAAA,IAAWF,QAAQE,OAAY,KAAA,UAAA,CAAA,CAAA;AAExD,IAAA,MAAMC,QAAQhB,GAAI1Z,CAAAA,OAAAA,CAAAA;AAElB,IAAI+Z,IAAAA,WAAAA,EAAiB,IAAA,CAACP,mBAAqB,EAAA;AACvC,MAAA,IAAIrN,IAAM,EAAA;AACN+N,QAAAA,eAAAA,CAAgB/N,IAAD,CAAA,CAAA;AAAA,iBACRoO,OAAS,EAAA;AAChB,QAAA,IAAIC,OAAS,EAAA;AACTN,UAAAA,eAAAA,CAAgBQ,MAAM5V,KAAP,CAAA,CAAA;AAEXc,UAAAA,IAAAA,cAAc,KAAO,EAAA;AACrB8U,YAAAA,KAAAA,CAAM5V,KAAQ,GAAA,EAAA,CAAA;AAAA,WACjB;AAAA,SACE,MAAA;AACHoV,UAAAA,eAAAA,CAAgBK,QAAQI,SAAT,CAAA,CAAA;AAAA,SAClB;AAAA,OACE,MAAA;AACHX,QAAAA,WAAAA,CAAY,oCAAD,CAAA,CAAA;AAAA,OACd;AAAA,KACJ;AAAA,GAEL,EAAA,CAACR,mBAAqBU,EAAAA,eAAAA,EAAiBF,WAAvC,CA5BsB,CAAA,CAAA;AA+BnB,EAAA,OAAA;AAAA,IACHN,GAAAA;AAAAA,IACAC,SAAAA;AAAAA,IACAjF,SAAAA;AAAAA,IACA0F,cAAAA;AAAAA,IACAL,WAAAA;AAAAA,IACApZ,IAAAA;AAAAA,IACA2Z,GAAAA;AAAAA,GAPJ,CAAA;AASH;;ACxJgC,SAAA,gBAAA,CAAA;AAAA,EACIrd,IAAAA;AAAAA,EACA6H,KAAAA;AAAAA,EACAf,QAAAA;AAAAA,EACAmO,IAAAA;AAAAA,CACgD,EAAA;AAG3E0I,EAAAA,MAAAA,YAA6C1F,iBAAnD,EAAA,CAAA;AACA,EAAA,MAAMhK,eAAkB0P,GAAAA,SAAAA,EAAWlU,MAASyE,GAAAA,OAAAA,CAAQyP,WAAWlU,MAAUpO,CAAAA,GAAAA,KAAAA,CAAAA,CAAAA;AACnEuiB,EAAAA,MAAAA,UAAAA,GAAqBD,WAAWnU,cAAkBwO,IAAAA,iBAAAA,CAAAA;AAClD6F,EAAAA,MAAAA,aAAgBhW,GAAAA,KAAAA,GAAQiW,MAAOjW,CAAAA,KAAAA,EAAO+V,UAAY,EAAA;AAAA,IAAEnU,MAAQwE,EAAAA,eAAAA;AAAAA,GAA9B,CAAmD,GAAA,EAAA,CAAA;AAGnF,EAAA,2BAAAmH,QAAA,EAAA;AAAA,IACKyI,QAAAA,EAAAA,aAAAA;AAAAA,GAFT,CAAA,CAAA;AAKH;;AChBM,MAAMrP,WAAYC,GAAAA,UAAAA,CAAW,CAACC,KAAAA,KACjCC,YAAa,CAAA;AAAA,EACTC,UAAY,EAAA;AAAA,IACRC,OAAS,EAAA,MAAA;AAAA,IACTC,UAAY,EAAA,QAAA;AAAA,IACZ2H,cAAgB,EAAA,QAAA;AAAA,GAJX;AAAA,EAMT1H,WAAa,EAAA;AAAA,IACTC,MAAAA,EAAQN,KAAMO,CAAAA,OAAAA,CAAQ,CAAd,CAAA;AAAA,GAPH;AAAA,EASTsG,SAAW,EAAA;AAAA,IACP1G,OAAS,EAAA,MAAA;AAAA,IACT2G,QAAU,EAAA,MAAA;AAAA,GAXL;AAAA,EAaTH,KAAO,EAAA;AAAA,IACHxG,OAAS,EAAA,MAAA;AAAA,IACTyG,aAAe,EAAA,QAAA;AAAA,GAfV;AAAA,EAiBTG,SAAW,EAAA;AAAA,IACPzG,MAAAA,EAAQN,KAAMO,CAAAA,OAAAA,CAAQ,GAAd,CAAA;AAAA,GAlBH;AAAA,EAoBT8O,YAAc,EAAA;AAAA,IACV/O,MAAAA,EAAQN,KAAMO,CAAAA,OAAAA,CAAQ,CAAd,CAAA;AAAA,GArBH;AAAA,EAuBT+O,IAAM,EAAA;AAAA,IACFnP,OAAS,EAAA,MAAA;AAAA,IACToP,SAAW,EAAA,YAAA;AAAA,IACX9J,UAAAA,EAAYzF,MAAM0F,UAAW8J,CAAAA,gBAAAA;AAAAA,GAH3B;AAvBG,CAAD,CADmB,CAAA,CAAA;AAmCC,SAAA,mBAAA,CAAA;AAAA,EACIrW,KAAAA;AAAAA,EACAf,QAAAA;AAAAA,EACAmO,IAAAA;AAAAA,CACkD,EAAA;AAEhF3F,EAAAA,MAAAA,UAAUd,WAAhB,EAAA,CAAA;AAEA,EAAA,IAAI,CAAC3G,KAAAA;AAAO,IAAO,uBAAAlM,GAAA,CAAP,KAAA,EAAA,EAAA,CAAA,CAAA;AACNmE,EAAAA,MAAAA,GAAM+H,GAAAA,KAAAA,CAAAA;AACZ,EAAA,IAAI,OAAOf,QAASoO,CAAAA,MAAAA,EAAQpV,QAAQ,SAAagH,IAAAA,QAAAA,CAASoO,OAAOpV,GAAK,EAAA;AAClE,IAAA,4BACK,IAAD,EAAA;AAAA,MAAM,WAAWwP,OAAQ0O,CAAAA,IAAAA;AAAAA,MACnB,IAAMle,EAAAA,GAAAA;AAAAA,MACN,WAAA,EAAa,CAACiB,CAAwB,KAAA;AAClCA,QAAAA,CAAAA,CAAEod,cAAF,EAAA,CAAA;AAAA,OAHV;AAAA,MAKM,MAAO,EAAA,QAAA;AAAA,MALb,QAAA,EAAA,iBAMIxiB,GAAA,CAAC,aAAD,EAAA;AAAA,QAAe,KAAO,EAAA;AAAA,UAAEyiB,WAAa,EAAA,CAAA;AAAA,SAArC;AAAA,QAA0C,QAAU,EAAA,OAAA;AAAA,OAApD,GACCte,GAPL,CAAA;AAAA,KADJ,CAAA,CAAA;AAAA,GAWH;AAED,EAAA,MAAMue,YAAuBvX,QAASoO,CAAAA,MAAAA,EAAQpV,GAC1CgH,IAAAA,QAAAA,CAASoO,QAAQoJ,WAAaD,EAAAA,SAAAA,CAAAA;AAC9BA,EAAAA,IAAAA,cAAc,OAAS,EAAA;AACvB,IAAA,2BAAQ,YAAD,EAAA;AAAA,MACc,GAAA;AAAA,MACA,IAAA;AAAA,KAFd,EAAoB,CAAgBve,cAAAA,EAAAA,GAAAA,CAAAA,CAAAA,EAAOmV,IAA3C,CAAA,CAAA,CAAA,CAAA;AAAA,GAGV,MAAA,IAAUoJ,cAAc,OAAS,EAAA;AACvB,IAAA,4BAAA,OAAA,EAAA;AAAA,MAAO,QAAP,EAAA,IAAA;AAAA,MACO,GAAKve,EAAAA,GAAAA;AAAAA,MAGf,QAAA,EAAA,CAAA,mCAAA,kBAAAnE,GAAA,CAAA,MAAA,EAAA;AAAA,QAAA,QAAA,EAAA,OAAA;AAAA,OAJG,GAAA,WAAA,CAAA;AAAA,KAAA,EAEa,CAAgBmE,cAAAA,EAAAA,GAAAA,CAAAA,CAAAA,EAAOmV,IAFpC,CAAA,CAAA,CAAA,CAAA;AAAA,GAMV,MAAA,IAAUoJ,cAAc,OAAS,EAAA;AAC9B,IAAA,2BAAQ,SAAD,EAAA;AAAA,MAEH,KAAO,EAAA;AAAA,QAAEpK,QAAAA,EAAUgB,IAAS,KAAA,OAAA,GAAU,GAAM,GAAA,GAAA;AAAA,OAFzC;AAAA,MAGH,SAAU,EAAA,OAAA;AAAA,MACV,QAJG,EAAA,IAAA;AAAA,MAKH,KAAOnV,EAAAA,GAAAA;AAAAA,KALJ,EACG,CAAgBA,cAAAA,EAAAA,GAAAA,CAAAA,CAAAA,EAAOmV,IAD1B,CAAA,CAAA,CAAA,CAAA;AAAA,GAOJ,MAAA;AACI,IAAA,2BAAA,GAAA,EAAA;AAAA,MAEH,IAAMnV,EAAAA,GAAAA;AAAAA,MACN,GAAI,EAAA,qBAAA;AAAA,MACJ,MAAO,EAAA,QAAA;AAAA,MACP,OAAA,EAAUiB,CAAMA,CAAAA,KAAAA,CAAAA,CAAEgV,eALf,EAAA;AAAA,MAMH,QAAA,sBAAA,KAAA,EAAA;AAAA,QAAK,WAAWzG,OAAQV,CAAAA,UAAAA;AAAAA,QACnB,KAAO,EAAA;AAAA,UACHjL,KAAAA,EAAO2T,oBAAoBrC,IAAD,CAAA;AAAA,UAC1BgB,MAAAA,EAAQqB,oBAAoBrC,IAAD,CAAA;AAAA,SAHpC;AAAA,QAAA,QAKI,kBAAAtZ,GAAA,CAAC,uBAAD,EAAA,EAAA,CAAA;AAAA,OALJ,CAAA;AAAA,KANG,EACG,CAAemE,aAAAA,EAAAA,GAAAA,CAAAA,CAAAA,EAAOmV,IADzB,CAAA,CAAA,CAAA,CAAA;AAAA,GAcV;AACJ;;AChFiC,SAAA,iBAAA,CAAA;AAAA,EACOnO,QAAAA;AAAAA,EACAmO,IAAAA;AAAAA,CAEvC,EAAA;AAEM,EAAA,IAAA,CAACnO,QAAU,EAAA;AACXF,IAAQwI,OAAAA,CAAAA,KAAAA,CAAM,6CAA+CtI,EAAAA,QAAAA,EAAUmO,IAAvE,CAAA,CAAA;AAAA,GACH;AAED,EAAIsJ,IAAAA,OAAAA,CAAAA;AACJ,EAAIzX,IAAAA,QAAAA,CAASE,aAAa,QAAU,EAAA;AAChC,IAAA,MAAM0O,cAAiB5O,GAAAA,QAAAA,CAAAA;AACvB,IAAI4O,IAAAA,cAAAA,CAAeR,QAAQpV,GAAK,EAAA;AAC5Bye,MAAUC,OAAAA,GAAAA,kBAAAA,CAAmB9I,gBAAgBT,IAAjB,CAAA,CAAA;AAAA,KAC/B,MAAA,IAAUS,cAAeR,CAAAA,MAAAA,EAAQoJ,WAAa,EAAA;AAC3CC,MAAAA,OAAAA,GAAUE,6BAA6BxJ,IAAD,CAAA,CAAA;AAAA,KACnC,MAAA;AACHsJ,MAAAA,OAAAA,GAAUG,kBAAV,EAAA,CAAA;AAAA,KACH;AAAA,GACJ,MAAA,IAAU5X,QAASE,CAAAA,QAAAA,KAAa,OAAS,EAAA;AACtC,IAAA,MAAM2X,aAAgB7X,GAAAA,QAAAA,CAAAA;AAElB6X,IAAAA,IAAAA,cAAc5V,EAAI,EAAA;AAClB,MAAA,IAAI4V,cAAc5V,EAAG/B,CAAAA,QAAAA,KAAa,KAAS2X,IAAAA,aAAAA,CAAc5V,GAAG3B,UAAY,EAAA;AACpEmX,QAAAA,OAAAA,GAAUK,kBAAkBD,aAAc5V,CAAAA,EAAAA,CAAG3B,YAAY6N,IAAM0J,EAAAA,aAAAA,CAAc5V,GAAG4O,iBAArD,CAAA,CAAA;AAAA,OACpBgH,MAAAA,IAAAA,aAAAA,CAAc5V,EAAG/B,CAAAA,QAAAA,KAAa,QAAU,EAAA;AAC/C,QAAI2X,IAAAA,aAAAA,CAAc5V,EAAGmM,CAAAA,MAAAA,EAAQxB,UAAY,EAAA;AACrC6K,UAAAA,OAAAA,GAAUM,wBAAV,EAAA,CAAA;AAAA,SACOF,MAAAA,IAAAA,aAAAA,CAAc5V,EAAGmM,CAAAA,MAAAA,EAAQoJ,WAAa,EAAA;AAC7CC,UAAUO,OAAAA,GAAAA,sBAAAA,CAAuBH,cAAc5V,EAAf,CAAA,CAAA;AAAA,SAC7B,MAAA;AACHwV,UAAAA,OAAAA,GAAUQ,oBAAV,EAAA,CAAA;AAAA,SACH;AAAA,OACE,MAAA;AACHR,QAAUO,OAAAA,GAAAA,sBAAAA,CAAuBH,cAAc5V,EAAf,CAAA,CAAA;AAAA,OACnC;AAAA,KACJ;AAAA,GAEJ,MAAA,IAAUjC,QAASE,CAAAA,QAAAA,KAAa,KAAO,EAAA;AACpCuX,IAAUS,OAAAA,GAAAA,SAAAA,CAAUlY,UAAyBmO,IAA1B,CAAA,CAAA;AAAA,GACtB,MAAA,IAAUnO,QAASE,CAAAA,QAAAA,KAAa,WAAa,EAAA;AAC1CuX,IAAAA,OAAAA,GAAUG,kBAAV,EAAA,CAAA;AAAA,GACH,MAAA,IAAU5X,QAASE,CAAAA,QAAAA,KAAa,WAAa,EAAA;AAC1CuX,IAAAA,OAAAA,GAAUU,eAAV,EAAA,CAAA;AAAA,GACH,MAAA,IAAUnY,QAASE,CAAAA,QAAAA,KAAa,SAAW,EAAA;AACxCuX,IAAAA,OAAAA,GAAUG,kBAAV,EAAA,CAAA;AAAA,GACG,MAAA;AACHH,IAAAA,OAAAA,GAAUG,kBAAV,EAAA,CAAA;AAAA,GACH;AACOH,EAAAA,OAAAA,OAAW,IAAA,IAAA,CAAA;AACtB,CAAA;AAED,SAAA,SAAA,CAAqCzX,UAA0BmO,IAAmB,EAAA;AAE9E,EAAA,IAAI,CAACnO,QAASM,CAAAA,UAAAA;AACV,IAAO,uBAAAzL,GAAA,CAAPyZ,QAAA,EAAA,EAAA,CAAA,CAAA;AAEAwC,EAAAA,IAAAA,aAAAA,CAAAA;AACA,EAAA,IAAA,CAAC3C,IAAM,EAAA;AACP2C,IAAgB/W,aAAAA,GAAAA,MAAAA,CAAOiF,IAAKgB,CAAAA,QAAAA,CAASM,UAArB,CAAA,CAAA;AAAA,GACb,MAAA;AACH,IAAA,IAAIN,QAAS6Q,CAAAA,iBAAAA;AACTC,MAAAA,aAAAA,GAAgB9Q,QAAS6Q,CAAAA,iBAAAA,CAAAA;AAAAA;AAEzBC,MAAAA,aAAAA,GAAgB/W,OAAOiF,IAAKgB,CAAAA,QAAAA,CAASM,UAArB,CAAiCrJ,CAAAA,KAAAA,CAAM,GAAG,CAA1C,CAAA,CAAA;AAAA,GACvB;AAED,EAAIkX,IAAAA,IAAAA;AACA,IAAA,2BACK,IAAD,EAAA;AAAA,MAAA,UACK2C,aAAiBA,IAAAA,aAAAA,CAAchY,IAAI,CAAC2F,GAAAA,yBAChC,QAAD,EAAA;AAAA,QAAA,QAAA,sBACK,iBAAD,EAAA;AAAA,UACI,QAAA,EAAWuB,SAASM,UAAmB7B,CAAAA,GAAAA,CAAAA;AAAAA,UACvC,IAAM,EAAA,OAAA;AAAA,SAFV,CAAA;AAAA,OADWuB,EAAAA,QAAAA,CAAS3L,KAAQoK,GAAAA,GAAhC,CADc,CAAA;AAAA,KAF1B,CAAA,CAAA;AAYJ,EAAA,2BACKsS,OAAD,EAAA;AAAA,IAAO,IAAM,EAAA,OAAA;AAAA,IAAb,QAAA,sBACK,SAAD,EAAA;AAAA,MACKD,UAAAA,aACDA,IAAAA,aAAAA,CAAchY,GAAI,CAAA,CAAC2F,KAAKkO,KAAU,KAAA;AAC9B,QAAA,4BACK,QAAD,EAAA;AAAA,UACU,EAAI,EAAA;AAAA,YACoC,kCAAA,EAAA;AAAA,cAChCqE,YAAc,EAAA,CAAA;AAAA,aADkB;AAAA,WAFlD;AAAA,UAAA,QAAA,EAAA,iBAMInc,GAAA,CAACoc,WAAD,EAAA;AAAA,YACW,SAAU,EAAA,IAAA;AAAA,YADrB,QAAA,sBAEK,QAAD,EAAA;AAAA,cAAU,OAAQ,EAAA,MAAA;AAAA,aAAlB,CAAA;AAAA,WAFa,EAAA,CAAA,iBAAA,EAAmBxS,GAApC,CAAA,CAAA,CAAA,sBAICwS,WAAD,EAAA;AAAA,YAAqC,SAAU,EAAA,IAAA;AAAA,YAA/C,QAAA,sBACK,iBAAD,EAAA;AAAA,cACI,QAAA,EAAWjR,SAASM,UAAmB7B,CAAAA,GAAAA,CAAAA;AAAAA,cACvC,IAAM,EAAA,OAAA;AAAA,aAFV,CAAA;AAAA,WADa,EAAA,CAAaA,WAAAA,EAAAA,GAAAA,CAAAA,CAA9B,CAVJ,CAAA;AAAA,SAAgB,EAAA,CAAA,MAAA,EAAQuB,QAAS3L,CAAAA,KAAAA,CAAAA,CAAAA,EAASsY,KAA1C,CAAA,CAAA,CAAA,CAAA;AAAA,OAFR,CAAA;AAAA,KAFJ,CAAA;AAAA,GAFR,CAAA,CAAA;AA4BH,CAAA;AAED,SAA8BrM,iBAAAA,CAAAA,UAAAA,EAA2B6N,MAAmB0C,iBAA8B,EAAA;AAClGuH,EAAAA,IAAAA,eAAkBvH,GAAAA,iBAAAA,CAAAA;AACtB,EAAA,IAAI,CAACuH,eAAAA,IAAmB,CAACA,eAAAA,CAAgB5gB,MAAQ,EAAA;AAC7C4gB,IAAkBre,eAAAA,GAAAA,MAAAA,CAAOiF,KAAKsB,UAAZ,CAAA,CAAA;AACd6N,IAAAA,IAAAA,IAAAA;AACAiK,MAAkBA,eAAAA,GAAAA,eAAAA,CAAgBnhB,KAAM,CAAA,CAAA,EAAG,CAAzB,CAAA,CAAA;AAAA,GACzB;AAED,EAAA,2BACK8Z,OAAD,EAAA;AAAA,IAAO,IAAM,EAAA,OAAA;AAAA,IAAb,QAAA,sBACK,SAAD,EAAA;AAAA,MAAA,QAAA,EAEQ,CAAC,CAAG,EAAA,CAAA,EAAG,CAAP,CAAUjY,CAAAA,GAAAA,CAAI,CAACiI,KAAAA,EAAO4L,KAAU,KAAA;AAC5B,QAAA,2BACK,QAAD,EAAA;AAAA,UACKyL,UAAAA,eAAmBA,IAAAA,eAAAA,CAAgBtf,GAC/B2F,CAAAA,CAAAA,GAAAA,yBACIwS,WAAD,EAAA;AAAA,YAEI,SAAU,EAAA,IAAA;AAAA,YAFd,QAAA,sBAIK,iBAAD,EAAA;AAAA,cACI,UAAW3Q,UAAmB7B,CAAAA,GAAAA,CAAAA;AAAAA,cAC9B,IAAM,EAAA,OAAA;AAAA,aAFV,CAAA;AAAA,WAHM,EAAA,CAAaA,WAAAA,EAAAA,GAAAA,CAAAA,CADvB,CAFY,CAAA;AAAA,SADxB,EAAgB,CAAQsC,MAAAA,EAAAA,KAAAA,CAAAA,CAAAA,EAAS4L,KAAjC,CAAA,CAAA,CAAA,CAAA;AAAA,OAFR,CAAA;AAAA,KAFR,CAAA;AAAA,GAFR,CAAA,CAAA;AAyBH,CAAA;AAED,SAAgC,oBAAA,GAAA;AAC5B,EAAA,2BACK,IAAD,EAAA;AAAA,IAAA,QAAA,EAEQ,CAAC,CAAA,EAAG,CAAJ,CAAA,CAAO7T,GAAI,CAAA,CAACiI,KAAO4L,EAAAA,KAAAA,KACfiL,kBAAmBjL,CAAAA,KAAD,CADtB,CAAA;AAAA,GAHZ,CAAA,CAAA;AAQH,CAAA;AAED,SAAoC,wBAAA,GAAA;AAChC,EAAA,2BACK,IAAD,EAAA;AAAA,IAEQ,QAAA,EAAA,CAAC,CAAA,EAAG,CAAJ,CAAA,CAAO7T,IAAI,CAACiI,KAAAA,EAAO4L,KACf,qBAAA9X,GAAA,CAAAyZ,QAAA,EAAA;AAAA,MACKsJ,QAAAA,EAAAA,mBAAmBjL,KAAD,CAAA;AAAA,KAF3B,CAAA,CAAA;AAAA,GAHZ,CAAA,CAAA;AAUH,CAAA;AAED,SAAA,sBAAA,CACI3M,QACF,EAAA;AACE,EAAA,2BACK,IAAD,EAAA;AAAA,IAGQ,QAAA,EAAA,CAAC,CAAA,EAAG,CAAJ,CAAA,CAAOlH,IAAI,CAACiI,KAAAA,EAAO4L,KACf,qBAAA9X,GAAA,CAAAyZ,QAAA,EAAA;AAAA,MAAA,QAAA,sBACK,iBAAD,EAAA;AAAA,QAAmB,QAAA;AAAA,QACA,IAAM,EAAA,OAAA;AAAA,OADzB,CAAA;AAAA,KAFR,CAAA,CAAA;AAAA,GAJZ,CAAA,CAAA;AAYH,CAAA;AAED,SAAmC,uBAAA,GAAA;AAC/B,EAAA,2BACK,QAAD,EAAA;AAAA,IAAU,OAAQ,EAAA,aAAA;AAAA,IACR,KAAO,EAAA,GAAA;AAAA,IACP,MAAQ,EAAA,GAAA;AAAA,GAHtB,CAAA,CAAA;AAKH,CAAA;AAEM,SAAA,4BAAA,CAAsCH,IAAmB,EAAA;AAC5D,EAAA,MAAMyB,YAAYzB,IAAS,KAAA,MAAA,GAAS,EAAKA,GAAAA,IAAAA,KAAS,UAAU,GAAM,GAAA,GAAA,CAAA;AAClE,EAAA,2BACK,QAAD,EAAA;AAAA,IAAU,OAAQ,EAAA,aAAA;AAAA,IACR,KAAOyB,EAAAA,SAAAA;AAAAA,IACP,MAAQA,EAAAA,SAAAA;AAAAA,GAHtB,CAAA,CAAA;AAKH,CAAA;AAED,SAAA,cAAA,CAAwBzB,IAAmB,EAAA;AAEvC,EAAA,2BACK,QAAD,EAAA;AAAA,IAAU,OAAQ,EAAA,aAAA;AAAA,IACR,KAAA,EAAOA,IAAS,KAAA,SAAA,GAAY,GAAM,GAAA,GAAA;AAAA,IAClC,MAAA,EAAQA,IAAS,KAAA,SAAA,GAAY,GAAM,GAAA,GAAA;AAAA,GAHjD,CAAA,CAAA;AAKH,CAAA;AAED,SAA2B,eAAA,GAAA;AACvB,EAAA,2BAAQ,QAAD,EAAA;AAAA,IAAU,OAAQ,EAAA,aAAA;AAAA,IAAc,KAAO,EAAA,GAAA;AAAA,IAAK,MAAQ,EAAA,GAAA;AAAA,GAA3D,CAAA,CAAA;AACH,CAAA;AAGD,SAA4BnO,kBAAAA,CAAAA,QAAAA,EAA0BmO,OAAoB,SAAW,EAAA;AAEjF,EAAA,IAAI,OAAOnO,QAASoO,CAAAA,MAAAA,EAAQpV,QAAQ,SAAagH,IAAAA,QAAAA,CAASoO,OAAOpV,GAAK,EAAA;AAC3D,IAAA,4BAAA,KAAA,EAAA;AAAA,MAAK,KAAO,EAAA;AAAA,QACf+O,OAAS,EAAA,MAAA;AAAA,OADN;AAAA,MAAA,QAAA,EAAA,CAGFsQ,kBAAkB,EAAA,EAClBT,oBAJE,CAAA;AAAA,KAAP,CAAA,CAAA;AAAA,GAMH;AAED,EAAA,MAAML,YAAYvX,QAASoO,CAAAA,MAAAA,EAAQpV,GAAOgH,IAAAA,QAAAA,CAASoO,QAAQoJ,WAAaD,EAAAA,SAAAA,CAAAA;AACpEA,EAAAA,IAAAA,cAAc,OAAS,EAAA;AAChBI,IAAAA,OAAAA,6BAA6BxJ,IAAD,CAAA,CAAA;AAAA,GACtC,MAAA,IAAUoJ,cAAc,OAAS,EAAA;AAC9B,IAAA,OAAOe,uBAAP,EAAA,CAAA;AAAA,GACH,MAAA,IAAUf,cAAc,OAAS,EAAA;AACvBgB,IAAAA,OAAAA,eAAepK,IAAD,CAAA,CAAA;AAAA,GAClB,MAAA;AACIqK,IAAAA,OAAAA,cAAcrK,IAAD,CAAA,CAAA;AAAA,GACvB;AACJ,CAAA;AAED,SAAA,aAAA,CAAuBA,IAAmB,EAAA;AAEtC,EAAA,2BACK,GAAD,EAAA;AAAA,IACI,EAAI,EAAA;AAAA,MACAtR,KAAAA,EAAO2T,oBAAoBrC,IAAD,CAAA;AAAA,MAC1BgB,MAAAA,EAAQqB,oBAAoBrC,IAAD,CAAA;AAAA,KAHnC;AAAA,IAAA,UAKKkK,kBAAkB,EAAA;AAAA,GAN3B,CAAA,CAAA;AASH,CAAA;AAED,SAAA,kBAAA,CAA4B1L,KAAgB,EAAA;AACxC,EAAA,2BAAQ,QAAD,EAAA;AAAA,IAAU,OAAQ,EAAA,MAAA;AAAA,GAAa,EAAA,YAAWA,KAA1C,CAAA,CAAA,CAAA,CAAA;AACV,CAAA;AAQoC,SAAA,kBAAA,GAAA;AACjC,EAAA,2BAAQ,QAAD,EAAA;AAAA,IAAU,OAAQ,EAAA,aAAA;AAAA,IAAc,KAAO,EAAA,EAAA;AAAA,IAAI,MAAQ,EAAA,EAAA;AAAA,GAA1D,CAAA,CAAA;AACH;;AC9RM,MAAM8L,gBAAmB1kB,GAAAA,cAAAA,CAAMiV,IAAoC0P,CAAAA,wBAAAA,EAA0BC,UAApE,EAAA;AAEhC,SAAAA,UAAA,CAAkBC,WAA0CC,SAA0C,EAAA;AAClG,EAAA,OAAOD,UAAU1f,IAAS2f,KAAAA,SAAAA,CAAU3f,QAChC0f,SAAUzK,CAAAA,IAAAA,KAAS0K,UAAU1K,IAC7ByK,IAAAA,SAAAA,CAAUzJ,MAAW0J,KAAAA,SAAAA,CAAU1J,UAC/ByJ,SAAU/b,CAAAA,KAAAA,KAAUgc,UAAUhc,KAC9B+b,IAAAA,SAAAA,CAAU7X,UAAU8X,SAAU9X,CAAAA,KAAAA,CAAAA;AACrC,CAAA;AAED,MAAM+X,YAAoC,EAA1C,CAAA;AAEyC,SAAA,wBAAA,CAAA;AAAA,EACI5f,IAAAA;AAAAA,EACA6H,KAAAA;AAAAA,EACAf,QAAAA;AAAAA,EACAmO,IAAAA;AAAAA,CAC8B,EAAA;AACjE4K,EAAAA,MAAAA,UAAUC,gBAAhB,EAAA,CAAA;AAEMC,EAAAA,MAAAA,wBAA2BlY,GAAAA,KAAAA,CAAAA;AAEjC,EAAA,MAAM,CAAC/H,GAAKkgB,EAAAA,MAAAA,CAAAA,GAAUnlB,cAAMK,CAAAA,QAAAA,CAAiB0kB,UAAUG,wBAAjC,CAAA,CAAA,CAAA;AAGtBviB,EAAAA,SAAAA,CAAU,MAAM;AACR,IAAA,IAAA,CAACuiB,wBAAAA;AACD,MAAA,OAAA;AACAnQ,IAAAA,IAAAA,SAAY,GAAA,KAAA,CAAA;AAChB,IAAI9I,IAAAA,QAAAA,CAASoO,MAAQoJ,EAAAA,WAAAA,EAAa2B,QAAU,EAAA;AACxCD,MAAAA,MAAAA,CAAOD,wBAAD,CAAA,CAAA;AACNH,MAAAA,SAAAA,CAAUG,wBAA4BA,CAAAA,GAAAA,wBAAAA,CAAAA;AAAAA,KAC/BA,MAAAA,IAAAA,wBAAAA;AACPF,MAAAA,OAAAA,CAAQK,cAAeH,CAAAA,wBAAvB,CACKtV,CAAAA,IAAAA,CAAK,SAAU0V,WAAa,EAAA;AACrB,QAAA,IAAA,CAACvQ,SAAW,EAAA;AACZoQ,UAAAA,MAAAA,CAAOG,WAAD,CAAA,CAAA;AACNP,UAAAA,SAAAA,CAAUG,wBAA4BI,CAAAA,GAAAA,WAAAA,CAAAA;AAAAA,SACzC;AAAA,OALT,CAAA,CAAA;AAOJ,IAAA,OAAO,MAAM;AACTvQ,MAAY,SAAA,GAAA,IAAA,CAAA;AAAA,KADhB,CAAA;AAAA,KAGD,CAAC9I,QAAAA,CAASoO,QAAQoJ,WAAa2B,EAAAA,QAAAA,EAAUF,wBAAzC,CAlBM,CAAA,CAAA;AAoBT,EAAA,IAAI,CAACA,wBAAAA;AAA0B,IAAO,OAAA,IAAA,CAAA;AAE/BjgB,EAAAA,OAAAA,GAAAA,uBACA,mBAAD,EAAA;AAAA,IAAqB,IAAA;AAAA,IACF,KAAOA,EAAAA,GAAAA;AAAAA,IACP,QAAA;AAAA,IACA,IAAA;AAAA,GAHnB,CAIA2e,GAAAA,4BAAAA,CAA6BxJ,IAAD,CAAA,CAAA;AACrC;;AChDM,MAAMzG,WAAYC,GAAAA,UAAAA,CAAW,CAACC,KAAAA,KACjCC,YAAa,CAAA;AAAA,EACT4G,SAAW,EAAA;AAAA,IACP1G,OAAS,EAAA,MAAA;AAAA,IACT2G,QAAU,EAAA,MAAA;AAAA,GAHL;AAAA,EAKTC,SAAW,EAAA;AAAA,IACPzG,MAAAA,EAAQN,KAAMO,CAAAA,OAAAA,CAAQ,GAAd,CAAA;AAAA,GADD;AALF,CAAD,CADmB,CAAA,CAAA;AAea,SAAA,+BAAA,CAAA;AAAA,EACIjP,IAAAA;AAAAA,EACA6H,KAAAA;AAAAA,EACAf,QAAAA;AAAAA,EACAmO,IAAAA;AAAAA,CAC6B,EAAA;AAEzEnO,EAAAA,IAAAA,QAAAA,CAASE,aAAa,OAAW,IAAA,CAACF,SAASiC,EAAMjC,IAAAA,QAAAA,CAASiC,GAAG/B,QAAa,KAAA,QAAA;AAC1E,IAAA,MAAMzI,MAAM,gEAAD,CAAA,CAAA;AAET6hB,EAAAA,MAAAA,SAAAA,GAAyBnL,IAAS,KAAA,SAAA,GAAY,OAAU,GAAA,MAAA,CAAA;AACxD3F,EAAAA,MAAAA,UAAUd,WAAhB,EAAA,CAAA;AAEO,EAAA,2BAAA,KAAA,EAAA;AAAA,IAAK,WAAWc,OAAQiG,CAAAA,SAAAA;AAAAA,IAC1B1N,QAAAA,EAAAA,SACDA,KAAMjI,CAAAA,GAAAA,CAAI,CAACyG,CAAGoN,EAAAA,KAAAA,yBACV,KAAA,EAAA;AAAA,MAAK,WAAWnE,OAAQmG,CAAAA,SAAAA;AAAAA,MAAxB,QAAA,sBAEK,aAAD,EAAA;AAAA,QAAA,QAAA,sBACK,gBAAD,EAAA;AAAA,UACI,IAAA;AAAA,UACA,KAAOpP,EAAAA,CAAAA;AAAAA,UACP,UAAUS,QAASiC,CAAAA,EAAAA;AAAAA,UACnB,IAAMqX,EAAAA,SAAAA;AAAAA,SAJV,CAAA;AAAA,OADJ,CAAA;AAAA,KADO,EAAA,CAAA,sBAAA,EAAwBpgB,IAAQyT,CAAAA,CAAAA,EAAAA,KAAAA,CAAAA,CAD3C,CADJ,CAAA;AAAA,GAFJ,CAAA,CAAA;AAeH;;ACxBM,MAAM4M,gBAAmBxlB,GAAAA,KAAAA,CAAMiV,IAA4BwQ,CAAAA,yBAAAA,EAA2Bb,UAA7D,EAAA;AAEhC,SAAAA,UAAA,CAAkBC,WAAkCC,SAAkC,EAAA;AAClF,EAAA,OAAOD,SAAU1f,CAAAA,IAAAA,KAAS2f,SAAU3f,CAAAA,IAAAA,IAChC0f,SAAUzK,CAAAA,IAAAA,KAAS0K,SAAU1K,CAAAA,IAAAA,IAC7ByK,SAAUzJ,CAAAA,MAAAA,KAAW0J,SAAU1J,CAAAA,MAAAA,IAC/ByJ,UAAU/b,KAAUgc,KAAAA,SAAAA,CAAUhc,KAC9B+b,IAAAA,SAAAA,CAAUtI,OAAYuI,KAAAA,SAAAA,CAAUvI,OAChCsI,IAAAA,SAAAA,CAAU7X,KAAOjD,EAAAA,EAAAA,KAAO+a,SAAU9X,CAAAA,KAAAA,EAAOjD,EACzC8a,IAAAA,SAAAA,CAAU7X,KAAO5J,EAAAA,IAAAA,KAAS0hB,UAAU9X,KAAO5J,EAAAA,IAAAA,CAAAA;AAElD,CAAA;AAED,SACI,yBAAA,CAAA;AAAA,EACI4J,KAAAA;AAAAA,EACAf,QAAAA;AAAAA,EACAyZ,OAAAA;AAAAA,EACAtL,IAAAA;AAAAA,EACAmC,OAAAA;AAAAA,CACsB,EAAA;AAE1B,EAAI,IAAA,OAAOtQ,QAAS7I,CAAAA,IAAAA,KAAS,QAAU,EAAA;AAC7BM,IAAAA,MAAAA,MAAM,sDAAD,CAAA,CAAA;AAAA,GACd;AAED,EAAA,MAAMiiB,SAA6B3Y,GAAAA,KAAAA,CAAAA;AACnC,EAAA,MAAM8P,oBAAoB7Q,QAAS6Q,CAAAA,iBAAAA,CAAAA;AAE7B5b,EAAAA,MAAAA,oBAAoB0kB,aAA1B,EAAA,CAAA;AACM3kB,EAAAA,MAAAA,uBAAuB4kB,uBAA7B,EAAA,CAAA;AAEA,EAAA,MAAMC,kBAAqB5kB,GAAAA,iBAAAA,CAAkBoP,qBAAyBrE,CAAAA,QAAAA,CAAS7I,IAApD,CAAA,CAAA;AACvB,EAAA,IAAA,CAAC0iB,kBAAoB,EAAA;AACrB,IAAMpiB,MAAAA,KAAAA,CAAO,CAAgEuI,8DAAAA,EAAAA,QAAAA,CAAS7I,IAA3E,CAAA,CAAA,CAAA,CAAA;AAAA,GACd;AAED,EAAA,MAAMwD,SAASkf,kBAAmBlf,CAAAA,MAAAA,CAAAA;AAE5B,EAAA,MAAA;AAAA,IACFiH,MAAAA;AAAAA,IACAmQ,WAAAA;AAAAA,IACAE,gBAAAA;AAAAA,GAAAA,GACA6H,cAAe,CAAA;AAAA,IACf3iB,MAAMuiB,SAAUviB,CAAAA,IAAAA;AAAAA,IAChBoD,UAAUmf,SAAU5b,CAAAA,EAAAA;AAAAA,IACpBnD,QAAQkf,kBAAmBzc,CAAAA,cAAAA;AAAAA,IAC3B+V,QAAU,EAAA,IAAA;AAAA,GAJI,CAAA,CAAA;AAOlB,EAAM4G,MAAAA,cAAAA,GAAiB/T,QAAQ,MAAM;AAC7BxH,IAAAA,IAAAA,GAAMqS,GAAAA,iBAAAA,CAAAA;AACV,IAAA,IAAI,CAACrS,GAAAA,IAAO,CAACA,GAAAA,CAAIhH,MAAQ,EAAA;AACrBgH,MAAMzE,GAAAA,GAAAA,MAAAA,CAAOiF,IAAKrE,CAAAA,MAAAA,CAAO2F,UAAnB,CAAA,CAAA;AAAA,KACT;AAED,IAAI6N,IAAAA,IAAAA,KAAS,WAAWA,IAAS,KAAA,SAAA;AAC7B3P,MAAMA,GAAAA,GAAAA,GAAAA,CAAIvH,KAAM,CAAA,CAAA,EAAG,CAAb,CAAA,CAAA;AAAA,SAAA,IACDkX,IAAS,KAAA,MAAA;AACd3P,MAAMA,GAAAA,GAAAA,GAAAA,CAAIvH,KAAM,CAAA,CAAA,EAAG,CAAb,CAAA,CAAA;AACV,IAAOuH,OAAAA,GAAAA,CAAAA;AAAAA,KACR,CAACqS,iBAAAA,EAAmBlW,MAAO2F,CAAAA,UAAAA,EAAY6N,IAAvC,CAX2B,CAAA,CAAA;AAa9B,EAAI1F,IAAAA,IAAAA,CAAAA;AAEKuR,EAAAA,SAAAA,UAAAA,CAAW1R,OAAeC,OAAkB,EAAA;AACjD,IAAA,2BAAQ,SAAD,EAAA;AAAA,MAAW,KAAA;AAAA,MAAc,OAAA;AAAA,KAAhC,CAAA,CAAA;AAAA,GACH;AAEG,EAAA,IAAA,CAACxH,KAAO,EAAA;AACR0H,IAAAA,IAAAA,GAAOuR,WAAW,mBAAD,CAAA,CAAA;AAAA,GACpB,MAAA,IAEQ,EAAEjZ,KAAAA,YAAiBlD,eAAkB,CAAA,EAAA;AAC1C4K,IAAAA,IAAAA,GAAOuR,UAAW,CAAA,kBAAA,EAAoBtT,IAAKC,CAAAA,SAAAA,CAAU5F,KAAf,CAArB,CAAA,CAAA;AAAA,GACVa,MAAAA,IAAAA,MAAAA,IAAU,CAACA,MAAAA,CAAO5H,MAAQ,EAAA;AACjCyO,IAAOuR,IAAAA,GAAAA,UAAAA,CAAW,0BAA4BN,EAAAA,SAAAA,CAAUviB,IAAvC,CAAA,CAAA;AAAA,GACd,MAAA;AAEHsR,IAAAA,IAAAA,wBACI6F,QAAA,EAAA;AAAA,MAAA,QAAA,EAAA,iBACI1Z,IAAA,CAAC,GAAD,EAAA;AAAA,QAAK,EAAI,EAAA;AAAA,UACLmT,OAAS,EAAA,MAAA;AAAA,UACTyG,aAAe,EAAA,QAAA;AAAA,UACfyL,QAAU,EAAA,CAAA;AAAA,UACV9M,QAAU,EAAA,mBAAA;AAAA,UACVjF,MAAQ,EAAA,CAAA;AAAA,SALZ;AAAA,QAAA,UAAA,CAQKiG,IAAAA,KAAS,MACNpN,KAAAA,KAAAA,uBACO,GAAD,EAAA;AAAA,UAAK,EAAI,EAAA;AAAA,YACPgH,OAAAA,EAASoG,IAAS,KAAA,SAAA,GAAY,OAAU5Z,GAAAA,KAAAA,CAAAA;AAAAA,YACxC2lB,UAAAA,EAAY/L,IAAS,KAAA,SAAA,GAAY,QAAW5Z,GAAAA,KAAAA,CAAAA;AAAAA,YAC5C4lB,QAAAA,EAAUhM,IAAS,KAAA,SAAA,GAAY,QAAW5Z,GAAAA,KAAAA,CAAAA;AAAAA,YAC1C6lB,YAAAA,EAAcjM,IAAS,KAAA,SAAA,GAAY,UAAa5Z,GAAAA,KAAAA,CAAAA;AAAAA,WAJlD;AAAA,UAAA,QAAA,sBAMG,UAAD,EAAA;AAAA,YAAY,OAAS,EAAA,SAAA;AAAA,YACT,SAAW,EAAA,MAAA;AAAA,YADvB,UAEKwM,KAAMjD,CAAAA,EAAAA;AAAAA,WAFX,CAAA;AAAA,SAPH,CAYC,mBAAAjJ,GAAA,CAAC,QAAD,EAAA;AAAA,UAAU,OAAQ,EAAA,MAAA;AAAA,SAb3B,CAAA,CAAA,EAgBAklB,cAAkBA,IAAAA,cAAAA,CAAejhB,IAAK2F,CAAQ,GAAA,KAAA;AACrC4D,UAAAA,MAAAA,aAAAA,GAAgB1H,OAAO2F,UAAW7B,CAAAA,GAAAA,CAAAA,CAAAA;AACxC,UAAA,IAAI,CAAC4D,aAAAA;AAAe,YAAO,OAAA,IAAA,CAAA;AAGvB,UAAA,2BAAA,KAAA,EAAA;AAAA,YACKT,QAAAA,EAAAA,MACK,mBAAA/M,GAAA,CAAC,gBAAD,EAAA;AAAA,cAAkB,IAAM4J,EAAAA,GAAAA;AAAAA,cACN,KAAA,EAAOmD,OAAO5H,MAAOyE,CAAAA,GAAAA,CAAAA;AAAAA,cACrB,QAAU4D,EAAAA,aAAAA;AAAAA,cACV,IAAM,EAAA,MAAA;AAAA,aAJvB,CAKD,mBAAAxN,GAAA,CAAC,iBAAD,EAAA;AAAA,cACE,QAAUwN,EAAAA,aAAAA;AAAAA,cACV,IAAM,EAAA,MAAA;AAAA,aAFR,CAAA;AAAA,WANV,EAAU,cAAe5D,GAAzB,CAAA,CAAA;AAAA,SALW,CAxBvB,CAAA;AAAA,OADJ,CA6CI,kBAAA5J,GAAA,CAAC,GAAD,EAAA;AAAA,QAAK,EAAI,EAAA;AAAA,UACLqT,MAAQ,EAAA,MAAA;AAAA,SADZ;AAAA,QAGKtG,QAAAA,EAAAA,MACG,oBAAA/M,GAAA,CAAC,OAAD,EAAA;AAAA,UAAS,KAAA,EAAQ,mBAAkB+M,MAAO9D,CAAAA,EAAAA,CAAAA,CAAAA;AAAAA,UAA1C,QAAA,sBACK,UAAD,EAAA;AAAA,YACI,IAAA,EAAMqQ,IAAS,KAAA,MAAA,GAAS,OAAU,GAAA,QAAA;AAAA,YAClC,SAAUlU,CAAM,CAAA,KAAA;AACZA,cAAAA,CAAAA,CAAEgV,eAAF,EAAA,CAAA;AACAja,cAAAA,oBAAAA,CAAqBpB,IAAK,CAAA;AAAA,gBACtB2G,UAAUqH,MAAO9D,CAAAA,EAAAA;AAAAA,gBACjB3G,MAAMyK,MAAOzK,CAAAA,IAAAA;AAAAA,gBACbwD,MAAAA;AAAAA,gBACAsC,sBAAwB,EAAA,KAAA;AAAA,eAJ5B,CAAA,CAAA;AAAA,aAJR;AAAA,YAAA,QAAA,sBAWK,eAAD,EAAA;AAAA,cAAiB,QAAU,EAAA,OAAA;AAAA,aAA3B,CAAA;AAAA,WAXJ,CAAA;AAAA,SADJ,CAAA;AAAA,OAjDZ,CAAA,CAAA;AAAA,KADJ,CAAA,CAAA;AAAA,GAoEH;AAGD,EAAA,2BACK,KAAD,EAAA;AAAA,IAAO,SAAW,EAAA,CAAA;AAAA,IAAG,IAAK2K,CAAU,KAAA,KAAA;AAC1ByS,MAAAA,MAAAA,kBAAkBZ,OAClB,GAAA;AAAA,QACEa,QAAU,EAAA,CAAA;AAAA,QACVlN,eAAAA,EAAiBkD,OAAW1I,GAAAA,KAAAA,CAAMsI,OAAQna,CAAAA,IAAAA,KAAS,SAASwkB,OAAQ3S,CAAAA,KAAAA,CAAMsI,OAAQsK,CAAAA,UAAAA,CAAWC,OAAS,EAAA,GAAnC,IAA0CC,MAAO9S,CAAAA,KAAAA,CAAMsI,OAAQsK,CAAAA,UAAAA,CAAWC,OAAS,EAAA,IAAnC,CAA4CC,GAAAA,MAAAA,CAAO9S,KAAMsI,CAAAA,OAAAA,CAAQsK,UAAWC,CAAAA,OAAAA,EAAS,GAAnC,CAAA;AAAA,QACrKE,UAAY,EAAA,oDAAA;AAAA,QACZC,SAAAA,EAAWtK,UAAU,kCAAqC/b,GAAAA,KAAAA,CAAAA;AAAAA,QAC1DsmB,MAAAA,EAAQvK,UAAU,SAAY/b,GAAAA,KAAAA,CAAAA;AAAAA,UAEhC,EARN,CAAA;AASQ,MAAA,OAAA;AAAA,QACJsI,KAAO,EAAA,MAAA;AAAA,QACPkL,OAAS,EAAA,MAAA;AAAA,QACTiC,KAAO,EAAA,SAAA;AAAA,QACPoD,iBAAiBsN,MAAO9S,CAAAA,KAAAA,CAAMsI,OAAQsK,CAAAA,UAAAA,CAAWC,SAAS,GAAnC,CAAA;AAAA,QACvBvL,YAAc,EAAA,KAAA;AAAA,QACdiL,QAAU,EAAA,QAAA;AAAA,QACVW,OAAAA,EAAS3M,IAAS,KAAA,SAAA,GAAY,CAAI,GAAA,CAAA;AAAA,QAClC4M,UAAAA,EAAY5M,IAAS,KAAA,MAAA,GAAS,QAAW5Z,GAAAA,KAAAA,CAAAA;AAAAA,QACzC8Y,UAAAA,EAAYzF,MAAM0F,UAAW8J,CAAAA,gBAAAA;AAAAA,QAC1BiD,GAAAA,eAAAA;AAAAA,OAVP,CAAA;AAAA,KAVJ;AAAA,IAuBO,OAAA;AAAA,IAEF5R,QAAAA,EAAAA,IAAAA;AAAAA,GA1BT,CAAA,CAAA;AA+BH;;AC9MM,MAAMf,WAAYC,GAAAA,UAAAA,CAAW,CAACC,KAAAA,KACjCC,YAAa,CAAA;AAAA,EACT8G,SAAW,EAAA;AAAA,IACPzG,MAAAA,EAAQN,KAAMO,CAAAA,OAAAA,CAAQ,GAAd,CAAA;AAAA,GADD;AADF,CAAD,CADmB,CAAA,CAAA;AAWM,SAAA,wBAAA,CAAA;AAAA,EACIjP,IAAAA;AAAAA,EACA6H,KAAAA;AAAAA,EACAf,QAAAA;AAAAA,EACAmO,IAAAA;AAAAA,CAC6B,EAAA;AAElEnO,EAAAA,IAAAA,QAAAA,CAASE,aAAa,OAAW,IAAA,CAACF,SAASiC,EAAMjC,IAAAA,QAAAA,CAASiC,GAAG/B,QAAa,KAAA,WAAA;AAC1E,IAAA,MAAMzI,MAAM,yDAAD,CAAA,CAAA;AAET+Q,EAAAA,MAAAA,UAAUd,WAAhB,EAAA,CAAA;AACM4R,EAAAA,MAAAA,SAAAA,GAAyBnL,IAAS,KAAA,SAAA,GAAY,OAAU,GAAA,MAAA,CAAA;AAG1D,EAAA,2BAAAG,QAAA,EAAA;AAAA,IACKvN,QAAAA,EAAAA,SACDA,KAAMjI,CAAAA,GAAAA,CAAI,CAACyG,CAAGoN,EAAAA,KAAAA,yBACV,KAAA,EAAA;AAAA,MAAK,WAAWnE,OAAQmG,CAAAA,SAAAA;AAAAA,MAAxB,QAAA,sBAEK,gBAAD,EAAA;AAAA,QACI,IAAA,EAAO,GAAEzV,IAAQyT,CAAAA,CAAAA,EAAAA,KAAAA,CAAAA,CAAAA,CAAAA;AAAAA,QACjB,IAAM2M,EAAAA,SAAAA;AAAAA,QACN,KAAO/Z,EAAAA,CAAAA;AAAAA,QACP,UAAUS,QAASiC,CAAAA,EAAAA;AAAAA,OAJvB,CAAA;AAAA,KADO,EAAA,CAAA,kBAAA,EAAoB/I,IAAQyT,CAAAA,CAAAA,EAAAA,KAAAA,CAAAA,CADvC,CADJ,CAAA;AAAA,GAHR,CAAA,CAAA;AAgBH;;AClCD,MAAMjF,WAAAA,GAAYC,UAAW,CAAA,MACzBE,YAAa,CAAA;AAAA,EACTmT,mBAAqB,EAAA;AAAA,IACmB,kCAAA,EAAA;AAAA,MAChChK,YAAc,EAAA,CAAA;AAAA,KADkB;AAAA,GAF/B;AAAA,EAMTiK,gBAAkB,EAAA;AAAA,IACdC,aAAe,EAAA,KAAA;AAAA,GADD;AANT,CAAD,CADY,CAAA,CAAA;AAgBa,SAAA,UAAA,CAAA;AAAA,EACIhiB,IAAAA;AAAAA,EACA6H,KAAAA;AAAAA,EACAf,QAAAA;AAAAA,EACAmO,IAAAA;AAAAA,CACyB,EAAA;AAE5D3F,EAAAA,MAAAA,UAAUd,WAAhB,EAAA,CAAA;AAEA,EAAI1H,IAAAA,QAAAA,CAASE,aAAa,KAAO,EAAA;AACvBzI,IAAAA,MAAAA,MAAM,2CAAD,CAAA,CAAA;AAAA,GACd;AAED,EAAA,MAAM0jB,WAAcnb,GAAAA,QAAAA,CAAAA;AACpB,EAAI,IAAA,CAACmb,YAAY7a,UAAY,EAAA;AACzB,IAAM7I,MAAAA,KAAAA,CAAO,4FAA2FyB,IAA7F,CAAA,CAAA,CAAA,CAAA;AAAA,GACd;AAED,EAAA,IAAI,CAAC6H,KAAAA;AAAO,IAAO,OAAA,IAAA,CAAA;AAGfqa,EAAAA,IAAAA,eAAAA,CAAAA;AACAjN,EAAAA,IAAAA,SAAS,SAAW,EAAA;AACpBiN,IAAkBrhB,eAAAA,GAAAA,MAAAA,CAAOiF,IAAKmc,CAAAA,WAAAA,CAAY7a,UAAxB,CAAA,CAAA;AAAA,GACf,MAAA;AACH8a,IAAAA,eAAAA,GAAmBD,WAAYtK,CAAAA,iBAAAA,IAAqB9W,MAAOiF,CAAAA,IAAAA,CAAKmc,YAAY7a,UAAxB,CAAA,CAAA;AACpD,IAAA,IAAI6N,IAAS,KAAA,OAAA;AACTiN,MAAkBA,eAAAA,GAAAA,eAAAA,CAAgBnkB,KAAM,CAAA,CAAA,EAAG,CAAzB,CAAA,CAAA;AAAA,SAAA,IACbkX,IAAS,KAAA,MAAA;AACdiN,MAAkBA,eAAAA,GAAAA,eAAAA,CAAgBnkB,KAAM,CAAA,CAAA,EAAG,CAAzB,CAAA,CAAA;AAAA,GACzB;AAED,EAAA,IAAIkX,IAAS,KAAA,SAAA;AACT,IAAA,2BACIG,QAAA,EAAA;AAAA,MACK8M,UAAAA,eAAgBtiB,CAAAA,GAAAA,CAAI,CAAC2F,GAAKkO,EAAAA,KAAAA,yBACvB,KAAA,EAAA;AAAA,QAAA,QAAA,sBAEK,aAAD,EAAA;AAAA,UAAA,QAAA,sBACK,gBAAD,EAAA;AAAA,YAAkB,IAAMlO,EAAAA,GAAAA;AAAAA,YACN,OAAQsC,KAActC,CAAAA,GAAAA,CAAAA;AAAAA,YACtB,QAAA,EAAU0c,YAAY7a,UAAY7B,CAAAA,GAAAA,CAAAA;AAAAA,YAClC,IAAA;AAAA,WAHlB,CAAA;AAAA,SADJ,CAAA;AAAA,SADK,cAAiB0c,GAAAA,WAAAA,CAAY9mB,KAAQoK,GAAAA,GAAAA,GAAMkO,KADpD,CADH,CAAA;AAAA,KAFT,CAAA,CAAA;AAgBJ,EAAA,2BACKoE,OAAD,EAAA;AAAA,IAAO,IAAK,EAAA,OAAA;AAAA,IAAZ,QAAA,sBACK,SAAD,EAAA;AAAA,MACKqK,UAAAA,eACDA,IAAAA,eAAAA,CAAgBtiB,GAAI,CAAA,CAAC2F,KAAKkO,KAAU,KAAA;AAChC,QAAA,4BACK,QAAD,EAAA;AAAA,UAEI,WAAWnE,OAAQwS,CAAAA,mBAAAA;AAAAA,UAFvB,QAAA,EAAA,iBAGInmB,GAAA,CAACoc,WAAD,EAAA;AAAA,YACW,WAAWzI,OAAQyS,CAAAA,gBAAAA;AAAAA,YACnB,KAAM,EAAA,KAAA;AAAA,YACN,SAAU,EAAA,IAAA;AAAA,YAHrB,QAAA,sBAIK,UAAD,EAAA;AAAA,cAAY,OAAS,EAAA,SAAA;AAAA,cACT,KAAO,EAAA,eAAA;AAAA,cADnB,QAAA,EAEKE,WAAY7a,CAAAA,UAAAA,CAAY7B,GAAKpK,CAAAA,CAAAA,KAAAA;AAAAA,aAFlC,CAAA;AAAA,aAJa,CAAmB6E,iBAAAA,EAAAA,IAAAA,CAAAA,CAAAA,EAAQuF,GAA5C,CAAA,CAAA,CAAA,sBASCwS,WAAD,EAAA;AAAA,YACW,KAAM,EAAA,KAAA;AAAA,YACN,WAAWzI,OAAQyS,CAAAA,gBAAAA;AAAAA,YACnB,SAAU,EAAA,IAAA;AAAA,YAHrB,QAAA,sBAIK,aAAD,EAAA;AAAA,cAAA,QAAA,sBACK,gBAAD,EAAA;AAAA,gBACI,IAAMxc,EAAAA,GAAAA;AAAAA,gBACN,OAAQsC,KAActC,CAAAA,GAAAA,CAAAA;AAAAA,gBACtB,QAAA,EAAU0c,YAAY7a,UAAY7B,CAAAA,GAAAA,CAAAA;AAAAA,gBAClC,IAAM,EAAA,OAAA;AAAA,eAJV,CAAA;AAAA,aADJ,CAAA;AAAA,WAJa,EAAA,CAAA,WAAA,EAAavF,IAAQuF,CAAAA,CAAAA,EAAAA,GAAAA,CAAAA,CAAtC,CAZJ,CAAA;AAAA,SAAA,EACU,CAAoBvF,kBAAAA,EAAAA,IAAAA,CAAAA,CAAAA,EAAQyT,KADtC,CAAA,CAAA,CAAA,CAAA;AAAA,OAFR,CAAA;AAAA,KAFJ,CAAA;AAAA,GADsB,EAAA,eAAczT,IAAxC,CAAA,CAAA,CAAA,CAAA;AAoCP;;ACtGD,MAAMwO,WAAYC,GAAAA,UAAAA,CAAW,CAACC,KAAAA,KAC1BC,YAAa,CAAA;AAAA,EACT0G,KAAO,EAAA;AAAA,IACHxG,OAAS,EAAA,MAAA;AAAA,IACTyG,aAAe,EAAA,QAAA;AAAA,GAHV;AAAA,EAKTyI,YAAc,EAAA;AAAA,IACV/O,MAAAA,EAAQN,KAAMO,CAAAA,OAAAA,CAAQ,CAAd,CAAA;AAAA,GADE;AALL,CAAD,CADY,CAAA,CAAA;AAeC,SAAA,YAAA,CAAA;AAAA,EACIjP,IAAAA;AAAAA,EACA6H,KAAAA;AAAAA,EACAf,QAAAA;AAAAA,EACAmO,IAAAA;AAAAA,CAC6B,EAAA;AAE1D,EAAI,IAAA,CAACnO,SAASiC,EAAI,EAAA;AACd,IAAMxK,MAAAA,KAAAA,CAAO,uFAAsFyB,IAAxF,CAAA,CAAA,CAAA,CAAA;AAAA,GACd;AAEKsP,EAAAA,MAAAA,UAAUd,WAAhB,EAAA,CAAA;AAEI1H,EAAAA,IAAAA,SAASE,QAAa,KAAA,OAAA;AACtB,IAAA,MAAMzI,MAAM,6CAAD,CAAA,CAAA;AAETuC,EAAAA,MAAAA,MAAS+G,GAAAA,KAAAA,CAAAA;AAEf,EAAA,IAAI,CAAC/G,MAAAA;AAAQ,IAAO,OAAA,IAAA,CAAA;AAEdsf,EAAAA,MAAAA,SAAAA,GAAyBnL,IAAS,KAAA,SAAA,GAAY,OAAU,GAAA,MAAA,CAAA;AAG1D,EAAA,2BAAA,KAAA,EAAA;AAAA,IAAK,WAAW3F,OAAQ+F,CAAAA,KAAAA;AAAAA,IAAxB,QAAA,EACKvU,UACDA,MAAOlB,CAAAA,GAAAA,CAAI,CAACiI,MAAO4L,EAAAA,KAAAA,qBACd/X,IAAA,CAAAb,cAAA,CAAM,QAAP,EAAA;AAAA,MACI,QAAA,EAAA,iBAAAc,GAAA,CAAA,KAAA,EAAA;AAAA,QAAK,WAAW2T,OAAQyO,CAAAA,YAAAA;AAAAA,QAAxB,QAAA,sBACK,aAAD,EAAA;AAAA,UAAA,QAAA,sBACK,gBAAD,EAAA;AAAA,YACI,IAAA;AAAA,YACA,KAAOlW,EAAAA,MAAAA;AAAAA,YACP,UAAUf,QAASiC,CAAAA,EAAAA;AAAAA,YACnB,IAAMqX,EAAAA,SAAAA;AAAAA,WAJV,CAAA;AAAA,SADJ,CAAA;AAAA,OAFR,CAUK3M,EAAAA,KAAAA,GAAQ3S,MAAOxC,CAAAA,MAAAA,GAAS,qBAAM3C,GAAA,CAAA,OAAA,EAVnC,EAAA,CAAA,CAAA;AAAA,KAAqB,EAAA,gBAAA,GAAmBkM,MAAQ,GAAA,GAAA,GAAM4L,KAAtD,CADJ,CAAA;AAAA,GAHR,CAAA,CAAA;AAmBH;;ACzDM,MAAMjF,WAAYC,GAAAA,UAAAA,CAAW,CAACC,KAAAA,KACjCC,YAAa,CAAA;AAAA,EACT0G,KAAO,EAAA;AAAA,IACHxG,OAAS,EAAA,MAAA;AAAA,IACTyG,aAAe,EAAA,QAAA;AAAA,GAHV;AAAA,EAKTC,SAAW,EAAA;AAAA,IACP1G,OAAS,EAAA,MAAA;AAAA,IACT2G,QAAU,EAAA,MAAA;AAAA,GAPL;AAAA,EASTuI,YAAc,EAAA;AAAA,IACV/O,MAAAA,EAAQN,KAAMO,CAAAA,OAAAA,CAAQ,CAAd,CAAA;AAAA,GADE;AATL,CAAD,CADmB,CAAA,CAAA;AAmBD,SAAA,iBAAA,CAAA;AAAA,EACIjP,IAAAA;AAAAA,EACA6H,KAAAA;AAAAA,EACAf,QAAAA;AAAAA,EACAmO,IAAAA;AAAAA,CAC6B,EAAA;AAE3DnO,EAAAA,IAAAA,SAASE,QAAa,KAAA,OAAA;AACtB,IAAA,MAAMzI,MAAM,6CAAD,CAAA,CAAA;AAEf,EAAI,IAAA,CAACuI,SAASkC,KAAO,EAAA;AACjB,IAAMzK,MAAAA,KAAAA,CAAO,kGAAiGyB,IAAnG,CAAA,CAAA,CAAA,CAAA;AAAA,GACd;AAEKsP,EAAAA,MAAAA,UAAUd,WAAhB,EAAA,CAAA;AACM1N,EAAAA,MAAAA,MAAS+G,GAAAA,KAAAA,CAAAA;AAEf,EAAA,IAAI,CAAC/G,MAAAA;AAAQ,IAAO,OAAA,IAAA,CAAA;AAEdsf,EAAAA,MAAAA,SAAAA,GAAyBnL,IAAS,KAAA,SAAA,GAAY,OAAU,GAAA,MAAA,CAAA;AAExDhM,EAAAA,MAAAA,SAAAA,GAAYnC,QAASkC,CAAAA,KAAAA,CAAMC,SAAa,IAAA,MAAA,CAAA;AACxCC,EAAAA,MAAAA,UAAAA,GAAapC,QAASkC,CAAAA,KAAAA,CAAME,UAAc,IAAA,OAAA,CAAA;AAChD,EAAM9B,MAAAA,UAAAA,GAAaN,SAASkC,KAAM5B,CAAAA,UAAAA,CAAAA;AAG9B,EAAA,2BAAA,KAAA,EAAA;AAAA,IAAK,WAAWkI,OAAQ+F,CAAAA,KAAAA;AAAAA,IAAxB,QAAA,EACKvU,UACDA,MAAOlB,CAAAA,GAAAA,CAAI,CAACiI,MAAO4L,EAAAA,KAAAA,qBACd/X,IAAA,CAAAb,cAAA,CAAM,QAAP,EAAA;AAAA,MACI,QAAA,EAAA,iBAAAc,GAAA,CAAA,KAAA,EAAA;AAAA,QAAK,WAAW2T,OAAQyO,CAAAA,YAAAA;AAAAA,QAAxB,QAAA,sBACK,aAAD,EAAA;AAAA,UACKlW,QAAAA,EAAAA,MAAS,oBAAAlM,GAAA,CAAC,gBAAD,EAAA;AAAA,YACN,IAAA;AAAA,YACA,OAAOkM,MAAMqB,CAAAA,UAAAA,CAAAA;AAAAA,YACb,QAAA,EAAU9B,WAAWS,MAAMoB,CAAAA,SAAAA,CAAAA,CAAAA;AAAAA,YAC3B,IAAMmX,EAAAA,SAAAA;AAAAA,WAJA,CAAA;AAAA,SADd,CAAA;AAAA,OAFR,CAUK3M,EAAAA,KAAAA,GAAQ3S,MAAOxC,CAAAA,MAAAA,GAAS,qBAAM3C,GAAA,CAAA,OAAA,EAVnC,EAAA,CAAA,CAAA;AAAA,KAAqB,EAAA,gBAAA,GAAmBkM,MAAQ,GAAA,GAAA,GAAM4L,KAAtD,CADJ,CAAA;AAAA,GAHR,CAAA,CAAA;AAmBH;;ACrCM,SAAA,gBAAA,CAA6C9Y,KAAiC,EAAA;AACjF,EAAI4jB,IAAAA,OAAAA,CAAAA;AACE,EAAA,MAAA;AAAA,IACFzX,QAAAA;AAAAA,IAAU9G,IAAAA;AAAAA,IAAM6H,KAAAA;AAAAA,IAAOoN,IAAAA;AAAAA,IAAMgB,MAAAA;AAAAA,IAAQtS,KAAAA;AAAAA,GACrChJ,GAAAA,KAAAA,CAAAA;AAEEwnB,EAAAA,MAAAA,UAAa,GAAA;AAAA,IAAKxnB,GAAAA,KAAAA;AAAAA,GAAxB,CAAA;AAEIkN,EAAAA,IAAAA,UAAUxM,KAAW,CAAA,EAAA;AACrBkjB,IAAU,OAAA,mBAAA5iB,GAAA,CAAC,UAAX,EAAA,EAAA,CAAA,CAAA;AAAA,GACH,MAAA,IAAUmL,QAASoO,CAAAA,MAAAA,EAAQkN,OAAS,EAAA;AACjC7D,IAAU8D,OAAAA,GAAAA,aAAAA,CAAcvb,QAASoO,CAAAA,MAAAA,CAAOkN,OACpC,EAAA;AAAA,MACIpiB,IAAAA;AAAAA,MACA6H,KAAAA;AAAAA,MACAf,QAAAA;AAAAA,MACAmO,IAAAA;AAAAA,MACAgB,MAAAA;AAAAA,MACAtS,KAAAA;AAAAA,MACA2e,WAAAA,EAAaxb,SAASoO,MAAOoN,CAAAA,WAAAA;AAAAA,KARd,CAAA,CAAA;AAAA,GAU1B,MAAA,IAAUza,UAAU,IAAM,EAAA;AACvB0W,IAAU,OAAA,mBAAA5iB,GAAA,CAAC,UAAX,EAAA,EAAA,CAAA,CAAA;AAAA,GACH,MAAA,IAAUmL,QAASE,CAAAA,QAAAA,KAAa,QAAU,EAAA;AACvC,IAAA,MAAM0O,cAAiB5O,GAAAA,QAAAA,CAAAA;AACvB,IAAI,IAAA,OAAOe,UAAU,QAAU,EAAA;AAC3B,MAAI6N,IAAAA,cAAAA,CAAeR,QAAQpV,GAAK,EAAA;AAC5Bye,QAAAA,OAAAA,uBAAW;UAAwB4D,GAAAA,UAAAA;AAAAA,UACJ,QAAA;AAAA,UACA,KAAA;AAAA,SAF/B,CAAA,CAAA;AAAA,OAGH,MAAA,IAAUzM,cAAeR,CAAAA,MAAAA,EAAQoJ,WAAa,EAAA;AAC3CC,QAAAA,OAAAA,uBAAW;UAAqB4D,GAAAA,UAAAA;AAAAA,UACJ,QAAA;AAAA,UACA,KAAA;AAAA,SAF5B,CAAA,CAAA;AAAA,OAGH,MAAA,IAAUzM,cAAeR,CAAAA,MAAAA,EAAQqN,QAAU,EAAA;AACxChE,QAAAA,OAAAA,uBAAW,QAAD,EAAA;AAAA,UAAU,MAAQ1W,EAAAA,KAAAA;AAAAA,SAA5B,CAAA,CAAA;AAAA,OACG,MAAA;AACH0W,QAAAA,OAAAA,uBAAW;UAAkB4D,GAAAA,UAAAA;AAAAA,UACJ,QAAA;AAAA,UACA,KAAA;AAAA,SAFzB,CAAA,CAAA;AAAA,OAGH;AAAA,KACE,MAAA;AACH5D,MAAAA,OAAAA,GAAUiE,mBAAoBxiB,CAAAA,IAAAA,EAAM8G,QAASE,CAAAA,QAAAA,EAAUa,KAA1B,CAAA,CAAA;AAAA,KAChC;AAAA,GACJ,MAAA,IAAUf,QAASE,CAAAA,QAAAA,KAAa,OAAS,EAAA;AAClCa,IAAAA,IAAAA,iBAAiBtH,KAAO,EAAA;AACxB,MAAA,MAAMoe,aAAgB7X,GAAAA,QAAAA,CAAAA;AAClB,MAAA,IAAA,CAAC6X,aAAAA,CAAc5V,EAAM,IAAA,CAAC4V,cAAc3V,KAAO,EAAA;AAC3C,QAAMzK,MAAAA,KAAAA,CAAO,kGAAiGyB,IAAnG,CAAA,CAAA,CAAA,CAAA;AAAA,OACd;AAEG2e,MAAAA,IAAAA,cAAc5V,EAAI,EAAA;AAClB,QAAI4V,IAAAA,aAAAA,CAAc5V,EAAG/B,CAAAA,QAAAA,KAAa,KAAO,EAAA;AACrCuX,UAAAA,OAAAA,uBACK,kBAAD,EAAA;AAAA,YAAoB,IAAA;AAAA,YACA,QAAA;AAAA,YACA,KAAA;AAAA,YACA,IAAA;AAAA,WAJxB,CAAA,CAAA;AAAA,SAMOI,MAAAA,IAAAA,aAAAA,CAAc5V,EAAG/B,CAAAA,QAAAA,KAAa,WAAa,EAAA;AAC9C,UAAA,IAAA,OAAO2X,aAAAA,CAAc5V,EAAG9K,CAAAA,IAAAA,KAAS,QAAU,EAAA;AAC3CsgB,YAAAA,OAAAA,uBAAW;cAA6B4D,GAAAA,UAAAA;AAAAA,cACJ,KAAA;AAAA,cACA,QAAA;AAAA,aAFpC,CAAA,CAAA;AAAA,WAGG,MAAA;AACH5D,YAAU,OAAA,mBAAA5iB,GAAA,CAAC,UAAX,EAAA,EAAA,CAAA,CAAA;AAAA,WACH;AAAA,SACMgjB,MAAAA,IAAAA,aAAAA,CAAc5V,EAAG/B,CAAAA,QAAAA,KAAa,QAAU,EAAA;AAC/C,UAAI2X,IAAAA,aAAAA,CAAc5V,EAAGmM,CAAAA,MAAAA,EAAQxB,UAAY,EAAA;AACrC6K,YAAAA,OAAAA,uBAAW;cACH4D,GAAAA,UAAAA;AAAAA,cACJ,KAAA;AAAA,cACA,QAAA;AAAA,aAHJ,CAAA,CAAA;AAAA,WAIOxD,MAAAA,IAAAA,aAAAA,CAAc5V,EAAGmM,CAAAA,MAAAA,EAAQoJ,WAAa,EAAA;AAC7CC,YAAAA,OAAAA,uBAAW;cACH4D,GAAAA,UAAAA;AAAAA,cACJ,KAAA;AAAA,cACA,QAAA;AAAA,aAHJ,CAAA,CAAA;AAAA,WAIG,MAAA;AACH5D,YAAAA,OAAAA,uBAAW;cACH4D,GAAAA,UAAAA;AAAAA,cACJ,KAAA;AAAA,cACA,QAAA;AAAA,aAHJ,CAAA,CAAA;AAAA,WAIH;AAAA,SACMxD,MAAAA,IAAAA,aAAAA,CAAc5V,EAAG/B,CAAAA,QAAAA,KAAa,QAAU,EAAA;AAC/C,UAAI2X,IAAAA,aAAAA,CAAc5V,EAAGmM,CAAAA,MAAAA,EAAQxB,UAAY,EAAA;AACrC6K,YAAAA,OAAAA,uBAAW;cACH4D,GAAAA,UAAAA;AAAAA,cACJ,KAAA;AAAA,cACA,QAAA;AAAA,aAHJ,CAAA,CAAA;AAAA,WAIH;AAAA,SACE,MAAA;AACH5D,UAAAA,OAAAA,uBAAW;YAAiB4D,GAAAA,UAAAA;AAAAA,YACJ,KAAA;AAAA,YACA,QAAA;AAAA,WAFxB,CAAA,CAAA;AAAA,SAGH;AAAA,OACJ,MAAA,IAAUxD,cAAc3V,KAAO,EAAA;AAC5BuV,QAAAA,OAAAA,uBAAW;UAAsB4D,GAAAA,UAAAA;AAAAA,UACJ,KAAA;AAAA,UACA,QAAA;AAAA,SAF7B,CAAA,CAAA;AAAA,OAGH;AAAA,KACE,MAAA;AACH5D,MAAAA,OAAAA,GAAUiE,mBAAoBxiB,CAAAA,IAAAA,EAAM8G,QAASE,CAAAA,QAAAA,EAAUa,KAA1B,CAAA,CAAA;AAAA,KAChC;AAAA,GACJ,MAAA,IAAUf,QAASE,CAAAA,QAAAA,KAAa,KAAO,EAAA;AACpC,IAAI,IAAA,OAAOa,UAAU,QAAU,EAAA;AAC3B0W,MAAAA,OAAAA,uBACK;QAAe4D,GAAAA,UAAAA;AAAAA,QACJ,QAAA;AAAA,OAFhB,CAAA,CAAA;AAAA,KAGG,MAAA;AACH5D,MAAAA,OAAAA,GAAUiE,mBAAoBxiB,CAAAA,IAAAA,EAAM8G,QAASE,CAAAA,QAAAA,EAAUa,KAA1B,CAAA,CAAA;AAAA,KAChC;AAAA,GACJ,MAAA,IAAUf,QAASE,CAAAA,QAAAA,KAAa,WAAa,EAAA;AACtCa,IAAAA,IAAAA,iBAAiBvB,IAAM,EAAA;AACvBiY,MAAAA,OAAAA,uBAAW;QAAqB4D,GAAAA,UAAAA;AAAAA,QACJ,KAAA;AAAA,QACA,QAAA;AAAA,OAF5B,CAAA,CAAA;AAAA,KAGG,MAAA;AACH5D,MAAAA,OAAAA,GAAUiE,mBAAoBxiB,CAAAA,IAAAA,EAAM8G,QAASE,CAAAA,QAAAA,EAAUa,KAA1B,CAAA,CAAA;AAAA,KAChC;AAAA,GACJ,MAAA,IAAUf,QAASE,CAAAA,QAAAA,KAAa,WAAa,EAAA;AAC1C,IAAI,IAAA,OAAOF,QAAS7I,CAAAA,IAAAA,KAAS,QAAU,EAAA;AAC/B4J,MAAAA,IAAAA,iBAAiBlD,eAAiB,EAAA;AAClC4Z,QAAAA,OAAAA,uBAAW;UACH4D,GAAAA,UAAAA;AAAAA,UACJ,KAAA;AAAA,UACA,QAAA;AAAA,SAHJ,CAAA,CAAA;AAAA,OAKG,MAAA;AACH5D,QAAAA,OAAAA,GAAUiE,mBAAoBxiB,CAAAA,IAAAA,EAAM8G,QAASE,CAAAA,QAAAA,EAAUa,KAA1B,CAAA,CAAA;AAAA,OAChC;AAAA,KACE,MAAA;AACH0W,MAAU,OAAA,mBAAA5iB,GAAA,CAAC,UAAX,EAAA,EAAA,CAAA,CAAA;AAAA,KACH;AAAA,GAEJ,MAAA,IAAUmL,QAASE,CAAAA,QAAAA,KAAa,SAAW,EAAA;AACxC,IAAI,IAAA,OAAOa,UAAU,SAAW,EAAA;AAC5B0W,MAAAA,OAAAA,uBAAW;QAAmB4D,GAAAA,UAAAA;AAAAA,QACJ,KAAA;AAAA,QACA,QAAA;AAAA,OAF1B,CAAA,CAAA;AAAA,KAGG,MAAA;AACH5D,MAAAA,OAAAA,GAAUiE,mBAAoBxiB,CAAAA,IAAAA,EAAM8G,QAASE,CAAAA,QAAAA,EAAUa,KAA1B,CAAA,CAAA;AAAA,KAChC;AAAA,GACJ,MAAA,IAAUf,QAASE,CAAAA,QAAAA,KAAa,QAAU,EAAA;AACvC,IAAI,IAAA,OAAOa,UAAU,QAAU,EAAA;AAC3B0W,MAAAA,OAAAA,uBAAW;QAAkB4D,GAAAA,UAAAA;AAAAA,QACJ,KAAA;AAAA,QACA,QAAA;AAAA,OAFzB,CAAA,CAAA;AAAA,KAGG,MAAA;AACH5D,MAAAA,OAAAA,GAAUiE,mBAAoBxiB,CAAAA,IAAAA,EAAM8G,QAASE,CAAAA,QAAAA,EAAUa,KAA1B,CAAA,CAAA;AAAA,KAChC;AAAA,GACE,MAAA;AACH0W,IAAU/Q,OAAAA,GAAAA,IAAAA,CAAKC,UAAU5F,KAAf,CAAA,CAAA;AAAA,GACb;AAED,EAAO0W,OAAAA,OAAAA,KAAYljB,UAAakjB,OAAY,KAAA,IAAA,uBAAQ,UAA7C,EAAA,EAAA,CAA4DA,GAAAA,OAAAA,CAAAA;AACtE,CAAA;AAED,SAA6Bve,mBAAAA,CAAAA,IAAAA,EAA0BgH,UAAkBa,KAAY,EAAA;AACjFjB,EAAAA,OAAAA,CAAQwI,KAAO,CAAA,CAAA,8BAAA,EAAgCpP,IAAiBgH,CAAAA,UAAAA,EAAAA,QAAAA,CAAAA,CAAAA,EAAYa,KAA5E,CAAA,CAAA;AACA,EAAA,2BACK,SAAD,EAAA;AAAA,IAAW,KAAQ,EAAA,CAAA,kBAAA,EAAoB2F,IAAKC,CAAAA,SAAAA,CAAU5F,KAAf,CAAA,CAAA,CAAA;AAAA,GAD3C,CAAA,CAAA;AAGH;;ACxLGiJ,SAAAA,SAAAA,CAAAA,KAAAA,GAA+E,SAC/E8E,EAAAA,QAAAA,GAAiE,SAA4B,EAAA;AAC7F,EAAA,2BAAQ,UAAD,EAAA;AAAA,IAAY,KAAA;AAAA,IAAc,QAAA;AAAA,GAAjC,CAAA,CAAA;AACH,CAAA;AAEM,SAAA,kBAAA,CACH9O,QACAgK,EAAAA,KAAAA,GAA+E,SAC/E8E,EAAAA,QAAAA,GAAiE,SAA4B,EAAA;AAC7F,EAAI9O,IAAAA,QAAAA,CAASE,aAAa,QAAU,EAAA;AAC5BF,IAAAA,IAAAA,QAASoO,CAAAA,MAAAA,EAAQuN,SAAa3b,IAAAA,QAAAA,CAASoO,QAAQqN,QAAU,EAAA;AACzD,MAAA,2BAAQ,WAAD,EAAA;AAAA,QAAa,KAAA;AAAA,QAAc,QAAA;AAAA,OAAlC,CAAA,CAAA;AAAA,KACH,MAAA,IAAUzb,QAASoO,CAAAA,MAAAA,EAAQoJ,WAAa,EAAA;AACrC,MAAIxX,IAAAA,QAAAA,CAASoO,MAAOoJ,CAAAA,WAAAA,CAAYD,SAAc,KAAA,OAAA;AAC1C,QAAA,2BAAQ,SAAD,EAAA;AAAA,UAAW,KAAA;AAAA,UAAc,QAAA;AAAA,SAAhC,CAAA,CAAA;AACJ,MAAA,2BAAQ,cAAD,EAAA;AAAA,QAAgB,KAAA;AAAA,QAAc,QAAA;AAAA,OAArC,CAAA,CAAA;AAAA,KACH,MAAA,IAAUvX,QAASoO,CAAAA,MAAAA,EAAQpV,GAAK,EAAA;AAC7B,MAAA,2BAAQ,QAAD,EAAA;AAAA,QAAU,KAAA;AAAA,QAAc,QAAA;AAAA,OAA/B,CAAA,CAAA;AAAA,KACH,MAAA,IAAUgH,QAASoO,CAAAA,MAAAA,EAAQxB,UAAY,EAAA;AACpC,MAAA,2BAAQ,QAAD,EAAA;AAAA,QAAU,KAAA;AAAA,QAAc,QAAA;AAAA,OAA/B,CAAA,CAAA;AAAA,KACG,MAAA;AACH,MAAA,2BAAQ,aAAD,EAAA;AAAA,QAAe,KAAA;AAAA,QAAc,QAAA;AAAA,OAApC,CAAA,CAAA;AAAA,KACH;AAAA,GACJ,MAAA,IAAU5M,QAASE,CAAAA,QAAAA,KAAa,QAAU,EAAA;AACvC,IAAA,2BAAQ,aAAD,EAAA;AAAA,MAAe,KAAA;AAAA,MAAc,QAAA;AAAA,KAApC,CAAA,CAAA;AAAA,GACH,MAAA,IAAUF,QAASE,CAAAA,QAAAA,KAAa,UAAY,EAAA;AACzC,IAAA,2BAAQ,QAAD,EAAA;AAAA,MAAU,KAAA;AAAA,MAAc,QAAA;AAAA,KAA/B,CAAA,CAAA;AAAA,GACH,MAAA,IAAUF,QAASE,CAAAA,QAAAA,KAAa,KAAO,EAAA;AACpC,IAAA,IAAIF,QAASM,CAAAA,UAAAA;AACT,MAAA,2BAAQ,YAAD,EAAA;AAAA,QAAc,KAAA;AAAA,QAAc,QAAA;AAAA,OAA5B,CAAA,CAAA;AAAA;AAEP,MAAA,2BAAQ,WAAD,EAAA;AAAA,QAAa,KAAA;AAAA,QAAc,QAAA;AAAA,OAAlC,CAAA,CAAA;AAAA,GACP,MAAA,IAAUN,QAASE,CAAAA,QAAAA,KAAa,OAAS,EAAA;AACtC,IAAA,IAAIF,QAASiC,CAAAA,EAAAA;AACT,MAAA,OAAO2Z,kBAAmB5b,CAAAA,QAAAA,CAASiC,EAAI+H,EAAAA,KAAAA,EAAO8E,QAArB,CAAA,CAAA;AAAA;AAEzB,MAAA,2BAAQ,WAAD,EAAA;AAAA,QAAa,KAAA;AAAA,QAAc,QAAA;AAAA,OAAlC,CAAA,CAAA;AAAA,GACP,MAAA,IAAU9O,QAASE,CAAAA,QAAAA,KAAa,SAAW,EAAA;AACxC,IAAA,2BAAQ,QAAD,EAAA;AAAA,MAAU,KAAA;AAAA,MAAc,QAAA;AAAA,KAA/B,CAAA,CAAA;AAAA,GACH,MAAA,IAAUF,QAASE,CAAAA,QAAAA,KAAa,WAAa,EAAA;AAC1C,IAAA,2BAAQ,YAAD,EAAA;AAAA,MAAc,KAAA;AAAA,MAAc,QAAA;AAAA,KAAnC,CAAA,CAAA;AAAA,GACH,MAAA,IAAUF,QAASE,CAAAA,QAAAA,KAAa,WAAa,EAAA;AAC1C,IAAA,2BAAQ,QAAD,EAAA;AAAA,MAAU,KAAA;AAAA,MAAc,QAAA;AAAA,KAA/B,CAAA,CAAA;AAAA,GACG,MAAA;AACH,IAAA,2BAAQ,UAAD,EAAA;AAAA,MAAY,KAAA;AAAA,MAAc,QAAA;AAAA,KAAjC,CAAA,CAAA;AAAA,GACH;AACJ;;ACrCM,MAAMwH,WAAYC,GAAAA,UAAAA,CAAW,CAACC,KAAAA,KACjCC,YAAa,CAAA;AAAA,EACT7H,QAAU,EAAA;AAAA,IACN+H,OAAS,EAAA,MAAA;AAAA,GAFJ;AAAA,EAIT8T,YAAc,EAAA;AAAA,IACV1M,MAAQ,EAAA,MAAA;AAAA,IACR2L,OAASlT,EAAAA,KAAAA,CAAMO,OAAQ,CAAA,CAAA,EAAG,CAAjB,CAAA;AAAA,GANJ;AAAA,EAQT2T,QAAU,EAAA;AAAA,IACNC,UAAAA,EAAYnU,KAAMO,CAAAA,OAAAA,CAAQ,CAAd,CAAA;AAAA,GATP;AAAA,EAWT6T,SAAW,EAAA;AAAA,IACPnf,KAAO,EAAA,KAAA;AAAA,IACPie,OAAAA,EAASlT,KAAMO,CAAAA,OAAAA,CAAQ,CAAd,CAAA;AAAA,GAFF;AAXF,CAAD,CADmB,CAAA,CAAA;AAqC/B,SAAA8T,eAAA,CAAA;AAAA,EACIra,MAAAA;AAAAA,EACAjH,MAAAA;AAAAA,EACAxD,IAAAA;AAAAA,CACsB,EAAA;AAEpBqR,EAAAA,MAAAA,UAAUd,WAAhB,EAAA,CAAA;AAEA,EAAA,MAAMmP,YAAwC1F,iBAA9C,EAAA,CAAA;AAEA,EAAA,MAAM7Q,aAAwB3F,MAAO2F,CAAAA,UAAAA,CAAAA;AAErC,EAAA,2BACK,cAAD,EAAA;AAAA,IAAA,QAAA,sBACKyQ,OAAD,EAAA;AAAA,MAAO,YAAW,EAAA,cAAA;AAAA,MAAlB,QAAA,uBACK,SAAD,EAAA;AAAA,QAAA,QAAA,EAAA,iBACInc,IAAA,CAAC,QAAD,EAAA;AAAA,UAAA,QAAA,EAAA,iBACIC,GAAA,CAACoc,WAAD,EAAA;AAAA,YAAW,KAAM,EAAA,OAAA;AAAA,YACN,SAAU,EAAA,IAAA;AAAA,YACV,KAAM,EAAA,KAAA;AAAA,YACN,WAAWzI,OAAQwT,CAAAA,SAAAA;AAAAA,YAH9B,QAAA,sBAIK,UAAD,EAAA;AAAA,cAAY,OAAS,EAAA,SAAA;AAAA,cACT,KAAO,EAAA,eAAA;AAAA,cADnB,QAAA,EAAA,IAAA;AAAA,aAAA,CAAA;AAAA,WALR,CAUI,kBAAAnnB,GAAA,CAACoc,WAAD,EAAA;AAAA,YAAW,OAAQ,EAAA,MAAA;AAAA,YACR,WAAWzI,OAAQsT,CAAAA,QAAAA;AAAAA,YAD9B,QAAA,EAEKI,SAAU,CAAA,UAAA,EAAY,OAAb,CAAA;AAAA,WAZlB,CAcI,kBAAArnB,GAAA,CAACoc,WAAD,EAAA;AAAA,YAAW,WAAWzI,OAAQqT,CAAAA,YAAAA;AAAAA,YAA9B,QAAA,uBACK,GAAD,EAAA;AAAA,cAAK,OAAQ,EAAA,MAAA;AAAA,cAAO,UAAW,EAAA,QAAA;AAAA,cAA/B,UAAA,CACKja,MAAAA,CAAO9D,IACP+Y,SAAW7P,EAAAA,iBAAAA,wBACZ,GAAA,EAAA;AAAA,gBAAG,IAAA,EAAM6P,UAAU7P,iBAAkB,CAAA;AAAA,kBAAEpF,MAAAA;AAAAA,iBAA9B,CAAA;AAAA,gBACN,GAAI,EAAA,qBAAA;AAAA,gBACJ,MAAO,EAAA,QAAA;AAAA,gBAFV,QAAA,sBAGK,UAAD,EAAA;AAAA,kBACI,YAAW,EAAA,yBAAA;AAAA,kBACX,IAAK,EAAA,OAAA;AAAA,kBAFT,QAAA,sBAGK,aAAD,EAAA;AAAA,oBACI,QAAU,EAAA,OAAA;AAAA,mBADd,CAAA;AAAA,iBAHJ,CAAA;AAAA,eANR,CAAA,CAAA;AAAA,aAAA,CAAA;AAAA,WAfR,CAAA,CAAA;AAAA,SAAA,CAgCCjH,EAAAA,MAAAA,IAAUZ,MAAOvB,CAAAA,OAAAA,CAAQ8H,UAAf,CAAA,CACNxH,GAAI,CAAA,CAAC,CAAC2F,GAAAA,EAAKuB,QAAc,CAAA,KAAA;AAChBe,UAAAA,MAAAA,KAAAA,GAASa,OAAO5H,MAAeyE,CAAAA,GAAAA,CAAAA,CAAAA;AACrC,UAAA,4BACK,QAAD,EAAA;AAAA,YAAA,QAAA,EAAA,iBAEI5J,GAAA,CAACoc,WAAD,EAAA;AAAA,cAAW,KAAM,EAAA,OAAA;AAAA,cACN,SAAU,EAAA,IAAA;AAAA,cACV,KAAM,EAAA,KAAA;AAAA,cACN,WAAWzI,OAAQwT,CAAAA,SAAAA;AAAAA,cAH9B,QAAA,sBAIK,UAAD,EAAA;AAAA,gBACI,KAAO,EAAA;AAAA,kBAAE3T,WAAa,EAAA,MAAA;AAAA,iBAD1B;AAAA,gBAEI,OAAS,EAAA,SAAA;AAAA,gBACT,KAAO,EAAA,eAAA;AAAA,gBAHX,UAIKrI,QAAS3L,CAAAA,KAAAA;AAAAA,eAJd,CAAA;AAAA,aANR,CAcI,kBAAAQ,GAAA,CAACoc,WAAD,EAAA;AAAA,cAAW,OAAQ,EAAA,MAAA;AAAA,cACR,WAAWzI,OAAQsT,CAAAA,QAAAA;AAAAA,cAD9B,QAEKF,EAAAA,kBAAAA,CAAmB5b,QAAU,EAAA,UAAA,EAAY,OAAvB,CAAA;AAAA,aAhB3B,CAmBA,kBAAAnL,GAAA,CAACoc,WAAD,EAAA;AAAA,cACI,WAAWzI,OAAQqT,CAAAA,YAAAA;AAAAA,cADvB,QAAA,sBAEK,aAAD,EAAA;AAAA,gBAAA,QAAA,sBACK,gBAAD,EAAA;AAAA,kBACI,IAAMpd,EAAAA,GAAAA;AAAAA,kBACN,KAAA;AAAA,kBACA,QAAA;AAAA,kBACA,IAAM,EAAA,SAAA;AAAA,iBAJV,CAAA;AAAA,eADJ,CAAA;AAAA,aArBJ,CAAA,CAAA;AAAA,WACS,EAAA,aAAA,GAAgBuB,QAAS3L,CAAAA,KAAAA,GAAQoK,GAD1C,CAAA,CAAA;AAAA,SAJD,CAjCf,CAAA;AAAA,OAAA,CAAA;AAAA,KADJ,CAAA;AAAA,GAFR,CAAA,CAAA;AA8EH;;;;;;;;;AC9IM,SAAA,gBAAA,CAA0BuB,QAAiD,EAAA;AAC9E,EAAIA,IAAAA,QAAAA,CAASE,aAAa,SAAW,EAAA;AACjC,IAAO,OAAA,QAAA,CAAA;AAAA,GACV,MAAA,IAAUF,QAASE,CAAAA,QAAAA,KAAa,QAAU,EAAA;AACvC,IAAA,IAAIF,SAASoO,MAAQxB,EAAAA,UAAAA;AACjB,MAAO,OAAA,MAAA,CAAA;AACX,IAAO,OAAA,OAAA,CAAA;AAAA,GACV,MAAA,IAAU5M,QAASE,CAAAA,QAAAA,KAAa,WAAa,EAAA;AAC1C,IAAO,OAAA,OAAA,CAAA;AAAA,GACJ,MAAA;AACH,IAAO,OAAA,MAAA,CAAA;AAAA,GACV;AACJ,CAAA;AAqBM,SAAA,sBAAA,CAAgCF,QAA4B,EAAA;AAE3DA,EAAAA,IAAAA,SAASmc,WAAa,EAAA;AACfnc,IAAAA,OAAAA,QAASmc,CAAAA,WAAAA,CAAAA;AAAAA,GACnB;AAED,EAAInc,IAAAA,QAAAA,CAASE,aAAa,QAAU,EAAA;AAChC,IAAIF,IAAAA,QAAAA,CAASoO,QAAQpV,GAAK,EAAA;AACtB,MAAA,IAAIgH,SAASoO,MAAQpV,EAAAA,GAAAA,KAAQ,WAAWgH,QAASoO,CAAAA,MAAAA,EAAQoJ,aAAaD,SAAc,KAAA,OAAA;AAChF,QAAO,OAAA,GAAA,CAAA;AAAA,WAAA,IACFvX,SAASoO,MAAQpV,EAAAA,GAAAA,KAAQ,WAAWgH,QAASoO,CAAAA,MAAAA,EAAQoJ,aAAaD,SAAc,KAAA,OAAA;AACrF,QAAO,OAAA,GAAA,CAAA;AACX,MAAO,OAAA,GAAA,CAAA;AAAA,KACV,MAAA,IAAUvX,QAASoO,CAAAA,MAAAA,EAAQoJ,WAAa,EAAA;AACrC,MAAO,OAAA,GAAA,CAAA;AAAA,KACV,MAAA,IAAUxX,QAASoO,CAAAA,MAAAA,EAAQxB,UAAY,EAAA;AACpC,MAAO,OAAA,GAAA,CAAA;AAAA,KACV,MAAA,IAAU5M,QAASoO,CAAAA,MAAAA,EAAQuN,SAAW,EAAA;AACnC,MAAO,OAAA,GAAA,CAAA;AAAA,KACV,MAAA,IAAU3b,QAASoO,CAAAA,MAAAA,EAAQqN,QAAU,EAAA;AAClC,MAAO,OAAA,GAAA,CAAA;AAAA,KACV,MAAA,IAAUzb,QAAS0B,CAAAA,UAAAA,EAAY0a,KAAO,EAAA;AACnC,MAAO,OAAA,GAAA,CAAA;AAAA,KACJ,MAAA;AACH,MAAO,OAAA,GAAA,CAAA;AAAA,KACV;AAAA,GACJ,MAAA,IAAUpc,QAASE,CAAAA,QAAAA,KAAa,OAAS,EAAA;AACtC,IAAA,MAAM2X,aAAgB7X,GAAAA,QAAAA,CAAAA;AAClB6X,IAAAA,IAAAA,cAAc5V,EAAI,EAAA;AAClB,MAAOoa,OAAAA,sBAAAA,CAAuBxE,cAAc5V,EAA5C,CAAA,CAAA;AAAA,KACG,MAAA;AACH,MAAO,OAAA,GAAA,CAAA;AAAA,KACV;AAAA,GACJ,MAAA,IAAUjC,QAASE,CAAAA,QAAAA,KAAa,QAAU,EAAA;AACvC,IAAIF,IAAAA,QAAAA,CAASoO,QAAQxB,UAAY,EAAA;AAC7B,MAAO,OAAA,GAAA,CAAA;AAAA,KACV;AACD,IAAO,OAAA,GAAA,CAAA;AAAA,GACV,MAAA,IAAU5M,QAASE,CAAAA,QAAAA,KAAa,KAAO,EAAA;AACpC,IAAO,OAAA,GAAA,CAAA;AAAA,GACV,MAAA,IAAUF,QAASE,CAAAA,QAAAA,KAAa,WAAa,EAAA;AAC1C,IAAO,OAAA,GAAA,CAAA;AAAA,GACV,MAAA,IAAUF,QAASE,CAAAA,QAAAA,KAAa,WAAa,EAAA;AAC1C,IAAO,OAAA,GAAA,CAAA;AAAA,GACV,MAAA,IAAUF,QAASE,CAAAA,QAAAA,KAAa,SAAW,EAAA;AACxC,IAAO,OAAA,GAAA,CAAA;AAAA,GACJ,MAAA;AACH,IAAO,OAAA,GAAA,CAAA;AAAA,GACV;AACJ,CAAA;AAGM,SAAA,wBAAA,CAAkCnH,UAA8B,EAAA;AACnE,EAAA,OAAQ,iBAAgBA,UAAW5B,CAAAA,IAAAA,CAAAA,CAAAA,CAAAA;AACtC,CAAA;AAE+B4B,SAAAA,YAAAA,CAAAA,UAAAA,EAAiC+a,gBAAwCwI,qBAA0C,EAAA;AAExItW,EAAAA,OAAAA,QAAQ,MAAM;AACjB,IAAA,MAAMuW,6BAA6BxjB,UAAWuH,CAAAA,UAAAA,CAAAA;AAC9C,IAAA,MAAMkc,qBAAqBzjB,UAAWyjB,CAAAA,kBAAAA,CAAAA;AACtC,IAAMC,MAAAA,iBAAAA,GAAoB1jB,UAAW0jB,CAAAA,iBAAAA,IAAqB,EAA1D,CAAA;AACMC,IAAAA,MAAAA,cAAAA,GAAqC3jB,UAAWX,CAAAA,cAAAA,IAAkB,EAAxE,CAAA;AAEA,IAAA,MAAMkI,aAAwBwT,cAAexT,CAAAA,UAAAA,CAAAA;AAE7C,IAAMqc,MAAAA,eAAAA,GAA4B5iB,OAAOvB,OAAQ8H,CAAAA,UAAf,EAC7B3G,MAAO,CAAA,CAAC,CAAC7E,CAAAA,EAAGkL,QAAc,CAAA,KAAA;AACvB,MAAA,OAAOA,SAASI,QAAY,IAAA,OAAOJ,SAASI,QAAa,KAAA,QAAA,IAAYJ,SAASI,QAASC,CAAAA,MAAAA,CAAAA;AAAAA,KAF7D,CAI7BvH,CAAAA,GAAAA,CAAI,CAAC,CAAC8jB,WAAAA,EAAa9nB,OAAO8nB,WAJG,CAAA,CAAA;AAMlC,IAAA,MAAMC,SAAsB,GAAA,CACxB,GAAG9iB,MAAAA,CAAOiF,KAAKjG,UAAW4B,CAAAA,MAAAA,CAAO2F,UAA9B,CAAA,EACH,GAAGmc,iBAAkB3jB,CAAAA,GAAAA,CAAKgkB,CAAWA,MAAAA,KAAAA,MAAAA,CAAOhf,EAAzC,CAFqB,CAAA,CAAA;AAKxBhG,IAAAA,IAAAA,MAAAA,CAAAA;AACJ,IAAA,IAAIykB,0BAA4B,EAAA;AAC5BzkB,MAASykB,MAAAA,GAAAA,0BAAAA,CACJzjB,IAAKikB,CAAM,CAAA,KAAA;AACDF,QAAAA,OAAAA,SAAU3kB,CAAAA,IAAAA,CAAK4F,CAAMA,EAAAA,KAAAA,EAAAA,KAAOif,CAA5B,CAAA,CAAA;AAAA,OAFN,CAGFpjB,CAAAA,MAAAA,CAAOqjB,CAAK,CAAA,KAAA,CAAC,CAACA,CAHZ,CAAA,CAAA;AAAA,eAIFR,kBAAoB,EAAA;AAC3B1kB,MAAAA,MAAAA,GAAS+kB,UACJljB,MAAOmE,CAAAA,CAAAA,EAAAA,KAAM,CAAE0e,kBAAgCpd,CAAAA,QAAAA,CAAStB,EAA1C,CADV,CAAA,CAAA;AAAA,KAEN,MAAA;AACHhG,MAAAA,MAAAA,GAAS+kB,UAAUljB,MAAQsjB,CAAAA,CAAAA,QAAAA,KAAa,CAACN,eAAgBvd,CAAAA,QAAAA,CAAS6d,QAAzB,CAAhC,CAAA,CAAA;AAAA,KACZ;AAED,IAAA,IAAIX,qBAAuB,EAAA;AACvB,MAAA,MAAMY,mBAAmBR,cACpB5jB,CAAAA,GAAAA,CAAKC,CAAeokB,WAAAA,KAAAA,wBAAAA,CAAyBpkB,WAAD,CADxB,CAAA,CAEpBY,MAAQyjB,CAAAA,CAAAA,QAAAA,KAAaZ,qBAAqB,CAACA,kBAAAA,EAAoBpd,QAASge,CAAAA,QAA7B,IAAyC,IAFhE,CAAA,CAAA;AAGzBtlB,MAAOY,MAAAA,CAAAA,IAAAA,CAAK,GAAGwkB,gBAAAA,CAAiBvjB,MAAQyjB,CAAAA,CAAAA,QAAAA,KAAa,CAACtlB,MAAOsH,CAAAA,QAAAA,CAASge,QAAhB,CAAvC,CAAf,CAAA,CAAA;AAAA,KACH;AAED,IAAOtlB,OAAAA,MAAAA,CAAAA;AAAAA,KAER,CAACiB,UAAAA,CAAWuH,UAAYvH,EAAAA,UAAAA,CAAWyjB,oBAAoBzjB,UAAW0jB,CAAAA,iBAAAA,EAAmB1jB,UAAWX,CAAAA,cAAAA,EAAgBW,WAAW4B,MAAO2F,CAAAA,UAAAA,EAAYwT,cAAexT,CAAAA,UAAAA,EAAYgc,qBAAzK,CAzCW,CAAA,CAAA;AA0CjB;;ACvID,MAAM5U,WAAYC,GAAAA,UAAAA,CAAW,CAACC,KAAAA,KAC1BC,YAAa,CAAA;AAAA,EACTwV,MAAQ,EAAA;AAAA,IACJ3N,QAAU,EAAA,UAAA;AAAA,IACV3H,OAAS,EAAA,MAAA;AAAA,IACTC,UAAY,EAAA,QAAA;AAAA,IACZmH,MAAQ,EAAA,EAAA;AAAA,IACRD,YAAAA,EAActH,MAAM0V,KAAMpO,CAAAA,YAAAA;AAAAA,IAC1B9B,iBAAiBxF,KAAMsI,CAAAA,OAAAA,CAAQna,IAAS,KAAA,OAAA,GAAUwnB,MAAM3V,KAAMsI,CAAAA,OAAAA,CAAQC,MAAOqN,CAAAA,KAAAA,EAAO,IAA7B,CAAqC9C,GAAAA,QAAAA,CAAO9S,MAAMsI,OAAQsK,CAAAA,UAAAA,CAAWC,SAAS,GAAnC,CAAA;AAAA,IACvF,SAAA,EAAA;AAAA,MACPrN,iBAAiBxF,KAAMsI,CAAAA,OAAAA,CAAQna,IAAS,KAAA,OAAA,GAAUwnB,MAAM3V,KAAMsI,CAAAA,OAAAA,CAAQC,MAAOqN,CAAAA,KAAAA,EAAO,GAA7B,CAAqC9C,GAAAA,QAAAA,CAAO9S,MAAMsI,OAAQsK,CAAAA,UAAAA,CAAWC,SAAS,GAAnC,CAAA;AAAA,KARlG;AAAA,IAUJgD,UAAAA,EAAY7V,KAAMO,CAAAA,OAAAA,CAAQ,CAAd,CAAA;AAAA,IAAA,CACXP,KAAM8V,CAAAA,WAAAA,CAAYC,EAAG,CAAA,IAArB,CAA6B,GAAA;AAAA,MAC1BF,UAAAA,EAAY7V,KAAMO,CAAAA,OAAAA,CAAQ,CAAd,CAAA;AAAA,MACZtL,KAAO,EAAA,MAAA;AAAA,KAFmB;AAAA,GAZzB;AAAA,EAiBT+gB,UAAY,EAAA;AAAA,IACR9C,OAASlT,EAAAA,KAAAA,CAAMO,OAAQ,CAAA,CAAA,EAAG,CAAjB,CAAA;AAAA,IACTgH,MAAQ,EAAA,MAAA;AAAA,IACRO,QAAU,EAAA,UAAA;AAAA,IACVmO,aAAe,EAAA,MAAA;AAAA,IACf9V,OAAS,EAAA,MAAA;AAAA,IACTC,UAAY,EAAA,QAAA;AAAA,IACZ2H,cAAgB,EAAA,QAAA;AAAA,GAxBX;AAAA,EA0BTmO,SAAW,EAAA;AAAA,IACP9T,KAAO,EAAA,SAAA;AAAA,IACP+T,SAAW,EAAA,SAAA;AAAA,GA5BN;AAAA,EA8BTC,UAAY,EAAA;AAAA,IACRlD,SAASlT,KAAMO,CAAAA,OAAAA,CAAQ,CAAG,EAAA,CAAA,EAAG,GAAG,CAAvB,CAAA;AAAA,IAETE,WAAc,EAAA,CAAA,WAAA,EAAaT,KAAMO,CAAAA,OAAAA,CAAQ,CAAd,CAAA,CAAA,CAAA,CAAA;AAAA,IAC3BwS,UAAY/S,EAAAA,KAAAA,CAAMqW,WAAYC,CAAAA,MAAAA,CAAO,OAAzB,CAAA;AAAA,IACZrhB,KAAO,EAAA,MAAA;AAAA,IAAA,CACN+K,KAAM8V,CAAAA,WAAAA,CAAYC,EAAG,CAAA,IAArB,CAA6B,GAAA;AAAA,MAC1B9gB,KAAO,EAAA,MAAA;AAAA,KADmB;AAAA,GApCzB;AAAA,EAwCTshB,WAAa,EAAA;AAAA,IAAA,CACRvW,KAAM8V,CAAAA,WAAAA,CAAYC,EAAG,CAAA,IAArB,CAA6B,GAAA;AAAA,MAC1B9gB,KAAO,EAAA,MAAA;AAAA,KADmB;AAAA,GADrB;AAxCJ,CAAD,CADY,CAAA,CAAA;AAsDF,SAAA,SAAA,CAAA;AAAA,EAAEuhB,YAAAA;AAAAA,CAAgC,EAAA;AAElD5V,EAAAA,MAAAA,UAAUd,WAAhB,EAAA,CAAA;AAEM,EAAA,MAAA,CAAC2W,UAAAA,EAAYC,aAAiBlqB,CAAAA,GAAAA,QAAAA,CAAiB,EAAT,CAAA,CAAA;AACtC,EAAA,MAAA,CAACmqB,MAAAA,EAAQC,SAAapqB,CAAAA,GAAAA,QAAAA,CAAkB,KAAV,CAAA,CAAA;AAKpCsC,EAAAA,SAAAA,CACI,MAAM;AACF,IAAM+nB,MAAAA,OAAAA,GAAU1I,WAAW,MAAM;AAC7B,MAAA,IAAIsI,UAAY,EAAA;AACZD,QAAAA,YAAAA,CAAaC,UAAD,CAAA,CAAA;AAAA,OACT,MAAA;AACHD,QAAAA,YAAAA,CAAa7pB,KAAD,CAAA,CAAA,CAAA;AAAA,OACf;AAAA,OACF,GANuB,CAAA,CAAA;AAQ1B,IAAA,OAAO,MAAM;AACTmqB,MAAAA,YAAAA,CAAaD,OAAD,CAAA,CAAA;AAAA,KADhB,CAAA;AAAA,GAGH,EACD,CAACJ,UAAD,CAdK,CAAA,CAAA;AAiBT,EAAMM,MAAAA,SAAAA,GAAY/iB,YAAY,MAAM;AAChC0iB,IAAAA,aAAAA,CAAc,EAAD,CAAA,CAAA;AACbF,IAAAA,YAAAA,CAAa7pB,KAAD,CAAA,CAAA,CAAA;AAAA,GAFa,EAG1B,EAH0B,CAAA,CAAA;AAK7B,EAAA,2BACK,WAAD,EAAA;AAAA,IACI,QAAA,uBAAA,KAAA,EAAA;AAAA,MAAK,WAAWiU,OAAQ6U,CAAAA,MAAAA;AAAAA,MACpB,QAAA,EAAA,iBAAAxoB,GAAA,CAAA,KAAA,EAAA;AAAA,QAAK,WAAW2T,OAAQoV,CAAAA,UAAAA;AAAAA,QAAxB,QAAA,sBACK,UAAD,EAAA;AAAA,UAAY,SAAW,EAAA,MAAA;AAAA,SAAvB,CAAA;AAAA,OAFR,CAII,kBAAA/oB,GAAA,CAAC,SAAD,EAAA;AAAA,QACI,WAAY,EAAA,QAAA;AAAA,QACZ,KAAOwpB,EAAAA,UAAAA;AAAAA,QACP,UAAWO,CAAU,KAAA,KAAA;AACjBN,UAAcM,aAAAA,CAAAA,KAAAA,CAAMjgB,OAAOoC,KAAd,CAAA,CAAA;AAAA,SAJrB;AAAA,QAMI,OAAA,EAAS,MAAMyd,SAAAA,CAAU,IAAD,CAAA;AAAA,QACxB,MAAA,EAAQ,MAAMA,SAAAA,CAAU,KAAD,CAAA;AAAA,QACvB,OAAS,EAAA;AAAA,UACLtR,MAAM1E,OAAQsV,CAAAA,SAAAA;AAAAA,UACdnH,KAAAA,EAAOjO,IAAKF,CAAAA,OAAAA,CAAQwV,UAAY,EAAA;AAAA,YAAA,CAC3BxV,QAAQ2V,WAAcI,GAAAA,MAAAA;AAAAA,WADhB,CAAA;AAAA,SAVnB;AAAA,QAcI,YAAA,EAAcF,UACR,mBAAAxpB,GAAA,CAAC,UAAD,EAAA;AAAA,UACE,IAAM,EAAA,OAAA;AAAA,UACN,OAAS8pB,EAAAA,SAAAA;AAAAA,UAFX,QAAA,sBAGG,SAAD,EAAA;AAAA,YAAW,QAAU,EAAA,OAAA;AAAA,WAArB,CAAA;AAAA,SAHF,CAKA,mBAAA9pB,GAAA,CAAA,KAAA,EAAA;AAAA,UAAK,KAAO,EAAA;AAAA,YAAEgI,KAAO,EAAA,EAAA;AAAA,WAAT;AAAA,SApBtB,CAAA;AAAA,QAsBI,UAAY,EAAA;AAAA,UAAgB,YAAA,EAAA,QAAA;AAAA,SAAhB;AAAA,OA1BpB,CAAA,CAAA;AAAA,KAAA,CAAA;AAAA,GAFR,CAAA,CAAA;AAiCH;;AC1GD,MAAM6K,WAAYC,GAAAA,UAAAA,CAAW,CAACC,KAAAA,KAC1BC,YAAa,CAAA;AAAA,EACTgX,OAAS,EAAA;AAAA,IACLd,SAAW,EAAA,EAAA;AAAA,IAAA,CACVnW,KAAM8V,CAAAA,WAAAA,CAAYoB,IAAK,CAAA,IAAvB,CAA+B,GAAA;AAAA,MAC5BzW,WAAAA,EAAaT,KAAMO,CAAAA,OAAAA,CAAQ,GAAd,CAAA;AAAA,MACb4W,YAAAA,EAAcnX,KAAMO,CAAAA,OAAAA,CAAQ,GAAd,CAAA;AAAA,KAJb;AAAA,IAMLE,WAAAA,EAAaT,KAAMO,CAAAA,OAAAA,CAAQ,CAAd,CAAA;AAAA,IACb4W,YAAAA,EAAcnX,KAAMO,CAAAA,OAAAA,CAAQ,CAAd,CAAA;AAAA,IACdiF,eAAAA,EAAiBxF,KAAMsI,CAAAA,OAAAA,CAAQna,IAAS,KAAA,OAAA,GAAU6R,KAAMsI,CAAAA,OAAAA,CAAQC,MAAOC,CAAAA,KAAAA,GAAQxI,KAAMsI,CAAAA,OAAAA,CAAQsK,UAAWC,CAAAA,OAAAA;AAAAA,IACxGzJ,YAAAA,EAAe,CAAYpJ,UAAAA,EAAAA,KAAAA,CAAMsI,OAAQ8O,CAAAA,OAAAA,CAAAA,CAAAA;AAAAA,IACzCjX,OAAS,EAAA,MAAA;AAAA,IACTyG,aAAe,EAAA,KAAA;AAAA,IACfmB,cAAgB,EAAA,eAAA;AAAA,IAChB3H,UAAY,EAAA,QAAA;AAAA,IACZnL,KAAO,EAAA,MAAA;AAAA,GAfF;AAAA,EAiBToiB,OAAS,EAAA;AAAA,IACLlX,OAAS,EAAA,MAAA;AAAA,IACTC,UAAY,EAAA,QAAA;AAAA,IACH,OAAA,EAAA;AAAA,MAAA,CACJJ,KAAM8V,CAAAA,WAAAA,CAAYoB,IAAK,CAAA,IAAvB,CAA+B,GAAA;AAAA,QAC5BxH,WAAAA,EAAa1P,KAAMO,CAAAA,OAAAA,CAAQ,GAAd,CAAA;AAAA,OAFZ;AAAA,MAILmP,WAAAA,EAAa1P,KAAMO,CAAAA,OAAAA,CAAQ,CAAd,CAAA;AAAA,KAJR;AAAA,GApBJ;AAAA,EA2BT+W,UAAY,EAAA;AAAA,IACK,WAAA,EAAA;AAAA,MACTC,SAAAA,EAAWvX,KAAMO,CAAAA,OAAAA,CAAQ,CAAd,CAAA;AAAA,KADF;AAAA,GA5BR;AAAA,EAgCTwO,KAAO,EAAA;AAAA,IACHzH,YAAc,EAAA,CAAA;AAAA,IACdQ,QAAU,EAAA,UAAA;AAAA,IACVtC,iBAAiBxF,KAAMsI,CAAAA,OAAAA,CAAQna,IAAS,KAAA,OAAA,GAAUwnB,QAAM3V,KAAMsI,CAAAA,OAAAA,CAAQC,MAAOqN,CAAAA,KAAAA,EAAO,IAA7B,CAAqC9C,GAAAA,MAAAA,CAAO9S,MAAMsI,OAAQsK,CAAAA,UAAAA,CAAWC,SAAS,GAAnC,CAAA;AAAA,IAClG3L,QAAU,EAAA,EAAA;AAAA,IACVzB,UAAAA,EAAYzF,MAAM0F,UAAW8J,CAAAA,gBAAAA;AAAAA,IAC7B0D,OAAS,EAAA,qBAAA;AAAA,IACTH,YAAY/S,KAAMqW,CAAAA,WAAAA,CAAYC,OAAO,CAAC,cAAA,EAAgB,YAAjB,CAAzB,CAAA;AAAA,IACD,SAAA,EAAA;AAAA,MACPhP,YAAc,EAAA,CAAA;AAAA,KADP;AAAA,GAxCN;AAAA,EA4CTxQ,IAAM,EAAA;AAAA,IACF0O,eAAAA,EAAiBxF,KAAMsI,CAAAA,OAAAA,CAAQsK,UAAWC,CAAAA,OAAAA;AAAAA,IAC1C3L,QAAU,EAAA,EAAA;AAAA,IACVzB,UAAAA,EAAYzF,MAAM0F,UAAW8J,CAAAA,gBAAAA;AAAAA,IAC7B2E,UAAAA,EAAYnU,KAAMO,CAAAA,OAAAA,CAAQ,CAAd,CAAA;AAAA,IACZiX,aAAAA,EAAexX,KAAMO,CAAAA,OAAAA,CAAQ,CAAd,CAAA;AAAA,IACJ,SAAA,EAAA;AAAA,MACPiF,iBAAiBsN,MAAO9S,CAAAA,KAAAA,CAAMsI,OAAQsK,CAAAA,UAAAA,CAAWC,SAAS,GAAnC,CAAA;AAAA,KAPzB;AAAA,IASS,SAAA,EAAA;AAAA,MACPrN,iBAAiBsN,MAAO9S,CAAAA,KAAAA,CAAMsI,OAAQsK,CAAAA,UAAAA,CAAWC,SAAS,GAAnC,CAAA;AAAA,MACgC,qDAAA,EAAA;AAAA,QACnDzQ,KAAAA,EAAOpC,KAAMsI,CAAAA,OAAAA,CAAQ9H,IAAKiX,CAAAA,OAAAA;AAAAA,OADyB;AAAA,KAFhD;AAAA,GATT;AA5CG,CAAD,CADY,CAAA,CAAA;AA6ErB,SAAA,sBAAA,CAAkExrB,KAAoC,EAAA;AACnG2U,EAAAA,MAAAA,UAAUd,WAAhB,EAAA,CAAA;AAEME,EAAAA,MAAAA,QAAQ0X,QAAd,EAAA,CAAA;AACA,EAAA,MAAMC,cAAclpB,aAAcuR,CAAAA,KAAAA,CAAM8V,WAAYC,CAAAA,EAAAA,CAAG,IAArB,CAAD,CAAA,CAAA;AAEjC,EAAA,MAAM6B,UAAa3rB,GAAAA,KAAAA,CAAM4rB,WACrB,oBAAA5qB,GAAA,CAAC,GAAD,EAAA;AAAA,IAAK,OAAS,EAAA,MAAA;AAAA,IACT,UAAW,EAAA,QAAA;AAAA,IADhB,QAAA,sBAGK,OAAD,EAAA;AAAA,MAAS,KAAM,EAAA,cAAA;AAAA,MAAf,QAAA,sBACK,UAAD,EAAA;AAAA,QACI,KAAO,EAAA;AAAA,UAAEsa,MAAQ,EAAA,aAAA;AAAA,SADrB;AAAA,QAEI,YAAW,EAAA,cAAA;AAAA,QACX,SAAStb,KAAM6rB,CAAAA,WAAAA;AAAAA,QACf,IAAK,EAAA,OAAA;AAAA,QAJT,QAKI,kBAAA7qB,GAAA,CAAC,SAAD,EAAA,EAAA,CAAA;AAAA,OALJ,CAAA;AAAA,KADJ,CAAA;AAAA,GAJR,CAAA,CAAA;AAgBM8qB,EAAAA,MAAAA,UAAAA,uBACDC,QAAD,EAAA;AAAA,IACI,OAAS,EAAA,UAAA;AAAA,IACT,OAAO/rB,KAAMsa,CAAAA,IAAAA;AAAAA,IACb,KAAO,EAAA;AAAA,MAAEtR,KAAO,EAAA,EAAA;AAAA,KAHpB;AAAA,IAII,QAAA,EAAU,CAACgjB,GAAa,KAAA;AACpBhsB,MAAMisB,KAAAA,CAAAA,aAAAA,CAAcD,GAAIlhB,CAAAA,MAAAA,CAAOoC,KAA/B,CAAA,CAAA;AAAA,KALR;AAAA,IAOI,SAAW,EAAA;AAAA,MACPgf,aAAe,EAAA;AAAA,QACXC,cAAgB,EAAA,IAAA;AAAA,QAChBC,KAAO,EAAA;AAAA,UACH/Q,YAAc,EAAA,CAAA;AAAA,SADX;AAAA,OAHJ;AAAA,MAOPgR,SAAW,EAAA,CAAA;AAAA,KAdnB;AAAA,IAgBI,KAAA,sBAAQC,WAAD,EAAA;AAAA,MAAW,OAAS,EAAA;AAAA,QACvBjT,MAAM1E,OAAQ0W,CAAAA,UAAAA;AAAAA,QACdvI,OAAOnO,OAAQmO,CAAAA,KAAAA;AAAAA,OAFQ;AAAA,KAhB/B,CAAA;AAAA,IAoBI,WAAa,EAAA,CAAC5V,KAAeA,KAAAA,KAAAA,CAAMqf,WApBvC,EAAA;AAAA,IAAA,QAAA,EAsBK,CAAC,IAAA,EAAM,GAAK,EAAA,GAAA,EAAK,GAAK,EAAA,IAAtB,CAA4BtnB,CAAAA,GAAAA,CAAKiI,CAC9B,KAAA,qBAAAlM,GAAA,CAAC,QAAD,EAAA;AAAA,MACI,OAAS,EAAA;AAAA,QACLqY,MAAM1E,OAAQ9J,CAAAA,IAAAA;AAAAA,OAFtB;AAAA,MAIiC,KAAA;AAAA,MAC5BqC,QAAAA,EAAAA,MAAMqf,WAAN,EAAA;AAAA,KADK,EAAA,CAAcrf,YAAAA,EAAAA,KAAAA,CAAAA,CAJxB,CADH,CAAA;AAAA,GAvBT,CAAA,CAAA;AAoCI,EAAA,4BAAA,KAAA,EAAA;AAAA,IACI,WAAWyH,OAAQqW,CAAAA,OAAAA;AAAAA,IADvB,QAAA,EAAA,iBAIIjqB,IAAA,CAAC,GAAD,EAAA;AAAA,MAAK,OAAS,EAAA,MAAA;AAAA,MACT,UAAW,EAAA,QAAA;AAAA,MADhB,QAAA,EAAA,CAGKf,KAAMQ,CAAAA,KAAAA,wBAAU,MAAD,EAAA;AAAA,QAAQ,MAAR,EAAA,IAAA;AAAA,QAAA,QAAA,sBACX,GAAD,EAAA;AAAA,UAAK,EAAI,EAAA,CAAA;AAAA,UAAT,UACKR,KAAMQ,CAAAA,KAAAA;AAAAA,SADX,CAAA;AAAA,OAJR,CASKsrB,EAAAA,UAAAA,EAEAH,UAXL,CAAA;AAAA,KAAA,CAiBA,kBAAA5qB,IAAA,CAAA,KAAA,EAAA;AAAA,MAAK,WAAW4T,OAAQyW,CAAAA,OAAAA;AAAAA,MAEnBM,QAAAA,EAAAA,CAAAA,WAAe,oBAAA1qB,GAAA,CAAC,GAAD,EAAA;AAAA,QAAK,KAAO,EAAA,EAAA;AAAA,QAAZ,QACXhB,EAAAA,KAAAA,CAAMuR,OACP,oBAAAvQ,GAAA,CAAC,gBAAD,EAAA;AAAA,UAAkB,IAAM,EAAA,EAAA;AAAA,UAAI,SAAW,EAAA,CAAA;AAAA,SAAvC,CAAA;AAAA,OAFY,CAAA,EAKfhB,KAAMuqB,CAAAA,YAAAA,wBACN,SAAD,EAAA;AAAA,QAEI,cAAcvqB,KAAMuqB,CAAAA,YAAAA;AAAAA,OADf,EAAA,YADT,CAKCvqB,EAAAA,KAAAA,CAAMorB,OAbX,CAAA;AAAA,KArBJ,CAAA,CAAA;AAAA,GADJ,CAAA,CAAA;AAyCH;;ACnLYoB,MAAAA,gBAAAA,GAAiB1Y,UAAkBC,CAAAA,CAAAA,KAAAA,KAASC,YAAa,CAAA;AAAA,EAClEyY,cAAgB,EAAA;AAAA,IACZzjB,KAAO,EAAA,MAAA;AAAA,IACPsS,MAAQ,EAAA,MAAA;AAAA,IACR8K,QAAU,EAAA,CAAA;AAAA,GAJoD;AAAA,EAMlEsG,gBAAkB,EAAA;AAAA,IACdzR,QAAU,EAAA,UAAA;AAAA,IACVzB,UAAY,EAAA,GAAA;AAAA,IACZmT,aAAe,EAAA,WAAA;AAAA,GAT+C;AAAA,EAWlEC,MAAQ,EAAA;AAAA,IACJ5jB,KAAO,EAAA,mBAAA;AAAA,IACPqL,MAAQ,EAAA,WAAA;AAAA,IACR4S,OAAS,EAAA,UAAA;AAAA,IACT9Q,KAAAA,EAAOpC,KAAMsI,CAAAA,OAAAA,CAAQ9H,IAAKsY,CAAAA,SAAAA;AAAAA,IAC1BtT,eAAAA,EAAiBxF,KAAMsI,CAAAA,OAAAA,CAAQsK,UAAWC,CAAAA,OAAAA;AAAAA,IAC1CE,UAAY,EAAA,8CAAA;AAAA,IACZxL,MAAQ,EAAA,MAAA;AAAA,IACRL,QAAU,EAAA,UAAA;AAAA,IACV0R,aAAe,EAAA,WAAA;AAAA,IACfnT,UAAY,EAAA,GAAA;AAAA,GArBkD;AAAA,EAuBlEsT,QAAU,EAAA;AAAA,IACN9F,MAAQ,EAAA,SAAA;AAAA,IACR9S,OAAS,EAAA,MAAA;AAAA,IACTC,UAAY,EAAA,QAAA;AAAA,IACZ8G,QAAU,EAAA,UAAA;AAAA,GA3BoD;AAAA,EA6BlE8R,iBAAmB,EAAA;AAAA,IACJ,SAAA,EAAA;AAAA,MACPxT,iBAAiBxF,KAAMsI,CAAAA,OAAAA,CAAQna,IAAS,KAAA,MAAA,GAASwnB,QAAM3V,KAAMsI,CAAAA,OAAAA,CAAQsK,UAAWC,CAAAA,OAAAA,EAAS,GAAnC,CAA0C8C,GAAAA,OAAAA,CAAM3V,MAAMsI,OAAQsK,CAAAA,UAAAA,CAAWC,SAAS,GAAnC,CAAA;AAAA,KAD9F;AAAA,GA9BmD;AAAA,EAkClEqC,MAAQ,EAAA;AAAA,IACJhC,OAAS,EAAA,gBAAA;AAAA,GAnCqD;AAAA,EAqClE+F,eAAiB,EAAA;AAAA,IACbhkB,KAAO,EAAA,MAAA;AAAA,IACPsS,MAAQ,EAAA,MAAA;AAAA,IACRpH,OAAS,EAAA,MAAA;AAAA,IACTC,UAAY,EAAA,QAAA;AAAA,IACZ2H,cAAgB,EAAA,QAAA;AAAA,IAChBnB,aAAe,EAAA,QAAA;AAAA,IACfpB,iBAAiBxF,KAAMsI,CAAAA,OAAAA,CAAQna,IAAS,KAAA,MAAA,GAASwnB,QAAM3V,KAAMsI,CAAAA,OAAAA,CAAQsK,UAAWC,CAAAA,OAAAA,EAAS,GAAnC,CAA0C8C,GAAAA,OAAAA,CAAM3V,MAAMsI,OAAQsK,CAAAA,UAAAA,CAAWC,SAAS,GAAnC,CAAA;AAAA,GA5CvC;AAAA,EA8ClEqG,WAAa,EAAA;AAAA,IACTC,QAAU,EAAA,GAAA;AAAA,GA/CoD;AAAA,EAiDlEC,aAAe,EAAA;AAAA,IACXnkB,KAAO,EAAA,GAAA;AAAA,IACPokB,SAAW,EAAA,QAAA;AAAA,IACX7G,YAAc,EAAA,UAAA;AAAA,IACdD,QAAU,EAAA,QAAA;AAAA,GArDoD;AAAA,EAuDlE+G,eAAiB,EAAA;AAAA,IACbnZ,OAAS,EAAA,MAAA;AAAA,IACT4H,cAAgB,EAAA,cAAA;AAAA,GAzD8C;AAAA,EA2DlEwR,YAAc,EAAA;AAAA,IACVtkB,KAAO,EAAA,KAAA;AAAA,IACPuQ,eAAiB,EAAA,SAAA;AAAA,IACjB+B,MAAQ,EAAA,MAAA;AAAA,GA9DsD;AAAA,EAgEpD,YAAA,EAAA;AAAA,IACVO,QAAU,EAAA,UAAA;AAAA,IACV0R,GAAK,EAAA,QAAA;AAAA,IACLnR,KAAO,EAAA,QAAA;AAAA,IACPoR,OAAS,EAAA,GAAA;AAAA,GAJC;AAhEoD,CAAD,CAA7B,CAAA,CAAA;AA0F+B,SAAA,oBAAA,CAAA;AAAA,EACIzf,MAAAA;AAAAA,EACA0f,UAAAA;AAAAA,EACAC,aAAAA;AAAAA,EACAC,gBAAAA;AAAAA,EACArT,IAAAA;AAAAA,EACAsT,qBAAAA;AAAAA,EACAC,SAAAA;AAAAA,EACAC,aAAAA;AAAAA,EACAC,aAAAA;AAAAA,EACAC,eAAAA;AAAAA,EACAtb,IAAAA;AAAAA,CAcG,EAAA;AAE1E,EAAMub,MAAAA,WAAAA,GAAc5nB,QAAQ0nB,aAAD,CAAA,CAAA;AAE3B,EAAMG,MAAAA,aAAAA,GAAgB7nB,QAAQ2nB,eAAD,CAAA,CAAA;AAEvBrZ,EAAAA,MAAAA,UAAU6X,gBAAhB,EAAA,CAAA;AAEA,EAAA,MAAM,CAAC2B,QAAAA,EAAUC,WAAeluB,CAAAA,GAAAA,cAAAA,CAAMK,SAAqB,IAA3B,CAAA,CAAA;AAE1B8tB,EAAWtmB,WAAY,CAAA,CAACgjB,KAA4B,KAAA;AACtDqD,IAAAA,WAAAA,CAAYrD,MAAMuD,aAAP,CAAA,CAAA;AACXvD,IAAAA,KAAAA,CAAM3P,eAAN,EAAA,CAAA;AAAA,GACH,EAAE,CAACgT,WAAD,CAHyB,EAAA;AAK5B,EAAkBrmB,YAAY,MAAM;AAChCqmB,IAAAA,WAAAA,CAAY,IAAD,CAAA,CAAA;AAAA,GACd,EAAE,CAACA,WAAD,CAF0B,EAAA;AAIvBG,EAAAA,MAAAA,gBAAAA,GAAmB,CAACxD,KAA6B,KAAA;AACnD,IAAI6C,IAAAA,qBAAAA;AACAA,MAAAA,qBAAAA,CAAsB7f,MAAD,CAAA,CAAA;AACzBgd,IAAAA,KAAAA,CAAM3P,eAAN,EAAA,CAAA;AAAA,GAHJ,CAAA;AAKMoT,EAAAA,MAAAA,iBAAAA,GAAoB,CAACzD,KAA6B,KAAA;AACpD,IAAA,IAAI8C,SAAW,EAAA;AACXA,MAAAA,SAAAA,CAAU9f,MAAD,CAAA,CAAA;AAAA,KACZ;AACDgd,IAAAA,KAAAA,CAAM3P,eAAN,EAAA,CAAA;AAAA,GAJJ,CAAA;AAOMqT,EAAgB1mB,WAAY,CAAA,CAACgjB,KAAsB,KAAA;AACrDA,IAAAA,KAAAA,CAAM3P,eAAN,EAAA,CAAA;AACA,IAAI4S,IAAAA,eAAAA;AACAA,MAAAA,eAAAA,CAAgBjgB,MAAD,CAAA,CAAA;AACnBqgB,IAAAA,WAAAA,CAAY,IAAD,CAAA,CAAA;AAAA,GACZ,EAAA,CAACrgB,MAAQigB,EAAAA,eAAAA,EAAiBI,WAA1B,CAL8B,EAAA;AAO3BM,EAAc3mB,WAAY,CAAA,CAACgjB,KAAsB,KAAA;AACnDA,IAAAA,KAAAA,CAAM3P,eAAN,EAAA,CAAA;AACA,IAAI0S,IAAAA,aAAAA;AACAA,MAAAA,aAAAA,CAAc/f,MAAD,CAAA,CAAA;AACjBqgB,IAAAA,WAAAA,CAAY,IAAD,CAAA,CAAA;AAAA,GACZ,EAAA,CAACrgB,MAAQ+f,EAAAA,aAAAA,EAAeM,WAAxB,CAL4B,EAAA;AAQ3B,EAAA,4BAAA,KAAA,EAAA;AAAA,IAAK,WAAWzZ,OAAQqY,CAAAA,eAAAA;AAAAA,IAAxB,UAAA,CAEMiB,CAAAA,WAAAA,IAAeC,aAAiBP,IAAAA,gBAAAA,0BAC9B,KAAA,EAAA;AAAA,MAAK,WAAWhZ,OAAQsY,CAAAA,WAAAA;AAAAA,MAGpB,QAAA,EAAA,CAAA,GAAA,kBAAAlsB,IAAA,CAAA,KAAA,EAAA;AAAA,QAAK,WAAW4T,OAAQ0Y,CAAAA,eAAAA;AAAAA,QACnBY,QAAAA,EAAAA,CAAAA,WACG,oBAAAjtB,GAAA,CAAC,OAAD,EAAA;AAAA,UAAS,KAAA,EAAQ,QAAO+M,MAAO9D,CAAAA,EAAAA,CAAAA,CAAAA;AAAAA,UAA/B,QAAA,sBACK,UAAD,EAAA;AAAA,YACI,OAAA,EAAS,CAAC8gB,KAAsB,KAAA;AAC5BA,cAAAA,KAAAA,CAAM3P,eAAN,EAAA,CAAA;AACA,cAAI2S,IAAAA,aAAAA;AACAA,gBAAAA,aAAAA,CAAchgB,MAAD,CAAA,CAAA;AAAA,aAJzB;AAAA,YAMI,IAAK,EAAA,OAAA;AAAA,YANT,QAOI,kBAAA/M,GAAA,CAAC,WAAD,EAAA,EAAA,CAAA;AAAA,WAPJ,CAAA;AAAA,SADJ,CAYJ,kBAAAA,GAAA,CAAA,MAAA,EAAA;AAAA,UAAM,WAAW2T,OAAQ2Y,CAAAA,YAAAA;AAAAA,SAd7B,CAAA,EAeKK,gBACG,oBAAA5sB,IAAA,CAAA,KAAA,EAAA;AAAA,UAAA,QAAA,EAAA,iBACIC,GAAA,CAAC,OAAD,EAAA;AAAA,YAAS,KAAA,EAAQ,UAAS+M,MAAO9D,CAAAA,EAAAA,CAAAA,CAAAA;AAAAA,YAAM,KAAO,EAAA;AAAA,cAAEqhB,SAAW,EAAA,KAAA;AAAA,aAA3D;AAAA,YAAA,QAAA,sBACK,QAAD,EAAA;AAAA,cACI,OAASmC,EAAAA,UAAAA;AAAAA,cACT,QAAUc,EAAAA,gBAAAA;AAAAA,aAFd,CAAA;AAAA,WAFR,CAOI,kBAAAvtB,GAAA,CAAC,OAAD,EAAA;AAAA,YAAS,KAAO,EAAA,YAAA;AAAA,YAAc,SAAA,EAAW2T,QAAQ,YAAgB,CAAA,GAAA,aAAA;AAAA,YAAjE,QAAA,sBACK,QAAD,EAAA;AAAA,cACI,OAAS+Y,EAAAA,aAAAA;AAAAA,cACT,QAAUc,EAAAA,iBAAAA;AAAAA,aAFd,CAAA;AAAA,WARR,CAAA,CAAA;AAAA,SAhBR,CAAA,CAAA;AAAA,OAHJ,GAAA,GAAA,CAAA;AAAA,KAAA,CAAA,EAqCHlU,IAAS,KAAA,IAAA,wBACN,KAAA,EAAA;AAAA,MAAK,WAAW3F,OAAQwY,CAAAA,aAAAA;AAAAA,MAEnBpf,QAAAA,EAAAA,MACK,mBAAAhN,IAAA,CAAC,UAAD,EAAA;AAAA,QACE,SAAW,EAAA,MAAA;AAAA,QACX,OAAS,EAAA,SAAA;AAAA,QACT,KAAO,EAAA,eAAA;AAAA,QAAmBgN,QAAAA,EAAAA,CAAAA,GAAAA,EAAAA,MAAAA,CAAO9D,IAHnC,GAAA,CAAA;AAAA,OADC,CAKD,mBAAAjJ,GAAA,CAAC,QAAD,EAAA;AAAA,QAAU,OAAQ,EAAA,MAAA;AAAA,OAAlB,CAAA;AAAA,KAhDlB,CAAA,CAAA;AAAA,GADJ,CAAA,CAAA;AAyDH;;AC3OM,SAAA,YAAA,CAAsBsZ,IAAyB,EAAA;AAClD,EAAQA,QAAAA,IAAAA;AAAAA,IACC,KAAA,IAAA;AACD,MAAO,OAAA,GAAA,CAAA;AAAA,IACN,KAAA,GAAA;AACD,MAAO,OAAA,GAAA,CAAA;AAAA,IACN,KAAA,GAAA;AACD,MAAO,OAAA,GAAA,CAAA;AAAA,IACN,KAAA,GAAA;AACD,MAAO,OAAA,EAAA,CAAA;AAAA,IACN,KAAA,IAAA;AACD,MAAO,OAAA,EAAA,CAAA;AAAA,IAAA;AAED1W,MAAAA,MAAAA,MAAM,+CAAD,CAAA,CAAA;AAAA,GAAA;AAEtB;;ACJY+qB,MAAAA,aAAAA,GAAgB7a,UAAmFC,CAAAA,CAAAA,KAAAA,KAASC,YAAa,CAAA;AAAA,EAC9H4a,SAAW,EAAA;AAAA,IACP/S,QAAU,EAAA,UAAA;AAAA,IACVP,MAAQ,EAAA,MAAA;AAAA,IACRtS,KAAO,EAAA,MAAA;AAAA,IACP6lB,MAAQ,EAAA,uBAAA;AAAA,IACRxT,YAAc,EAAA,CAAA;AAAA,IACdiL,QAAU,EAAA,QAAA;AAAA,IACVwI,OAAS,EAAA,QAAA;AAAA,IACT5a,OAAS,EAAA,MAAA;AAAA,IACT+S,SAAS,CAAC;AAAA,MAAE3M,IAAAA;AAAAA,MAAMyU,aAAAA;AAAAA,KAAoB,KAAA;AAC9BA,MAAAA,IAAAA,aAAAA;AAAe,QAAO,OAAA,CAAA,CAAA;AAC1B,MAAQzU,QAAAA,IAAAA;AAAAA,QACC,KAAA,GAAA,CAAA;AAAA,QACA,KAAA,IAAA;AACD,UAAOvG,OAAAA,KAAAA,CAAMO,QAAQ,CAAd,CAAA,CAAA;AAAA,QACN,KAAA,GAAA;AACD,UAAOP,OAAAA,KAAAA,CAAMO,QAAQ,CAAd,CAAA,CAAA;AAAA,QACN,KAAA,GAAA;AACD,UAAOP,OAAAA,KAAAA,CAAMO,QAAQ,GAAd,CAAA,CAAA;AAAA,QAAA;AAEP,UAAOP,OAAAA,KAAAA,CAAMO,QAAQ,IAAd,CAAA,CAAA;AAAA,OAAA;AAAA,KApBZ;AAAA,IAuBI,SAAA,EAAA;AAAA,MACPiF,iBAAiB,CAAC;AAAA,QAAEhN,QAAAA;AAAAA,OAAAA,KAAoBA,QAAW7L,GAAAA,KAAAA,CAAAA,GAAaqT,KAAMsI,CAAAA,OAAAA,CAAQna,IAAS,KAAA,MAAA,GAAS6R,KAAMsI,CAAAA,OAAAA,CAAQsK,UAAWqI,CAAAA,KAAAA,GAAQjb,KAAMsI,CAAAA,OAAAA,CAAQsK,UAAWC,CAAAA,OAAAA;AAAAA,KAxBvJ;AAAA,IA0BP9K,gBAAgB,CAAC;AAAA,MAAEmT,KAAAA;AAAAA,KAAY,KAAA;AAC3B,MAAQA,QAAAA,KAAAA;AAAAA,QACC,KAAA,OAAA;AACD,UAAO,OAAA,UAAA,CAAA;AAAA,QACN,KAAA,QAAA;AACD,UAAO,OAAA,QAAA,CAAA;AAAA,QACN,KAAA,MAAA,CAAA;AAAA,QAAA;AAED,UAAO,OAAA,YAAA,CAAA;AAAA,OAAA;AAAA,KAElB;AAAA,GArCyH;AAAA,EAuC9HC,SAAW,EAAA;AAAA,IACPlmB,KAAO,EAAA,MAAA;AAAA,GAxCmH;AAAA,EA0C9HmmB,UAAY,EAAA;AAAA,IACR7T,MAAQ,EAAA,MAAA;AAAA,GA3CkH;AAAA,EA6C9H7G,KAAO,EAAA;AAAA,IACHoa,MAAS,EAAA,CAAA,UAAA,EAAY9a,KAAMsI,CAAAA,OAAAA,CAAQ5H,KAAM2a,CAAAA,KAAAA,CAAAA,WAAAA,CAAAA;AAAAA,GA9CiF;AAAA,EAgD9HC,QAAU,EAAA;AAAA,IACN9V,eAAAA,EAAiBxF,KAAMsI,CAAAA,OAAAA,CAAQna,IAAS,KAAA,MAAA,GAAS6R,KAAMsI,CAAAA,OAAAA,CAAQsK,UAAWqI,CAAAA,KAAAA,GAAQjb,KAAMsI,CAAAA,OAAAA,CAAQsK,UAAWC,CAAAA,OAAAA;AAAAA,IAC3GiI,MAAQ,EAAA,mBAAA;AAAA,IACR/H,UAAY,EAAA,gCAAA;AAAA,GAnD8G;AAAA,EAqD9HwI,KAAO,EAAA;AAAA,IACHT,MAAS,EAAA,CAAA,UAAA,EAAY9a,KAAMsI,CAAAA,OAAAA,CAAQkT,OAAQH,CAAAA,KAAAA,CAAAA,CAAAA;AAAAA,GAtD+E;AAAA,EAwD9H7iB,QAAU,EAAA;AAAA,IACNmd,KAAO,EAAA,GAAA;AAAA,GAzDmH;AAAA,EA2D9H8F,QAAU,EAAA;AAAA,IACN3T,QAAU,EAAA,UAAA;AAAA,IACV0R,GAAK,EAAA,CAAA;AAAA,IACLnR,KAAO,EAAA,CAAA;AAAA,GA9DmH;AAAA,EAgE9HqT,KAAO,EAAA;AAAA,IACHtZ,KAAAA,EAAOpC,KAAMsI,CAAAA,OAAAA,CAAQ5H,KAAM2a,CAAAA,KAAAA;AAAAA,GAjE+F;AAAA,EAmE9H1a,OAAS,EAAA;AAAA,IACLL,MAAQ,EAAA,OAAA;AAAA,IACRkF,eAAAA,EAAiBxF,KAAMsI,CAAAA,OAAAA,CAAQ5H,KAAM2a,CAAAA,KAAAA;AAAAA,GArEqF;AAAA,EAuE9HM,QAAU,EAAA;AAAA,IACNvb,UAAY,EAAA,QAAA;AAAA,GAxE8G;AAAA,EA0E9Hwb,KAAO,EAAA;AAAA,IACH,oBAAsB,EAAA,yDAAA;AAAA,IACtBC,SAAW,EAAA,yDAAA;AAAA,IACXzb,UAAY,EAAA,OAAA;AAAA,GA7E8G;AAAA,EA+E9H0b,UAAY,EAAA;AAAA,IACRvJ,QAAU,EAAA,MAAA;AAAA,IACVnS,UAAY,EAAA,OAAA;AAAA,GAFJ;AA/EkH,CAAD,CAA9F,CAAA,CAAA;AA4GvC,MAAM2b,oBAAoB,CAAC;AAAA,EACUzvB,QAAAA;AAAAA,EACAgvB,QAAAA;AAAAA,EACAU,OAAAA;AAAAA,EACAxjB,QAAAA;AAAAA,EACAyjB,eAAAA;AAAAA,EACA1V,IAAAA;AAAAA,EACAgV,KAAAA;AAAAA,EACA7a,KAAAA;AAAAA,EACAwa,KAAAA;AAAAA,EACAgB,WAAAA;AAAAA,EACAC,SAAAA;AAAAA,EACAnB,aAAAA;AAAAA,EACAI,UAAAA;AAAAA,EACAgB,MAAAA;AAAAA,EACAC,cAAiB,GAAA,IAAA;AAAA,CACkB,KAAA;AAE9DtO,EAAAA,MAAAA,GAAAA,GAAM5hB,eAAMmwB,SAAlB,EAAA,CAAA;AAEM,EAAA,MAAA,CAACC,aAAAA,EAAeC,gBAAoBhwB,CAAAA,GAAAA,QAAAA,CAAkB,KAAV,CAAA,CAAA;AAClD,EAAMob,MAAAA,SAAAA,GAAYxJ,QAAQ,MAAMqe,YAAAA,CAAalW,IAAD,CAAQ,EAAA,CAACA,IAAD,CAA3B,CAAA,CAAA;AAEnB,EAAA,MAAA,CAACmC,OAAAA,EAASC,UAAcnc,CAAAA,GAAAA,QAAAA,CAAS,KAAD,CAAA,CAAA;AAChC,EAAA,MAAA,CAACkwB,aAAAA,EAAeC,gBAAoBnwB,CAAAA,GAAAA,QAAAA,CAAS+uB,KAAD,CAAA,CAAA;AAE5CqB,EAAAA,MAAAA,OAAAA,GAAUzwB,eAAMmwB,SAAtB,EAAA,CAAA;AACAxtB,EAAAA,SAAAA,CAAU,MAAM;AACZ,IAAI8tB,IAAAA,OAAAA,CAAQvoB,WAAW2nB,OAAS,EAAA;AAC5BY,MAAAA,OAAAA,CAAQvoB,QAAQwoB,KAAM,CAAA;AAAA,QAAEC,aAAe,EAAA,IAAA;AAAA,OAAvC,CAAA,CAAA;AAAA,KACH;AAAA,GACJ,EAAE,CAACd,OAAD,CAJM,CAAA,CAAA;AAMTltB,EAAAA,SAAAA,CAAU,MAAM;AACR4tB,IAAAA,IAAAA,kBAAkBnB,KAAO,EAAA;AACzB,MAAA,IAAIA,KAAO,EAAA;AACPoB,QAAAA,gBAAAA,CAAiB,IAAD,CAAA,CAAA;AAAA,OACb,MAAA;AACHA,QAAAA,gBAAAA,CAAiB,IAAD,CAAA,CAAA;AAAA,OACnB;AAAA,KACJ;AACKI,IAAAA,MAAAA,mBAAmB,MAAM;AAC3BJ,MAAAA,gBAAAA,CAAiB,KAAD,CAAA,CAAA;AAAA,KADpB,CAAA;AAGA,IAAM9F,MAAAA,OAAAA,GAAU1I,UAAW4O,CAAAA,gBAAAA,EAAkB,GAAnB,CAAA,CAAA;AAE1B,IAAA,OAAO,MAAM;AACTjG,MAAAA,YAAAA,CAAaD,OAAD,CAAA,CAAA;AAAA,KADhB,CAAA;AAAA,GAGH,EAAE,CAAC0E,KAAD,CAhBM,CAAA,CAAA;AAkBT,EAAMyB,MAAAA,WAAAA,GAAchpB,YAAY,MAAM;AAClC,IAAA,IAAImoB,SAAW,EAAA;AACLc,MAAAA,MAAAA,QAAWlP,GAAAA,GAAAA,IAAOA,GAAK1Z,EAAAA,OAAAA,EAAS6oB,qBAAtC,EAAA,CAAA;AACAf,MAAAA,SAAAA,CAAUc,QAAD,CAAA,CAAA;AAAA,KACZ;AAAA,GACJ,EAAE,CAAClP,GAAD,CAL4B,CAAA,CAAA;AAO/B,EAAM8D,MAAAA,OAAAA,GAAU7d,WAAY,CAAA,CAACgjB,KAA4C,KAAA;AACrE,IAAIA,IAAAA,KAAAA,CAAMmG,WAAW,CAAG,EAAA;AACpBH,MAAW,WAAA,EAAA,CAAA;AAAA,KACd;AAAA,GACJ,EAAE,CAACA,WAAD,CAJwB,CAAA,CAAA;AAM3B,EAAMI,MAAAA,QAAAA,GAAWppB,YAAY,MAAM;AAC3B,IAAA,IAAA,CAACooB,MAAAA;AAAQ,MAAA,OAAA;AACPa,IAAAA,MAAAA,QAAWlP,GAAAA,GAAAA,IAAOA,GAAK1Z,EAAAA,OAAAA,EAAS6oB,qBAAtC,EAAA,CAAA;AACA,IAAA,IAAI1kB,QAAU,EAAA;AACV4jB,MAAAA,MAAAA,CAAOzvB,KAAD,CAAA,CAAA,CAAA;AAAA,KACT,MAAA,IAAU,CAAC2uB,QAAAA,IAAY2B,QAAU,EAAA;AAC9Bb,MAAAA,MAAAA,CAAOa,QAAD,CAAA,CAAA;AAAA,KACT;AAAA,KACF,CAAClP,GAAAA,EAAKqO,MAAQd,EAAAA,QAAAA,EAAU9iB,QAAxB,CARyB,CAAA,CAAA;AAU5B,EAAM6kB,MAAAA,OAAAA,GAAUrpB,WAAY,CAAA,CAACgjB,KAAgD,KAAA;AACzEoG,IAAQ,QAAA,EAAA,CAAA;AACRpG,IAAAA,KAAAA,CAAM3P,eAAN,EAAA,CAAA;AAAA,GACH,EAAE,CAAC+V,QAAD,CAHwB,CAAA,CAAA;AAKrBE,EAAAA,MAAAA,SAAAA,GAAYtpB,WAAY,CAAA,CAACupB,WAA6B,KAAA;AACpDA,IAAAA,IAAAA,aAAaC,MAAQ,EAAA;AACfC,MAAAA,MAAAA,mBAAAA,GAAsBF,WAAYC,CAAAA,MAAAA,CAAOjW,MAASK,GAAAA,SAAAA,CAAAA;AACxD,MAAA,IAAI2U,aAAkBkB,KAAAA,mBAAAA;AAClBjB,QAAAA,gBAAAA,CAAiBiB,mBAAD,CAAA,CAAA;AAAA,KACvB;AAAA,GACF,EAAA,CAAClB,aAAe3U,EAAAA,SAAhB,CAN0B,CAAA,CAAA;AAQvB8V,EAAAA,MAAAA,cAAc9C,aAAc,CAAA;AAAA,IAC9BrU,IAAAA;AAAAA,IACA2U,KAAAA;AAAAA,IACA1iB,QAAAA;AAAAA,IACAwiB,aAAAA;AAAAA,GAJ6B,CAAA,CAAA;AAO3B2C,EAAAA,MAAAA,WAAAA,uBAAe,OAAD,EAAA;AAAA,IAChB,MADgB,EAAA,IAAA;AAAA,IAEhB,QAAUL,EAAAA,SAAAA;AAAAA,IAFM,UAIf,CAAC;AAAA,MAAEM,UAAAA;AAAAA,KAAAA,yBACA,KAAA,EAAA;AAAA,MAAK,GAAKA,EAAAA,UAAAA;AAAAA,MACL,SAAA,EAAW9c,IAAK4c,CAAAA,WAAAA,CAAYvC,SAAW,EAAA;AAAA,QAAA,CAAGuC,YAAYtC,UAAaA,GAAAA,UAAAA;AAAAA,OAApD,CAAA;AAAA,MACf9uB,QAAAA;AAAAA,KAFL,CAAA;AAAA,GALR,CAAA,CAAA;AAaI,EAAA,4BAAA,KAAA,EAAA;AAAA,IACI,QAAA,EAAUgvB,QAAY9iB,IAAAA,QAAAA,GAAW7L,KAAY,CAAA,GAAA,CAAA;AAAA,IAC7C,GAAA;AAAA,IACA,OAAA;AAAA,IACA,OAAA;AAAA,IACA,YAAA,EAAc,MAAMgc,UAAAA,CAAW,IAAD,CAAA;AAAA,IAC9B,WAAA,EAAa,MAAMA,UAAAA,CAAW,IAAD,CAAA;AAAA,IAC7B,YAAA,EAAc,MAAMA,UAAAA,CAAW,KAAD,CAAA;AAAA,IAI9B,SAAA,EAAW7H,IACP4c,CAAAA,WAAAA,CAAY7C,SACZ,EAAA;AAAA,MAAA,CACK6C,YAAYllB,QAAWA,GAAAA,QAAAA;AAAAA,MACvBklB,CAAAA,WAAAA,CAAY/B,QAAWnjB,GAAAA,QAAAA,IAAY,CAAC+jB,aAAAA;AAAAA,MAAAA,CACpCmB,YAAYhd,KAAQA,GAAAA,KAAAA;AAAAA,MACpBgd,CAAAA,WAAAA,CAAYnC,QAAQD,QAAYoB,IAAAA,aAAAA;AAAAA,MAAAA,CAChCgB,WAAYpC,CAAAA,QAAAA,GAAW,CAAC5a,KAAAA,KAAsBsb,QAAAA,IAAAA,OAAAA,CAAAA;AAAAA,MAAAA,CAC9C0B,YAAYtC,UAAaA,GAAAA,UAAAA;AAAAA,KARnB,CAAA;AAAA,IAWf,QAAA,EAAA,iBAAAnuB,GAAA,CAAA,KAAA,EAAA;AAAA,MAAK,SAAA,EAAW6T,IAAK4c,CAAAA,WAAAA,CAAYvC,SAAW,EAAA;AAAA,QAAA,CACvCuC,WAAY9B,CAAAA,KAAAA,GAAQ,CAACpjB,QAAAA,IAAY,CAAC0jB,WAAeK,IAAAA,aAAAA;AAAAA,QAAAA,CACjDmB,WAAY5B,CAAAA,UAAAA,GAAa,CAACtjB,QAAAA,IAAY0jB,WAAeK,IAAAA,aAAAA;AAAAA,QAAAA,CACrDmB,YAAYtC,UAAaA,GAAAA,UAAAA;AAAAA,OAHV,CAAA;AAAA,MAKfuC,QAAAA,EAAAA,WAAAA;AAAAA,KALL,CAQCnlB,EAAAA,QAAAA,IAAYkQ,OAAWuT,IAAAA,eAAAA,wBACxB,KAAA,EAAA;AAAA,MAAK,KAAO,EAAA;AAAA,QACRnU,QAAU,EAAA,UAAA;AAAA,QACV0R,GAAK,EAAA,CAAA;AAAA,QACLnR,KAAO,EAAA,CAAA;AAAA,QACPnB,QAAU,EAAA,MAAA;AAAA,OAJd;AAAA,MAAA,QAAA,sBAMK,OAAD,EAAA;AAAA,QAAS,KAAO+U,EAAAA,eAAAA;AAAAA,QAAhB,QAAA,sBACK,gBAAD,EAAA;AAAA,UAAkB,KAAO,EAAA,UAAA;AAAA,UACP,QAAU,EAAA,SAAA;AAAA,SAD5B,CAAA;AAAA,OADJ,CAAA;AAAA,KANJ,CAAA,EAYEvb,CAAS2b,KAAAA,IAAAA,cAAAA,0BACX,KAAA,EAAA;AAAA,MAAK,WAAWqB,WAAYjC,CAAAA,QAAAA;AAAAA,MAEvBH,UAAAA,CAAAA,QAAAA,IAAY,CAAC9iB,QAAY6jB,IAAAA,cAAAA,wBACzB,UAAD,EAAA;AAAA,QACI,GAAKO,EAAAA,OAAAA;AAAAA,QACL,KAAO,EAAA,SAAA;AAAA,QACP,IAAM,EAAA,OAAA;AAAA,QACN,OAASI,EAAAA,WAAAA;AAAAA,QACT,QAAA,uBAAA,KAAA,EAAA;AAAA,UACI,SAAW,EAAA,0CAAA;AAAA,UACX,IAAM,EAAA,MAAA;AAAA,UACN,KAAM,EAAA,IAAA;AAAA,UACN,MAAO,EAAA,IAAA;AAAA,UACP,OAAQ,EAAA,WAAA;AAAA,UACR,QAAA,EAAA,iBAAA/vB,GAAA,CAAA,MAAA,EAAA;AAAA,YAAM,SAAU,EAAA,OAAA;AAAA,YACV,CAAE,EAAA,sIAAA;AAAA,WADR,CAEA,kBAAAA,GAAA,CAAA,MAAA,EAAA;AAAA,YAAM,SAAU,EAAA,OAAA;AAAA,YACV,CAAE,EAAA,gJAAA;AAAA,WATZ,CAAA,CAAA;AAAA,SAAA,CAAA;AAAA,OALJ,CAAA,EAmBCyT,KAAS,oBAAAzT,GAAA,CAAC,OAAD,EAAA;AAAA,QACN,OAAS,EAAA;AAAA,UACLyuB,OAAOgC,WAAYhC,CAAAA,KAAAA;AAAAA,UACnB/a,SAAS+c,WAAY/c,CAAAA,OAAAA;AAAAA,SAHnB;AAAA,QAKN,KALM,EAAA,IAAA;AAAA,QAMN,SAAW,EAAA,MAAA;AAAA,QACX,OAAOD,KAAM9T,CAAAA,OAAAA;AAAAA,QAPP,QAAA,sBAQL,gBAAD,EAAA;AAAA,UACI,QAAU,EAAA,SAAA;AAAA,UACV,KAAO,EAAA,OAAA;AAAA,SAFX,CAAA;AAAA,OA9BR,CAAA,CAAA;AAAA,KA5CJ,CAAA,CAAA;AAAA,GADJ,CAAA,CAAA;AAwFH,CAAA,CAAA;AAEM,MAAMyc,SAAYld,GAAAA,cAAAA,CAAMiV,IAAsC2a,CAAAA,iBAAAA,EAAmBhL,UAA/D,CAAA,CAAA;AAEzB,SAAAA,UAAA,CAAkBC,WAA4CC,SAA4C,EAAA;AACtG,EAAA,OAAOD,UAAUsK,QAAarK,KAAAA,SAAAA,CAAUqK,YACpCtK,SAAUgL,CAAAA,OAAAA,KAAY/K,UAAUqK,QAChCtK,IAAAA,SAAAA,CAAUxY,QAAayY,KAAAA,SAAAA,CAAUzY,YACjCwY,SAAUzK,CAAAA,IAAAA,KAAS0K,UAAU1K,IAC7ByK,IAAAA,SAAAA,CAAUkK,UAAUjK,SAAUiK,CAAAA,KAAAA,IAC9BlK,SAAUuK,CAAAA,KAAAA,KAAUtK,UAAUsK,KAC9BvK,IAAAA,SAAAA,CAAUqL,mBAAmBpL,SAAUoL,CAAAA,cAAAA,IACvCrL,UAAUgK,aAAkB/J,KAAAA,SAAAA,CAAU+J,aACtChK,IAAAA,SAAAA,CAAUoK,eAAenK,SAAUmK,CAAAA,UAAAA,IACnCyC,QAAQ7M,SAAU7X,CAAAA,KAAAA,EAAO8X,UAAU9X,KAA5B,CAAA,CAAA;AAEd;;AC5SD2kB,GAAIC,CAAAA,SAAAA,CAAUD,IAAInX,KAAO,EAAA,eAAA,EAAiB,SACtCqX,MAAS,GAAA,CAACjlB,CAAWA,KAAAA,CAAAA,EACrBnM,OACF,EAAA;AACS,EAAA,OAAA,IAAKqxB,CAAAA,IAAAA,CAAK,eAAiBrxB,EAAAA,OAAAA,EAASwF,CAAU,MAAA,KAAA;AACjD,IAAO,OAAA,CAACA,MAAUA,IAAAA,MAAAA,CAAOxC,MAAW,KAAA,IAAIsC,IAAIE,MAAOlB,CAAAA,GAAAA,CAAI8sB,MAAX,CAAR,CAA4BzX,CAAAA,IAAAA,CAAAA;AAAAA,GAD7D,CAAA,CAAA;AAGV,CAPD,CAAA,CAAA;AAwBO,SAAA,kBAAA,CAA+B7N,YACAwlB,oBAAgE,EAAA;AAClG,EAAA,MAAMC,eAAoB,EAA1B,CAAA;AACAhsB,EAAAA,MAAAA,CAAOvB,QAAQ8H,UAAf,CAAA,CAA2BrB,QAAQ,CAAC,CAAC/F,MAAM8G,QAAc,CAAA,KAAA;AACrD+lB,IAAAA,YAAAA,CAAa7sB,QAAQ8sB,gBAAiB,CAAA;AAAA,MAClChmB,QAAAA;AAAAA,MACA8lB,oBAAAA;AAAAA,MACA5sB,IAAAA;AAAAA,KAHiC,CAAA,CAAA;AAAA,GADzC,CAAA,CAAA;AAOA,EAAA,OAAOwsB,GAAIO,CAAAA,MAAAA,EAAS3I,CAAAA,KAAAA,CAAMyI,YAAnB,CAAA,CAAA;AACV,CAAA;AAEM,SAAA,gBAAA,CAA0BG,eAA2D,EAAA;AAExF,EAAA,MAAMlmB,WAAWkmB,eAAgBlmB,CAAAA,QAAAA,CAAAA;AACjC,EAAI,IAAA,OAAOA,aAAa,UAAY,EAAA;AAChCF,IAAQqmB,OAAAA,CAAAA,GAAAA,CAAI,qBAAqBD,eAAjC,CAAA,CAAA;AACMzuB,IAAAA,MAAAA,MAAM,wGAAD,CAAA,CAAA;AAAA,GACd;AAED,EAAIuI,IAAAA,QAAAA,CAASE,aAAa,QAAU,EAAA;AACzBkmB,IAAAA,OAAAA,mBAAmBF,eAAD,CAAA,CAAA;AAAA,GAC5B,MAAA,IAAUlmB,QAASE,CAAAA,QAAAA,KAAa,QAAU,EAAA;AAChCmmB,IAAAA,OAAAA,mBAAmBH,eAAD,CAAA,CAAA;AAAA,GAC5B,MAAA,IAAUlmB,QAASE,CAAAA,QAAAA,KAAa,SAAW,EAAA;AACjComB,IAAAA,OAAAA,oBAAoBJ,eAAD,CAAA,CAAA;AAAA,GAC7B,MAAA,IAAUlmB,QAASE,CAAAA,QAAAA,KAAa,KAAO,EAAA;AAC7BqmB,IAAAA,OAAAA,sBAAsBL,eAAD,CAAA,CAAA;AAAA,GAC/B,MAAA,IAAUlmB,QAASE,CAAAA,QAAAA,KAAa,OAAS,EAAA;AAC/BsmB,IAAAA,OAAAA,kBAAkBN,eAAD,CAAA,CAAA;AAAA,GAC3B,MAAA,IAAUlmB,QAASE,CAAAA,QAAAA,KAAa,WAAa,EAAA;AACnCumB,IAAAA,OAAAA,iBAAiBP,eAAD,CAAA,CAAA;AAAA,GAC1B,MAAA,IAAUlmB,QAASE,CAAAA,QAAAA,KAAa,UAAY,EAAA;AAClCwmB,IAAAA,OAAAA,qBAAqBR,eAAD,CAAA,CAAA;AAAA,GAC9B,MAAA,IAAUlmB,QAASE,CAAAA,QAAAA,KAAa,WAAa,EAAA;AACnCymB,IAAAA,OAAAA,sBAAsBT,eAAD,CAAA,CAAA;AAAA,GAC/B;AACDpmB,EAAQwI,OAAAA,CAAAA,KAAAA,CAAM,wCAAwCtI,QAAtD,CAAA,CAAA;AACMvI,EAAAA,MAAAA,MAAM,sCAAD,CAAA,CAAA;AACd,CAAA;AAEqC,SAAA,qBAAA,CAAA;AAAA,EACsCuI,QAAAA;AAAAA,EACA4mB,cAAAA;AAAAA,EACAd,oBAAAA;AAAAA,EACA5sB,IAAAA;AAAAA,CACgD,EAAA;AACxH,EAAA,MAAM6sB,eAAoB,EAA1B,CAAA;AACI/lB,EAAAA,IAAAA,QAASM,CAAAA,UAAAA;AACTvG,IAAOvB,MAAAA,CAAAA,OAAAA,CAAQwH,SAASM,UAAxB,CAAA,CAAoCrB,QAAQ,CAAC,CAAC4nB,WAAWxkB,aAAuC,CAAA,KAAA;AAC5F0jB,MAAAA,YAAAA,CAAac,aAAab,gBAAiB,CAAA;AAAA,QACvChmB,QAAUqC,EAAAA,aAAAA;AAAAA,QACVukB,cAAgB5mB,EAAAA,QAAAA;AAAAA,QAChB8lB,oBAAAA;AAAAA,QACA5sB,IAAAA,EAAO,GAAEA,IAAQ2tB,CAAAA,CAAAA,EAAAA,SAAAA,CAAAA,CAAAA,CAAAA;AAAAA,OAJqB,CAAA,CAAA;AAAA,KAD9C,CAAA,CAAA;AAQJ,EAAA,OAAOnB,GAAIO,CAAAA,MAAAA,EAAS3I,CAAAA,KAAAA,CAAMyI,YAAnB,CAAA,CAAA;AACV,CAAA;AAED,SAA4B,kBAAA,CAAA;AAAA,EACI/lB,QAAAA;AAAAA,EACA4mB,cAAAA;AAAAA,EACAd,oBAAAA;AAAAA,EACA5sB,IAAAA;AAAAA,CAC8C,EAAA;AACtEyB,EAAAA,IAAAA,MAAAA,GAA4B+qB,IAAIoB,MAApC,EAAA,CAAA;AACA,EAAA,MAAMplB,aAAa1B,QAAS0B,CAAAA,UAAAA,CAAAA;AAC5B,EAAI1B,IAAAA,QAAAA,CAASoO,QAAQxB,UAAY,EAAA;AAC7B,IAAA,IAAIlL,UAAYC,EAAAA,QAAAA;AACZhH,MAAAA,MAAAA,GAASA,OAAOgH,QAASD,CAAAA,UAAAA,EAAYqlB,eAAkBrlB,GAAAA,UAAAA,CAAWqlB,kBAAkB,UAA3E,CAAA,CAAA;AACbpsB,IAAAA,MAAAA,GAASA,MAAOuH,CAAAA,KAAAA,CACZ8kB,mBAAoBhnB,CAAAA,QAAAA,CAASoO,MAAQxB,EAAAA,UAAlB,CACd9T,CAAAA,GAAAA,CAAI,CAAC,CAAC2F,GAAK3J,EAAAA,CAAAA,CAAAA,KAAO2J,GADvB,CADK,CAAA,CAAA;AAAA,GAIZ;AACD,EAAA,IAAIiD,UAAY,EAAA;AACZ/G,IAAAA,MAAAA,GAAS+G,WAAWC,QACdhH,GAAAA,MAAAA,CAAOgH,QAASD,CAAAA,UAAAA,EAAYqlB,kBAAkBrlB,UAAWqlB,CAAAA,eAAAA,GAAkB,UAA3E,CAAA,CAAuFE,SAAS,IAAhG,CAAA,GACAtsB,OAAOusB,WAAP,EAAA,CAAqBD,SAAS,IAA9B,CAAA,CAAA;AACFvlB,IAAAA,IAAAA,UAAAA,CAAWylB,UAAUrB,oBAAwB5sB,IAAAA,IAAAA;AAC7CyB,MAAAA,MAAAA,GAASA,OAAOkrB,IAAK,CAAA,QAAA,EAAU,kDAC3B,CAAC9kB,KAAAA,EAAOxL,YACJuwB,oBAAqB,CAAA;AAAA,QACjB5sB,IAAAA;AAAAA,QACA8G,QAAAA;AAAAA,QACA4mB,cAAAA;AAAAA,QACA7lB,KAAAA;AAAAA,OAJgB,CAFnB,CAAA,CAAA;AAQb,IAAIW,IAAAA,UAAAA,CAAW0lB,GAAO1lB,IAAAA,UAAAA,CAAW0lB,GAAQ,KAAA,CAAA;AAAGzsB,MAASA,MAAAA,GAAAA,MAAAA,CAAOysB,IAAI1lB,UAAW0lB,CAAAA,GAAAA,EAAM,GAAEpnB,QAAS3L,CAAAA,KAAAA,CAAAA,aAAAA,EAAqBqN,WAAW0lB,GAAvE,CAAA,gBAAA,CAAA,CAAA,CAAA;AACrD,IAAI1lB,IAAAA,UAAAA,CAAW2lB,GAAO3lB,IAAAA,UAAAA,CAAW2lB,GAAQ,KAAA,CAAA;AAAG1sB,MAASA,MAAAA,GAAAA,MAAAA,CAAO0sB,IAAI3lB,UAAW2lB,CAAAA,GAAAA,EAAM,GAAErnB,QAAS3L,CAAAA,KAAAA,CAAAA,aAAAA,EAAqBqN,WAAW2lB,GAAvE,CAAA,gBAAA,CAAA,CAAA,CAAA;AACrD,IAAA,IAAI3lB,UAAW4lB,CAAAA,OAAAA;AAAS3sB,MAAAA,MAAAA,GAASA,MAAO2sB,CAAAA,OAAAA,CAAQ5lB,UAAW4lB,CAAAA,OAAAA,EAAS5lB,WAAW6lB,cAA9C,CAAA,CAAA;AACjC,IAAA,IAAI7lB,UAAW0a,CAAAA,KAAAA;AAAOzhB,MAAAA,MAAAA,GAASA,MAAOyhB,CAAAA,KAAAA,CAAO,CAAEpc,EAAAA,QAAAA,CAAS3L,KAAzB,CAAA,iBAAA,CAAA,CAAA,CAAA;AAC/B,IAAA,IAAIqN,UAAW1I,CAAAA,GAAAA;AAAK2B,MAAAA,MAAAA,GAASA,MAAO3B,CAAAA,GAAAA,CAAK,CAAEgH,EAAAA,QAAAA,CAAS3L,KAAvB,CAAA,cAAA,CAAA,CAAA,CAAA;AACzBqN,IAAAA,IAAAA,UAAW8lB,CAAAA,IAAAA;AAAM7sB,MAAAA,MAAAA,GAASA,OAAO6sB,IAAhB,EAAA,CAAA;AACjB9lB,IAAAA,IAAAA,UAAW+lB,CAAAA,SAAAA;AAAW9sB,MAAAA,MAAAA,GAASA,OAAO8sB,SAAhB,EAAA,CAAA;AACtB/lB,IAAAA,IAAAA,UAAWgmB,CAAAA,SAAAA;AAAW/sB,MAAAA,MAAAA,GAASA,OAAO+sB,SAAhB,EAAA,CAAA;AAAA,GACvB,MAAA;AACH/sB,IAAAA,MAAAA,GAASA,MAAOusB,CAAAA,WAAAA,EAAcD,CAAAA,QAAAA,CAAS,IAA9B,CAAA,CAAA;AAAA,GACZ;AACD,EAAOtsB,OAAAA,MAAAA,CAAAA;AACV,CAAA;AAED,SAA4B,kBAAA,CAAA;AAAA,EACIqF,QAAAA;AAAAA,EACA4mB,cAAAA;AAAAA,EACAd,oBAAAA;AAAAA,EACA5sB,IAAAA;AAAAA,CAC8C,EAAA;AAC1E,EAAA,MAAMwI,aAAa1B,QAAS0B,CAAAA,UAAAA,CAAAA;AAC5B,EAAA,IAAI/G,MAA4B+qB,GAAAA,GAAAA,CAAIiC,MAAJ,EAAA,CAAaC,UAAU,kBAAvB,CAAA,CAAA;AAChC,EAAA,IAAIlmB,UAAY,EAAA;AACZ/G,IAAAA,MAAAA,GAAS+G,WAAWC,QACdhH,GAAAA,MAAAA,CAAOgH,QAASD,CAAAA,UAAAA,CAAWqlB,kBAAkBrlB,UAAWqlB,CAAAA,eAAAA,GAAkB,UAA1E,CAAA,CAAsFE,SAAS,IAA/F,CAAA,GACAtsB,OAAOusB,WAAP,EAAA,CAAqBD,SAAS,IAA9B,CAAA,CAAA;AACFvlB,IAAAA,IAAAA,UAAAA,CAAWylB,UAAUrB,oBAAwB5sB,IAAAA,IAAAA;AAC7CyB,MAAAA,MAAAA,GAASA,MAAOkrB,CAAAA,IAAAA,CAAK,QACjB,EAAA,gDAAA,EACC9kB,WAAU+kB,oBAAqB,CAAA;AAAA,QAC5B5sB,IAAAA;AAAAA,QACA8G,QAAAA;AAAAA,QACA4mB,cAAAA;AAAAA,QACA7lB,KAAAA;AAAAA,OAJ2B,CAF1B,CAAA,CAAA;AAQb,IAAIW,IAAAA,UAAAA,CAAW0lB,GAAO1lB,IAAAA,UAAAA,CAAW0lB,GAAQ,KAAA,CAAA;AAAGzsB,MAASA,MAAAA,GAAAA,MAAAA,CAAOysB,IAAI1lB,UAAW0lB,CAAAA,GAAAA,EAAM,GAAEpnB,QAAS3L,CAAAA,KAAAA,CAAAA,4BAAAA,EAAoCqN,WAAW0lB,GAAtF,CAAA,CAAA,CAAA,CAAA;AACrD,IAAI1lB,IAAAA,UAAAA,CAAW2lB,GAAO3lB,IAAAA,UAAAA,CAAW2lB,GAAQ,KAAA,CAAA;AAAG1sB,MAASA,MAAAA,GAAAA,MAAAA,CAAO0sB,IAAI3lB,UAAW2lB,CAAAA,GAAAA,EAAM,GAAErnB,QAAS3L,CAAAA,KAAAA,CAAAA,2BAAAA,EAAmCqN,WAAW2lB,GAArF,CAAA,CAAA,CAAA,CAAA;AACrD,IAAI3lB,IAAAA,UAAAA,CAAWmmB,QAAYnmB,IAAAA,UAAAA,CAAWmmB,QAAa,KAAA,CAAA;AAAGltB,MAASA,MAAAA,GAAAA,MAAAA,CAAOktB,SAASnmB,UAAWmmB,CAAAA,QAAAA,EAAW,GAAE7nB,QAAS3L,CAAAA,KAAAA,CAAAA,qBAAAA,EAA6BqN,WAAWmmB,QAAzF,CAAA,CAAA,CAAA,CAAA;AAC/D,IAAInmB,IAAAA,UAAAA,CAAWomB,QAAYpmB,IAAAA,UAAAA,CAAWomB,QAAa,KAAA,CAAA;AAAGntB,MAASA,MAAAA,GAAAA,MAAAA,CAAOmtB,SAASpmB,UAAWomB,CAAAA,QAAAA,EAAW,GAAE9nB,QAAS3L,CAAAA,KAAAA,CAAAA,oBAAAA,EAA4BqN,WAAWomB,QAAxF,CAAA,CAAA,CAAA,CAAA;AAC/D,IAAA,IAAIpmB,UAAWqmB,CAAAA,QAAAA;AAAUptB,MAAAA,MAAAA,GAASA,MAAOotB,CAAAA,QAAAA,CAAU,CAAE/nB,EAAAA,QAAAA,CAAS3L,KAA5B,CAAA,iBAAA,CAAA,CAAA,CAAA;AAClC,IAAA,IAAIqN,UAAWsmB,CAAAA,QAAAA;AAAUrtB,MAAAA,MAAAA,GAASA,MAAOqtB,CAAAA,QAAAA,CAAU,CAAEhoB,EAAAA,QAAAA,CAAS3L,KAA5B,CAAA,iBAAA,CAAA,CAAA,CAAA;AAClC,IAAA,IAAIqN,UAAWumB,CAAAA,OAAAA;AAASttB,MAAAA,MAAAA,GAASA,MAAOstB,CAAAA,OAAAA,CAAS,CAAEjoB,EAAAA,QAAAA,CAAS3L,KAA3B,CAAA,mBAAA,CAAA,CAAA,CAAA;AAAA,GAC9B,MAAA;AACHsG,IAAAA,MAAAA,GAASA,MAAOusB,CAAAA,WAAAA,EAAcD,CAAAA,QAAAA,CAAS,IAA9B,CAAA,CAAA;AAAA,GACZ;AACD,EAAOtsB,OAAAA,MAAAA,CAAAA;AACV,CAAA;AAED,SAA8B,oBAAA,CAAA;AAAA,EACIqF,QAAAA;AAAAA,EACA4mB,cAAAA;AAAAA,EACAd,oBAAAA;AAAAA,EACA5sB,IAAAA;AAAAA,CAC6C,EAAA;AACvEyB,EAAAA,IAAAA,MAAAA,GAA4B+qB,IAAIO,MAApC,EAAA,CAAA;AACA,EAAA,MAAMvkB,aAAa1B,QAAS0B,CAAAA,UAAAA,CAAAA;AACxBA,EAAAA,IAAAA,UAAAA,EAAYylB,UAAUrB,oBAAwB5sB,IAAAA,IAAAA;AAC9CyB,IAAAA,MAAAA,GAASA,MAAOkrB,CAAAA,IAAAA,CAAK,QACjB,EAAA,gDAAA,EACC9kB,WAAU+kB,oBAAqB,CAAA;AAAA,MAC5B5sB,IAAAA;AAAAA,MACA8G,QAAAA;AAAAA,MACA4mB,cAAAA;AAAAA,MACA7lB,KAAAA;AAAAA,KAJ2B,CAF1B,CAAA,CAAA;AAQTW,EAAAA,IAAAA,YAAYC,QAAU,EAAA;AACtBhH,IAAAA,MAAAA,GAASA,OAAOgH,QAASD,CAAAA,UAAAA,CAAWqlB,eAA3B,CAAA,CAA4CE,SAAS,IAArD,CAAA,CAAA;AAAA,GACN,MAAA;AACHtsB,IAAAA,MAAAA,GAASA,MAAOusB,CAAAA,WAAAA,EAAcD,CAAAA,QAAAA,CAAS,IAA9B,CAAA,CAAA;AAAA,GACZ;AACD,EAAOtsB,OAAAA,MAAAA,CAAAA;AACV,CAAA;AAED,SAA0B,gBAAA,CAAA;AAAA,EACIqF,QAAAA;AAAAA,EACA4mB,cAAAA;AAAAA,EACAd,oBAAAA;AAAAA,EACA5sB,IAAAA;AAAAA,CAC2D,EAAA;AACjF8G,EAAAA,IAAAA,SAASG,SAAW,EAAA;AACpB,IAAA,OAAOulB,GAAIO,CAAAA,MAAAA,EAASgB,CAAAA,QAAAA,CAAS,IAAtB,CAAA,CAAA;AAAA,GACV;AACGtsB,EAAAA,IAAAA,MAAAA,GAA0B+qB,IAAIwC,IAAlC,EAAA,CAAA;AACA,EAAA,MAAMxmB,aAAa1B,QAAS0B,CAAAA,UAAAA,CAAAA;AAC5B,EAAA,IAAIA,UAAY,EAAA;AACZ/G,IAAAA,MAAAA,GAAS+G,WAAWC,QACdhH,GAAAA,MAAAA,CAAOgH,QAASD,CAAAA,UAAAA,EAAYqlB,kBAAkBrlB,UAAWqlB,CAAAA,eAAAA,GAAkB,UAA3E,CAAA,CAAuFE,SAAS,IAAhG,CAAA,GACAtsB,OAAOusB,WAAP,EAAA,CAAqBD,SAAS,IAA9B,CAAA,CAAA;AACFvlB,IAAAA,IAAAA,UAAAA,CAAWylB,UAAUrB,oBAAwB5sB,IAAAA,IAAAA;AAC7CyB,MAAAA,MAAAA,GAASA,MAAOkrB,CAAAA,IAAAA,CAAK,QACjB,EAAA,gDAAA,EACC9kB,WAAU+kB,oBAAqB,CAAA;AAAA,QAC5B5sB,IAAAA;AAAAA,QACA8G,QAAAA;AAAAA,QACA4mB,cAAAA;AAAAA,QACA7lB,KAAAA;AAAAA,OAJ2B,CAF1B,CAAA,CAAA;AAQTW,IAAAA,IAAAA,UAAW0lB,CAAAA,GAAAA;AAAKzsB,MAASA,MAAAA,GAAAA,MAAAA,CAAOysB,IAAI1lB,UAAW0lB,CAAAA,GAAAA,EAAM,GAAEpnB,QAAS3L,CAAAA,KAAAA,CAAAA,eAAAA,EAAuBqN,WAAW0lB,GAAzE,CAAA,CAAA,CAAA,CAAA;AACzB1lB,IAAAA,IAAAA,UAAW2lB,CAAAA,GAAAA;AAAK1sB,MAASA,MAAAA,GAAAA,MAAAA,CAAO0sB,IAAI3lB,UAAW2lB,CAAAA,GAAAA,EAAM,GAAErnB,QAAS3L,CAAAA,KAAAA,CAAAA,gBAAAA,EAAwBqN,WAAW0lB,GAA1E,CAAA,CAAA,CAAA,CAAA;AAAA,GAC1B,MAAA;AACHzsB,IAAAA,MAAAA,GAASA,MAAOusB,CAAAA,WAAAA,EAAcD,CAAAA,QAAAA,CAAS,IAA9B,CAAA,CAAA;AAAA,GACZ;AACD,EAAOtsB,OAAAA,MAAAA,CAAAA;AACV,CAAA;AAED,SAA+B,qBAAA,CAAA;AAAA,EACsCqF,QAAAA;AAAAA,EACA4mB,cAAAA;AAAAA,EACAd,oBAAAA;AAAAA,EACA5sB,IAAAA;AAAAA,CAC8C,EAAA;AAC3GyB,EAAAA,IAAAA,MAAAA,GAA4B+qB,IAAIO,MAApC,EAAA,CAAA;AACA,EAAA,MAAMvkB,aAAa1B,QAAS0B,CAAAA,UAAAA,CAAAA;AAC5B,EAAA,IAAIA,UAAY,EAAA;AACZ/G,IAAAA,MAAAA,GAAS+G,WAAWC,QACdhH,GAAAA,MAAAA,CAAOgH,QAASD,CAAAA,UAAAA,EAAYqlB,kBAAkBrlB,UAAWqlB,CAAAA,eAAAA,GAAkB,UAA3E,CAAA,CAAuFE,SAAS,IAAhG,CAAA,GACAtsB,OAAOusB,WAAP,EAAA,CAAqBD,SAAS,IAA9B,CAAA,CAAA;AACFvlB,IAAAA,IAAAA,UAAAA,CAAWylB,UAAUrB,oBAAwB5sB,IAAAA,IAAAA;AAC7CyB,MAAAA,MAAAA,GAASA,MAAOkrB,CAAAA,IAAAA,CAAK,QACjB,EAAA,gDAAA,EACC9kB,WAAU+kB,oBAAqB,CAAA;AAAA,QAC5B5sB,IAAAA;AAAAA,QACA8G,QAAAA;AAAAA,QACA4mB,cAAAA;AAAAA,QACA7lB,KAAAA;AAAAA,OAJ2B,CAF1B,CAAA,CAAA;AAAA,GAQV,MAAA;AACHpG,IAAAA,MAAAA,GAASA,MAAOusB,CAAAA,WAAAA,EAAcD,CAAAA,QAAAA,CAAS,IAA9B,CAAA,CAAA;AAAA,GACZ;AACD,EAAOtsB,OAAAA,MAAAA,CAAAA;AACV,CAAA;AAED,SAA6B,mBAAA,CAAA;AAAA,EACIqF,QAAAA;AAAAA,EACA4mB,cAAAA;AAAAA,EACAd,oBAAAA;AAAAA,EACA5sB,IAAAA;AAAAA,CACgD,EAAA;AACzEyB,EAAAA,IAAAA,MAAAA,GAA6B+qB,IAAIyC,OAArC,EAAA,CAAA;AACA,EAAA,MAAMzmB,aAAa1B,QAAS0B,CAAAA,UAAAA,CAAAA;AAC5B,EAAA,IAAIA,UAAY,EAAA;AACZ/G,IAAAA,MAAAA,GAAS+G,WAAWC,QACdhH,GAAAA,MAAAA,CAAOgH,QAASD,CAAAA,UAAAA,EAAYqlB,kBAAkBrlB,UAAWqlB,CAAAA,eAAAA,GAAkB,UAA3E,CAAA,CAAuFE,SAAS,IAAhG,CAAA,GACAtsB,OAAOusB,WAAP,EAAA,CAAqBD,SAAS,IAA9B,CAAA,CAAA;AACFvlB,IAAAA,IAAAA,UAAAA,CAAWylB,UAAUrB,oBAAwB5sB,IAAAA,IAAAA;AAC7CyB,MAAAA,MAAAA,GAASA,MAAOkrB,CAAAA,IAAAA,CAAK,QACjB,EAAA,gDAAA,EACC9kB,WAAU+kB,oBAAqB,CAAA;AAAA,QAC5B5sB,IAAAA;AAAAA,QACA8G,QAAAA;AAAAA,QACA4mB,cAAAA;AAAAA,QACA7lB,KAAAA;AAAAA,OAJ2B,CAF1B,CAAA,CAAA;AAAA,GAQV,MAAA;AACHpG,IAAAA,MAAAA,GAASA,MAAOusB,CAAAA,WAAAA,EAAcD,CAAAA,QAAAA,CAAS,IAA9B,CAAA,CAAA;AAAA,GACZ;AACD,EAAOtsB,OAAAA,MAAAA,CAAAA;AACV,CAAA;AAED,SAAA,wBAAA,CAAkCqF,QAAoD,EAAA;AAClF,EAAIA,IAAAA,QAAAA,CAAS0B,YAAY0mB,aAAe,EAAA;AACpC,IAAO,OAAA,IAAA,CAAA;AAAA,GACApoB,MAAAA,IAAAA,QAAAA,CAASE,QAAa,KAAA,KAAA,IAASF,SAASM,UAAY,EAAA;AACpDvG,IAAAA,OAAAA,MAAOvB,CAAAA,OAAAA,CAAQwH,QAASM,CAAAA,UAAxB,CACF3G,CAAAA,MAAAA,CAAO,CAAC,CAAC8E,GAAK4D,EAAAA,aAAAA,CAAAA,KAAmBA,aAAcX,CAAAA,UAAAA,EAAY0mB,aADzD,CAAA,CAAA;AAAA,GAEV;AACD,EAAO,OAAA,KAAA,CAAA;AACV,CAAA;AAED,SAA2B,iBAAA,CAAA;AAAA,EACOpoB,QAAAA;AAAAA,EACA4mB,cAAAA;AAAAA,EACAd,oBAAAA;AAAAA,EACA5sB,IAAAA;AAAAA,CACiD,EAAA;AAE3EyB,EAAAA,IAAAA,MAAAA,GAA2B+qB,IAAInX,KAAnC,EAAA,CAAA;AAEIvO,EAAAA,IAAAA,SAASiC,EAAI,EAAA;AACbtH,IAASA,MAAAA,GAAAA,MAAAA,CAAOsH,GAAG+jB,gBAAiB,CAAA;AAAA,MAChChmB,UAAUA,QAASiC,CAAAA,EAAAA;AAAAA,MACnB2kB,cAAgB5mB,EAAAA,QAAAA;AAAAA,KAFe,CAA1B,CAAA,CAAA;AAIT,IAAMqoB,MAAAA,iBAAAA,GAAoBC,wBAAyBtoB,CAAAA,QAAAA,CAASiC,EAAV,CAAA,CAAA;AAClD,IAAA,IAAIomB,iBAAmB,EAAA;AACnB,MAAI,IAAA,OAAOA,sBAAsB,SAAW,EAAA;AACxC1tB,QAAAA,MAAAA,GAASA,OAAOytB,aAAc7oB,CAAAA,CAAAA,CAAAA,KAAKA,CAAI,EAAA,CAAA,EAAES,SAAS3L,KAAzC,CAAA,2CAAA,CAAA,CAAA,CAAA;AAAA,OACFoF,MAAAA,IAAAA,KAAAA,CAAMC,OAAQ2uB,CAAAA,iBAAd,CAAkC,EAAA;AACzCA,QAAAA,iBAAAA,CAAkBppB,OAAQ,CAAA,CAAC,CAAC/F,KAAAA,EAAMmJ,aAAmB,CAAA,KAAA;AAC7C1H,UAASA,MAAAA,GAAAA,MAAAA,CAAOytB,aAAc7oB,CAAAA,CAAAA,CAAAA,KAAKA,CAAKA,IAAAA,CAAAA,CAAErG,KAAQ,CAAA,EAAA,CAAA,EAAE8G,QAAS3L,CAAAA,KAAAA,CAAAA,QAAAA,EAAWgO,aAAchO,CAAAA,KAAAA,IAAS6E,KAAtF,CAAA,4CAAA,CAAA,CAAA,CAAA;AAAA,SADjB,CAAA,CAAA;AAAA,OAIH;AAAA,KACJ;AAAA,GACJ;AACD,EAAA,MAAMwI,aAAa1B,QAAS0B,CAAAA,UAAAA,CAAAA;AAE5B,EAAA,IAAIA,UAAY,EAAA;AACZ/G,IAAAA,MAAAA,GAAS+G,WAAWC,QACdhH,GAAAA,MAAAA,CAAOgH,QAASD,CAAAA,UAAAA,EAAYqlB,kBAAkBrlB,UAAWqlB,CAAAA,eAAAA,GAAkB,UAA3E,CAAA,CAAuFE,SAAS,IAAhG,CAAA,GACAtsB,OAAOusB,WAAP,EAAA,CAAqBD,SAAS,IAA9B,CAAA,CAAA;AACN,IAAIvlB,IAAAA,UAAAA,CAAW0lB,GAAO1lB,IAAAA,UAAAA,CAAW0lB,GAAQ,KAAA,CAAA;AAAGzsB,MAASA,MAAAA,GAAAA,MAAAA,CAAOysB,IAAI1lB,UAAW0lB,CAAAA,GAAAA,EAAM,GAAEpnB,QAAS3L,CAAAA,KAAAA,CAAAA,eAAAA,EAAuBqN,WAAW0lB,GAAzE,CAAA,aAAA,CAAA,CAAA,CAAA;AACjD1lB,IAAAA,IAAAA,UAAW2lB,CAAAA,GAAAA;AAAK1sB,MAASA,MAAAA,GAAAA,MAAAA,CAAO0sB,IAAI3lB,UAAW2lB,CAAAA,GAAAA,EAAM,GAAErnB,QAAS3L,CAAAA,KAAAA,CAAAA,eAAAA,EAAuBqN,WAAW2lB,GAAzE,CAAA,aAAA,CAAA,CAAA,CAAA;AAAA,GAC1B,MAAA;AACH1sB,IAAAA,MAAAA,GAASA,MAAOusB,CAAAA,WAAAA,EAAcD,CAAAA,QAAAA,CAAS,IAA9B,CAAA,CAAA;AAAA,GACZ;AACD,EAAOtsB,OAAAA,MAAAA,CAAAA;AACV;;ACvVY4tB,MAAAA,gBAAAA,GAAiB5gB,UAAkBC,CAAAA,CAAAA,KAAAA,KAASC,YAAa,CAAA;AAAA,EAC9D8O,KAAO,EAAA;AAAA,IACHmE,OAAS,EAAA,CAAA;AAAA,IACT5S,MAAQ,EAAA,CAAA;AAAA,IACRrL,KAAO,EAAA,MAAA;AAAA,IACPmN,KAAO,EAAA,OAAA;AAAA,IACPqD,UAAY,EAAA,OAAA;AAAA,IACZ0B,UAAY,EAAA,OAAA;AAAA,IACZD,QAAU,EAAA,OAAA;AAAA,IACVE,UAAY,EAAA,OAAA;AAAA,IACZwL,UAAY,EAAA,OAAA;AAAA,IACZkI,MAAQ,EAAA,OAAA;AAAA,IACR8F,MAAQ,EAAA,MAAA;AAAA,IACRC,OAAS,EAAA,MAAA;AAAA,GAZN;AADuD,CAAD,CAA7B,CAAA,CAAA;AAkBjC,SAAA,UAAA,CAAoB50B,KAOxB,EAAA;AACO,EAAA,MAAA;AAAA,IAAEuM,QAAAA;AAAAA,IAAUW,KAAAA;AAAAA,IAAO4a,SAAAA;AAAAA,IAAW+M,WAAAA;AAAAA,IAAa9E,OAAAA;AAAAA,GAAY/vB,GAAAA,KAAAA,CAAAA;AACvD,EAAA,MAAA,CAAC80B,aAAAA,EAAeC,gBAAoBx0B,CAAAA,GAAAA,QAAAA,CAAuB2M,KAAf,CAAA,CAAA;AAClD,EAAM8nB,MAAAA,YAAAA,GAAextB,OAAgB,KAAV,CAAA,CAAA;AAE3B3E,EAAAA,SAAAA,CACI,MAAM;AACIoyB,IAAAA,MAAAA,WAAW,MAAM;AACbC,MAAAA,MAAAA,iBAAoB,GAAA,CAAChoB,KAASA,IAAAA,KAAAA,CAAMvJ,MAAW,KAAA,CAAA,CAAA;AACrD,MAAA,IAAIuxB,qBAAqB,CAACJ,aAAAA;AACtB,QAAA,OAAA;AACJ,MAAA,IAAIA,aAAkB5nB,KAAAA,KAAAA;AAClB2nB,QAAAA,WAAAA,CAAYC,aAAD,CAAA,CAAA;AAAA,KALnB,CAAA;AAOA,IAAMlK,MAAAA,OAAAA,GAAU1I,UAAW+S,CAAAA,QAAAA,EAAU,GAAX,CAAA,CAAA;AAE1B,IAAA,OAAO,MAAM;AACTpK,MAAAA,YAAAA,CAAaD,OAAD,CAAA,CAAA;AAAA,KADhB,CAAA;AAAA,GAIH,EACD,CAACkK,aAAD,CAhBK,CAAA,CAAA;AAmBTjyB,EAAAA,SAAAA,CACI,MAAM;AACE,IAAA,IAAA,CAACktB,WAAW7iB,KAAU4nB,KAAAA,aAAAA;AACtBC,MAAAA,gBAAAA,CAAiB7nB,KAAD,CAAA,CAAA;AAAA,GAExB,EAAA,CAACA,KAAO6iB,EAAAA,OAAR,CALK,CAAA,CAAA;AAQHpb,EAAAA,MAAAA,UAAU+f,gBAAhB,EAAA,CAAA;AAEM5S,EAAAA,MAAAA,GAAAA,GAAM5hB,eAAMmwB,SAAlB,EAAA,CAAA;AACAxtB,EAAAA,SAAAA,CAAU,MAAM;AACRif,IAAAA,IAAAA,GAAI1Z,CAAAA,OAAAA,IAAW2nB,OAAW,IAAA,CAACiF,aAAa5sB,OAAS,EAAA;AACjD4sB,MAAAA,YAAAA,CAAa5sB,OAAU,GAAA,IAAA,CAAA;AACvB0Z,MAAAA,GAAAA,CAAI1Z,QAAQwoB,KAAM,CAAA;AAAA,QAAEC,aAAe,EAAA,IAAA;AAAA,OAAnC,CAAA,CAAA;AACA/O,MAAAA,GAAAA,CAAI1Z,OAAQ+sB,CAAAA,cAAAA,GAAiBrT,GAAI1Z,CAAAA,OAAAA,CAAQ8E,KAAMvJ,CAAAA,MAAAA,CAAAA;AAC/Cme,MAAAA,GAAAA,CAAI1Z,OAAQgtB,CAAAA,YAAAA,GAAetT,GAAI1Z,CAAAA,OAAAA,CAAQ8E,KAAMvJ,CAAAA,MAAAA,CAAAA;AAAAA,KAC1C,MAAA;AACHqxB,MAAAA,YAAAA,CAAa5sB,OAAU2nB,GAAAA,OAAAA,CAAAA;AAAAA,KAC1B;AAAA,GACF,EAAA,CAACA,OAASjO,EAAAA,GAAV,CATM,CAAA,CAAA;AAYL,EAAA,2BAAA,KAAA,EAAA;AAAA,IAAK,KAAO,EAAA;AAAA,MAAE5N,OAAS,EAAA,MAAA;AAAA,KAAvB;AAAA,IAAA,QAAA,sBACK,gBAAD,EAAA;AAAA,MACI,GAAA;AAAA,MACA,QAAA;AAAA,MACA,SAAA,EAAWW,IAAKF,CAAAA,OAAAA,CAAQmO,KAAT,CAAA;AAAA,MACf,OAAOgS,aAAiB,IAAA,EAAA;AAAA,MACxB,UAAW9I,CAAQ,GAAA,KAAA;AACTqJ,QAAAA,MAAAA,QAAAA,GAAWrJ,IAAIlhB,MAAOoC,CAAAA,KAAAA,CAAAA;AAC5B,QAAA,IAAI4a,SAAa,IAAA,CAACuN,QAAShyB,CAAAA,QAAAA,CAAS,IAAlB,CAAA;AACd0xB,UAAAA,gBAAAA,CAAiBM,QAAD,CAAA,CAAA;AAAA,OACvB;AAAA,KATL,CAAA;AAAA,GAFR,CAAA,CAAA;AAeH;;ACjFYX,MAAAA,gBAAAA,GAAiB5gB,UAAkBC,CAAAA,CAAAA,KAAAA,KAASC,YAAa,CAAA;AAAA,EAC9Dmc,MAAQ,EAAA;AAAA,IACJ7U,MAAQ,EAAA,MAAA;AAAA,GAFkD;AAAA,EAI9D+P,UAAY,EAAA;AAAA,IACRnX,OAAS,EAAA,MAAA;AAAA,IACTC,UAAY,EAAA,QAAA;AAAA,IACZmH,MAAQ,EAAA,MAAA;AAAA,GAHA;AAJkD,CAAD,CAA7B,CAAA,CAAA;AAYjC,SAAA,WAAA,CAAqBtb,KAazB,EAAA;AAEO,EAAA,MAAA;AAAA,IACFqF,IAAAA;AAAAA,IACA0T,UAAAA;AAAAA,IACAtE,KAAAA;AAAAA,IACAqgB,aAAAA;AAAAA,IACAvoB,QAAAA;AAAAA,IACAqN,KAAAA;AAAAA,IACAmW,OAAAA;AAAAA,IACA8E,WAAAA;AAAAA,IACAS,QAAAA;AAAAA,IACAC,sBAAAA;AAAAA,IACAC,SAAAA;AAAAA,GACAx1B,GAAAA,KAAAA,CAAAA;AAEE,EAAA,MAAA,CAACD,IAAAA,EAAM01B,OAAWl1B,CAAAA,GAAAA,QAAAA,CAAkB,KAAV,CAAA,CAAA;AAC1Bm1B,EAAAA,MAAAA,aAAa,MAAM;AACrBH,IAAAA,sBAAAA,CAAuB,IAAD,CAAA,CAAA;AACtBE,IAAAA,OAAAA,CAAQ,IAAD,CAAA,CAAA;AAAA,GAFX,CAAA;AAKME,EAAAA,MAAAA,cAAc,MAAM;AACtBJ,IAAAA,sBAAAA,CAAuB,KAAD,CAAA,CAAA;AACtBE,IAAAA,OAAAA,CAAQ,KAAD,CAAA,CAAA;AAAA,GAFX,CAAA;AAKM9gB,EAAAA,MAAAA,UAAU+f,gBAAhB,EAAA,CAAA;AAEA,EAAMkB,MAAAA,UAAAA,GAAchwB,KAAMC,CAAAA,OAAAA,CAAQivB,aAAd,CAAA,IAAgCQ,QAC/C,IAAA,CAAC1vB,KAAMC,CAAAA,OAAAA,CAAQivB,aAAd,CAAA,IAAgC,CAACQ,QAAAA,CAAAA;AAEjCxT,EAAAA,MAAAA,GAAAA,GAAM5hB,eAAMmwB,SAAlB,EAAA,CAAA;AACAxtB,EAAAA,SAAAA,CAAU,MAAM;AACZ,IAAIif,IAAAA,GAAAA,CAAI1Z,WAAW2nB,OAAS,EAAA;AACxBjO,MAAAA,GAAAA,CAAI1Z,SAASwoB,KAAM,CAAA;AAAA,QAAEC,aAAe,EAAA,IAAA;AAAA,OAApC,CAAA,CAAA;AAAA,KACH;AAAA,GACF,EAAA,CAACd,OAASjO,EAAAA,GAAV,CAJM,CAAA,CAAA;AAMT,EAAA,2BACKiK,QAAD,EAAA;AAAA,IACI,OAAS,EAAA,UAAA;AAAA,IAET,QAAUjK,EAAAA,GAAAA;AAAAA,IACV,WAAWnN,OAAQwb,CAAAA,MAAAA;AAAAA,IACnB,OAAS,EAAA;AAAA,MAAEA,QAAQxb,OAAQ0W,CAAAA,UAAAA;AAAAA,KAL/B;AAAA,IAMI,IAAA;AAAA,IACA,QAAA;AAAA,IACA,QAAA;AAAA,IACA,OAASsK,EAAAA,WAAAA;AAAAA,IACT,MAAQD,EAAAA,UAAAA;AAAAA,IACR,SAXJ,EAAA,IAAA;AAAA,IAYI,UAAY,EAAA;AAAA,MACRtJ,KAAO,EAAA;AAAA,QACH9Q,MAAQ,EAAA,MAAA;AAAA,OADL;AAAA,KAbf;AAAA,IAiBI,gBAjBJ,EAAA,IAAA;AAAA,IAkBI,KAAA,EAAO,CAAC,CAAC7G,KAAAA;AAAAA,IACT,KAAOmhB,EAAAA,UAAAA,GACAN,QAAYR,GAAAA,aAAAA,CAAwB7vB,GAAIyG,CAAAA,CAAAA,CAAAA,KAAKA,CAAEoO,CAAAA,QAAAA,EAApC,CAAA,GAAkDgb,aAC7DQ,GAAAA,QAAAA,GAAW,EAAK,GAAA,EAAA;AAAA,IACvB,UAAWtJ,CAAQ,GAAA,KAAA;AACXwJ,MAAAA,IAAAA,cAAc,QAAU,EAAA;AACxB,QAAA,IAAIF,QAAU,EAAA;AACV,UAAMD,MAAAA,QAAAA,GAAYrJ,IAAIlhB,MAAOoC,CAAAA,KAAAA,CAAmBjI,IAAKyG,CAAMmqB,CAAAA,KAAAA,UAAAA,CAAWnqB,CAAD,CAApD,CAAA,CAAA;AACjBmpB,UAAAA,WAAAA,CAAYQ,QAAD,CAAA,CAAA;AAAA,SACR,MAAA;AACHR,UAAAA,WAAAA,CAAYgB,UAAW7J,CAAAA,GAAAA,CAAIlhB,MAAOoC,CAAAA,KAAZ,CAAX,CAAA,CAAA;AAAA,SACd;AAAA,OACJ,MAAA,IAAUsoB,cAAc,QAAU,EAAA;AAC3B,QAAA,IAAA,CAACxJ,IAAIlhB,MAAOoC,CAAAA,KAAAA;AACZ2nB,UAAAA,WAAAA,CAAY,IAAD,CAAA,CAAA;AAAA;AAEXA,UAAY7I,WAAAA,CAAAA,GAAAA,CAAIlhB,OAAOoC,KAAZ,CAAA,CAAA;AAAA,OACZ,MAAA;AACGtJ,QAAAA,MAAAA,MAAM,gCAAD,CAAA,CAAA;AAAA,OACd;AAAA,KArCT;AAAA,IAuCI,WAAA,EAAa,CAAC+V,OAAiB,KAAA;AACvB2b,MAAAA,IAAAA,QAAY1vB,IAAAA,KAAAA,CAAMC,OAAQ8T,CAAAA,OAAd,CAAwB,EAAA;AACpC,QAAA,2BAAQ,gBAAD,EAAA;AAAA,UAAkB,KAAOA,EAAAA,OAAAA;AAAAA,UACP,IAAA;AAAA,UACA,UAAA;AAAA,UACA,IAAA,EAAMC,QAAQ,OAAU,GAAA,SAAA;AAAA,SAHjD,CAAA,CAAA;AAAA,OAIG,MAAA;AACH,QAAA,2BAAQ,cAAD,EAAA;AAAA,UACH,OAAA;AAAA,UACA,UAAA;AAAA,UACA,KAAA;AAAA,SAHJ,CAAA,CAAA;AAAA,OAIH;AAAA,KAlDT;AAAA,IAAA,QAAA,EAsDKuZ,oBAAoBpa,UAAD,CAAA,CAAa9T,IAAI,CAAC,CAAC2F,KAAKsO,aAAmB,CAAA,KAAA;AAErD4c,MAAAA,MAAAA,IAAAA,uBAAQ,cAAD,EAAA;AAAA,QACT,OAASlrB,EAAAA,GAAAA;AAAAA,QACT,UAAA;AAAA,QACA,KAAO,EAAA,IAAA;AAAA,OAHX,CAAA,CAAA;AAIA,MAAA,IAAI0qB,QAAU,EAAA;AACV,QAAA,4BACK,QAAD,EAAA;AAAA,UACU,KAAO1qB,EAAAA,GAAAA;AAAAA,UACP,QAAA,EAAUmrB,oBAAoB7c,aAAD,CAAA;AAAA,UAC7B,KAAO,EAAA,IAAA;AAAA,UAHjB,QAAA,EAAA,iBAIIlY,GAAA,CAAC,QAAD,EAAA;AAAA,YACI,OAAS4E,EAAAA,KAAAA,CAAMC,OAAQivB,CAAAA,aAAd,KAAiCA,aAAwB7vB,CAAAA,GAAAA,CAAIyG,CAAKA,CAAAA,KAAAA,CAAAA,CAAEoO,UAApC,CAAA,CAAgDvO,QAASX,CAAAA,GAAAA,CAAIkP,UAA7D,CAAA;AAAA,WALjD,CAMI,kBAAA9Y,GAAA,CAAC,YAAD,EAAA;AAAA,YAAc,OAAS80B,EAAAA,IAAAA;AAAAA,WAN3B,CAAA,CAAA;AAAA,SAAA,EAAgB,CAASzwB,OAAAA,EAAAA,IAAAA,CAAAA,CAAAA,EAAQuF,GAAjC,CAAA,CAAA,CAAA,CAAA;AAAA,OASD,MAAA;AACH,QAAA,2BACK,QAAD,EAAA;AAAA,UAAwC,KAAOA,EAAAA,GAAAA;AAAAA,UACrC,QAAA,EAAUmrB,oBAAoB7c,aAAD,CAAA;AAAA,UAC7B,KAAO,EAAA,IAAA;AAAA,UACZ4c,QAAAA,EAAAA,IAAAA;AAAAA,SAHL,EAAgB,CAASzwB,OAAAA,EAAAA,IAAAA,CAAAA,CAAAA,EAAQuF,GAAjC,CAAA,CAAA,CAAA,CAAA;AAAA,OAMP;AAAA,KAzBJ,CAAA;AAAA,GApDK,EAAA,gBAAevF,IAFzB,CAAA,CAAA,CAAA,CAAA;AAmFP;;ACzJYqvB,MAAAA,cAAAA,GAAiB5gB,UAAkBC,CAAAA,CAAAA,KAAAA,KAASC,YAAa,CAAA;AAAA,EAC9D8O,KAAO,EAAA;AAAA,IACHmE,OAAS,EAAA,CAAA;AAAA,IACT5S,MAAQ,EAAA,CAAA;AAAA,IACRrL,KAAO,EAAA,MAAA;AAAA,IACPmN,KAAO,EAAA,OAAA;AAAA,IACPqD,UAAY,EAAA,OAAA;AAAA,IACZ0B,UAAY,EAAA,OAAA;AAAA,IACZD,QAAU,EAAA,OAAA;AAAA,IACVE,UAAY,EAAA,OAAA;AAAA,IACZwL,UAAY,EAAA,OAAA;AAAA,IACZkI,MAAQ,EAAA,OAAA;AAAA,IACR8F,MAAQ,EAAA,MAAA;AAAA,IACRC,OAAS,EAAA,MAAA;AAAA,GAbiD;AAAA,EAe9DoB,WAAa,EAAA;AAAA,IACT5I,SAAW,EAAA,OAAA;AAAA,GADF;AAfiD,CAAD,CAA7B,CAAA,CAAA;AAqBjC,SAAA,gBAAA,CAA0BptB,KAQ9B,EAAA;AAEO,EAAA,MAAA;AAAA,IAAEivB,KAAAA;AAAAA,IAAO/hB,KAAAA;AAAAA,IAAO2nB,WAAAA;AAAAA,IAAa9E,OAAAA;AAAAA,IAASkG,MAAAA;AAAAA,IAAQ1pB,QAAAA;AAAAA,GAAavM,GAAAA,KAAAA,CAAAA;AACjE,EAAA,MAAMk2B,kBAAmBhpB,KAAS,IAAA,OAAOA,UAAU,QAAYA,GAAAA,KAAAA,CAAM4M,UAAa,GAAA,EAAA,CAAA;AAC5E,EAAA,MAAA,CAACgb,aAAAA,EAAeC,gBAAoBx0B,CAAAA,GAAAA,QAAAA,CAAwB21B,eAAhB,CAAA,CAAA;AAElDrzB,EAAAA,SAAAA,CACI,MAAM;AACIoyB,IAAAA,MAAAA,WAAW,MAAM;AACfH,MAAAA,IAAAA,kBAAkBoB,eAAiB,EAAA;AACnC,QAAIpB,IAAAA,aAAAA,KAAkBp0B,KAAao0B,CAAAA,IAAAA,aAAAA,KAAkB,IAAM,EAAA;AACvD,UAAMqB,MAAAA,WAAAA,GAAcN,WAAWf,aAAD,CAAA,CAAA;AAC9B,UAAA,IAAIsB,MAAMD,WAAD,CAAA;AACL,YAAA,OAAA;AACAA,UAAAA,IAAAA,WAAAA,KAAgBz1B,UAAay1B,WAAgB,KAAA,IAAA;AAC7CtB,YAAAA,WAAAA,CAAYsB,WAAD,CAAA,CAAA;AAAA,SACZ,MAAA;AACHtB,UAAAA,WAAAA,CAAY,IAAD,CAAA,CAAA;AAAA,SACd;AAAA,OACJ;AAAA,KAXL,CAAA;AAaA,IAAMjK,MAAAA,OAAAA,GAAU1I,UAAW+S,CAAAA,QAAAA,EAAU,GAAX,CAAA,CAAA;AAE1B,IAAA,OAAO,MAAM;AACTpK,MAAAA,YAAAA,CAAaD,OAAD,CAAA,CAAA;AAAA,KADhB,CAAA;AAAA,GAGH,EACD,CAACkK,aAAD,CArBK,CAAA,CAAA;AAwBTjyB,EAAAA,SAAAA,CACI,MAAM;AACE,IAAA,IAAA,CAACktB,WAAWmG,eAAoBpB,KAAAA,aAAAA;AAChCC,MAAAA,gBAAAA,CAAiB7nB,UAAUxM,KAAawM,CAAAA,IAAAA,KAAAA,KAAU,OAAOA,KAAM4M,CAAAA,QAAAA,KAAa,IAA5D,CAAA,CAAA;AAAA,GAExB,EAAA,CAAC5M,KAAO6iB,EAAAA,OAAR,CALK,CAAA,CAAA;AAQHjO,EAAAA,MAAAA,GAAAA,GAAM5hB,eAAMmwB,SAAlB,EAAA,CAAA;AACM1b,EAAAA,MAAAA,UAAU+f,cAAhB,EAAA,CAAA;AAEA7xB,EAAAA,SAAAA,CAAU,MAAM;AACZ,IAAIif,IAAAA,GAAAA,CAAI1Z,WAAW2nB,OAAS,EAAA;AACxBjO,MAAAA,GAAAA,CAAI1Z,QAAQwoB,KAAM,CAAA;AAAA,QAAEC,aAAe,EAAA,IAAA;AAAA,OAAnC,CAAA,CAAA;AAAA,KACH;AAAA,GACF,EAAA,CAACd,OAASjO,EAAAA,GAAV,CAJM,CAAA,CAAA;AAMHuU,EAAAA,MAAAA,MAAS,GAAA,uBAAA,CAAA;AAEf,EAAA,2BACK,KAAD,EAAA;AAAA,IACI,QAAUvU,EAAAA,GAAAA;AAAAA,IACV,KAAO,EAAA;AAAA,MACH9Y,KAAO,EAAA,MAAA;AAAA,MACPiS,QAAU,EAAA,OAAA;AAAA,MACVE,UAAY,EAAA,OAAA;AAAA,MACZwL,UAAY,EAAA,OAAA;AAAA,MACZkI,MAAQ,EAAA,OAAA;AAAA,MACR8F,MAAQ,EAAA,MAAA;AAAA,MACRC,OAAS,EAAA,MAAA;AAAA,MACT3N,OAAS,EAAA,CAAA;AAAA,KAVjB;AAAA,IAaI,UAAY,EAAA;AAAA,MACRmF,KAAO,EAAA;AAAA,QACHgB,SAAW6B,EAAAA,KAAAA;AAAAA,OADR;AAAA,KAdf;AAAA,IAkBI,QAAA;AAAA,IACA,SAAWpa,EAAAA,IAAAA,CAAKF,OAAQmO,CAAAA,KAAAA,EAAOnO,QAAQqhB,WAAxB,CAAA;AAAA,IACf,gBApBJ,EAAA,IAAA;AAAA,IAqBI,OAAOlB,aAAiB,IAAA,EAAA;AAAA,IACxB,MAAA;AAAA,IACA,UAAW9I,CAAQ,GAAA,KAAA;AACf,MAAA,MAAMqJ,WAAWrJ,GAAIlhB,CAAAA,MAAAA,CAAOoC,KAAMzI,CAAAA,OAAAA,CAAQ,KAAK,GAA9B,CAAA,CAAA;AACb4wB,MAAAA,IAAAA,SAAS1xB,MAAW,KAAA,CAAA;AACpBoxB,QAAAA,gBAAAA,CAAiB,IAAD,CAAA,CAAA;AACpB,MAAA,IAAIsB,OAAOrE,IAAKqD,CAAAA,QAAZ,CAAyBA,IAAAA,QAAAA,CAASlyB,WAAW,GAApB,CAAA;AACzB4xB,QAAAA,gBAAAA,CAAiBM,QAAD,CAAA,CAAA;AAAA,KACvB;AAAA,GA9BT,CAAA,CAAA;AAiCH;;ACrHM,SAAA,WAAA,CAAqBr1B,KAMzB,EAAA;AACO,EAAA,MAAA;AAAA,IAAEuM,QAAAA;AAAAA,IAAUuoB,aAAAA;AAAAA,IAAeD,WAAAA;AAAAA,IAAa9E,OAAAA;AAAAA,GAAY/vB,GAAAA,KAAAA,CAAAA;AAEpD8hB,EAAAA,MAAAA,GAAAA,GAAM5hB,eAAMmwB,SAAlB,EAAA,CAAA;AACAxtB,EAAAA,SAAAA,CAAU,MAAM;AACZ,IAAIif,IAAAA,GAAAA,CAAI1Z,WAAW2nB,OAAS,EAAA;AACxBjO,MAAAA,GAAAA,CAAI1Z,QAAQwoB,KAAM,CAAA;AAAA,QAAEC,aAAe,EAAA,IAAA;AAAA,OAAnC,CAAA,CAAA;AAAA,KACH;AAAA,GACF,EAAA,CAACd,OAASjO,EAAAA,GAAV,CAJM,CAAA,CAAA;AAMT,EAAA,2BACK,MAAD,EAAA;AAAA,IACI,QAAUA,EAAAA,GAAAA;AAAAA,IACV,KAAO,EAAA,WAAA;AAAA,IACP,OAAA,EAASzb,QAAQyuB,aAAD,CAAA;AAAA,IAChB,QAAA;AAAA,IACA,UAAW9I,CAAQ,GAAA,KAAA;AACT9e,MAAAA,MAAAA,KAAAA,GAAQ8e,IAAIlhB,MAAOwrB,CAAAA,OAAAA,CAAAA;AACzBzB,MAAAA,WAAAA,CAAY3nB,KAAD,CAAA,CAAA;AAAA,KACd;AAAA,GATT,CAAA,CAAA;AAYH;;ACtB6B4G,UAAkBC,CAAAA,CAAAA,KAAAA,KAASC,YAAa,CAAA;AAAA,EAC9DxH,MAAQ,EAAA;AAAA,IACJ0H,OAAS,EAAA,MAAA;AAAA,GADL;AADsD,CAAD,CAA7B,EAAA;AAOjC,SAAA,cAAA,CAAwBlU,KAS5B,EAAA;AAEO,EAAA,MAAA;AAAA,IACFuM,QAAAA;AAAAA,IACAkI,KAAAA;AAAAA,IACAqgB,aAAAA;AAAAA,IACAS,sBAAAA;AAAAA,IACAV,WAAAA;AAAAA,GACA70B,GAAAA,KAAAA,CAAAA;AAEJ,EAAM01B,MAAAA,UAAAA,GAAa3tB,YAAY,MAAM;AACjCwtB,IAAAA,sBAAAA,CAAuB,IAAD,CAAA,CAAA;AAAA,GADI,EAE3B,EAF2B,CAAA,CAAA;AAI9B,EAAMI,MAAAA,WAAAA,GAAc5tB,YAAY,MAAM;AAClCwtB,IAAAA,sBAAAA,CAAuB,KAAD,CAAA,CAAA;AAAA,GADK,EAE5B,EAF4B,CAAA,CAAA;AAI/B,EAAA,2BACK,GAAD,EAAA;AAAA,IAAK,OAAS,EAAA,MAAA;AAAA,IAAQ,UAAY,EAAA,QAAA;AAAA,IAAU,KAAO,EAAA,MAAA;AAAA,IAAnD,QAAA,sBAEK,cAAD,EAAA;AAAA,MACI,OAAOT,aAAiB,IAAA,IAAA;AAAA,MACxB,SAFJ,EAAA,IAAA;AAAA,MAGI,QAAA;AAAA,MACA,QAAA,EAAU,CAACyB,SAA2B,KAAA;AAClC1B,QAAAA,WAAAA,CAAY0B,SAAD,CAAA,CAAA;AAAA,OALnB;AAAA,MAOI,WAAA,EAAcC,CACV,MAAA,qBAAAx1B,GAAA,CAACy1B;QAAiBD,GAAAA,MAAAA;AAAAA,QACJ,OAAS,EAAA,UAAA;AAAA,QACT,KAAA,EAAOnwB,QAAQoO,KAAD,CAAA;AAAA,QACd,KAAO,EAAA;AAAA,UACH6G,MAAQ,EAAA,MAAA;AAAA,SAJ1B;AAAA,QAMc,UAAY,EAAA;AAAA,UAAA,GACLkb,MAAOE,CAAAA,UAAAA;AAAAA,UACVtK,KAAO,EAAA;AAAA,YAAEnR,QAAU,EAAA,EAAA;AAAA,WAFX;AAAA,UAGR0b,gBAAkB,EAAA,IAAA;AAAA,SAHV;AAAA,OAdlC,CAAA;AAAA,MAoBI,mBAAqB,EAAA;AAAA,QACjBvK,KAAO,EAAA;AAAA,UACHnR,QAAU,EAAA,OAAA;AAAA,UACVK,MAAQ,EAAA,EAAA;AAAA,SAFL;AAAA,OArBf;AAAA,MA0BI,MAAQoa,EAAAA,UAAAA;AAAAA,MACR,OAASC,EAAAA,WAAAA;AAAAA,KA3Bb,CAAA;AAAA,GAHR,CAAA,CAAA;AAkCH;;AC3DM,SAAA,mBAAA,CAA6B31B,KAQjC,EAAA;AAEO,EAAA,MAAA;AAAA,IACFqF,IAAAA;AAAAA,IACAyvB,aAAAA;AAAAA,IACAS,sBAAAA;AAAAA,IACAppB,QAAAA;AAAAA,IACA0oB,WAAAA;AAAAA,IACAva,IAAAA;AAAAA,IACA/N,QAAAA;AAAAA,GACAvM,GAAAA,KAAAA,CAAAA;AAEA42B,EAAAA,IAAAA,YAAAA,CAAAA;AACJ,EAAIC,IAAAA,WAAAA,CAAAA;AACJ,EAAI1qB,IAAAA,QAAAA,CAASE,aAAa,WAAa,EAAA;AACnCuqB,IAAezqB,YAAAA,GAAAA,QAAAA,CAAAA;AACf0qB,IAAc,WAAA,GAAA,KAAA,CAAA;AAAA,aACP1qB,QAASE,CAAAA,QAAAA,KAAa,WAAWF,QAASiC,CAAAA,EAAAA,EAAI/B,aAAa,WAAa,EAAA;AAC/EuqB,IAAAA,YAAAA,GAAezqB,QAASiC,CAAAA,EAAAA,CAAAA;AACxByoB,IAAc,WAAA,GAAA,IAAA,CAAA;AAAA,GACX,MAAA;AACGjzB,IAAAA,MAAAA,MAAM,sCAAD,CAAA,CAAA;AAAA,GACd;AAED,EAAI,IAAA,OAAOgzB,YAAatzB,CAAAA,IAAAA,KAAS,QAAU,EAAA;AACjCM,IAAAA,MAAAA,MAAM,gDAAD,CAAA,CAAA;AAAA,GACd;AAED,EAAA,MAAMN,OAAOszB,YAAatzB,CAAAA,IAAAA,CAAAA;AAEpB,EAAA,MAAA,CAACmZ,OAAAA,EAASC,UAAcnc,CAAAA,GAAAA,QAAAA,CAAS,KAAD,CAAA,CAAA;AAChC,EAAA,MAAA,CAACR,IAAAA,EAAM01B,OAAWl1B,CAAAA,GAAAA,QAAAA,CAAkB,KAAV,CAAA,CAAA;AAE1Ba,EAAAA,MAAAA,oBAAoB0kB,aAA1B,EAAA,CAAA;AACA,EAAME,MAAAA,kBAAAA,GAAqB5kB,iBAAkBoP,CAAAA,qBAAAA,CAAsBlN,IAAxC,CAAA,CAAA;AACvB,EAAA,IAAA,CAAC0iB,kBAAoB,EAAA;AACrB,IAAMpiB,MAAAA,KAAAA,CAAO,iEAAgEN,IAAlE,CAAA,CAAA,CAAA,CAAA;AAAA,GACd;AACKoyB,EAAAA,MAAAA,UAAAA,GAAa3tB,WAAY,CAAA,CAACgjB,KAA4B,KAAA;AACxD,IAAIxe,IAAAA,QAAAA;AACA,MAAA,OAAA;AACJ,IAAIwe,IAAAA,KAAAA,CAAMmG,UAAU,CAAG,EAAA;AACnBnG,MAAAA,KAAAA,CAAM3P,eAAN,EAAA,CAAA;AACAma,MAAAA,sBAAAA,CAAuB,IAAD,CAAA,CAAA;AACtBE,MAAAA,OAAAA,CAAQ,IAAD,CAAA,CAAA;AAAA,KACV;AAAA,GACF,EAAA,CAAClpB,QAAUgpB,EAAAA,sBAAX,CAR2B,CAAA,CAAA;AAU9B,EAAMI,MAAAA,WAAAA,GAAc5tB,YAAY,MAAM;AAClCwtB,IAAAA,sBAAAA,CAAuB,KAAD,CAAA,CAAA;AACtBE,IAAAA,OAAAA,CAAQ,KAAD,CAAA,CAAA;AAAA,GACR,EAAA,CAACF,sBAAwBE,EAAAA,OAAzB,CAH4B,CAAA,CAAA;AAKzBqB,EAAAA,MAAAA,gBAAAA,GAAmB/uB,WAAY,CAAA,CAACgG,MAAwB,KAAA;AAC1D8mB,IAAAA,WAAAA,CAAY9mB,MAASgpB,GAAAA,gBAAAA,CAAiBhpB,MAAD,CAAA,GAAW,IAArC,CAAA,CAAA;AACXwnB,IAAAA,sBAAAA,CAAuB,KAAD,CAAA,CAAA;AACtBE,IAAAA,OAAAA,CAAQ,KAAD,CAAA,CAAA;AAAA,GACR,EAAA,CAACZ,WAAaU,EAAAA,sBAAAA,EAAwBE,OAAtC,CAJiC,CAAA,CAAA;AAMpC,EAAMuB,MAAAA,0BAAAA,GAA6BjvB,WAAY,CAAA,CAAC0W,QAA4B,KAAA;AACxEoW,IAAAA,WAAAA,CAAYpW,SAASxZ,GAAKmB,CAAAA,CAAAA,CAAAA,KAAM2wB,gBAAiB3wB,CAAAA,CAAD,CAApC,CAAD,CAAA,CAAA;AAAA,GACd,EAAE,CAACyuB,WAAD,CAF2C,CAAA,CAAA;AAI9C,EAAMoC,MAAAA,WAAAA,GAAcnC,gBACblvB,KAAMC,CAAAA,OAAAA,CAAQivB,aAAd,CACGA,GAAAA,aAAAA,CAAc7vB,IAAK6c,CAAQA,GAAAA,KAAAA,GAAAA,CAAI7X,EAA/B,CACA6qB,GAAAA,aAAAA,CAAc7qB,KAAK,CAAC6qB,aAAAA,CAAc7qB,EAAf,CAAqB,GAAA,KAC5C,EAJN,CAAA;AAKA,EAAMitB,MAAAA,WAAAA,GAAc,CAACpC,aAAkBlvB,IAAAA,KAAAA,CAAMC,QAAQivB,aAAd,CAAA,IAAgCA,cAAcnxB,MAAW,KAAA,CAAA,CAAA;AAEhG,EAAqC,SAAA,yBAAA,GAAA;AACjC,IAAA,IAAImxB,aAAyB9qB,YAAAA,eAAAA;AACzB,MAAA,2BAAQ,gBAAD,EAAA;AAAA,QAAkB,IAAA;AAAA,QACA,OAAA,EAASuC,WAAW7L,KAAYg1B,CAAAA,GAAAA,UAAAA;AAAAA,QAChC,KAAOZ,EAAAA,aAAAA;AAAAA,QACP,QAAU8B,EAAAA,YAAAA;AAAAA,QACV,OAAA;AAAA,QACA,IAAA,EAAMO,mBAAmB7c,IAAD,CAAA;AAAA,OAL1C,CAAA,CAAA;AAAA;AAQP,MAAA,2BAAQ,SAAD,EAAA;AAAA,QAAW,KAAO,EAAA,yBAAA;AAAA,OAAzB,CAAA,CAAA;AAAA,GACP;AAED,EAAuC,SAAA,2BAAA,GAAA;AACnC,IAAI1U,IAAAA,KAAAA,CAAMC,QAAQivB,aAAd,CAAA;AACA,MAAA,2BAAOra,QAAA,EAAA;AAAA,QACFqa,UAAAA,aAAc7vB,CAAAA,GAAAA,CAAI,CAACyG,CAAGoN,EAAAA,KAAAA,yBAClB,GAAD,EAAA;AAAA,UAAK,EAAI,EAAA;AAAA,YAAEse,CAAG,EAAA,GAAA;AAAA,WAAd;AAAA,UAAA,QAAA,sBAEK,gBAAD,EAAA;AAAA,YACI,IAAA,EAAO,GAAE/xB,IAAQyT,CAAAA,CAAAA,EAAAA,KAAAA,CAAAA,CAAAA,CAAAA;AAAAA,YACjB,OAAA,EAASvM,WAAW7L,KAAYg1B,CAAAA,GAAAA,UAAAA;AAAAA,YAChC,IAAM,EAAA,MAAA;AAAA,YACN,OAAA;AAAA,YACA,KAAOhqB,EAAAA,CAAAA;AAAAA,YACP,QAAUkrB,EAAAA,YAAAA;AAAAA,WANd,CAAA;AAAA,SADO,EAAA,CAAA,kBAAA,EAAoBvxB,IAAQyT,CAAAA,CAAAA,EAAAA,KAAAA,CAAAA,CADvC,CADH,CAAA;AAAA,OADE,CAAA,CAAA;AAAA;AAkBP,MAAA,2BAAQ,SAAD,EAAA;AAAA,QAAW,KAAO,EAAA,oCAAA;AAAA,OAAzB,CAAA,CAAA;AAAA,GACP;AAED,EAAA,IAAI,CAACkN,kBAAAA;AACD,IAAA,2BAAQ,SAAD,EAAA;AAAA,MAAW,KAAO,EAAA,yCAAA;AAAA,KAAzB,CAAA,CAAA;AAGA,EAAA,4BAAA,KAAA,EAAA;AAAA,IACI,YAAA,EAAc,MAAMtJ,UAAAA,CAAW,IAAD,CAAA;AAAA,IAC9B,WAAA,EAAa,MAAMA,UAAAA,CAAW,IAAD,CAAA;AAAA,IAC7B,YAAA,EAAc,MAAMA,UAAAA,CAAW,KAAD,CAAA;AAAA,IAHlC,QAAA,EAAA,CAKKoY,aAAiB,IAAA,CAAC+B,WACnBQ,IAAAA,yBAAAA,EAGCvC,EAAAA,aAAAA,IAAiB+B,WAClBS,IAAAA,2BAAAA,EAGCJ,EAAAA,WAAAA,yBACA,MAAD,EAAA;AAAA,MACI,OAASxB,EAAAA,UAAAA;AAAAA,MACT,IAAM,EAAA,OAAA;AAAA,MACN,OAAQ,EAAA,UAAA;AAAA,MACR,KAAM,EAAA,SAAA;AAAA,MACAvpB,QAAAA,EAAAA,CAAAA,OAAAA,EAAAA,QAAAA,CAAS3L,KALnB,CAAA;AAAA,KAAA,CAQC,EAAA,CAAC+L,QACFxM,IAAAA,IAAAA,wBACC,eAAD,EAAA;AAAA,MAAiB,IAAA;AAAA,MACG,WAAA;AAAA,MACA,IAAA;AAAA,MACA,kBAAA;AAAA,MACA,OAAS41B,EAAAA,WAAAA;AAAAA,MACT,0BAAA;AAAA,MACA,sBAAwBmB,EAAAA,gBAAAA;AAAAA,MACxB,iBAAmBG,EAAAA,WAAAA;AAAAA,KA/B3C,CAAA,CAAA;AAAA,GADJ,CAAA,CAAA;AAsCH;;ACrJYpjB,MAAAA,WAAAA,GAAYC,UAAsC,CAAA,CAACC,KAAkB,MAAA;AAAA,EAC9EwjB,QAAU,EAAA;AAAA,IACN1b,QAAU,EAAA,UAAA;AAAA,IACVP,MAAQ,EAAA,MAAA;AAAA,IACRsZ,OAAS,EAAA,CAAA;AAAA,IACT1gB,OAAS,EAAA,MAAA;AAAA,IACTyG,aAAe,EAAA,KAAA;AAAA,IACfE,QAAU,EAAA,MAAA;AAAA,IACViB,gBAAgB,CAAC;AAAA,MAAE0b,QAAAA;AAAAA,KAAAA,KAAeA,WAAW,OAAU,GAAA,QAAA;AAAA,IACvDrjB,UAAY,EAAA,QAAA;AAAA,GAT8D;AAAA,EAW9EsjB,UAAY,EAAA;AAAA,IACRpc,YAAc,EAAA,KAAA;AAAA,IACdwT,MAAQ,EAAA,WAAA;AAAA,IACR6I,WAAa,EAAA,aAAA;AAAA,GAd6D;AAAA,EAgB9EC,UAAY,EAAA;AAAA,IACR7Q,UAAY,EAAA,yDAAA;AAAA,IACZH,UAAY,EAAA,uKAAA;AAAA,IAEZ+Q,WAAAA,EAAa3jB,KAAMsI,CAAAA,OAAAA,CAAQkT,OAAQH,CAAAA,KAAAA;AAAAA,GApBuC;AAAA,EAsB9EwI,UAAY,EAAA;AAAA,IACRF,WAAAA,EAAa3jB,KAAMsI,CAAAA,OAAAA,CAAQ5H,KAAM2a,CAAAA,KAAAA;AAAAA,GAvByC;AAAA,EAyB9EyI,UAAY,EAAA;AAAA,IACRhJ,MAAQ,EAAA,wBAAA;AAAA,IACRxT,YAAc,EAAA,KAAA;AAAA,GA3B4D;AAAA,EA6B9Eyc,iBAAmB,EAAA;AAAA,IACftK,OAAS,EAAA,GAAA;AAAA,IACTqB,MAAQ,EAAA,iBAAA;AAAA,IACRkJ,SAAW,EAAA,YAAA;AAAA,GAhC+D;AAAA,EAkC9EC,kBAAoB,EAAA;AAAA,IAChBnc,QAAU,EAAA,UAAA;AAAA,IACVR,YAAc,EAAA,QAAA;AAAA,IACdkS,GAAK,EAAA,CAAA,CAAA;AAAA,IACLnR,KAAO,EAAA,CAAA,CAAA;AAAA,IACP6b,MAAQ,EAAA,GAAA;AAAA,IACR1e,eAAAA,EAAiBxF,KAAMsI,CAAAA,OAAAA,CAAQsK,UAAWqI,CAAAA,KAAAA;AAAAA,GAN1B;AAlC0D,CAA/C,CAAA,CAAA,CAAA;AAoD5B,SAAA,kBAAA,CAA4BhvB,KAahC,EAAA;AAEO,EAAA,MAAA;AAAA,IACFqF,IAAAA;AAAAA,IACAoP,KAAAA;AAAAA,IACAqgB,aAAAA;AAAAA,IACAvoB,QAAAA;AAAAA,IACAJ,QAAAA;AAAAA,IACAzF,QAAAA;AAAAA,IACAwxB,YAAAA;AAAAA,IACAC,WAAAA;AAAAA,IACAtD,WAAAA;AAAAA,IACAU,sBAAAA;AAAAA,GACAv1B,GAAAA,KAAAA,CAAAA;AAEJ,EAAMo4B,MAAAA,sBAAAA,GAAyBjsB,SAASE,QAAa,KAAA,OAAA,CAAA;AAE/CsX,EAAAA,MAAAA,cAAuCxX,QAASE,CAAAA,QAAAA,KAAa,QACrEF,GAAAA,QAAAA,CAASoO,QAAQoJ,WACTxX,GAAAA,QAAAA,CAASE,QAAa,KAAA,OAAA,IACvBF,SAASiC,EAAgB/B,CAAAA,QAAAA,KAAa,WAC5CF,QAASiC,CAAAA,EAAAA,CAAsBmM,QAAQoJ,WAC5BjjB,GAAAA,KAAAA,CAAAA,CAAAA;AAEV,EAAA,IAAI,CAACijB,WAAAA;AACD,IAAA,MAAM/f,MAAM,gCAAD,CAAA,CAAA;AAEf,EAAMy0B,MAAAA,eAAAA,GAAkB,CAACC,IAAe,KAAA;AAChC3U,IAAAA,IAAAA,YAAY4U,QAAU,EAAA;AACtB,MAAMA,MAAAA,QAAAA,GAAW5U,YAAY4U,QAAS,CAAA;AAAA,QAClC7xB,QAAAA;AAAAA,QACAP,MAAQ+xB,EAAAA,YAAAA;AAAAA,QACR/rB,QAAAA;AAAAA,QACAmsB,IAAAA;AAAAA,QACA3U,WAAAA;AAAAA,QACAte,IAAAA;AAAAA,OANa,CAAA,CAAA;AASb,MAAA,IAAA,CAACkzB,QAAAA,IAAYA,QAAS50B,CAAAA,MAAAA,KAAW,CAAG,EAAA;AAC9BC,QAAAA,MAAAA,MAAM,qCAAD,CAAA,CAAA;AAAA,OACd;AACD,MAAO20B,OAAAA,QAAAA,CAAAA;AAAAA,KACV;AACMD,IAAAA,OAAAA,IAAKjzB,CAAAA,IAAAA,CAAAA;AAAAA,GAhBhB,CAAA;AAmBA,EAAMmzB,MAAAA,kBAAAA,GAAqB,CAACF,IAAe,KAAA;AACnC,IAAA,IAAA,OAAO3U,YAAY8U,WAAgB,KAAA,QAAA;AACnC,MAAA,OAAO9U,WAAY8U,CAAAA,WAAAA,CAAAA;AAEvB,IAAI,IAAA,OAAO9U,WAAY8U,CAAAA,WAAAA,KAAgB,UAAY,EAAA;AAC/C,MAAMA,MAAAA,WAAAA,GAAc9U,YAAY8U,WAAY,CAAA;AAAA,QACxC/xB,QAAAA;AAAAA,QACAP,MAAQ+xB,EAAAA,YAAAA;AAAAA,QACR/rB,QAAAA;AAAAA,QACAmsB,IAAAA;AAAAA,QACA3U,WAAAA;AAAAA,QACAte,IAAAA;AAAAA,OANgB,CAAA,CAAA;AAShB,MAAA,IAAA,CAACozB,WAAAA,IAAeA,WAAY90B,CAAAA,MAAAA,KAAW,CAAG,EAAA;AACpCC,QAAAA,MAAAA,MAAM,qCAAD,CAAA,CAAA;AAAA,OACd;AACD,MAAO60B,OAAAA,WAAAA,CAAAA;AAAAA,KACV;AACDxsB,IAAAA,OAAAA,CAAQysB,KAAK,+FAAb,CAAA,CAAA;AACA,IAAO,OAAA,GAAA,CAAA;AAAA,GApBX,CAAA;AAwBA,EAAA,2BAEKC,eAAD,EAAA;AAAA,IACI,KAAO7D,EAAAA,aAAAA;AAAAA,IACP,IAAA;AAAA,IACA,QAAA;AAAA,IACA,SAAW,EAAA,KAAA;AAAA,IACX,QAAA;AAAA,IACA,UAAWO,CAAa,QAAA,KAAA;AACpBR,MAAAA,WAAAA,CACIQ,QADO,CAAA,CAAA;AAAA,KAPnB;AAAA,IAWI,eAAA;AAAA,IACA,kBAAA;AAAA,IACA,WAAA;AAAA,IACA,sBAAA;AAAA,IACA,WAAA;AAAA,GAjBR,CAAA,CAAA;AAoBH,CAAA;AA+BD,SAAuBsD,eAAA,CAAA;AAAA,EACIxsB,QAAAA;AAAAA,EACA9G,IAAAA;AAAAA,EACA6H,KAAAA;AAAAA,EACA0rB,QAAAA;AAAAA,EACAR,sBAAAA;AAAAA,EACAD,WAAaU,EAAAA,gBAAAA;AAAAA,EACbtsB,QAAAA;AAAAA,EACAusB,SAAAA;AAAAA,EACAnV,WAAAA;AAAAA,EACA0U,eAAAA;AAAAA,EACOG,kBAAAA;AAAAA,CACmB,EAAA;AAE3CtT,EAAAA,MAAAA,UAAUC,gBAAhB,EAAA,CAAA;AACM,EAAA,MAAA,CAAC1I,OAAAA,EAASC,UAAcnc,CAAAA,GAAAA,QAAAA,CAAS,KAAD,CAAA,CAAA;AAEhC43B,EAAAA,MAAAA,WAAcC,GAAAA,sBAAAA,IAA0BS,gBAAqB,KAAA,SAAA,GAAY,OAAUA,GAAAA,gBAAAA,CAAAA;AACzF,EAAA,IAAIT,sBAAwB,EAAA;AAClBpU,IAAAA,MAAAA,aAAgB7X,GAAAA,QAAAA,CAAAA;AAClB6X,IAAAA,IAAAA,cAAc5V,EAAI,EAAA;AAClB,MAAI4V,IAAAA,aAAAA,CAAc5V,EAAG/B,CAAAA,QAAAA,KAAa,QAAU,EAAA;AAClCzI,QAAAA,MAAAA,MAAM,uDAAD,CAAA,CAAA;AAAA,OACd;AAAA,KACE,MAAA;AACGA,MAAAA,MAAAA,MAAM,uDAAD,CAAA,CAAA;AAAA,KACd;AAAA,GACJ;AAED,EAAA,MAAMm1B,WAA4BpV,WAAaoV,EAAAA,QAAAA,CAAAA;AAC/C,EAAMvB,MAAAA,QAAAA,GAAWnxB,QAAQ6G,KAAD,CAAA,CAAA;AAElByH,EAAAA,MAAAA,UAAUd,WAAU,CAAA;AAAA,IAAE2jB,QAAAA;AAAAA,GAAH,CAAA,CAAA;AAEnBwB,EAAAA,MAAAA,oBAAAA,GACF9rB,KAAS,IAAA,IAAA,GACH,EADN,GAEOkrB,CACGlrB,sBAAAA,GAAAA,KAAAA,GACA,CAACA,KAAD,CAAmBjI,EAAAA,GAAAA,CAAIX,CACzB,KAAA,MAAA;AAAA,IACI2F,IAAIgvB,WADR,EAAA;AAAA,IAEI7T,wBAA0B9gB,EAAAA,KAAAA;AAAAA,IAC1By0B,QAAAA;AAAAA,IACAze,IAAM6d,EAAAA,WAAAA;AAAAA,GAPZ,CAAA,CAAA,CAAA;AAWV,EAAMe,MAAAA,YAAAA,GAAeh5B,KAAMsH,CAAAA,MAAAA,CAAiC0F,KAAvC,CAAA,CAAA;AACrB,EAAA,MAAM,CAAC4nB,aAAAA,EAAeC,gBAAoB70B,CAAAA,GAAAA,KAAAA,CAAMK,SAA6By4B,oBAAnC,CAAA,CAAA;AAEtC,EAAA,IAAA,CAACpH,OAAAA,CAAQsH,YAAa9wB,CAAAA,OAAAA,EAAS8E,KAAvB,CAA+B,EAAA;AACvCgsB,IAAAA,YAAAA,CAAa9wB,OAAU8E,GAAAA,KAAAA,CAAAA;AACvB6nB,IAAiBiE,gBAAAA,CAAAA,oBAAAA,IAAwB,EAAzB,CAAA,CAAA;AAAA,GACnB;AAED,EAAuB,SAAA,WAAA,GAAA;AACnB,IAAOjjB,OAAAA,IAAAA,CAAKojB,MAAMpjB,IAAKqjB,CAAAA,MAAAA,KAAWrjB,IAAKojB,CAAAA,KAAAA,CAAME,MAAOC,CAAAA,gBAAlB,CAA3B,CAAA,CAAA;AAAA,GACV;AAED,EAAA,SAAA,gBAAA,CAA0BC,KAA2B,EAAA;AAC1CA,IAAAA,OAAAA,KAAMzzB,CAAAA,MAAAA,CACT,CAAC4F,CAAAA,EAAGxH,CAAM,KAAA;AACC,MAAEq1B,OAAAA,CAAAA,KAAAA,CAAMt0B,GAAKyG,CAAAA,CAAAA,EAAAA,KAAMA,EAAE0Z,CAAAA,wBAAnB,CAA6CoU,CAAAA,OAAAA,CAAQ9tB,CAAE0Z,CAAAA,wBAAvD,CAAqFlhB,KAAAA,CAAAA,IAAM,CAACwH,CAAAA,CAAE0Z,8BAC3FngB,KAAAA,CAAAA,GAAAA,CAAKyG,CAAMA,EAAAA,KAAAA,EAAAA,CAAE4sB,IAAnB,CAAA,CAAyBkB,OAAQ9tB,CAAAA,CAAAA,CAAE4sB,IAAnC,CAAA,KAA6Cp0B,CAAM,IAAA,CAACwH,CAAE4sB,CAAAA,IAAAA,CAAAA,CAAAA;AAAAA,KAH7D,CAAA,CAAA;AAAA,GAMV;AAED,EAAMmB,MAAAA,cAAAA,GAAiB,CAACC,aAA0B,KAAA;AAE9C,IAAI,IAAA,CAACA,cAAc/1B,MAAU4I,IAAAA,QAAAA;AACzB,MAAA,OAAA;AAEAotB,IAAAA,IAAAA,gBAAAA,CAAAA;AACJ,IAAA,IAAIvB,sBAAwB,EAAA;AACxBuB,MAAAA,gBAAAA,GAAmB,CAAC,GAAG7E,aAAAA,EACnB,GAAI4E,aAAAA,CAAcz0B,IAAIqzB,CAAS,IAAA,MAAA;AAAA,QAC3BruB,IAAIgvB,WADuB,EAAA;AAAA,QAE3BX,IAAAA;AAAAA,QACAC,QAAAA,EAAUF,gBAAgBC,IAAD,CAAA;AAAA,QACzBS,QAAAA;AAAAA,QAJA,CADW,CAAA,CAAA;AAAA,KAOhB,MAAA;AACHY,MAAAA,gBAAAA,GAAmB,CAAC;AAAA,QAChB1vB,IAAIgvB,WADY,EAAA;AAAA,QAEhBX,MAAMoB,aAAc,CAAA,CAAA,CAAA;AAAA,QACpBnB,QAAAA,EAAUF,eAAgBqB,CAAAA,aAAAA,CAAc,CAAf,CAAA,CAAA;AAAA,QACzBX,QAAAA;AAAAA,OAJe,CAAA,CAAA;AAAA,KAMtB;AAGDY,IAAAA,gBAAAA,GAAmBC,iBAAiBD,gBAAD,CAAA,CAAA;AACnC5E,IAAAA,gBAAAA,CAAiB4E,gBAAD,CAAA,CAAA;AAAA,GAzBpB,CAAA;AA4BA,EAAA,MAAME,oBAAuB,GAAA,OAAOC,YACAx1B,EAAAA,KAAAA,EACAy0B,SAAmB,KAAA;AAE/CgB,IAAAA,IAAAA,uBAA0BD,GAAAA,YAAAA,CAAAA;AAC1BnW,IAAAA,IAAAA,YAAY2B,QAAU,EAAA;AACtByU,MAA0B,uBAAA,GAAA,MAAM7U,OAAQK,CAAAA,cAAAA,CAAeuU,YAAvB,CAAA,CAAA;AAAA,KACnC;AACGnW,IAAAA,IAAAA,YAAYqW,WAAa,EAAA;AACzBD,MAA0B,uBAAA,GAAA,MAAMpW,WAAYqW,CAAAA,WAAAA,CAAYD,uBAAxB,CAAA,CAAA;AAAA,KACnC;AAEG1E,IAAAA,IAAAA,QAAAA,CAAAA;AAEJ/wB,IAAAA,KAAAA,CAAM8gB,wBAA2B2U,GAAAA,uBAAAA,CAAAA;AACjCz1B,IAAAA,KAAAA,CAAMy0B,QAAWA,GAAAA,SAAAA,CAAAA;AACjB1D,IAAW,QAAA,GAAA,CAAC,GAAGP,aAAJ,CAAA,CAAA;AAEXO,IAAAA,QAAAA,GAAWuE,iBAAiBvE,QAAD,CAAA,CAAA;AAC3BN,IAAAA,gBAAAA,CAAiBM,QAAD,CAAA,CAAA;AAEV4E,IAAAA,MAAAA,UAAa5E,GAAAA,QAAAA,CACdvvB,MAAOM,CAAAA,CAAAA,CAAAA,KAAK,CAAC,CAACA,CAAEgf,CAAAA,wBADF,CAEdngB,CAAAA,GAAAA,CAAImB,CAAKA,CAAAA,KAAAA,CAAAA,CAAEgf,wBAFG,CAAA,CAAA;AAInB,IAAA,IAAIgT,sBAAwB,EAAA;AACxBQ,MAAAA,QAAAA,CAASqB,UAAD,CAAA,CAAA;AAAA,KACL,MAAA;AACHrB,MAASqB,QAAAA,CAAAA,UAAAA,GAAaA,UAAW,CAAA,CAAA,CAAA,GAAK,IAA9B,CAAA,CAAA;AAAA,KACX;AAAA,GA7BL,CAAA;AAgCA,EAAMC,MAAAA,OAAAA,GAAU,CAACC,+BAA4C,KAAA;AACzD,IAAA,IAAI/B,sBAAwB,EAAA;AACxB,MAAA,MAAM/C,WAA+BP,aAAchvB,CAAAA,MAAAA,CAAO4F,CAAKA,CAAAA,KAAAA,CAAAA,CAAE0Z,6BAA6B+U,+BAAzD,CAAA,CAAA;AACrCvB,MAAAA,QAAAA,CAASvD,QAASvvB,CAAAA,MAAAA,CAAO4F,CAAK,CAAA,KAAA,CAAC,CAACA,CAAAA,CAAE0Z,wBAAzB,CAAA,CAAmDngB,GAAIyG,CAAAA,CAAAA,CAAAA,KAAKA,CAAE0Z,CAAAA,wBAA9D,CAAD,CAAA,CAAA;AACR2P,MAAAA,gBAAAA,CAAiBM,QAAD,CAAA,CAAA;AAAA,KACb,MAAA;AACHuD,MAAAA,QAAAA,CAAS,IAAD,CAAA,CAAA;AACR7D,MAAAA,gBAAAA,CAAiB,EAAD,CAAA,CAAA;AAAA,KACnB;AAAA,GARL,CAAA;AAWM,EAAA,MAAA;AAAA,IACFh1B,IAAAA;AAAAA,IACAq6B,YAAAA;AAAAA,IACAC,aAAAA;AAAAA,IACAC,YAAAA;AAAAA,IACAC,YAAAA;AAAAA,IACAC,YAAAA;AAAAA,GAAAA,GACAC,WAAY,CAAA;AAAA,IACRC,QAAQ/W,WAAY+V,CAAAA,aAAAA;AAAAA,IACpBntB,QAAAA;AAAAA,IACAouB,OAAS,EAAA,IAAA;AAAA,IACTC,UAAY,EAAA,IAAA;AAAA,IACZC,MAAQpB,EAAAA,cAAAA;AAAAA,GALD,CAAA,CAAA;AASf,EAAM,MAAA;AAAA,IAAKqB,GAAAA,SAAAA;AAAAA,GAAAA,GAAcV,YAAzB,EAAA,CAAA;AAEA,EAAMW,MAAAA,QAAAA,GAAW3C,yBACX,sDACA,GAAA,+CAAA,CAAA;AAEN,EAAM4C,MAAAA,cAAAA,GAAiB5C,sBAChBjsB,GAAAA,QAAAA,CAAqCiC,EACtCjC,GAAAA,QAAAA,CAAAA;AAGF,EAAA,4BAAC,GAAD,EAAA;AAAA,IAAS2uB,GAAAA,SAAAA;AAAAA,IAEJ,YAAA,EAAc,MAAMpe,UAAAA,CAAW,IAAD,CAAA;AAAA,IAC9B,WAAA,EAAa,MAAMA,UAAAA,CAAW,IAAD,CAAA;AAAA,IAC7B,YAAA,EAAc,MAAMA,UAAAA,CAAW,KAAD,CAAA;AAAA,IAC9B,SAAA,EAAW7H,IAAKF,CAAAA,OAAAA,CAAQ4iB,QAAU,EAAA;AAAA,MAAA,CAC7B5iB,QAAQ8iB,UAAa6C,GAAAA,YAAAA;AAAAA,MAAAA,CACrB3lB,QAAQijB,UAAa4C,GAAAA,YAAAA;AAAAA,MAAAA,CACrB7lB,QAAQgjB,UAAa4C,GAAAA,YAAAA;AAAAA,KAHX,CAAA;AAAA,IAOhB,QAAA,EAAA,iBAAAv5B,GAAA,CAAA,OAAA,EAAA;AAAA,MAAO,SAAA;AAAA,MAAA,GAA0Bq5B,aAAa,EAAA;AAAA,KAZlD,CAcKvF,EAAAA,aAAAA,CAAc7vB,GAAI,CAAA,CAACX,OAAOwU,KAAU,KAAA;AACjC,MAAImiB,IAAAA,KAAAA,CAAAA;AACA32B,MAAAA,IAAAA,MAAM8gB,wBAA0B,EAAA;AAChC6V,QAAAA,KAAAA,uBACKC,oBAAD,EAAA;AAAA,UAEI,QAAUF,EAAAA,cAAAA;AAAAA,UACV,QAAA;AAAA,UACA,OAAO12B,KAAM8gB,CAAAA,wBAAAA;AAAAA,UACb,OAAA;AAAA,UACA,IAAM+S,EAAAA,WAAAA;AAAAA,SALA,EAAA,mBAAkBrf,KAD5B,CAAA,CAAA,CAAA,CAAA;AAAA,OAQP,MAAA,IAAUxU,MAAMg0B,IAAM,EAAA;AACnB2C,QAAAA,KAAAA,uBACKE,uBAAD,EAAA;AAAA,UAEI,KAAA;AAAA,UACA,QAAA;AAAA,UACA,WAAA,EAAa3C,kBAAmBl0B,CAAAA,KAAAA,CAAMg0B,IAAP,CAAA;AAAA,UAC/B,oBAAA;AAAA,UACA,IAAMH,EAAAA,WAAAA;AAAAA,SALA,EAAA,oBAAmBrf,KAD7B,CAAA,CAAA,CAAA,CAAA;AAAA,OASP;AAED,MAAOmiB,OAAAA,KAAAA,CAAAA;AAAAA,KAzBV,CAAA,EA6BA,CAAC/tB,KAAAA,wBAAU,GAAD,EAAA;AAAA,MACP,EAAI,EAAA;AAAA,QACAkZ,QAAU,EAAA,CAAA;AAAA,QACVgR,CAAG,EAAA,CAAA;AAAA,QACH9d,QAAU,EAAA,GAAA;AAAA,OAJP;AAAA,MAMP,OAASvZ,EAAAA,IAAAA;AAAAA,MANF,QAAA,sBAON,UAAD,EAAA;AAAA,QACI,EAAI,EAAA;AAAA,UACAoW,OAAQpC,CAAWA,KAAAA,KAAAA,KAAAA,CAAMsI,OAAQna,CAAAA,IAAAA,KAAS,UAAU,MAAS,GAAA,MAAA;AAAA,SAFrE;AAAA,QAII,OAAS,EAAA,OAAA;AAAA,QACT,KAAO,EAAA,QAAA;AAAA,QACN64B,QAAAA,EAAAA,QAAAA;AAAAA,OANL,CAAA;AAAA,KAPO,CAAA,EAiBVte,OACD,oBAAAzb,GAAA,CAAC,UAAD,EAAA;AAAA,MACI,KAAO,EAAA,SAAA;AAAA,MACP,IAAM,EAAA,OAAA;AAAA,MACN,OAASjB,EAAAA,IAAAA;AAAAA,MACT,EAAI,EAAA;AAAA,QACA8b,QAAU,EAAA,UAAA;AAAA,QACVM,MAAQ,EAAA,CAAA;AAAA,QACRC,KAAO,EAAA,CAAA;AAAA,OAPf;AAAA,MAAA,QAAA,sBASK,QAAD,EAAA;AAAA,QAAU,EAAI,EAAA;AAAA,UACVpT,KAAO,EAAA,EAAA;AAAA,UACPsS,MAAQ,EAAA,EAAA;AAAA,UACR8f,IAAM,EAAA,MAAA;AAAA,SAHI;AAAA,OAAd,CAAA;AAAA,KAtER,CAAA,CAAA;AAAA,GADJ,CAAA,CAAA;AAoFH,CAAA;AAaqC,SAAAD,uBAAA,CAAA;AAAA,EACI1C,WAAAA;AAAAA,EACAn0B,KAAAA;AAAAA,EACAy0B,QAAAA;AAAAA,EACAc,oBAAAA;AAAAA,EACAvf,IAAAA;AAAAA,CACuB,EAAA;AAEvD4K,EAAAA,MAAAA,UAAUC,gBAAhB,EAAA,CAAA;AAEMkW,EAAAA,MAAAA,kBAAkB9Z,qBAAxB,EAAA,CAAA;AAEM,EAAA,MAAA,CAAC9M,KAAAA,EAAO6mB,QAAYp7B,CAAAA,GAAAA,KAAAA,CAAMK,QAAhC,EAAA,CAAA;AACA,EAAA,MAAM,CAACgR,OAAAA,EAASwD,UAAc7U,CAAAA,GAAAA,KAAAA,CAAMK,SAAkB,KAAxB,CAAA,CAAA;AAC9B,EAAMg7B,MAAAA,OAAAA,GAAUr7B,KAAMsH,CAAAA,MAAAA,CAAO,KAAb,CAAA,CAAA;AAEhB,EAAA,MAAMg0B,MAASzzB,GAAAA,WAAAA,CAAY,CAACuwB,IAAAA,EAAYC,QAAsB,KAAA;AAE1D+C,IAAAA,QAAAA,CAAS56B,KAAD,CAAA,CAAA,CAAA;AACRqU,IAAAA,UAAAA,CAAW,IAAD,CAAA,CAAA;AAEVmQ,IAAAA,OAAAA,CAAQuW,UAAW,CAAA;AAAA,MAAEnD,IAAAA;AAAAA,MAAMC,QAAAA;AAAAA,MAAUj1B,IAAMm1B,EAAAA,WAAAA;AAAAA,MAAaM,QAAAA;AAAAA,KAAxD,CACKjpB,CAAAA,IAAAA,CAAK,OAAO;AAAA,MAAExM,IAAAA;AAAAA,KAAW,KAAA;AACtB2I,MAAAA,OAAAA,CAAQC,MAAM,mBAAd,CAAA,CAAA;AACA,MAAM2tB,MAAAA,oBAAAA,CAAqBv2B,IAAMgB,EAAAA,KAAAA,EAAOy0B,QAAd,CAAA,CAAA;AAC1B,MAAA,IAAIwC,OAAQnzB,CAAAA,OAAAA;AACR2M,QAAAA,UAAAA,CAAW,KAAD,CAAA,CAAA;AAAA,KALtB,CAOKhF,CAAAA,KAAAA,CAAO3J,CAAM,CAAA,KAAA;AACV6F,MAAQwI,OAAAA,CAAAA,KAAAA,CAAM,gBAAgBrO,CAA9B,CAAA,CAAA;AACIm1B,MAAAA,IAAAA,QAAQnzB,OAAS,EAAA;AACjBkzB,QAAAA,QAAAA,CAASl1B,EAAEzF,OAAH,CAAA,CAAA;AACRoU,QAAAA,UAAAA,CAAW,KAAD,CAAA,CAAA;AAAA,OACb;AACDsmB,MAAAA,eAAAA,CAAgBt7B,IAAK,CAAA;AAAA,QACjBc,IAAM,EAAA,OAAA;AAAA,QACNL,KAAO,EAAA,sBAAA;AAAA,QACPG,SAASyF,CAAEzF,CAAAA,OAAAA;AAAAA,OAHf,CAAA,CAAA;AAAA,KAbR,CAAA,CAAA;AAAA,GAmBH,EAAE,CAAC2D,KAAOy0B,EAAAA,QAAAA,EAAUc,sBAAsBwB,eAAiBnW,EAAAA,OAAAA,EAASuT,WAAlE,CAxBuB,CAAA,CAAA;AA0B1B51B,EAAAA,SAAAA,CAAU,MAAM;AACZ04B,IAAAA,OAAAA,CAAQnzB,OAAU,GAAA,IAAA,CAAA;AAClB,IAAA,IAAI9D,KAAMg0B,CAAAA,IAAAA;AACNkD,MAAOl3B,MAAAA,CAAAA,KAAAA,CAAMg0B,IAAMh0B,EAAAA,KAAAA,CAAMi0B,QAAnB,CAAA,CAAA;AACV,IAAA,OAAO,MAAM;AACTgD,MAAAA,OAAAA,CAAQnzB,OAAU,GAAA,KAAA,CAAA;AAAA,KADtB,CAAA;AAAA,KAGD,CAAC9D,KAAAA,CAAMg0B,MAAMh0B,KAAMi0B,CAAAA,QAAAA,EAAUiD,MAA7B,CAPM,CAAA,CAAA;AAST,EAAMzf,MAAAA,SAAAA,GAAY5J,QAAQ,MAAMwK,mBAAAA,CAAoBrC,IAAD,CAAQ,EAAA,CAACA,IAAD,CAAlC,CAAA,CAAA;AAEzB,EAAA,4BAEK,GAAD,EAAA;AAAA,IAAK,CAAG,EAAA,CAAA;AAAA,IAAG,EAAI,EAAA;AAAA,MACXtR,KAAO+S,EAAAA,SAAAA;AAAAA,MACPT,MAAQS,EAAAA,SAAAA;AAAAA,KAFZ;AAAA,IAKKxK,QAAAA,EAAAA,CAAAA,OAAW,oBAAAvQ,GAAA,CAAC,QAAD,EAAA;AAAA,MAAU,OAAQ,EAAA,aAAA;AAAA,MAAc,EAAI,EAAA;AAAA,QAC5CgI,KAAO+S,EAAAA,SAAAA;AAAAA,QACPT,MAAQS,EAAAA,SAAAA;AAAAA,OAFoC;AAAA,KALpD,CAAA,EAUKtH,KAAS,oBAAA1T,IAAA,CAAA,GAAA,EAAA;AAAA,MAAA,QAAA,EAAA,CAAA,wBAAA,EAA0B0T,KAA1B,CAAA;AAAA,KAVd,CAAA,CAAA;AAAA,GAFJ,CAAA,CAAA;AAkBH,CAAA;AAUkC,SAAAymB,oBAAA,CAAA;AAAA,EACI/uB,QAAAA;AAAAA,EACAe,KAAAA;AAAAA,EACAoN,IAAAA;AAAAA,CACwB,EAAA;AAE3D,EAAA,2BACK,GAAD,EAAA;AAAA,IACI,CAAG,EAAA,CAAA;AAAA,IACH,QAAU,EAAA,UAAA;AAAA,IAGTpN,QAAAA,EAAAA,KACD,oBAAAlM,GAAA,CAAC,aAAD,EAAA;AAAA,MAAA,QAAA,sBACK,gBAAD,EAAA;AAAA,QAAkB,KAAA;AAAA,QACA,QAAA;AAAA,QACA,IAAA;AAAA,OAFlB,CAAA;AAAA,KADJ,CAAA;AAAA,GAPR,CAAA,CAAA;AAiBH;;ACvgBD,MAAM06B,4BAA4B,CAAoB;AAAA,EACsCrM,QAAAA;AAAAA,EACAU,OAAAA;AAAAA,EACA1qB,IAAAA;AAAAA,EACAkwB,sBAAAA;AAAAA,EACAoG,UAAAA;AAAAA,EACAC,aAAAA;AAAAA,EACAzL,MAAAA;AAAAA,EACAD,SAAAA;AAAAA,EACAhjB,KAAAA;AAAAA,EACAf,QAAAA;AAAAA,EACA0B,UAAAA;AAAAA,EACAyM,IAAAA;AAAAA,EACA2U,KAAAA;AAAAA,EACAjmB,KAAAA;AAAAA,EACAsS,MAAAA;AAAAA,EACA5U,QAAAA;AAAAA,EACAwxB,YAAAA;AAAAA,CAC8C,KAAA;AAEhI,EAAA,MAAA,CAACpD,aAAAA,EAAeC,gBAAoBx0B,CAAAA,GAAAA,QAAAA,CAAqB2M,KAAb,CAAA,CAAA;AAElD2uB,EAAwB,oBAAA,CAAA;AAAA,IACpB1vB,QAAAA;AAAAA,IACAe,KAAO4nB,EAAAA,aAAAA;AAAAA,IACPlU,QAAUmU,EAAAA,gBAAAA;AAAAA,GAHM,CAAA,CAAA;AAMd,EAAA,MAAA,CAACtgB,KAAO6mB,EAAAA,QAAAA,CAAAA,GAAY/6B,QAA1B,EAAA,CAAA;AACM,EAAA,MAAA,CAAC+uB,KAAAA,EAAOwM,QAAYv7B,CAAAA,GAAAA,QAAAA,CAAkB,KAAV,CAAA,CAAA;AAE5Bw7B,EAAAA,MAAAA,WAAc11B,GAAAA,OAAAA,CAAQ8F,QAASoO,CAAAA,MAAAA,EAAQyhB,KAAlB,CAAA,CAAA;AACrBC,EAAAA,MAAAA,aAAgB51B,GAAAA,OAAAA,CAAQ8F,QAASoO,CAAAA,MAAAA,EAAQkN,OAAlB,CAAA,CAAA;AAC7B,EAAMrb,MAAAA,QAAAA,GAAW8vB,WAAW/vB,QAAD,CAAA,CAAA;AAC3B,EAAA,MAAM6jB,kBAAsC,OAAO7jB,QAAAA,CAASI,aAAa,QAAWJ,GAAAA,QAAAA,CAASI,SAAS4vB,eAAkBz7B,GAAAA,KAAAA,CAAAA,CAAAA;AACxH,EAAM6L,MAAAA,QAAAA,GAAWlG,OAAQ8F,CAAAA,QAAAA,CAASI,QAAV,CAAA,CAAA;AAExB,EAAM0pB,MAAAA,MAAAA,GAASluB,YAAY,MAAM;AAC7B4zB,IAAAA,UAAAA,CAAW,KAAD,CAAA,CAAA;AAAA,GADY,EAEvB,EAFuB,CAAA,CAAA;AAI1B94B,EAAAA,SAAAA,CACI,MAAM;AACEqK,IAAAA,IAAAA,UAAU4nB,aAAe,EAAA;AACzBC,MAAAA,gBAAAA,CAAiB7nB,KAAD,CAAA,CAAA;AAAA,KACnB;AAAA,GACJ,EACD,CAACA,KAAD,CANK,CAAA,CAAA;AASTrK,EAAAA,SAAAA,CACI,MAAM;AACF,IAAA,IAAI,CAAC+uB,OAAAA,CAAQ1kB,KAAO4nB,EAAAA,aAAR,CAAwB,EAAA;AAChCgH,MAAAA,QAAAA,CAAS,KAAD,CAAA,CAAA;AACRjuB,MAAAA,UAAAA,CACKuuB,QAAStH,CAAAA,aADd,CAEKhlB,CAAAA,IAAAA,CAAK,MAAM;AACRwrB,QAAAA,QAAAA,CAAS56B,KAAD,CAAA,CAAA,CAAA;AACR,QAAA,IAAIk7B,aAAe,EAAA;AACfA,UAAc,aAAA,CAAA;AAAA,YACV1uB,KAAO4nB,EAAAA,aAAAA;AAAAA,YACPzvB,IAAAA;AAAAA,YACAi2B,QAAAA;AAAAA,YACAQ,QAAAA;AAAAA,WAJS,CAAA,CAAA;AAAA,SAMhB;AAAA,OAXT,CAaK/rB,CAAAA,KAAAA,CAAO3J,CAAM,CAAA,KAAA;AACV6F,QAAAA,OAAAA,CAAQwI,MAAMrO,CAAd,CAAA,CAAA;AACAk1B,QAAAA,QAAAA,CAASl1B,CAAD,CAAA,CAAA;AAAA,OAfhB,CAAA,CAAA;AAAA,KAiBH;AAAA,GACJ,EACD,CAAC0uB,aAAD,CAvBK,CAAA,CAAA;AA0BHD,EAAAA,MAAAA,WAAAA,GAAc9sB,WAChB,CAAA,CAACstB,QAAyB,KAAA;AAElBnnB,IAAAA,IAAAA,YAAAA,CAAAA;AACAmnB,IAAAA,IAAAA,aAAa30B,KAAW,CAAA,EAAA;AACxBwN,MAAe,YAAA,GAAA,IAAA,CAAA;AAAA,KACZ,MAAA;AACHA,MAAemnB,YAAAA,GAAAA,QAAAA,CAAAA;AAAAA,KAClB;AACDN,IAAAA,gBAAAA,CAAiB7mB,YAAD,CAAA,CAAA;AAAA,GATO,EAW3B,EAX2B,CAAA,CAAA;AAc/B,EAAImuB,IAAAA,cAAAA,CAAAA;AACApM,EAAAA,IAAAA,WAAc,GAAA,KAAA,CAAA;AACdG,EAAAA,IAAAA,cAAiB,GAAA,KAAA,CAAA;AACjBrB,EAAAA,IAAAA,aAAgB,GAAA,KAAA,CAAA;AAChBI,EAAAA,IAAAA,UAAa,GAAA,KAAA,CAAA;AAEb,EAAA,IAAA,CAAC/iB,QAAY,IAAA,CAAC2vB,WAAgB,KAAA,CAACE,iBAAiB5M,QAAW,CAAA,EAAA;AACrDiN,IAAAA,MAAAA,qBAAsBnwB,QAASE,CAAAA,QAAAA,KAAa,QAAaF,IAAAA,QAAAA,CAA4BoO,QAAQoJ,WAC9FxX,IAAAA,QAAAA,CAASE,QAAa,KAAA,OAAA,IAAYF,SAA2BiC,EAAI/B,EAAAA,QAAAA,KAAa,QAAcF,IAAAA,QAAAA,CAA2BiC,IAAuBmM,MAAQoJ,EAAAA,WAAAA,CAAAA;AAC3J,IAAA,IAAI2Y,kBAAoB,EAAA;AACpBD,MAAAA,cAAAA,uBAAkB,kBAAD,EAAA;AAAA,QAAoB,KAAA;AAAA,QACA,QAAA;AAAA,QACA,OAAA;AAAA,QACA,QAAA;AAAA,QACA,QAAA;AAAA,QACA,YAAA;AAAA,QACA,aAAA;AAAA,QACA,WAAA,EAAalF,mBAAmB7c,IAAD,CAAA;AAAA,QAC/B,WAAA;AAAA,QACA,IAAA;AAAA,QACA,MAAA;AAAA,QACA,sBAAA;AAAA,OAXrC,CAAA,CAAA;AAaA8V,MAAiB,cAAA,GAAA,IAAA,CAAA;AACjBjB,MAAa,UAAA,GAAA,IAAA,CAAA;AACbJ,MAAgB,aAAA,GAAA,IAAA,CAAA;AAAA,KACTM,MAAAA,IAAAA,QAAAA,IAAYljB,QAASE,CAAAA,QAAAA,KAAa,QAAU,EAAA;AACnD,MAAA,MAAMkwB,cAAiBpwB,GAAAA,QAAAA,CAAAA;AACvB,MAAIowB,IAAAA,cAAAA,CAAehiB,QAAQxB,UAAY,EAAA;AACnCsjB,QAAAA,cAAAA,uBAAkB,WAAD,EAAA;AAAA,UAAa,IAAA;AAAA,UACA,QAAU,EAAA,KAAA;AAAA,UACV,QAAA;AAAA,UACA,OAAA;AAAA,UACA,SAAW,EAAA,QAAA;AAAA,UACX,KAAA,EAAOlF,kBAAmB7c,CAAAA,IAAD,CAAW,KAAA,SAAA;AAAA,UACpC,UAAA,EAAYiiB,eAAehiB,MAAOxB,CAAAA,UAAAA;AAAAA,UAClC,KAAA;AAAA,UACA,MAAA;AAAA,UACA,aAAA;AAAA,UACA,WAAA;AAAA,UACA,sBAAA;AAAA,SAX9B,CAAA,CAAA;AAAA,OAaG,MAAA;AACHsjB,QAAAA,cAAAA,uBAAkB,gBAAD,EAAA;AAAA,UACb,KAAA;AAAA,UACA,KAAA;AAAA,UACA,OAAA;AAAA,UACA,QAAA;AAAA,UACA,MAAA;AAAA,UACA,KAAOvH,EAAAA,aAAAA;AAAAA,UACP,WAAA;AAAA,SAPJ,CAAA,CAAA;AASA7E,QAAc,WAAA,GAAA,IAAA,CAAA;AAAA,OACjB;AAAA,KACMZ,MAAAA,IAAAA,QAAAA,IAAYljB,QAASE,CAAAA,QAAAA,KAAa,QAAU,EAAA;AACnD,MAAA,MAAM0O,cAAiB5O,GAAAA,QAAAA,CAAAA;AACvB,MAAI4O,IAAAA,cAAAA,CAAeR,QAAQxB,UAAY,EAAA;AACnCsjB,QAAAA,cAAAA,uBAAkB,WAAD,EAAA;AAAA,UAAa,IAAA;AAAA,UACA,QAAU,EAAA,KAAA;AAAA,UACV,OAAA;AAAA,UACA,QAAA;AAAA,UACA,SAAW,EAAA,QAAA;AAAA,UACX,KAAA,EAAOlF,kBAAmB7c,CAAAA,IAAD,CAAW,KAAA,SAAA;AAAA,UACpC,UAAA,EAAYS,eAAeR,MAAOxB,CAAAA,UAAAA;AAAAA,UAClC,KAAA;AAAA,UACA,MAAA;AAAA,UACA,aAAA;AAAA,UACA,WAAA;AAAA,UACA,sBAAA;AAAA,SAX9B,CAAA,CAAA;AAAA,OAaH,MAAA,IAAU,CAACgC,cAAeR,CAAAA,MAAAA,EAAQoJ,eAAe,CAAC5I,cAAAA,CAAeR,QAAQqN,QAAU,EAAA;AAC1EE,QAAAA,MAAAA,SAAY,GAAA,CAAC,CAAC/M,cAAAA,CAAeR,MAAQuN,EAAAA,SAAAA,CAAAA;AAC3CuU,QAAAA,cAAAA,uBAAkB,UAAD,EAAA;AAAA,UAAY,KAAA;AAAA,UACA,QAAA;AAAA,UACA,SAAA;AAAA,UACA,OAAA;AAAA,UACA,KAAOvH,EAAAA,aAAAA;AAAAA,UACP,WAAA;AAAA,SAL7B,CAAA,CAAA;AAOA7E,QAAc,WAAA,GAAA,IAAA,CAAA;AAAA,OACjB;AAAA,KACJ,MAAA,IAAU9jB,QAASE,CAAAA,QAAAA,KAAa,SAAW,EAAA;AACxCgwB,MAAAA,cAAAA,uBAAkB,WAAD,EAAA;AAAA,QAAa,KAAA;AAAA,QACA,QAAA;AAAA,QACA,OAAA;AAAA,QACA,aAAA;AAAA,QACA,WAAA;AAAA,OAJ9B,CAAA,CAAA;AAAA,KAMH,MAAA,IAAUlwB,QAASE,CAAAA,QAAAA,KAAa,WAAa,EAAA;AAC1CgwB,MAAAA,cAAAA,uBAAkB,cAAD,EAAA;AAAA,QAAgB,IAAA;AAAA,QACA,KAAA;AAAA,QACA,QAAA;AAAA,QACA,OAAA;AAAA,QACA,aAAA;AAAA,QACA,WAAA;AAAA,QACA,sBAAA;AAAA,OANjC,CAAA,CAAA;AAQApM,MAAc,WAAA,GAAA,IAAA,CAAA;AAAA,KACjB,MAAA,IAAU9jB,QAASE,CAAAA,QAAAA,KAAa,WAAa,EAAA;AAC1C,MAAI,IAAA,OAAOF,QAAS7I,CAAAA,IAAAA,KAAS,QAAU,EAAA;AACnC+4B,QAAAA,cAAAA,uBAAkB,mBAAD,EAAA;AAAA,UAAqB,IAAA;AAAA,UACA,aAAA;AAAA,UACA,WAAA;AAAA,UACA,QAAA;AAAA,UACA,IAAA;AAAA,UACA,QAAA;AAAA,UACA,sBAAA;AAAA,SANtC,CAAA,CAAA;AAAA,OAQH;AACDpM,MAAc,WAAA,GAAA,IAAA,CAAA;AAAA,KACjB,MAAA,IAAU9jB,QAASE,CAAAA,QAAAA,KAAa,OAAS,EAAA;AACtC,MAAA,MAAM2X,aAAiB7X,GAAAA,QAAAA,CAAAA;AACnB6X,MAAAA,IAAAA,cAAc5V,EAAI,EAAA;AAClB,QAAA,IAAI4V,cAAc5V,EAAG/B,CAAAA,QAAAA,KAAa,YAAY2X,aAAc5V,CAAAA,EAAAA,CAAG/B,aAAa,QAAU,EAAA;AAC9EgjB,UAAAA,IAAAA,QAAYrL,IAAAA,aAAAA,CAAc5V,EAAGmM,CAAAA,MAAAA,EAAQxB,UAAY,EAAA;AACjDsjB,YAAAA,cAAAA,uBAAkB,WAAD,EAAA;AAAA,cAAa,IAAA;AAAA,cACA,QAAU,EAAA,IAAA;AAAA,cACV,QAAA;AAAA,cACA,OAAA;AAAA,cACA,KAAA,EAAOlF,kBAAmB7c,CAAAA,IAAD,CAAW,KAAA,SAAA;AAAA,cACpC,SAAA,EAAW0J,cAAc5V,EAAG/B,CAAAA,QAAAA;AAAAA,cAC5B,UAAA,EAAY2X,aAAc5V,CAAAA,EAAAA,CAAGmM,MAAOxB,CAAAA,UAAAA;AAAAA,cACpC,KAAA;AAAA,cACA,MAAA;AAAA,cACA,aAAA;AAAA,cACA,WAAA;AAAA,cACA,sBAAA;AAAA,aAX9B,CAAA,CAAA;AAaAkX,YAAc,WAAA,GAAA,IAAA,CAAA;AAAA,WACjB;AAAA,SACMjM,MAAAA,IAAAA,aAAAA,CAAc5V,EAAG/B,CAAAA,QAAAA,KAAa,WAAa,EAAA;AAC9C,UAAA,IAAA,OAAO2X,aAAAA,CAAc5V,EAAG9K,CAAAA,IAAAA,KAAS,QAAU,EAAA;AAC3C+4B,YAAAA,cAAAA,uBACK,mBAAD,EAAA;AAAA,cAAqB,IAAA;AAAA,cACA,QAAA;AAAA,cACA,aAAA;AAAA,cACA,WAAA;AAAA,cACA,IAAA;AAAA,cACA,QAAA;AAAA,cACA,sBAAA;AAAA,aAPzB,CAAA,CAAA;AAAA,WASH;AACDpM,UAAc,WAAA,GAAA,KAAA,CAAA;AAAA,SACjB;AAAA,OACJ;AAEG,MAAA,IAAA,CAACjM,aAAAA,CAAc5V,EAAM,IAAA,CAAC4V,cAAc3V,KAAO,EAAA;AAC3C,QAAMzK,MAAAA,KAAAA,CAAO,kGAAiGyB,IAAnG,CAAA,CAAA,CAAA,CAAA;AAAA,OACd;AAAA,KACJ;AAAA,GACJ;AAEG,EAAA,IAAA,CAACg3B,cAAgB,EAAA;AACjBpM,IAAc,WAAA,GAAA,KAAA,CAAA;AACdG,IAAAA,cAAAA,GAAiBf,QAAY,IAAA,CAACgN,cAAkB,IAAA,CAAC9vB,YAAY,CAACH,QAAAA,CAAAA;AAC9DiwB,IAAAA,cAAAA,uBACK,aAAD,EAAA;AAAA,MAAA,QAAA,sBACK,gBAAD,EAAA;AAAA,QACI,KAAA;AAAA,QACA,MAAA;AAAA,QACA,IAAA;AAAA,QACA,KAAOvH,EAAAA,aAAAA;AAAAA,QACP,QAAA;AAAA,QACA,IAAA,EAAMqC,mBAAmB7c,IAAD,CAAA;AAAA,OAN5B,CAAA;AAAA,KAFR,CAAA,CAAA;AAAA,GAYH;AAED,EAAA,2BACK,SAAD,EAAA;AAAA,IACI,MAAA;AAAA,IACA,QAAA;AAAA,IACA,OAAA;AAAA,IACA,UAAU/N,QAAYH,IAAAA,QAAAA;AAAAA,IACtB,iBAAiB4jB,eAAmB,IAAA,UAAA;AAAA,IACpC,aAAA;AAAA,IACA,UAAA;AAAA,IACA,IAAA;AAAA,IACA,KAAA;AAAA,IACA,KAAA;AAAA,IACA,KAAA;AAAA,IACA,WAAA;AAAA,IACA,cAAA;AAAA,IACA,SAAA,EAAW,CAACzjB,QAAAA,GAAW2jB,SAAYxvB,GAAAA,KAAAA,CAAAA;AAAAA,IACnC,KAAOo0B,EAAAA,aAAAA;AAAAA,IAGNuH,QAAAA,EAAAA,cAAAA;AAAAA,GAnBT,CAAA,CAAA;AAwBH,CAAA,CAAA;AAEM,MAAMG,iBAAoBt8B,GAAAA,cAAAA,CAAMiV,IAAmDumB,CAAAA,yBAAAA,EAA2B5W,UAApF,CAAA,CAAA;AAEjC,SAAAA,UAAA,CAAkBC,WAAyDC,SAAyD,EAAA;AAChI,EAAA,OAAOD,SAAUsK,CAAAA,QAAAA,KAAarK,SAAUqK,CAAAA,QAAAA,IACpCtK,UAAUgL,OAAY/K,KAAAA,SAAAA,CAAUqK,QAChCtK,IAAAA,SAAAA,CAAUzJ,WAAW0J,SAAU1J,CAAAA,MAAAA,IAC/ByJ,SAAUzK,CAAAA,IAAAA,KAAS0K,UAAU1K,IAC7ByK,IAAAA,SAAAA,CAAUkK,KAAUjK,KAAAA,SAAAA,CAAUiK,KAC9BlK,IAAAA,SAAAA,CAAU/b,KAAUgc,KAAAA,SAAAA,CAAUhc,SAC9B4oB,OAAQ7M,CAAAA,SAAAA,CAAU5Y,QAAU6Y,EAAAA,SAAAA,CAAU7Y,QAA/B,CACPylB,IAAAA,OAAAA,CAAQ7M,SAAU7X,CAAAA,KAAAA,EAAO8X,UAAU9X,KAA5B,CAAA,CAAA;AAEd;;ACzV4B,SAAA,YAAA,CAAA;AAAA,EACIuvB,YAAAA;AAAAA,EACA3a,GAAAA;AAAAA,EACA4a,CAAAA;AAAAA,EACAC,CAAAA;AAAAA,EACAC,MAAAA;AAAAA,CACe,EAAA;AAGxCC,EAAAA,IAAAA,IAAO,GAAA,CAAA,CAAA;AACPC,EAAAA,IAAAA,IAAO,GAAA,CAAA,CAAA;AAGX,EAAMC,MAAAA,WAAAA,GAAc,CAAChS,KAAe,KAAA;AAChC,IAAIA,IAAAA,KAAAA,CAAMiS,WAAW,CAAK,IAAA,CAAClb,IAAI1Z,OAAW2iB,IAAAA,KAAAA,CAAMjgB,MAAWgX,KAAAA,GAAAA,CAAI1Z,OAAS,EAAA;AACpE,MAAA,OAAA;AAAA,KACH;AAEK,IAAA,MAAA;AAAA,MAAEs0B,CAAAA,EAAAA,EAAAA;AAAAA,MAAGC,CAAAA,EAAAA,EAAAA;AAAAA,KAAM7a,GAAAA,GAAAA,CAAI1Z,QAAQ6oB,qBAA7B,EAAA,CAAA;AAEA4L,IAAAA,IAAAA,GAAO9R,MAAMkS,OAAUP,GAAAA,EAAAA,CAAAA;AACvBI,IAAAA,IAAAA,GAAO/R,MAAMmS,OAAUP,GAAAA,EAAAA,CAAAA;AACvBQ,IAASC,QAAAA,CAAAA,gBAAAA,CAAiB,aAAaC,WAAvC,CAAA,CAAA;AACAF,IAASC,QAAAA,CAAAA,gBAAAA,CAAiB,WAAWE,SAArC,CAAA,CAAA;AACAvS,IAAAA,KAAAA,CAAM3P,eAAN,EAAA,CAAA;AAAA,GAXJ,CAAA;AAcA,EAAMkiB,MAAAA,SAAAA,GAAY,CAACvS,KAAe,KAAA;AAC9BoS,IAASI,QAAAA,CAAAA,mBAAAA,CAAoB,aAAaF,WAA1C,CAAA,CAAA;AACAF,IAASI,QAAAA,CAAAA,mBAAAA,CAAoB,WAAWD,SAAxC,CAAA,CAAA;AACAvS,IAAAA,KAAAA,CAAM3P,eAAN,EAAA,CAAA;AAAA,GAHJ,CAAA;AAMA,EAAMiiB,MAAAA,WAAAA,GAAc,CAACtS,KAAe,KAAA;AAChC6R,IAAAA,MAAAA,CACI7R,KAAMkS,CAAAA,OAAAA,GAAUJ,IAChB9R,EAAAA,KAAAA,CAAMmS,UAAUJ,IAFd,CAAA,CAAA;AAIN/R,IAAAA,KAAAA,CAAM3P,eAAN,EAAA,CAAA;AAAA,GALJ,CAAA;AAQMoiB,EAAAA,MAAAA,SAAS,MAAM;AACbf,IAAAA,IAAAA,aAAar0B,OAAS,EAAA;AACtBq0B,MAAar0B,YAAAA,CAAAA,OAAAA,CAAQgkB,KAAMmB,CAAAA,GAAAA,GAAO,CAAEoP,EAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA;AACpCF,MAAar0B,YAAAA,CAAAA,OAAAA,CAAQgkB,KAAMqR,CAAAA,IAAAA,GAAQ,CAAEf,EAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA;AAAAA,KACxC;AAAA,GAJL,CAAA;AAOA75B,EAAAA,SAAAA,CAAU,MAAM;AACZ,IAAA,MAAMuF,UAAU0Z,GAAI1Z,CAAAA,OAAAA,CAAAA;AAChBA,IAAAA,IAAAA,OAAAA;AACAA,MAAQg1B,OAAAA,CAAAA,gBAAAA,CAAiB,aAAaL,WAAtC,CAAA,CAAA;AACJS,IAAM,MAAA,EAAA,CAAA;AACN,IAAA,OAAO,MAAM;AACLp1B,MAAAA,IAAAA,OAAAA;AACAA,QAAQm1B,OAAAA,CAAAA,mBAAAA,CAAoB,aAAaR,WAAzC,CAAA,CAAA;AAAA,KAFR,CAAA;AAAA,GALK,CAAA,CAAA;AAWZ;;AC9D2C,SAAA,aAAA,GAAA;AAClC,EAAA,MAAA,CAACziB,IAAMojB,EAAAA,OAAAA,CAAAA,GAAWn9B,QAAqB,CAAA;AAAA,IAAEyI,KAAO,EAAA,CAAA;AAAA,IAAGsS,MAAQ,EAAA,CAAA;AAAA,GAAjC,CAAA,CAAA;AAChCqiB,EAAAA,eAAAA,CAAgB,MAAM;AAClB,IAAsB,SAAA,UAAA,GAAA;AAClBD,MAAQ,OAAA,CAAA;AAAA,QAAE10B,OAAO40B,MAAOC,CAAAA,UAAAA;AAAAA,QAAYviB,QAAQsiB,MAAOE,CAAAA,WAAAA;AAAAA,OAA5C,CAAA,CAAA;AAAA,KACV;AAEDF,IAAOR,MAAAA,CAAAA,gBAAAA,CAAiB,UAAUW,UAAlC,CAAA,CAAA;AACAA,IAAU,UAAA,EAAA,CAAA;AACH,IAAA,OAAA,MAAMH,MAAAA,CAAOL,mBAAoB,CAAA,QAAA,EAAUQ,UAArC,CAAA,CAAA;AAAA,GAPF,EAQZ,EARY,CAAA,CAAA;AASf,EAAOzjB,OAAAA,IAAAA,CAAAA;AACV;;ACIiC,SAAA,cAAA,CAAA;AAAA,EACIjV,IAAAA;AAAAA,EACA6H,KAAAA;AAAAA,EACAX,QAAAA;AAAAA,EACAyxB,UAAAA;AAAAA,EACAC,iBAAAA;AAAAA,EACAC,gBAAAA;AAAAA,CACuB,EAAA;AAEzD,EAAA,MAAM1G,WAAWtqB,KAAStH,IAAAA,KAAAA,CAAMC,QAAQqH,KAAd,CAAA,IAAwBA,MAAMvJ,MAAS,GAAA,CAAA,CAAA;AAE3Dw6B,EAAAA,MAAAA,cAAAA,GAAyChsB,QAAQ,MAC/CqlB,QAAAA,GACMtqB,MAAMjI,GAAI,CAAA,CAACyG,GAAGoN,KAAU,KAAA;AACtB,IAAA,IAAI,CAACpN,CAAAA;AAAG,MAAA,OAAO,EAAP,CAAA;AACA,IAAA,OAAA;AAAA,MAAA,CACH0yB,YAAa1yB,CAAAA,CAAD,CAAMoN,GAAAA,KAAAA,GAAQmgB,WAAW,EAAA;AAAA,KAD1C,CAAA;AAAA,GAFF,CAAA,CAKCvuB,MAAO,CAAA,CAACoC,GAAGC,CAAO,MAAA;AAAA,IAAKD,GAAAA,CAAAA;AAAAA,IAAMC,GAAAA,CAAAA;AAAAA,GAAX,CAAA,EAAiB,EALpC,CAAA,GAMA,EACV,EAAA,CAACG,KAAOsqB,EAAAA,QAAR,CATkD,CAAA,CAAA;AAUtD,EAAM6G,MAAAA,cAAAA,GAAiB72B,OAA+B22B,cAAzB,CAAA,CAAA;AAEvB,EAAA,MAAA,CAACG,WAAaC,EAAAA,cAAAA,CAAAA,GAAkBh+B,QAClCi3B,CAAAA,QAAAA,GACMtxB,MAAOC,CAAAA,MAAAA,CAAOk4B,cAAej2B,CAAAA,OAA7B,CACA,GAAA,EAHoC,CAAA,CAAA;AAK9CvF,EAAAA,SAAAA,CAAU,MAAM;AACR20B,IAAAA,IAAAA,QAAYtqB,IAAAA,KAAAA,IAASA,KAAMvJ,CAAAA,MAAAA,KAAW26B,YAAY36B,MAAQ,EAAA;AACpD66B,MAAAA,MAAAA,cAAiBtxB,GAAAA,KAAAA,CAAMjI,GAAI,CAAA,CAACyG,GAAGoN,KAAU,KAAA;AAC3C,QAAM2lB,MAAAA,SAAAA,GAAYL,YAAa1yB,CAAAA,CAAD,CAAMoN,GAAAA,KAAAA,CAAAA;AACpC,QAAI2lB,IAAAA,SAAAA,IAAaJ,eAAej2B,OAAS,EAAA;AACrC,UAAA,OAAOi2B,eAAej2B,OAAQq2B,CAAAA,SAAAA,CAAAA,CAAAA;AAAAA,SAC3B,MAAA;AACGC,UAAAA,MAAAA,gBAAgBzF,WAAtB,EAAA,CAAA;AACAoF,UAAAA,cAAAA,CAAej2B,QAAQq2B,SAAaC,CAAAA,GAAAA,aAAAA,CAAAA;AACpC,UAAOA,OAAAA,aAAAA,CAAAA;AAAAA,SACV;AAAA,OARkB,CAAA,CAAA;AAUvBH,MAAAA,cAAAA,CAAeC,cAAD,CAAA,CAAA;AAAA,KACjB;AAAA,KACF,CAAChH,QAAAA,EAAU8G,WAAY36B,CAAAA,MAAAA,EAAQuJ,KAA/B,CAdM,CAAA,CAAA;AAiBT,EAAA,2BAAQ,UAAD,EAAA;AAAA,IACH,IAAA;AAAA,IACA,gBAAkB,EAAA,IAAA;AAAA,IAClB,QAAQyxB,CAAgB,YAAA,KAAA;AAEdC,MAAAA,MAAAA,cAAc,MAAM;AACtB,QAAIryB,IAAAA,QAAAA;AAAU,UAAA,OAAA;AACRtC,QAAAA,MAAAA,KAAKgvB,WAAX,EAAA,CAAA;AACM4F,QAAAA,MAAAA,MAAmB,GAAA,CAAC,GAAGP,WAAAA,EAAar0B,EAAjB,CAAA,CAAA;AACzB,QAAIg0B,IAAAA,iBAAAA;AACAA,UAAAA,iBAAAA,CAAkBh0B,EAAD,CAAA,CAAA;AACrBs0B,QAAAA,cAAAA,CAAeM,MAAD,CAAA,CAAA;AACdF,QAAAA,YAAAA,CAAa95B,KAAK,IAAlB,CAAA,CAAA;AAAA,OAPJ,CAAA;AAUA,MAAMi6B,MAAAA,MAAAA,GAAS,CAAChmB,KAAkB,KAAA;AAC9B,QAAMuc,MAAAA,QAAAA,GAAW,CAAC,GAAGiJ,WAAJ,CAAA,CAAA;AACjBjJ,QAASzwB,QAAAA,CAAAA,MAAAA,CAAOkU,OAAO,CAAvB,CAAA,CAAA;AACAylB,QAAAA,cAAAA,CAAelJ,QAAD,CAAA,CAAA;AACdsJ,QAAAA,YAAAA,CAAaG,OAAOhmB,KAApB,CAAA,CAAA;AAAA,OAJJ,CAAA;AAOA,MAAMimB,MAAAA,SAAAA,GAAY,CAAC96B,MAAgB,KAAA;AAE/B,QAAI,IAAA,CAACA,OAAO+6B,WAAa,EAAA;AACrB,UAAA,OAAA;AAAA,SACH;AACD,QAAMC,MAAAA,WAAAA,GAAch7B,OAAO8G,MAAO+N,CAAAA,KAAAA,CAAAA;AAClC,QAAMomB,MAAAA,gBAAAA,GAAmBj7B,OAAO+6B,WAAYlmB,CAAAA,KAAAA,CAAAA;AAE5C,QAAM+lB,MAAAA,MAAAA,GAAS,CAAC,GAAGP,WAAJ,CAAA,CAAA;AACf,QAAA,MAAMa,OAAON,MAAOI,CAAAA,WAAAA,CAAAA,CAAAA;AACpBJ,QAAAA,MAAAA,CAAOI,eAAeJ,MAAOK,CAAAA,gBAAAA,CAAAA,CAAAA;AAC7BL,QAAAA,MAAAA,CAAOK,gBAAoBC,CAAAA,GAAAA,IAAAA,CAAAA;AAC3BZ,QAAAA,cAAAA,CAAeM,MAAD,CAAA,CAAA;AAEdF,QAAaS,YAAAA,CAAAA,IAAAA,CAAKH,aAAaC,gBAA/B,CAAA,CAAA;AAAA,OAdJ,CAAA;AAiBA,MAAA,2BACK,eAAD,EAAA;AAAA,QAAiB,SAAA;AAAA,QAAjB,QAAA,sBACK,SAAD,EAAA;AAAA,UAAW,aAAc,CAAY75B,UAAAA,EAAAA,IAAAA,CAAAA,CAAAA;AAAAA,UAChC,QAAA,EAAA,CAACg6B,iBAAmBC,EAAAA,iBAAAA,0BAETD,KAAAA,EAAAA;AAAAA,YAAAA,GAAAA,iBAAkBE,CAAAA,cAAAA;AAAAA,YACtB,KAAKF,iBAAkBG,CAAAA,QAAAA;AAAAA,YAF3B,UAAA,CAGKhI,QAAAA,IAAY8G,YAAYr5B,GAAI,CAAA,CAACw6B,YAAoB3mB,KAAkB,KAAA;AAChE,cAAA,2BACK,SAAD,EAAA;AAAA,gBAEI,WAAA,EAAc,eAAczT,IAAQo6B,CAAAA,CAAAA,EAAAA,UAAAA,CAAAA,CAAAA,CAAAA;AAAAA,gBACpC,cAAgBlzB,EAAAA,QAAAA;AAAAA,gBAChB,KAAA;AAAA,gBAJJ,QAKK,EAAA,CAACmzB,QAAUC,EAAAA,QAAAA,yBAEP,GAAD,EAAA;AAAA,kBACI,KAAKD,QAASF,CAAAA,QAAAA;AAAAA,kBAAAA,GACVE,QAASE,CAAAA,cAAAA;AAAAA,kBACb,KAAA,EACIF,SAASE,cAAexT,CAAAA,KAAAA;AAAAA,kBAE5B,EAAI,EAAA;AAAA,oBACAyT,YAAc,EAAA,CAAA;AAAA,oBACdxkB,YAAc,EAAA,KAAA;AAAA,oBACdmS,OAAS,EAAA,CAAA;AAAA,mBATjB;AAAA,kBAAA,QAAA,uBAYK,GAAD,EAAA;AAAA,oBACK,OAAQ,EAAA,MAAA;AAAA,oBADb,QAAA,EAAA,iBAEIxsB,GAAA,CAAC,GAAD,EAAA;AAAA,sBAAK,QAAU,EAAA,CAAA;AAAA,sBACV,KAAO,EAAA,MAAA;AAAA,sBADZ,QAAA,EAGKg9B,UAAWllB,CAAAA,KAAAA,EAAO2mB,UAAR,CAAA;AAAA,qBADJ,EAAA,CAAA,MAAA,EAAQp6B,IAFnB,CAAA,WAAA,CAAA,CAAA,uBAKC,GAAD,EAAA;AAAA,sBAAK,KAAO,EAAA,MAAA;AAAA,sBACP,OAAQ,EAAA,MAAA;AAAA,sBACR,aAAc,EAAA,QAAA;AAAA,sBACd,UAAW,EAAA,QAAA;AAAA,sBACZ,QAAA,EAAA,iBAAArE,GAAA,CAAA,KAAA,EAAA;AAAA,wBAAA,GACQ0+B,QAASI,CAAAA,eAAAA;AAAAA,wBADjB,QAAA,sBAEK,cAAD,EAAA;AAAA,0BACI,QAAU,EAAA,OAAA;AAAA,0BACV,KAAA,EAAOvzB,WAAW,UAAa,GAAA,SAAA;AAAA,0BAC/B,EAAI,EAAA;AAAA,4BAAEya,MAAAA,EAAQza,WAAW,SAAY,GAAA,MAAA;AAAA,2BAAjC;AAAA,yBAHR,CAAA;AAAA,uBAFJ,CAAA,EAOC,CAACA,QAAAA,wBACD,UAAD,EAAA;AAAA,wBACI,IAAK,EAAA,OAAA;AAAA,wBACL,YAAW,EAAA,QAAA;AAAA,wBACX,OAAA,EAAS,MAAMuyB,MAAAA,CAAOhmB,KAAD,CAAA;AAAA,wBAHzB,QAAA,sBAIK,SAAD,EAAA;AAAA,0BACI,QAAU,EAAA,OAAA;AAAA,yBADd,CAAA;AAAA,uBAhBR,CAAA,CAAA;AAAA,qBAPJ,CAAA,CAAA;AAAA,mBAAW,EAAA,SAAQA,KAAnB,CAAA,CAAA,CAAA;AAAA,iBAZJ,CAAA;AAAA,eAPR,EACU,CAAczT,YAAAA,EAAAA,IAAAA,CAAAA,CAAAA,EAAQo6B,UADhC,CAAA,CAAA,CAAA,CAAA,CAAA;AAAA,aAFK,GAsDZJ,iBAAkBU,CAAAA,WAAAA,EAElB7B,oBAAoB,CAAC3xB,QAAAA,wBAAa,GAAD,EAAA;AAAA,cAAK,CAAG,EAAA,CAAA;AAAA,cACH,cAAe,EAAA,QAAA;AAAA,cACf,SAAW,EAAA,MAAA;AAAA,cAFhB,QAAA,sBAG7B,MAAD,EAAA;AAAA,gBAAQ,OAAQ,EAAA,UAAA;AAAA,gBACR,KAAM,EAAA,SAAA;AAAA,gBACN,QAAA;AAAA,gBACA,OAASqyB,EAAAA,WAAAA;AAAAA,gBAHjB,QAAA,EAAA,KAAA;AAAA,eAAA,CAAA;AAAA,aA9DR,CAAA,CAAA;AAAA,WAAA,CAAA;AAAA,SAFR,CAAA;AAAA,OAFR,CAAA,CAAA;AAAA,KA8EH;AAAA,GArHL,CAAA,CAAA;AAuHH,CAAA;AAGD,SAAuB,WAAA,GAAA;AACnB,EAAO7oB,OAAAA,IAAAA,CAAKojB,MAAMpjB,IAAKqjB,CAAAA,MAAAA,KAAWrjB,IAAKojB,CAAAA,KAAAA,CAAME,MAAOC,CAAAA,gBAAlB,CAA3B,CAAA,CAAA;AACV;;AC5KmD,SAAA,gBAAA,CAAA;AAAA,EAAEntB,QAAAA;AAAAA,CAA6C,EAAA;AAC/F,EAAA,MAAM6jB,kBAAsC,OAAO7jB,QAAAA,CAASI,aAAa,QAAWJ,GAAAA,QAAAA,CAASI,SAAS4vB,eAAkBz7B,GAAAA,KAAAA,CAAAA,CAAAA;AACxH,EAAA,4BAGK,GAAD,EAAA;AAAA,IAAK,OAAQ,EAAA,MAAA;AAAA,IAAb,QAAA,EAAA,iBAEIM,GAAA,CAAC,GAAD,EAAA;AAAA,MAAK,QAAU,EAAA,CAAA;AAAA,MAAf,QAAA,sBACK,cAAD,EAAA;AAAA,QAAiBgvB,QAAAA,EAAAA,mBAAmB7jB,QAAS7G,CAAAA,WAAAA;AAAAA,OAA7C,CAAA;AAAA,KADJ,CAAA,EAIC6G,QAAS6zB,CAAAA,eAAAA,wBACT,OAAD,EAAA;AAAA,MAAS,KAAA,sBACJ,UAAD,EAAA;AAAA,QACI,OAAS,EAAA,SAAA;AAAA,QADb,UACyB7zB,QAAS6zB,CAAAA,eAAAA;AAAAA,OAFtC,CAAA;AAAA,MAIS,SAAU,EAAA,cAAA;AAAA,MACV,KALT,EAAA,IAAA;AAAA,MAAA,QAAA,sBAMK,UAAD,EAAA;AAAA,QACI,IAAM,EAAA,OAAA;AAAA,QACN,IAAM,EAAA,OAAA;AAAA,QAFV,QAAA,sBAIK,QAAD,EAAA;AAAA,UAAU,KAAO,EAAA,UAAA;AAAA,UACP,QAAU,EAAA,OAAA;AAAA,SADpB,CAAA;AAAA,OAJJ,CAAA;AAAA,KAbR,CAAA,CAAA;AAAA,GAAA,CAAA,CAAA;AAwBP;;ACpC6B,SAAA,aAAA,CAAA;AAAA,EACI7zB,QAAAA;AAAAA,CACmB,EAAA;AAG7C,EAAA,4BAAAsO,QAAA,EAAA;AAAA,IACI,QAAA,EAAA,iBAAAzZ,GAAA,CAAA,MAAA,EAAA;AAAA,MAAM,KAAO,EAAA;AAAA,QAAEkqB,YAAc,EAAA,MAAA;AAAA,OAA7B;AAAA,MACKnD,QAAAA,EAAAA,mBAAmB5b,QAAD,CAAA;AAAA,KADvB,CAGA,kBAAAnL,GAAA,CAAA,MAAA,EAAA;AAAA,MAAA,UAAOmL,QAAS3L,CAAAA,KAAAA;AAAAA,KAJpB,CAAA,CAAA;AAAA,GADJ,CAAA,CAAA;AAQH;;ACFD,MAAMy/B,YAAansB,GAAAA,UAAAA,CAAW,CAACC,KAAAA,KAAiBC,YAAa,CAAA;AAAA,EACzDksB,UAAY,EAAA;AAAA,IACR5U,SAAWvX,EAAAA,KAAAA,CAAMO,OAAQ,CAAA,CAAA,GAAI,CAAlB,CAAA;AAAA,IACXsV,UAAY7V,EAAAA,KAAAA,CAAMO,OAAQ,CAAA,CAAA,GAAI,CAAlB,CAAA;AAAA,GAHyC;AAAA,EAKzD6rB,gBAAkB,EAAA;AAAA,IACd7U,SAAW,EAAA,MAAA;AAAA,IACX1B,UAAY7V,EAAAA,KAAAA,CAAMO,OAAQ,CAAA,CAAA,GAAI,CAAlB,CAAA;AAAA,GAFE;AALuC,CAAD,CAA/B,CAAA,CAAA;AAqBc,SAAA,MAAA,CAAA;AAAA,EACIjP,IAAAA;AAAAA,EACA6H,KAAAA;AAAAA,EACA0T,QAAAA;AAAAA,EACAnM,KAAAA;AAAAA,EACA2rB,SAAAA;AAAAA,EACA7zB,QAAAA;AAAAA,EACAusB,SAAAA;AAAAA,EACAuH,OAAAA;AAAAA,EACAl0B,QAAAA;AAAAA,EACAm0B,kBAAAA;AAAAA,EACAC,oBAAAA;AAAAA,CACe,EAAA;AAEpD5rB,EAAAA,MAAAA,UAAUsrB,YAAhB,EAAA,CAAA;AACMlnB,EAAAA,MAAAA,UAAAA,GAAa5M,SAASoO,MAAQxB,EAAAA,UAAAA,CAAAA;AAEpC8iB,EAAqB,oBAAA,CAAA;AAAA,IACjB1vB,QAAAA;AAAAA,IACAe,KAAAA;AAAAA,IACA0T,QAAAA;AAAAA,GAHgB,CAAA,CAAA;AAMpB,EAAA,4BACK,WAAD,EAAA;AAAA,IACI,OAAQ,EAAA,QAAA;AAAA,IACR,SAFJ,EAAA,IAAA;AAAA,IAGI,QAAA,EAAUzU,SAAS0B,UAAYC,EAAAA,QAAAA;AAAAA,IAC/B,KAAOsyB,EAAAA,SAAAA;AAAAA,IACP,QAAA;AAAA,IALJ,QAAA,EAAA,iBAQIp/B,GAAA,CAAC,UAAD,EAAA;AAAA,MAAY,IAAK,CAAEqE,EAAAA,IAAAA,CAAAA,aAAAA,CAAAA;AAAAA,MACP,OAAS,EAAA;AAAA,QACLgU,MAAM1E,OAAQurB,CAAAA,UAAAA;AAAAA,QACdM,QAAQ7rB,OAAQwrB,CAAAA,gBAAAA;AAAAA,OAHhC;AAAA,MAAA,QAAA,sBAKK,aAAD,EAAA;AAAA,QAAe,QAAA;AAAA,OAAf,CAAA;AAAA,KAbR,CAgBI,kBAAAn/B,GAAA,CAACy/B,QAAD,EAAA;AAAA,MACI,EAAI,EAAA;AAAA,QACAvW,SAAW,EAAA,MAAA;AAAA,OAFnB;AAAA,MAII,OAAS,EAAA,QAAA;AAAA,MACT,SAAU,CAAE7kB,EAAAA,IAAAA,CAAAA,aAAAA,CAAAA;AAAAA,MACZ,SAAA;AAAA,MACA,KAAA,EAAO6H,KAAUxM,KAAAA,KAAAA,CAAAA,GAAYwM,KAAQ,GAAA,EAAA;AAAA,MACrC,QAAA;AAAA,MACA,QAAA,EAAU,CAAC8e,GAAa,KAAA;AACpB,QAAM0U,MAAAA,UAAAA,GAAa1U,IAAIlhB,MAAOoC,CAAAA,KAAAA,CAAAA;AAC9B,QAAMmoB,MAAAA,QAAAA,GAAWqL,aACVv0B,QAASE,CAAAA,QAAAA,KAAa,WAAWwpB,UAAW6K,CAAAA,UAAD,IAAeA,UAC3D,GAAA,IAAA,CAAA;AAEC9f,QAAAA,OAAAA,SAASyU,QAAD,CAAA,CAAA;AAAA,OAfvB;AAAA,MAiBI,WAAA,EAAa,CAAC1b,OAAiB,KAAA;AAC3B,QAAA,2BAAQ,cAAD,EAAA;AAAA,UACH,OAAA;AAAA,UACA,UAAA;AAAA,UACA,KAAO,EAAA,KAAA;AAAA,SAHX,CAAA,CAAA;AAAA,OAlBR;AAAA,MAAA,QAAA,EAyBKwZ,oBAAoBpa,UAAD,CAAA,CACf9T,IAAI,CAAC,CAAC0U,SAAST,aAAmB,CAAA,KAAA;AAC/B,QAAA,2BACK,QAAD,EAAA;AAAA,UACU,KAAOS,EAAAA,OAAAA;AAAAA,UACP,QAAA,EAAUoc,oBAAoB7c,aAAD,CAAA;AAAA,UAFvC,QAAA,sBAGK,cAAD,EAAA;AAAA,YACI,OAAA;AAAA,YACA,UAAA;AAAA,YACA,KAAO,EAAA,IAAA;AAAA,WAHX,CAAA;AAAA,SAHJ,EAAgB,CAAS7T,OAAAA,EAAAA,IAAAA,CAAAA,CAAAA,EAAQsU,OAAjC,CAAA,CAAA,CAAA,CAAA;AAAA,OAHX,CAAA;AAAA,KAzBL,CAAA,EAwCC2mB,kBACD,oBAAAt/B,GAAA,CAAC,gBAAD,EAAA;AAAA,MAAkB,QAAA;AAAA,KAAlB,CAAA,EAECo/B,SAAa,oBAAAp/B,GAAA,CAAC,cAAD,EAAA;AAAA,MAAiByT,QAAAA,EAAAA,KAAAA;AAAAA,KA3DnC,CAAA,CAAA;AAAA,GADJ,CAAA,CAAA;AAgEH;;ACzGD,MAAMwrB,YAAansB,GAAAA,UAAAA,CAAW,CAACC,KAAAA,KAAiBC,YAAa,CAAA;AAAA,EACzDksB,UAAY,EAAA;AAAA,IACR5U,SAAWvX,EAAAA,KAAAA,CAAMO,OAAQ,CAAA,CAAA,GAAI,CAAlB,CAAA;AAAA,IACXsV,UAAY7V,EAAAA,KAAAA,CAAMO,OAAQ,CAAA,CAAA,GAAI,CAAlB,CAAA;AAAA,GAHyC;AAAA,EAKzD6rB,gBAAkB,EAAA;AAAA,IACd7U,SAAW,EAAA,MAAA;AAAA,IACX1B,UAAY7V,EAAAA,KAAAA,CAAMO,OAAQ,CAAA,CAAA,GAAI,CAAlB,CAAA;AAAA,GAFE;AALuC,CAAD,CAA/B,CAAA,CAAA;AAkBG,SAAA,eAAA,CAAA;AAAA,EACIjP,IAAAA;AAAAA,EACA6H,KAAAA;AAAAA,EACA0T,QAAAA;AAAAA,EACAnM,KAAAA;AAAAA,EACA2rB,SAAAA;AAAAA,EACA7zB,QAAAA;AAAAA,EACAJ,QAAAA;AAAAA,EACAm0B,kBAAAA;AAAAA,EACAxH,SAAAA;AAAAA,CACuB,EAAA;AAEjDnkB,EAAAA,MAAAA,UAAUsrB,YAAhB,EAAA,CAAA;AAEA,EAAI,IAAA,CAAC9zB,SAASiC,EAAI,EAAA;AACRxK,IAAAA,MAAAA,MAAM,uCAAD,CAAA,CAAA;AAAA,GACd;AAED,EAAA,IAAIuI,SAASiC,EAAG/B,CAAAA,QAAAA,KAAa,YAAYF,QAASiC,CAAAA,EAAAA,CAAG/B,aAAa,QAAU,EAAA;AAClEzI,IAAAA,MAAAA,MAAM,8DAAD,CAAA,CAAA;AAAA,GACd;AAEKmV,EAAAA,MAAAA,UAAAA,GAAa5M,QAASiC,CAAAA,EAAAA,CAAGmM,MAAQxB,EAAAA,UAAAA,CAAAA;AACnC,EAAA,IAAA,CAACA,UAAY,EAAA;AACb9M,IAAAA,OAAAA,CAAQwI,MAAMtI,QAAd,CAAA,CAAA;AACMvI,IAAAA,MAAAA,MAAM,uFAAD,CAAA,CAAA;AAAA,GACd;AACDi4B,EAAqB,oBAAA,CAAA;AAAA,IACjB1vB,QAAAA;AAAAA,IACAe,KAAAA;AAAAA,IACA0T,QAAAA;AAAAA,GAHgB,CAAA,CAAA;AAMdgV,EAAAA,MAAAA,aAAa,CAAC,CAAC1oB,KAAStH,IAAAA,KAAAA,CAAMC,QAAQqH,KAAd,CAAA,CAAA;AAC9B,EAAA,4BACK,WAAD,EAAA;AAAA,IACI,OAAQ,EAAA,QAAA;AAAA,IACR,SAFJ,EAAA,IAAA;AAAA,IAGI,QAAA,EAAUf,SAAS0B,UAAYC,EAAAA,QAAAA;AAAAA,IAC/B,KAAOsyB,EAAAA,SAAAA;AAAAA,IAJX,QAAA,EAAA,iBAOIp/B,GAAA,CAAC,UAAD,EAAA;AAAA,MAAY,IAAK,CAAEqE,EAAAA,IAAAA,CAAAA,kBAAAA,CAAAA;AAAAA,MACP,OAAS,EAAA;AAAA,QACLgU,MAAM1E,OAAQurB,CAAAA,UAAAA;AAAAA,QACdM,QAAQ7rB,OAAQwrB,CAAAA,gBAAAA;AAAAA,OAHhC;AAAA,MAAA,QAAA,sBAKK,aAAD,EAAA;AAAA,QAAe,QAAA;AAAA,OAAf,CAAA;AAAA,KAZR,CAeI,kBAAAn/B,GAAA,CAACy/B,QAAD,EAAA;AAAA,MACI,QADJ,EAAA,IAAA;AAAA,MAEI,EAAI,EAAA;AAAA,QACAvW,SAAW,EAAA,MAAA;AAAA,OAHnB;AAAA,MAKI,OAAS,EAAA,QAAA;AAAA,MACT,SAAU,CAAE7kB,EAAAA,IAAAA,CAAAA,kBAAAA,CAAAA;AAAAA,MACZ,KAAA,EAAOuwB,aAAa1oB,KAAMjI,CAAAA,GAAAA,CAAIyG,OAAKA,CAAEoO,CAAAA,QAAAA,EAAjB,CAAA,GAA+B,EAPvD;AAAA,MAQI,SAAA;AAAA,MACA,QAAA;AAAA,MACA,QAAA,EAAU,CAACkS,GAAa,KAAA;AACpB,QAAIqJ,IAAAA,QAAAA,CAAAA;AACAlpB,QAAAA,IAAAA,QAAAA,CAASiC,IAAI/B,QAAa,KAAA,QAAA;AAC1BgpB,UAAAA,QAAAA,GAAWrJ,GAAIlhB,CAAAA,MAAAA,CAAOoC,KAAQ8e,GAAAA,GAAAA,CAAIlhB,MAAOoC,CAAAA,KAAAA,CAAMjI,GAAI,CAAA,CAACmB,CAAWyvB,KAAAA,UAAAA,CAAWzvB,CAAD,CAA3C,IAAkD,EAAhF,CAAA;AAAA;AAEAivB,UAAAA,QAAAA,GAAWrJ,IAAIlhB,MAAOoC,CAAAA,KAAAA,CAAAA;AACnB0T,QAAAA,OAAAA,SACHyU,QADW,CAAA,CAAA;AAAA,OAhBvB;AAAA,MAoBI,WAAa,EAAA,CAAChG,QACV,qBAAAruB,GAAA,CAAC,gBAAD,EAAA;AAAA,QAAkB,KAAOquB,EAAAA,QAAAA;AAAAA,QACP,IAAA;AAAA,QACA,UAAA;AAAA,QACA,IAAM,EAAA,SAAA;AAAA,OAxBhC,CAAA;AAAA,MAAA,QAAA,EA2BK8D,oBAAoBpa,UAAD,CAAA,CACf9T,IAAI,CAAC,CAAC0U,SAAST,aAAmB,CAAA,KAAA;AACzBod,QAAAA,MAAAA,OAAUV,GAAAA,UAAAA,IAAc1oB,KAAMjI,CAAAA,GAAAA,CAAIyG,CAAKA,CAAAA,KAAAA,CAAAA,CAAEoO,UAAjB,CAA6BvO,CAAAA,QAAAA,CAASoO,OAAQG,CAAAA,QAAAA,EAA9C,CAAA,CAAA;AAC9B,QAAA,4BACK,QAAD,EAAA;AAAA,UACU,KAAOH,EAAAA,OAAAA;AAAAA,UACP,QAAA,EAAUoc,oBAAoB7c,aAAD,CAAA;AAAA,UAC7B,KAAO,EAAA,IAAA;AAAA,UAHjB,QAAA,EAAA,iBAIIlY,GAAA,CAAC,QAAD,EAAA;AAAA,YAAU,OAAA;AAAA,WAJd,CAKI,kBAAAA,GAAA,CAAC,YAAD,EAAA;AAAA,YAAc,OAAA,sBACT,cAAD,EAAA;AAAA,cACI,OAAA;AAAA,cACA,UAAA;AAAA,cACA,KAAO,EAAA,IAAA;AAAA,aAHX,CAAA;AAAA,WANR,CAAA,CAAA;AAAA,SAAA,EAAgB,CAAcqE,YAAAA,EAAAA,IAAAA,CAAAA,CAAAA,EAAQsU,OAAtC,CAAA,CAAA,CAAA,CAAA;AAAA,OAJX,CAAA;AAAA,KA3BL,CAAA,EA+CC2mB,kBACD,oBAAAt/B,GAAA,CAAC,gBAAD,EAAA;AAAA,MAAkB,QAAA;AAAA,KAAlB,CAAA,EAECo/B,SAAa,oBAAAp/B,GAAA,CAAC,cAAD,EAAA;AAAA,MAAiByT,QAAAA,EAAAA,KAAAA;AAAAA,KAjEnC,CAAA,CAAA;AAAA,GADJ,CAAA,CAAA;AAsEH;;AC5GD,MAAMZ,WAAAA,GAAYC,UAAW,CAAA,CAACC,KAAkB,MAAA;AAAA,EAC5CwjB,QAAU,EAAA;AAAA,IACN1b,QAAU,EAAA,UAAA;AAAA,IACVqM,UAAY,EAAA,KAAA;AAAA,IACZ2G,MAAQ,EAAA,uBAAA;AAAA,IACR3E,SAAW,EAAA,OAAA;AAAA,IACX0K,OAAS,EAAA,CAAA;AAAA,IACT+L,mBAAqB,EAAA,KAAA;AAAA,IACrBC,oBAAsB,EAAA,KAAA;AAAA,IACtBrnB,eAAiBxF,EAAAA,KAAAA,CAAMsI,OAAQna,CAAAA,IAAAA,KAAS,UAAU,qBAAwB,GAAA,2BAAA;AAAA,IAC1Eib,YAAcpJ,EAAAA,KAAAA,CAAMsI,OAAQna,CAAAA,IAAAA,KAAS,UAAU,+BAAkC,GAAA,oCAAA;AAAA,IACjF61B,SAAW,EAAA,YAAA;AAAA,IACXjR,UAAY,EAAA,4DAAA;AAAA,IACD,SAAA,EAAA;AAAA,MACP3J,YAAe,EAAA,CAAA,UAAA,EAAYpJ,KAAMsI,CAAAA,OAAAA,CAAQmP,OAAQqV,CAAAA,IAAAA,CAAAA,CAAAA;AAAAA,KAD1C;AAAA,GAb6B;AAAA,EAiB5Ct0B,QAAU,EAAA;AAAA,IACNgN,eAAiB,EAAA,qBAAA;AAAA,IACjBpD,KAAOpC,EAAAA,KAAAA,CAAMsI,OAAQna,CAAAA,IAAAA,KAAS,UAAU,qBAAwB,GAAA,2BAAA;AAAA,IAChEib,YAAe,EAAA,CAAA,WAAA,EAAapJ,KAAMsI,CAAAA,OAAAA,CAAQykB,IAAK,CAAA,GAAA,CAAA,CAAA,CAAA;AAAA,GApBP;AAAA,EAsB5CC,aAAe,EAAA;AAAA,IACA,SAAA,EAAA;AAAA,MACPxnB,eAAiBxF,EAAAA,KAAAA,CAAMsI,OAAQna,CAAAA,IAAAA,KAAS,UAAU,qBAAwB,GAAA,2BAAA;AAAA,KADnE;AAAA,GAvB6B;AAAA,EA2B5Cu1B,UAAY,EAAA;AAAA,IACRvP,UAAY,EAAA,KAAA;AAAA,IACZ6P,SAAW,EAAA,YAAA;AAAA,IACXlJ,MAAQ,EAAA,WAAA;AAAA,GA9BgC;AAAA,EAgC5C8I,UAAY,EAAA;AAAA,IACR7Q,UAAY,EAAA,yDAAA;AAAA,IACZH,UAAY,EAAA,iJAAA;AAAA,IACZkI,MAAQ,EAAA,WAAA;AAAA,IACR6I,WAAAA,EAAa3jB,KAAMsI,CAAAA,OAAAA,CAAQkT,OAAQH,CAAAA,KAAAA;AAAAA,GApCK;AAAA,EAsC5CwI,UAAY,EAAA;AAAA,IACR/I,MAAQ,EAAA,WAAA;AAAA,IACR6I,WAAAA,EAAa3jB,KAAMsI,CAAAA,OAAAA,CAAQ5H,KAAM2a,CAAAA,KAAAA;AAAAA,GAxCO;AAAA,EA0C5C4R,UAAY,EAAA;AAAA,IACR/Z,OAAAA,EAASlT,KAAMO,CAAAA,OAAAA,CAAQ,CAAd,CAAA;AAAA,IACT4Y,QAAU,EAAA,GAAA;AAAA,IACVhD,SAAW,EAAA,GAAA;AAAA,GA7C6B;AAAA,EA+C5C+W,eAAiB,EAAA;AAAA,IACbha,OAAAA,EAASlT,KAAMO,CAAAA,OAAAA,CAAQ,CAAd,CAAA;AAAA,IACT4Y,QAAU,EAAA,GAAA;AAAA,IACVhD,SAAW,EAAA,GAAA;AAAA,IACX6N,SAAW,EAAA,YAAA;AAAA,GAnD6B;AAAA,EAqD5CC,kBAAoB,EAAA;AAAA,IAChBnc,QAAU,EAAA,UAAA;AAAA,IACVR,YAAc,EAAA,QAAA;AAAA,IACdkS,GAAK,EAAA,CAAA,CAAA;AAAA,IACLnR,KAAO,EAAA,CAAA,CAAA;AAAA,IACP6b,MAAQ,EAAA,GAAA;AAAA,IACR1e,eAAAA,EAAiBxF,KAAMsI,CAAAA,OAAAA,CAAQsK,UAAWqI,CAAAA,KAAAA;AAAAA,GAN1B;AArDwB,CAApB,CAAA,CAAA,CAAA;AAwEO,SAAA,kBAAA,CAAA;AAAA,EACI3pB,IAAAA;AAAAA,EACA6H,KAAAA;AAAAA,EACA0T,QAAAA;AAAAA,EACAnM,KAAAA;AAAAA,EACA2rB,SAAAA;AAAAA,EACAtH,SAAAA;AAAAA,EACAoI,SAAAA;AAAAA,EACA/0B,QAAAA;AAAAA,EACAm0B,kBAAAA;AAAAA,EACA5+B,OAAAA;AAAAA,EACAy/B,YAAAA;AAAAA,CACwB,EAAA;AAE3D,EAAM/I,MAAAA,sBAAAA,GAAyBjsB,SAASE,QAAa,KAAA,OAAA,CAAA;AACrD,EAAA,MAAME,WAAW2vB,UAAW/vB,CAAAA,QAAD,KAAc,CAAC,CAACA,SAASI,QAAY40B,IAAAA,YAAAA,CAAAA;AAEhE,EAAMrM,MAAAA,aAAAA,GAAgBsD,yBACfxyB,KAAMC,CAAAA,OAAAA,CAAQqH,KAAd,CAAuBA,GAAAA,KAAAA,GAAQ,EAChCA,GAAAA,KAAAA,CAAAA;AAEN2uB,EAAwC,oBAAA,CAAA;AAAA,IACpC1vB,QAAAA;AAAAA,IACAe,KAAAA;AAAAA,IACA0T,QAAAA;AAAAA,GAHgB,CAAA,CAAA;AAMd+C,EAAAA,MAAAA,cAAuCxX,QAASE,CAAAA,QAAAA,KAAa,QACrEF,GAAAA,QAAAA,CAASoO,QAAQoJ,WACTxX,GAAAA,QAAAA,CAASE,QAAa,KAAA,OAAA,IACvBF,SAASiC,EAAgB/B,CAAAA,QAAAA,KAAa,WAC5CF,QAASiC,CAAAA,EAAAA,CAAsBmM,QAAQoJ,WAC5BjjB,GAAAA,KAAAA,CAAAA,CAAAA;AAEV,EAAA,IAAI,CAACijB,WAAAA;AACD,IAAA,MAAM/f,MAAM,gCAAD,CAAA,CAAA;AAEf,EAAMy0B,MAAAA,eAAAA,GAAkB,CAACC,IAAe,KAAA;AAChC3U,IAAAA,IAAAA,YAAY4U,QAAU,EAAA;AACtB,MAAMA,MAAAA,QAAAA,GAAW5U,YAAY4U,QAAS,CAAA;AAAA,QAClC7xB,UAAUhF,OAAQgF,CAAAA,QAAAA;AAAAA,QAClBP,QAAQzE,OAAQyE,CAAAA,MAAAA;AAAAA,QAChBgG,QAAAA;AAAAA,QACAmsB,IAAAA;AAAAA,QACA3U,WAAAA;AAAAA,QACAte,IAAAA;AAAAA,OANa,CAAA,CAAA;AASb,MAAA,IAAA,CAACkzB,QAAAA,IAAYA,QAAS50B,CAAAA,MAAAA,KAAW,CAAG,EAAA;AAC9BC,QAAAA,MAAAA,MAAM,qCAAD,CAAA,CAAA;AAAA,OACd;AACD,MAAO20B,OAAAA,QAAAA,CAAAA;AAAAA,KACV;AACMD,IAAAA,OAAAA,IAAKjzB,CAAAA,IAAAA,CAAAA;AAAAA,GAhBhB,CAAA;AAmBA,EAAMmzB,MAAAA,kBAAAA,GAAqB,CAACF,IAAe,KAAA;AACnC,IAAA,IAAA,OAAO3U,YAAY8U,WAAgB,KAAA,QAAA;AACnC,MAAA,OAAO9U,WAAY8U,CAAAA,WAAAA,CAAAA;AAEvB,IAAI,IAAA,OAAO9U,WAAY8U,CAAAA,WAAAA,KAAgB,UAAY,EAAA;AAC/C,MAAMA,MAAAA,WAAAA,GAAc9U,YAAY8U,WAAY,CAAA;AAAA,QACxC/xB,UAAUhF,OAAQgF,CAAAA,QAAAA;AAAAA,QAClBP,QAAQzE,OAAQyE,CAAAA,MAAAA;AAAAA,QAChBgG,QAAAA;AAAAA,QACAmsB,IAAAA;AAAAA,QACA3U,WAAAA;AAAAA,QACAte,IAAAA;AAAAA,OANgB,CAAA,CAAA;AAShB,MAAA,IAAA,CAACozB,WAAAA,IAAeA,WAAY90B,CAAAA,MAAAA,KAAW,CAAG,EAAA;AACpCC,QAAAA,MAAAA,MAAM,qCAAD,CAAA,CAAA;AAAA,OACd;AACD,MAAO60B,OAAAA,WAAAA,CAAAA;AAAAA,KACV;AACDxsB,IAAAA,OAAAA,CAAQysB,KAAK,+FAAb,CAAA,CAAA;AACA,IAAO,OAAA,GAAA,CAAA;AAAA,GApBX,CAAA;AAuBA,EAAA,4BAES,WAAD,EAAA;AAAA,IAAa,SAAb,EAAA,IAAA;AAAA,IACa,QAAA,EAAUvsB,SAAS0B,UAAYC,EAAAA,QAAAA;AAAAA,IAC/B,KAAOsyB,EAAAA,SAAAA;AAAAA,IAFpB,QAAA,EAAA,CAIK,CAACc,SAAAA,wBACD,cAAD,EAAA;AAAA,MAAgB,MAAhB,EAAA,IAAA;AAAA,MACgB,QAAA,EAAU/0B,SAAS0B,UAAYC,EAAAA,QAAAA;AAAAA,MAD/C,QAAA,sBAEK,aAAD,EAAA;AAAA,QAAe,QAAA;AAAA,OAAf,CAAA;AAAA,KAPR,CAUI,kBAAA9M,GAAA,CAAC,aAAD,EAAA;AAAA,MACI,KAAO8zB,EAAAA,aAAAA;AAAAA,MACP,IAAA;AAAA,MACA,QAAA;AAAA,MACA,SAAA;AAAA,MACA,QAAA;AAAA,MACA,UAAWO,CAAa,QAAA,KAAA;AACpBzU,QAAAA,QAAAA,CAASyU,QAAD,CAAA,CAAA;AAAA,OAPhB;AAAA,MASI,eAAA;AAAA,MACA,kBAAA;AAAA,MACA,WAAA;AAAA,MACA,sBAAA;AAAA,KAZJ,CAAA,EAcCiL,kBACD,oBAAAt/B,GAAA,CAAC,gBAAD,EAAA;AAAA,MAAkB,QAAA;AAAA,KAAlB,CAAA,EAECo/B,SAAa,oBAAAp/B,GAAA,CAAC,cAAD,EAAA;AAAA,MAAiByT,QAAAA,EAAAA,KAAAA;AAAAA,KA3BnC,CAAA,CAAA;AAAA,GAFR,CAAA,CAAA;AAiCH,CAAA;AA+BD,SAA2B,iBAAA,CAAA;AAAA,EACIkP,WAAAA;AAAAA,EACApX,QAAAA;AAAAA,EACA60B,cAAAA;AAAAA,EACA3H,cAAAA;AAAAA,EACArB,sBAAAA;AAAAA,EACAiH,iBAAAA;AAAAA,EACAvG,SAAAA;AAAAA,EACAhE,aAAAA;AAAAA,EACA3oB,QAAAA;AAAAA,EACA+tB,OAAAA;AAAAA,EACAnB,QAAAA;AAAAA,EACAP,kBAAAA;AAAAA,EACAqB,oBAAAA;AAAAA,EACAvf,IAAAA;AAAAA,EACAjV,IAAAA;AAAAA,EACA01B,QAAAA;AAAAA,CAkB5B,EAAA;AAEOpmB,EAAAA,MAAAA,UAAUd,WAAhB,EAAA,CAAA;AACM,EAAA,MAAA;AAAA,IACFumB,YAAAA;AAAAA,IACAC,aAAAA;AAAAA,IACAC,YAAAA;AAAAA,IACAC,YAAAA;AAAAA,IACAC,YAAAA;AAAAA,GAAAA,GACAC,WAAY,CAAA;AAAA,IACRC,QAAQ/W,WAAY+V,CAAAA,aAAAA;AAAAA,IACpBntB,UAAUA,QAAY60B,IAAAA,cAAAA;AAAAA,IACtBC,oBAAsB,EAAA,IAAA;AAAA,IACtBxG,MAAQpB,EAAAA,cAAAA;AAAAA,GAJD,CAAA,CAAA;AAQf,EAAA,4BACK,GACOW,EAAAA;AAAAA,IAAAA,GAAAA,YADR,EAAA;AAAA,IAEI,SAAA,EAAWvlB,IAAKF,CAAAA,OAAAA,CAAQ4iB,QAAU,EAAA;AAAA,MAC7B5iB,CAAAA,OAAAA,CAAQosB,gBAAgB,CAACzG,YAAAA;AAAAA,MAAAA,CACzB3lB,QAAQ8iB,UAAa6C,GAAAA,YAAAA;AAAAA,MAAAA,CACrB3lB,QAAQijB,UAAa4C,GAAAA,YAAAA;AAAAA,MAAAA,CACrB7lB,QAAQgjB,UAAa4C,GAAAA,YAAAA;AAAAA,MAAAA,CACrB5lB,QAAQpI,QAAWA,GAAAA,QAAAA;AAAAA,KALT,CAAA;AAAA,IAOf,EAAI,EAAA;AAAA,MACA2H,OAASkkB,EAAAA,sBAAAA,IAA0BtD,aAAcnxB,CAAAA,MAAAA,GAASjD,KAAY,CAAA,GAAA,MAAA;AAAA,MACtEyT,UAAY,EAAA,QAAA;AAAA,KAXpB;AAAA,IAAA,QAAA,EAAA,iBAcIpT,IAAA,CAAC,GACOs+B,EAAAA;AAAAA,MAAAA,GAAAA,iBAAkBE,CAAAA,cAAAA;AAAAA,MACtB,KAAKF,iBAAkBG,CAAAA,QAAAA;AAAAA,MACvB,EAAI,EAAA;AAAA,QACAtrB,OAAS,EAAA,MAAA;AAAA,QACTC,UAAY,EAAA,QAAA;AAAA,QACZmS,QAAU8R,EAAAA,sBAAAA,IAA0BtD,aAAcnxB,CAAAA,MAAAA,GAAS,MAASjD,GAAAA,KAAAA,CAAAA;AAAAA,QACpEwpB,SAAWkO,EAAAA,sBAAAA,IAA0BtD,aAAcnxB,CAAAA,MAAAA,GAAS,GAAM,GAAA,GAAA;AAAA,QAClEulB,CAAG,EAAA,CAAA;AAAA,QACqB,sBAAA,EAAA;AAAA,UACpBhV,OAAS,EAAA,MAAA;AAAA,SADW;AAAA,OAThC;AAAA,MAeI,QAAA,EAAA,iBAAAlT,GAAA,CAAA,OAAA,EAAA;AAAA,QACI,SAAA;AAAA,QAAA,GACIq5B,aAAa,EAAA;AAAA,OAjBzB,CAmBKvF,EAAAA,aAAAA,CAAc7vB,GAAI,CAAA,CAACX,OAAOwU,KAAU,KAAA;AAC7BmiB,QAAAA,IAAAA,KAAAA,CAAAA;AACA32B,QAAAA,IAAAA,MAAM8gB,wBAA0B,EAAA;AAChC,UAAM4V,MAAAA,cAAAA,GAAiB5C,sBAChBjsB,GAAAA,QAAAA,CAAqCiC,EACtCjC,GAAAA,QAAAA,CAAAA;AACN8uB,UAAAA,KAAAA,uBACK,kBAAD,EAAA;AAAA,YACI,IAAA,EAAO,mBAAkB32B,KAAM8gB,CAAAA,wBAAAA,CAAAA,CAAAA;AAAAA,YAC/B,QAAU4V,EAAAA,cAAAA;AAAAA,YACV,QAAA;AAAA,YACA,OAAO12B,KAAM8gB,CAAAA,wBAAAA;AAAAA,YACb,OAAA;AAAA,YACA,MAAM9gB,KAAMgW,CAAAA,IAAAA;AAAAA,WAPpB,CAAA,CAAA;AAAA,SASH,MAAA,IAAUhW,MAAMg0B,IAAM,EAAA;AACnB2C,UAAAA,KAAAA,uBACK,qBAAD,EAAA;AAAA,YACI,KAAA;AAAA,YACA,QAAA;AAAA,YACA,WAAA,EAAazC,kBAAmBl0B,CAAAA,KAAAA,CAAMg0B,IAAP,CAAA;AAAA,YAC/B,oBAAA;AAAA,YACA,IAAA;AAAA,WANR,CAAA,CAAA;AAAA,SASH;AAED,QAAA,2BACK,SAAD,EAAA;AAAA,UAEI,WAAA,EAAc,CAAcjzB,YAAAA,EAAAA,IAAAA,CAAAA,CAAAA,EAAQf,KAAM2F,CAAAA,EAAAA,CAAAA,CAAAA,CAAAA;AAAAA,UAC1C,KAAA;AAAA,UAHJ,QAIK,EAAA,CAACy1B,QAAUC,EAAAA,QAAAA,yBACP,GAAD,EAAA;AAAA,YACI,KAAKD,QAASF,CAAAA,QAAAA;AAAAA,YAAAA,GACVE,QAASE,CAAAA,cAAAA;AAAAA,YAAAA,GACTF,QAASI,CAAAA,eAAAA;AAAAA,YACb,KAAA,EACIJ,SAASE,cAAexT,CAAAA,KAAAA;AAAAA,YAE5B,EAAI,EAAA;AAAA,cACA/Q,YAAc,EAAA,KAAA;AAAA,aARtB;AAAA,YAWK4f,QAAAA,EAAAA,KAAAA;AAAAA,WAXL,CAAA;AAAA,SAJE,EAAA,CAAA,YAAA,EAAc51B,IAAQf,CAAAA,CAAAA,EAAAA,KAAAA,CAAM2F,EADtC,CAAA,CAAA,CAAA,CAAA,CAAA;AAAA,OA5BP,CAoDAo1B,EAAAA,iBAAAA,CAAkBU,WAvEvB,CAAA;AAAA,KAdJ,CA0FI,kBAAA/+B,GAAA,CAAC,GAAD,EAAA;AAAA,MACI,EAAI,EAAA;AAAA,QACAolB,QAAU,EAAA,CAAA;AAAA,QACV8D,SAAW,EAAA,EAAA;AAAA,QACX6N,SAAW,EAAA,YAAA;AAAA,QACXX,CAAG,EAAA,CAAA;AAAA,OALX;AAAA,MAAA,QAAA,sBAOK,UAAD,EAAA;AAAA,QAAY,KAAO,EAAA,QAAA;AAAA,QACP,OAAS,EAAA,OAAA;AAAA,QACT,IAAKrjB,CAAW,KAAA,MAAA;AAAA,UACZoC,KAAO,EAAA,SAAA;AAAA,UACPqD,UAAAA,EAAYzF,MAAM0F,UAAW8J,CAAAA,gBAAAA;AAAAA,SAFjB,CAAA;AAAA,QAIvBwX,QAAAA,EAAAA,QAAAA;AAAAA,OANL,CAAA;AAAA,KAjGR,CAAA,CAAA;AAAA,GADJ,CAAA,CAAA;AA8GH,CAAA;AAE6B,SAAA,aAAA,CAAA;AAAA,EACI5uB,QAAAA;AAAAA,EACA9G,IAAAA;AAAAA,EACA6H,KAAAA;AAAAA,EACA0rB,QAAAA;AAAAA,EACAR,sBAAAA;AAAAA,EACA7rB,QAAAA;AAAAA,EACAusB,SAAAA;AAAAA,EACAnV,WAAAA;AAAAA,EACA0U,eAAAA;AAAAA,EACAG,kBAAAA;AAAAA,CACmB,EAAA;AAE3CtT,EAAAA,MAAAA,UAAUC,gBAAhB,EAAA,CAAA;AAEA,EAAA,IAAIiT,sBAAwB,EAAA;AAClBpU,IAAAA,MAAAA,aAAgB7X,GAAAA,QAAAA,CAAAA;AAClB6X,IAAAA,IAAAA,cAAc5V,EAAI,EAAA;AAClB,MAAI4V,IAAAA,aAAAA,CAAc5V,EAAG/B,CAAAA,QAAAA,KAAa,QAAU,EAAA;AAClCzI,QAAAA,MAAAA,MAAM,uDAAD,CAAA,CAAA;AAAA,OACd;AAAA,KACE,MAAA;AACGA,MAAAA,MAAAA,MAAM,uDAAD,CAAA,CAAA;AAAA,KACd;AAAA,GACJ;AAED,EAAA,MAAMm1B,WAA4BpV,WAAaoV,EAAAA,QAAAA,CAAAA;AAE/C,EAAMze,MAAAA,IAAAA,GAAO8d,yBAAyB,OAAU,GAAA,SAAA,CAAA;AAE1CY,EAAAA,MAAAA,uBACDZ,CACKlrB,sBAAAA,GAAAA,KAAAA,GACA,CAACA,QAAkBjI,IAAIX,CACzB,KAAA,MAAA;AAAA,IACI2F,IAAIgvB,WADR,EAAA;AAAA,IAEI7T,wBAA0B9gB,EAAAA,KAAAA;AAAAA,IAC1By0B,QAAAA;AAAAA,IACAze,IAAAA;AAAAA,GAPR,CAAA,CAAA,CAAA;AAWJ,EAAA,MAAM,CAAC4e,YAAAA,EAAcoI,eAAmBphC,CAAAA,GAAAA,KAAAA,CAAMK,SAA4B2M,KAAlC,CAAA,CAAA;AACxC,EAAA,MAAM,CAAC4nB,aAAAA,EAAeC,gBAAoB70B,CAAAA,GAAAA,KAAAA,CAAMK,SAA6By4B,oBAAnC,CAAA,CAAA;AAC1C,EAAwC94B,KAAAA,CAAMK,SAA6BG,KAAnC,CAAA,EAAA;AAExC,EAAA,IAAI,CAACkxB,OAAAA,CAAQsH,YAAchsB,EAAAA,KAAf,CAAuB,EAAA;AAC/Bo0B,IAAAA,eAAAA,CAAgBp0B,KAAD,CAAA,CAAA;AACf6nB,IAAAA,gBAAAA,CAAiBiE,oBAAD,CAAA,CAAA;AAAA,GACnB;AAED,EAAuB,SAAA,WAAA,GAAA;AACnB,IAAOjjB,OAAAA,IAAAA,CAAKojB,MAAMpjB,IAAKqjB,CAAAA,MAAAA,KAAWrjB,IAAKojB,CAAAA,KAAAA,CAAME,MAAOC,CAAAA,gBAAlB,CAA3B,CAAA,CAAA;AAAA,GACV;AAEKiI,EAAAA,MAAAA,QAAAA,GAAW,CAACC,SAAAA,EAAmBC,OAAoB,KAAA;AACrD,IAAMpM,MAAAA,QAAAA,GAAW,CAAC,GAAGP,aAAJ,CAAA,CAAA;AACjB,IAAA,MAAMjqB,OAAOwqB,QAASmM,CAAAA,SAAAA,CAAAA,CAAAA;AACtBnM,IAASzwB,QAAAA,CAAAA,MAAAA,CAAO48B,WAAW,CAA3B,CAAA,CAAA;AACAnM,IAASzwB,QAAAA,CAAAA,MAAAA,CAAO68B,OAAS,EAAA,CAAA,EAAG52B,IAA5B,CAAA,CAAA;AACAkqB,IAAAA,gBAAAA,CAAiBM,QAAD,CAAA,CAAA;AACV4E,IAAAA,MAAAA,UAAa5E,GAAAA,QAAAA,CACdvvB,MAAOM,CAAAA,CAAAA,CAAAA,KAAK,CAAC,CAACA,CAAEgf,CAAAA,wBADF,CAEdngB,CAAAA,GAAAA,CAAImB,CAAKA,CAAAA,KAAAA,CAAAA,CAAEgf,wBAFG,CAAA,CAAA;AAGnBwT,IAAAA,QAAAA,CAASqB,UAAD,CAAA,CAAA;AAAA,GATZ,CAAA;AAYA,EAAM8E,MAAAA,SAAAA,GAAY,CAAC96B,MAAgB,KAAA;AAE/B,IAAI,IAAA,CAACA,OAAO+6B,WAAa,EAAA;AACrB,MAAA,OAAA;AAAA,KACH;AAEDuC,IAAAA,QAAAA,CAASt9B,MAAO8G,CAAAA,MAAAA,CAAO+N,KAAO7U,EAAAA,MAAAA,CAAO+6B,YAAYlmB,KAAzC,CAAA,CAAA;AAAA,GANZ,CAAA;AAUA,EAAA,SAAA,gBAAA,CAA0BygB,KAA2B,EAAA;AAC1CA,IAAAA,OAAAA,KAAMzzB,CAAAA,MAAAA,CACT,CAAC4F,CAAAA,EAAGxH,CAAM,KAAA;AACC,MAAEq1B,OAAAA,CAAAA,KAAAA,CAAMt0B,GAAKyG,CAAAA,CAAAA,EAAAA,KAAMA,EAAE0Z,CAAAA,wBAAnB,CAA6CoU,CAAAA,OAAAA,CAAQ9tB,CAAE0Z,CAAAA,wBAAvD,CAAqFlhB,KAAAA,CAAAA,IAAM,CAACwH,CAAAA,CAAE0Z,8BAC3FngB,KAAAA,CAAAA,GAAAA,CAAKyG,CAAMA,EAAAA,KAAAA,EAAAA,CAAE4sB,IAAnB,CAAA,CAAyBkB,OAAQ9tB,CAAAA,CAAAA,CAAE4sB,IAAnC,CAAA,KAA6Cp0B,CAAM,IAAA,CAACwH,CAAE4sB,CAAAA,IAAAA,CAAAA,CAAAA;AAAAA,KAH7D,CAAA,CAAA;AAAA,GAMV;AAED,EAAMmB,MAAAA,cAAAA,GAAiB,CAACC,aAA0B,KAAA;AAE9C,IAAI,IAAA,CAACA,cAAc/1B,MAAU4I,IAAAA,QAAAA;AACzB,MAAA,OAAA;AAEAotB,IAAAA,IAAAA,gBAAAA,CAAAA;AACJ,IAAA,IAAIvB,sBAAwB,EAAA;AACxBuB,MAAAA,gBAAAA,GAAmB,CAAC,GAAG7E,aAAAA,EACnB,GAAI4E,aAAAA,CAAcz0B,IAAIqzB,CAAS,IAAA,MAAA;AAAA,QAC3BruB,IAAIgvB,WADuB,EAAA;AAAA,QAE3BX,IAAAA;AAAAA,QACAC,QAAAA,EAAUF,gBAAgBC,IAAD,CAAA;AAAA,QACzBS,QAAAA;AAAAA,QACAze,IAAAA;AAAAA,QALA,CADW,CAAA,CAAA;AAAA,KAQhB,MAAA;AACHqf,MAAAA,gBAAAA,GAAmB,CAAC;AAAA,QAChB1vB,IAAIgvB,WADY,EAAA;AAAA,QAEhBX,MAAMoB,aAAc,CAAA,CAAA,CAAA;AAAA,QACpBnB,QAAAA,EAAUF,eAAgBqB,CAAAA,aAAAA,CAAc,CAAf,CAAA,CAAA;AAAA,QACzBX,QAAAA;AAAAA,QACAze,IAAAA;AAAAA,OALe,CAAA,CAAA;AAAA,KAOtB;AAGDqf,IAAAA,gBAAAA,GAAmBC,iBAAiBD,gBAAD,CAAA,CAAA;AACnC5E,IAAAA,gBAAAA,CAAiB4E,gBAAD,CAAA,CAAA;AAAA,GA3BpB,CAAA;AA8BA,EAAA,MAAME,oBAAuB,GAAA,OAAOC,YACAx1B,EAAAA,KAAAA,EACAy0B,SAAmB,KAAA;AAEnD9sB,IAAQC,OAAAA,CAAAA,KAAAA,CAAM,sBAAwB4tB,EAAAA,YAAAA,EAAcx1B,KAApD,CAAA,CAAA;AAEIy1B,IAAAA,IAAAA,uBAA0BD,GAAAA,YAAAA,CAAAA;AAC1BnW,IAAAA,IAAAA,YAAY2B,QAAU,EAAA;AACtByU,MAA0B,uBAAA,GAAA,MAAM7U,OAAQK,CAAAA,cAAAA,CAAeuU,YAAvB,CAAA,CAAA;AAAA,KACnC;AACGnW,IAAAA,IAAAA,YAAYqW,WAAa,EAAA;AACzBD,MAA0B,uBAAA,GAAA,MAAMpW,WAAYqW,CAAAA,WAAAA,CAAYD,uBAAxB,CAAA,CAAA;AAAA,KACnC;AAEG1E,IAAAA,IAAAA,QAAAA,CAAAA;AAEJ/wB,IAAAA,KAAAA,CAAM8gB,wBAA2B2U,GAAAA,uBAAAA,CAAAA;AACjCz1B,IAAAA,KAAAA,CAAMy0B,QAAWA,GAAAA,SAAAA,CAAAA;AACjB1D,IAAW,QAAA,GAAA,CAAC,GAAGP,aAAJ,CAAA,CAAA;AAEXO,IAAAA,QAAAA,GAAWuE,iBAAiBvE,QAAD,CAAA,CAAA;AAC3BN,IAAAA,gBAAAA,CAAiBM,QAAD,CAAA,CAAA;AAEV4E,IAAAA,MAAAA,UAAa5E,GAAAA,QAAAA,CACdvvB,MAAOM,CAAAA,CAAAA,CAAAA,KAAK,CAAC,CAACA,CAAEgf,CAAAA,wBADF,CAEdngB,CAAAA,GAAAA,CAAImB,CAAKA,CAAAA,KAAAA,CAAAA,CAAEgf,wBAFG,CAAA,CAAA;AAInB,IAAA,IAAIgT,sBAAwB,EAAA;AACxBQ,MAAAA,QAAAA,CAASqB,UAAD,CAAA,CAAA;AAAA,KACL,MAAA;AACHrB,MAASqB,QAAAA,CAAAA,UAAAA,GAAaA,UAAW,CAAA,CAAA,CAAA,GAAK,IAA9B,CAAA,CAAA;AAAA,KACX;AAAA,GA/BL,CAAA;AAkCA,EAAMC,MAAAA,OAAAA,GAAU,CAACC,+BAA4C,KAAA;AACzD,IAAA,IAAI/B,sBAAwB,EAAA;AACxB,MAAA,MAAM/C,WAA+BP,aAAchvB,CAAAA,MAAAA,CAAO4F,CAAKA,CAAAA,KAAAA,CAAAA,CAAE0Z,6BAA6B+U,+BAAzD,CAAA,CAAA;AACrCvB,MAAAA,QAAAA,CAASvD,QAASvvB,CAAAA,MAAAA,CAAO4F,CAAK,CAAA,KAAA,CAAC,CAACA,CAAAA,CAAE0Z,wBAAzB,CAAA,CAAmDngB,GAAIyG,CAAAA,CAAAA,CAAAA,KAAKA,CAAE0Z,CAAAA,wBAA9D,CAAD,CAAA,CAAA;AACR2P,MAAAA,gBAAAA,CAAiBM,QAAD,CAAA,CAAA;AAAA,KACb,MAAA;AACHuD,MAAAA,QAAAA,CAAS,IAAD,CAAA,CAAA;AACR7D,MAAAA,gBAAAA,CAAiB,EAAD,CAAA,CAAA;AAAA,KACnB;AAAA,GARL,CAAA;AAWA,EAAMgG,MAAAA,QAAAA,GAAW3C,yBACX,yDACA,GAAA,mDAAA,CAAA;AAEN,EAAA,2BACK,eAAD,EAAA;AAAA,IAAiB,SAAA;AAAA,IAAjB,QAAA,sBACK,SAAD,EAAA;AAAA,MAAW,aAAc,CAAY/yB,UAAAA,EAAAA,IAAAA,CAAAA,CAAAA;AAAAA,MAAQ,SAAU,EAAA,YAAA;AAAA,MAAvD,QAAA,EACK,CAACq6B,QAAAA,EAAUC,QAAa,KAAA;AACrB,QAAA,2BAAQ,iBAAD,EAAA;AAAA,UAAmB,WAAA;AAAA,UACA,QAAA;AAAA,UACA,gBAAgBA,QAASyB,CAAAA,cAAAA;AAAAA,UACzB,iBAAmB1B,EAAAA,QAAAA;AAAAA,UACnB,cAAA;AAAA,UACA,sBAAA;AAAA,UACA,SAAA;AAAA,UACA,aAAA;AAAA,UACA,QAAA;AAAA,UACA,OAAA;AAAA,UACA,QAAA;AAAA,UACA,kBAAA;AAAA,UACA,oBAAA;AAAA,UACA,IAAA;AAAA,UACA,IAAA;AAAA,UACA,QAAA;AAAA,SAf1B,CAAA,CAAA;AAAA,OAgBH;AAAA,KAlBL,CAAA;AAAA,GAFR,CAAA,CAAA;AAyBH,CAAA;AAaqC,SAAA,qBAAA,CAAA;AAAA,EACIjH,WAAAA;AAAAA,EACAn0B,KAAAA;AAAAA,EACAy0B,QAAAA;AAAAA,EACAc,oBAAAA;AAAAA,EACAvf,IAAAA;AAAAA,CACuB,EAAA;AAGvD4K,EAAAA,MAAAA,UAAUC,gBAAhB,EAAA,CAAA;AAEMxQ,EAAAA,MAAAA,UAAUd,WAAhB,EAAA,CAAA;AACMwnB,EAAAA,MAAAA,kBAAkB9Z,qBAAxB,EAAA,CAAA;AAEM,EAAA,MAAA,CAAC9M,KAAAA,EAAO6mB,QAAYp7B,CAAAA,GAAAA,KAAAA,CAAMK,QAAhC,EAAA,CAAA;AACA,EAAA,MAAM,CAACgR,OAAAA,EAASwD,UAAc7U,CAAAA,GAAAA,KAAAA,CAAMK,SAAkB,KAAxB,CAAA,CAAA;AAC9B,EAAMg7B,MAAAA,OAAAA,GAAUr7B,KAAMsH,CAAAA,MAAAA,CAAO,KAAb,CAAA,CAAA;AAEhB,EAAA,MAAMg0B,MAASzzB,GAAAA,WAAAA,CAAY,CAACuwB,IAAAA,EAAYC,QAAsB,KAAA;AAE1D+C,IAAAA,QAAAA,CAAS56B,KAAD,CAAA,CAAA,CAAA;AACRqU,IAAAA,UAAAA,CAAW,IAAD,CAAA,CAAA;AAEVmQ,IAAAA,OAAAA,CAAQuW,UAAW,CAAA;AAAA,MAAEnD,IAAAA;AAAAA,MAAMC,QAAAA;AAAAA,MAAUj1B,IAAMm1B,EAAAA,WAAAA;AAAAA,MAAaM,QAAAA;AAAAA,KAAxD,CACKjpB,CAAAA,IAAAA,CAAK,OAAO;AAAA,MAAExM,IAAAA;AAAAA,KAAW,KAAA;AACtB2I,MAAAA,OAAAA,CAAQC,MAAM,mBAAd,CAAA,CAAA;AACA,MAAM2tB,MAAAA,oBAAAA,CAAqBv2B,IAAMgB,EAAAA,KAAAA,EAAOy0B,QAAd,CAAA,CAAA;AAC1B,MAAA,IAAIwC,OAAQnzB,CAAAA,OAAAA;AACR2M,QAAAA,UAAAA,CAAW,KAAD,CAAA,CAAA;AAAA,KALtB,CAOKhF,CAAAA,KAAAA,CAAO3J,CAAM,CAAA,KAAA;AACV6F,MAAQwI,OAAAA,CAAAA,KAAAA,CAAM,gBAAgBrO,CAA9B,CAAA,CAAA;AACIm1B,MAAAA,IAAAA,QAAQnzB,OAAS,EAAA;AACjBkzB,QAAAA,QAAAA,CAASl1B,EAAEzF,OAAH,CAAA,CAAA;AACRoU,QAAAA,UAAAA,CAAW,KAAD,CAAA,CAAA;AAAA,OACb;AACDsmB,MAAAA,eAAAA,CAAgBt7B,IAAK,CAAA;AAAA,QACjBc,IAAM,EAAA,OAAA;AAAA,QACNL,KAAO,EAAA,sBAAA;AAAA,QACPG,SAASyF,CAAEzF,CAAAA,OAAAA;AAAAA,OAHf,CAAA,CAAA;AAAA,KAbR,CAAA,CAAA;AAAA,GAmBH,EAAE,CAAC2D,KAAOy0B,EAAAA,QAAAA,EAAUc,sBAAsBwB,eAAiBnW,EAAAA,OAAAA,EAASuT,WAAlE,CAxBuB,CAAA,CAAA;AA0B1Bv4B,EAAAA,KAAAA,CAAM2C,UAAU,MAAM;AAClB04B,IAAAA,OAAAA,CAAQnzB,OAAU,GAAA,IAAA,CAAA;AAClB,IAAA,IAAI9D,KAAMg0B,CAAAA,IAAAA;AACNkD,MAAOl3B,MAAAA,CAAAA,KAAAA,CAAMg0B,IAAMh0B,EAAAA,KAAAA,CAAMi0B,QAAnB,CAAA,CAAA;AACV,IAAA,OAAO,MAAM;AACTgD,MAAAA,OAAAA,CAAQnzB,OAAU,GAAA,KAAA,CAAA;AAAA,KADtB,CAAA;AAAA,KAGD,CAAC9D,KAAAA,CAAMg0B,MAAMh0B,KAAMi0B,CAAAA,QAAAA,EAAUiD,MAA7B,CAPH,CAAA,CAAA;AASA,EAAA,2BAEK,GAAD,EAAA;AAAA,IAAK,CAAG,EAAA,CAAA;AAAA,IAAR,QAAA,uBACK,KAAD,EAAA;AAAA,MAAO,SAAW,EAAA,CAAA;AAAA,MACX,SAAWlhB,EAAAA,IAAAA,KAAS,SAAY3F,GAAAA,OAAAA,CAAQqsB,aAAarsB,OAAQssB,CAAAA,eAAAA;AAAAA,MAC7D,OAAS,EAAA,UAAA;AAAA,MAEX1vB,QAAAA,EAAAA,CAAAA,OAAW,oBAAAvQ,GAAA,CAAC,QAAD,EAAA;AAAA,QAAU,OAAQ,EAAA,aAAA;AAAA,QAAc,EAAI,EAAA;AAAA,UAC5CgI,KAAO,EAAA,MAAA;AAAA,UACPsS,MAAQ,EAAA,MAAA;AAAA,SAFoC;AAAA,OAJpD,CAAA,EASK7G,KAAS,oBAAA1T,IAAA,CAAA,GAAA,EAAA;AAAA,QAAA,QAAA,EAAA,CAAA,wBAAA,EAA0B0T,KAA1B,CAAA;AAAA,OATd,CAAA,CAAA;AAAA,KAAA,CAAA;AAAA,GAHR,CAAA,CAAA;AAmBH,CAAA;AAWkC,SAAA,kBAAA,CAAA;AAAA,EACIpP,IAAAA;AAAAA,EACA8G,QAAAA;AAAAA,EACAe,KAAAA;AAAAA,EACAgtB,OAAAA;AAAAA,EACA3tB,QAAAA;AAAAA,EACA+N,IAAAA;AAAAA,CACwB,EAAA;AAErD3F,EAAAA,MAAAA,UAAUd,WAAhB,EAAA,CAAA;AACA,EAAA,2BACK,GAAD,EAAA;AAAA,IAAK,CAAG,EAAA,CAAA;AAAA,IAAG,QAAU,EAAA,UAAA;AAAA,IAArB,QAAA,uBAEK,KAAD,EAAA;AAAA,MACI,SAAW,EAAA,CAAA;AAAA,MACX,SAAWyG,EAAAA,IAAAA,KAAS,SAAY3F,GAAAA,OAAAA,CAAQqsB,aAAarsB,OAAQssB,CAAAA,eAAAA;AAAAA,MAC7D,OAAS,EAAA,UAAA;AAAA,MAER,QAAA,EAAA,CAAA,CAAC10B,QAAAA,wBAEF,GAAA,EAAA;AAAA,QACI,WAAWoI,OAAQqjB,CAAAA,kBAAAA;AAAAA,QADvB,QAAA,sBAEK,UAAD,EAAA;AAAA,UACI,IAAM,EAAA,OAAA;AAAA,UACN,SAAUjN,CAAU,KAAA,KAAA;AAChBA,YAAAA,KAAAA,CAAM3P,eAAN,EAAA,CAAA;AACA8e,YAAAA,OAAAA,CAAQhtB,KAAD,CAAA,CAAA;AAAA,WAJf;AAAA,UAAA,QAAA,sBAMK,SAAD,EAAA;AAAA,YAAW,QAAU,EAAA,OAAA;AAAA,WAArB,CAAA;AAAA,SANJ,CAAA;AAAA,OAFJ,CAAA,EAaCA,KACD,oBAAAlM,GAAA,CAAC,aAAD,EAAA;AAAA,QAAA,QAAA,sBACK,gBAAD,EAAA;AAAA,UAAkB,IAAA;AAAA,UACA,KAAA;AAAA,UACA,QAAA;AAAA,UACA,IAAA;AAAA,SAHlB,CAAA;AAAA,OAtBR,CAAA,CAAA;AAAA,KAAA,CAAA;AAAA,GAHR,CAAA,CAAA;AAqCH;;ACvtBD,MAAMi/B,YAAansB,GAAAA,UAAAA,CAAW,CAACC,KAAAA,KAAiBC,YAAa,CAAA;AAAA,EACzDksB,UAAY,EAAA;AAAA,IACR5U,SAAWvX,EAAAA,KAAAA,CAAMO,OAAQ,CAAA,CAAA,GAAI,CAAlB,CAAA;AAAA,IACXsV,UAAY7V,EAAAA,KAAAA,CAAMO,OAAQ,CAAA,CAAA,GAAI,CAAlB,CAAA;AAAA,GAHyC;AAAA,EAKzD6rB,gBAAkB,EAAA;AAAA,IACd7U,SAAW,EAAA,MAAA;AAAA,IACX1B,UAAY7V,EAAAA,KAAAA,CAAMO,OAAQ,CAAA,CAAA,GAAI,CAAlB,CAAA;AAAA,GAFE;AALuC,CAAD,CAA/B,CAAA,CAAA;AAqBwB,SAAA,SAAA,CAAA;AAAA,EACIjP,IAAAA;AAAAA,EACA6H,KAAAA;AAAAA,EACA0T,QAAAA;AAAAA,EACAnM,KAAAA;AAAAA,EACA2rB,SAAAA;AAAAA,EACA7zB,QAAAA;AAAAA,EACAusB,SAAAA;AAAAA,EACA3sB,QAAAA;AAAAA,EACAm0B,kBAAAA;AAAAA,EACAoB,aAAAA;AAAAA,EACAnB,oBAAAA;AAAAA,CACkB,EAAA;AAEjE5rB,EAAAA,MAAAA,UAAUsrB,YAAhB,EAAA,CAAA;AAEA,EAAIvc,IAAAA,SAAAA,CAAAA;AACAoE,EAAAA,IAAAA,SAAAA,CAAAA;AACJ,EAAI3b,IAAAA,QAAAA,CAASE,aAAa,QAAU,EAAA;AAC1BlH,IAAAA,MAAAA,GAAAA,GAAOgH,SAA4BoO,MAAQpV,EAAAA,GAAAA,CAAAA;AACjDue,IAAY,SAAA,GAAA,OAAOve,GAAQ,KAAA,QAAA,GAAWA,GAAMzE,GAAAA,KAAAA,CAAAA,CAAAA;AAC5ConB,IAAAA,SAAAA,GAAa3b,SAA4BoO,MAAQuN,EAAAA,SAAAA,CAAAA;AAAAA,GACpD;AAED+T,EAAqB,oBAAA,CAAA;AAAA,IACjB1vB,QAAAA;AAAAA,IACAe,KAAAA;AAAAA,IACA0T,QAAAA;AAAAA,GAHgB,CAAA,CAAA;AAMpB,EAAM+gB,MAAAA,WAAAA,GAAc,CAAC,CAAC7Z,SAAAA,CAAAA;AAEtB,EAAMgN,MAAAA,aAAAA,GAAgB5nB,UAAmBb,QAAAA,CAAAA,QAAAA,KAAa,WAAW,EAAKa,GAAAA,KAAAA,KAAU,IAAI,CAAI,GAAA,EAAA,CAAA,CAAA;AAExF,EAAA,MAAM00B,kBAAkB9M,aAAkB+M,KAAAA,QAAAA,CAAAA;AAC1C,EAAA,MAAMC,YAAY,CAACF,eAAAA,IAAmBz1B,QAASE,CAAAA,QAAAA,KAAa,WAAW,QAAW3L,GAAAA,KAAAA,CAAAA,CAAAA;AAE5Em0B,EAAAA,MAAAA,WAAAA,GAAc,CAACQ,QAA+C,KAAA;AAE5D,IAAA,IAAA,CAACA,QAAU,EAAA;AACXzU,MAAAA,QAAAA,CACI,IADI,CAAA,CAAA;AAAA,KAGX,MAAA,IAAUkhB,cAAc,QAAU,EAAA;AAC/B,MAAMC,MAAAA,QAAAA,GAAWlM,WAAWR,QAA5B,CAAA,CAAA;AACAzU,MAAAA,QAAAA,CACImhB,QADJ,CAAA,CAAA;AAAA,KAGG,MAAA;AACHnhB,MAAAA,QAAAA,CACIyU,QADI,CAAA,CAAA;AAAA,KAGX;AAAA,GAfL,CAAA;AAkBM2M,EAAAA,MAAAA,WAAAA,uBACD,WAAD,EAAA;AAAA,IACI,EAAI,EAAA;AAAA,MACA9X,SAAW,EAAA,MAAA;AAAA,KAFnB;AAAA,IAII,SAAA;AAAA,IACA,IAAM4X,EAAAA,SAAAA;AAAAA,IACN,SAAWH,EAAAA,WAAAA;AAAAA,IACX,UAAY,EAAA;AAAA,MACRM,IAAM,EAAA,CAAA;AAAA,KARd;AAAA,IAUI,KAAA,EAAOL,eAAkB,GAAA,UAAA,GAAc10B,KAAS,IAAA,EAAA;AAAA,IAChD,QAAA;AAAA,IACA,UAAW8e,CAAQ,GAAA,KAAA;AACf6I,MAAY7I,WAAAA,CAAAA,GAAAA,CAAIlhB,OAAOoC,KAAvB,CAAA,CAAA;AAAA,KACH;AAAA,GAfT,CAAA,CAAA;AAoBI,EAAA,4BAAAuN,QAAA,EAAA;AAAA,IAAA,QAAA,EAAA,iBAEI1Z,IAAA,CAAC,WAAD,EAAA;AAAA,MACI,OAAQ,EAAA,QAAA;AAAA,MACR,QAAA,EAAUoL,SAAS0B,UAAYC,EAAAA,QAAAA;AAAAA,MAC/B,KAAOsyB,EAAAA,SAAAA;AAAAA,MACP,QAAUwB,EAAAA,eAAAA;AAAAA,MACV,SALJ,EAAA,IAAA;AAAA,MAAA,QAAA,EAAA,iBAOI5gC,GAAA,CAAC,UAAD,EAAA;AAAA,QACI,OAAS,EAAA;AAAA,UACLqY,MAAM1E,OAAQurB,CAAAA,UAAAA;AAAAA,UACdM,QAAQ7rB,OAAQwrB,CAAAA,gBAAAA;AAAAA,SAHxB;AAAA,QAAA,QAAA,sBAKK,aAAD,EAAA;AAAA,UAAe,QAAA;AAAA,SAAf,CAAA;AAAA,OALJ,CAAA,EAQC6B,WAED,kBAAAjhC,IAAA,CAAC,GAAD,EAAA;AAAA,QAAK,OAAS,EAAA,MAAA;AAAA,QAAd,QAAA,EAAA,iBAEIA,IAAA,CAAC,GAAD,EAAA;AAAA,UAAK,QAAU,EAAA,CAAA;AAAA,UACVq/B,QAAAA,EAAAA,CAAAA,SAAa,oBAAAp/B,GAAA,CAAC,cAAD,EAAA;AAAA,YAAiByT,QAAAA,EAAAA,KAAAA;AAAAA,WAAjB,CAAA,EAEb6rB,kBACD,oBAAAt/B,GAAA,CAAC,gBAAD,EAAA;AAAA,YAAkB,QAAA;AAAA,WAJtB,CAAA,CAAA;AAAA,SAAA,CAAA,EAOC0gC,aACD,oBAAA1gC,GAAA,CAAC,gBAAD,EAAA;AAAA,UACI,OAAS4gC,EAAAA,eAAAA;AAAAA,UACT,KAAO,EAAA;AAAA,YAAEne,WAAa,EAAA,CAAA;AAAA,WAF1B;AAAA,UAGI,cAAgB,EAAA,OAAA;AAAA,UAChB,OAAA,sBACK,MAAD,EAAA;AAAA,YACI,IAAM,EAAA,OAAA;AAAA,YACN,IAAM,EAAA,UAAA;AAAA,YACN,UAAWuI,CAAQ,GAAA,KAAA;AACf6I,cAAAA,WAAAA,CACI7I,GAAIlhB,CAAAA,MAAAA,CAAOwrB,OAAUuL,GAAAA,QAAAA,GAAgBnhC,KAD9B,CAAA,CAAA,CAAA;AAAA,aAEd;AAAA,WAXb,CAAA;AAAA,UAaI,QAAA;AAAA,UACA,KAAA,sBACK,UAAD,EAAA;AAAA,YAAY,OAAS,EAAA,SAAA;AAAA,YAArB,QAAA,EAAA,uBAAA;AAAA,WAAA,CAAA;AAAA,SAzBZ,CAAA,CAAA;AAAA,OAjBJ,CAAA,CAAA;AAAA,KAAA,CAAA,EAoDCgjB,SAAaoR,IAAAA,aAAAA,wBACb,aAAD,EAAA;AAAA,MAAA,QAAA,sBACK,GAAD,EAAA;AAAA,QAAK,CAAG,EAAA,CAAA;AAAA,QAAR,QAAA,sBACK,gBAAD,EAAA;AAAA,UAAkB,IAAA;AAAA,UACA,KAAOA,EAAAA,aAAAA;AAAAA,UACP,QAAA;AAAA,UACA,IAAM,EAAA,SAAA;AAAA,SAHxB,CAAA;AAAA,OADJ,CAAA;AAAA,KAxDR,CAAA,CAAA;AAAA,GADJ,CAAA,CAAA;AAoEH;;ACzKM,MAAMjhB,WAAYC,GAAAA,UAAAA,CAAW,CAACC,KAAAA,KACjCC,YAAa,CAAA;AAAA,EACTkuB,WAAa,EAAA;AAAA,IACTpmB,cAAgB,EAAA,eAAA;AAAA,IAChBzH,MAAQ,EAAA,CAAA;AAAA,IACRrL,KAAO,EAAA,MAAA;AAAA,IACPkhB,SAAW,EAAA,MAAA;AAAA,IACX1V,WAAa,EAAA,MAAA;AAAA,IACb0W,YAAc,EAAA,MAAA;AAAA,IACd/U,KAAO,EAAA,qBAAA;AAAA,IACP4hB,SAAW,EAAA,YAAA;AAAA,IACXlc,QAAU,EAAA,UAAA;AAAA,IACV3H,OAAS,EAAA,aAAA;AAAA,IACTC,UAAY,EAAA,QAAA;AAAA,IACZoF,eAAiBxF,EAAAA,KAAAA,CAAMsI,OAAQna,CAAAA,IAAAA,KAAS,UAAU,qBAAwB,GAAA,2BAAA;AAAA,IAC1Ey+B,mBAAqB,EAAA,KAAA;AAAA,IACrBC,oBAAsB,EAAA,KAAA;AAAA,IACtB9Z,UAAY,EAAA,yDAAA;AAAA,IACC,WAAA,EAAA;AAAA,MACT3J,YAAcpJ,EAAAA,KAAAA,CAAMsI,OAAQna,CAAAA,IAAAA,KAAS,UAAU,+BAAkC,GAAA,oCAAA;AAAA,MACjFu7B,IAAM,EAAA,CAAA;AAAA,MACNthB,MAAQ,EAAA,CAAA;AAAA,MACRyH,OAAS,EAAA,UAAA;AAAA,MACT/H,QAAU,EAAA,UAAA;AAAA,MACVO,KAAO,EAAA,CAAA;AAAA,MACP0K,UAAY,EAAA,4DAAA;AAAA,MACZkD,aAAe,EAAA,MAAA;AAAA,KAxBV;AAAA,IA0BG,UAAA,EAAA;AAAA,MACRpG,OAAS,EAAA,IAAA;AAAA,MACTkD,UAAY,EAAA,kDAAA;AAAA,MACZ2W,IAAM,EAAA,CAAA;AAAA,MACNthB,MAAQ,EAAA,CAAA;AAAA,MACRN,QAAU,EAAA,UAAA;AAAA,MACVO,KAAO,EAAA,CAAA;AAAA,MACP+lB,SAAW,EAAA,WAAA;AAAA,MACXhlB,YAAe,EAAA,CAAA,UAAA,EAAYpJ,KAAMsI,CAAAA,OAAAA,CAAQmP,OAAQqV,CAAAA,IAAAA,CAAAA,CAAAA;AAAAA,KAlC5C;AAAA,IAoCE,SAAA,EAAA;AAAA,MACPtnB,eAAiBxF,EAAAA,KAAAA,CAAMsI,OAAQna,CAAAA,IAAAA,KAAS,UAAU,qBAAwB,GAAA,2BAAA;AAAA,KADnE;AAAA,GArCN;AAAA,EAyCT0uB,KAAO,EAAA;AAAA,IACU,WAAA,EAAA;AAAA,MACTzT,YAAcpJ,EAAAA,KAAAA,CAAMsI,OAAQna,CAAAA,IAAAA,KAAS,UAAU,oCAAuC,GAAA,+BAAA;AAAA,KAFvF;AAAA,IAIS,UAAA,EAAA;AAAA,MACRigC,SAAW,EAAA,WAAA;AAAA,MACXnY,aAAe,EAAA,MAAA;AAAA,KAFP;AAAA,GAJT;AAzCE,CAAD,CADmB,CAAA,CAAA;AAyDnC,MAAMoY,oBAAAA,GAAuBliC,cAAMmiC,CAAAA,UAAAA,CAAW,SAAS;AAAA,EACIh9B,IAAAA;AAAAA,EACA6H,KAAAA;AAAAA,EACA0T,QAAAA;AAAAA,EACAnM,KAAAA;AAAAA,EACA2rB,SAAAA;AAAAA,EACAtH,SAAAA;AAAAA,EACAvsB,QAAAA;AAAAA,EACA8zB,OAAAA;AAAAA,EACAl0B,QAAAA;AAAAA,EACAm0B,kBAAAA;AAAAA,EACAC,oBAAAA;AAAAA,CAAAA,EACiBze,GAAK,EAAA;AAEvEnN,EAAAA,MAAAA,UAAUd,WAAhB,EAAA,CAAA;AAEAgoB,EAAqB,oBAAA,CAAA;AAAA,IACjB1vB,QAAAA;AAAAA,IACAe,KAAAA;AAAAA,IACA0T,QAAAA;AAAAA,GAHgB,CAAA,CAAA;AAMd,EAAA,MAAA,CAACgQ,KAAAA,EAAO0R,QAAY/hC,CAAAA,GAAAA,QAAAA,CAAkBu4B,SAAV,CAAA,CAAA;AAG9B,EAAA,2BAAAre,QAAA,EAAA;AAAA,IAAA,QAAA,uBACK,WAAD,EAAA;AAAA,MAAa,SAAb,EAAA,IAAA;AAAA,MAAA,QAAA,EAAA,iBAEIzZ,GAAA,CAAC,gBAAD,EAAA;AAAA,QACI,SAAA,EAAW6T,IAAKF,CAAAA,OAAAA,CAAQutB,WACpB,EAAA;AAAA,UAAA,CACKvtB,QAAQic,KAAQA,GAAAA,KAAAA;AAAAA,SAFV,CAAA;AAAA,QAIf,OAAA,EAAUxqB,CAAMk8B,CAAAA,KAAAA,QAAAA,CAAS,IAAD,CAAA;AAAA,QACxB,cAAgB,EAAA,OAAA;AAAA,QAChB,OAAA,EAASj8B,QAAQ6G,KAAD,CAAA;AAAA,QAChB,QAAU4U,EAAAA,GAAAA;AAAAA,QACV,OAAA,sBACK,MAAD,EAAA;AAAA,UACI,IAAM,EAAA,UAAA;AAAA,UACN,KAAO,EAAA,WAAA;AAAA,UACP,SAAA;AAAA,UACA,QAAA;AAAA,UACA,OAAA,EAAU1b,CAAMk8B,CAAAA,KAAAA,QAAAA,CAAS,IAAD,CAAA;AAAA,UACxB,MAAA,EAASl8B,CAAMk8B,CAAAA,KAAAA,QAAAA,CAAS,KAAD,CAAA;AAAA,UACvB,UAAWtW,CAAQ,GAAA,KAAA;AACfsW,YAAAA,QAAAA,CAAS,IAAD,CAAA,CAAA;AACR1hB,YACIoL,QAAAA,CAAAA,GAAAA,CAAIlhB,OAAOwrB,OADP,CAAA,CAAA;AAAA,WAGX;AAAA,SAtBb,CAAA;AAAA,QAwBI,QAAA;AAAA,QACA,KAAA,sBACK,UAAD,EAAA;AAAA,UAAY,KAAO,EAAA,eAAA;AAAA,UAAnB,QAAA,sBACK,aAAD,EAAA;AAAA,YAEI,QAAA;AAAA,WAFJ,CAAA;AAAA,SADJ,CAAA;AAAA,OA1BR,CAAA,EAiCCgK,kBACD,oBAAAt/B,GAAA,CAAC,gBAAD,EAAA;AAAA,QAAkB,QAAA;AAAA,OAAlB,CAAA,EAECo/B,SAAa,oBAAAp/B,GAAA,CAAC,cAAD,EAAA;AAAA,QAAiByT,QAAAA,EAAAA,KAAAA;AAAAA,OAtCnC,CAAA,CAAA;AAAA,KAAA,CAAA;AAAA,GAFR,CAAA,CAAA;AAgDH,CAxE4B,CAAA,CAAA;AAiFhB8tB,MAAAA,WAAAA,GAAc,CAACviC,KAA4B,KAAA;AAC7C,EAAA,2BAAC,oBAAyBA,EAAAA;AAAAA,IAAAA,GAAAA,KAAAA;AAAAA,GAAjC,CAAA,CAAA;AACH;;AC1I6B,SAAA,aAAA,CAAA;AAAA,EACIqF,IAAAA;AAAAA,EACA6H,KAAAA;AAAAA,EACA0T,QAAAA;AAAAA,EACAkY,SAAAA;AAAAA,EACArkB,KAAAA;AAAAA,EACA2rB,SAAAA;AAAAA,EACA7zB,QAAAA;AAAAA,EACA8zB,OAAAA;AAAAA,EACAl0B,QAAAA;AAAAA,EACAm0B,kBAAAA;AAAAA,EACAC,oBAAAA;AAAAA,CACmB,EAAA;AAGjD,EAAA,MAAMzL,gBAAgB5nB,KAAS,IAAA,IAAA,CAAA;AAE/B2uB,EAAqB,oBAAA,CAAA;AAAA,IACjB1vB,QAAAA;AAAAA,IACAe,KAAAA;AAAAA,IACA0T,QAAAA;AAAAA,GAHgB,CAAA,CAAA;AAOhB,EAAA,4BAAAnG,QAAA,EAAA;AAAA,IAAA,QAAA,EAAA,iBAEIzZ,GAAA,CAAC,cAAD,EAAA;AAAA,MACI,SADJ,EAAA,IAAA;AAAA,MAEI,SAAA;AAAA,MACA,KAAO8zB,EAAAA,aAAAA;AAAAA,MACP,KAAA,sBACK,aAAD,EAAA;AAAA,QAAe,QAAA;AAAA,OALvB,CAAA;AAAA,MAOI,WAAA,EAAc90B,CACV,KAAA,qBAAAgB,GAAA,CAACy1B;QAAiBz2B,GAAAA,KAAAA;AAAAA,QACJ,SADd,EAAA,IAAA;AAAA,QAEc,UAAY,EAAA;AAAA,UAAA,GACLA,KAAM02B,CAAAA,UAAAA;AAAAA,UACT8L,EAAI,EAAA;AAAA,YACAtY,SAAW,EAAA,MAAA;AAAA,WADX;AAAA,SAJtB;AAAA,QAQc,KAAOkW,EAAAA,SAAAA;AAAAA,QAEP,OAAS,EAAA,QAAA;AAAA,QACT,UAAA,EAAYA,YAAY3rB,KAAQ,GAAA,IAAA;AAAA,OAnBtD,CAAA;AAAA,MAqBI,QAAA;AAAA,MACA,UAAW8hB,CAAc,SAAA,KAAA;AACd3V,QAAAA,OAAAA,SACH2V,SADW,CAAA,CAAA;AAAA,OAGlB;AAAA,KA1BL,CAAA,EA6BC+J,kBACD,oBAAAt/B,GAAA,CAAC,gBAAD,EAAA;AAAA,MAAkB,QAAA;AAAA,KAhCtB,CAAA,CAAA;AAAA,GADJ,CAAA,CAAA;AAqCH;;ACvCM,MAAM6S,WAAYC,GAAAA,UAAAA,CAAW,CAACC,KAAAA,KAAiBC,YAAa,CAAA;AAAA,EAC/DqF,IAAM,EAAA;AAAA,IACFgT,SAAW,EAAA,CAAA;AAAA,IACXrjB,KAAO,EAAA,MAAA;AAAA,IACPie,OAAAA,EAASlT,KAAMO,CAAAA,OAAAA,CAAQ,CAAd,CAAA;AAAA,IACTuH,QAAU,EAAA,UAAA;AAAA,IACViL,UAAY,EAAA,yDAAA;AAAA,IACZ6Z,mBAAqB,EAAA,KAAA;AAAA,IACrBC,oBAAsB,EAAA,KAAA;AAAA,IACtBrnB,eAAiBxF,EAAAA,KAAAA,CAAMsI,OAAQna,CAAAA,IAAAA,KAAS,UAAU,qBAAwB,GAAA,2BAAA;AAAA,IAE7D,WAAA,EAAA;AAAA,MACTib,YAAcpJ,EAAAA,KAAAA,CAAMsI,OAAQna,CAAAA,IAAAA,KAAS,UAAU,+BAAkC,GAAA,oCAAA;AAAA,MACjFu7B,IAAM,EAAA,CAAA;AAAA,MACNthB,MAAQ,EAAA,CAAA;AAAA,MACRyH,OAAS,EAAA,UAAA;AAAA,MACT/H,QAAU,EAAA,UAAA;AAAA,MACVO,KAAO,EAAA,CAAA;AAAA,MACP0K,UAAY,EAAA,4DAAA;AAAA,MACZkD,aAAe,EAAA,MAAA;AAAA,KAlBjB;AAAA,IAoBU,UAAA,EAAA;AAAA,MACRpG,OAAS,EAAA,IAAA;AAAA,MACTkD,UAAY,EAAA,kDAAA;AAAA,MACZ2W,IAAM,EAAA,CAAA;AAAA,MACNthB,MAAQ,EAAA,CAAA;AAAA,MACRN,QAAU,EAAA,UAAA;AAAA,MACVO,KAAO,EAAA,CAAA;AAAA,MACP+lB,SAAW,EAAA,WAAA;AAAA,MACXhlB,YAAe,EAAA,CAAA,UAAA,EAAYpJ,KAAMsI,CAAAA,OAAAA,CAAQmP,OAAQqV,CAAAA,IAAAA,CAAAA,CAAAA;AAAAA,KA5BnD;AAAA,IA8BS,SAAA,EAAA;AAAA,MACP7Z,MAAQ,EAAA,SAAA;AAAA,MACRzN,eAAiBxF,EAAAA,KAAAA,CAAMsI,OAAQna,CAAAA,IAAAA,KAAS,UAAU,qBAAwB,GAAA,2BAAA;AAAA,KAhC5E;AAAA,IAkCFiU,KAAO,EAAA,SAAA;AAAA,IACPqD,UAAAA,EAAYzF,MAAM0F,UAAW8J,CAAAA,gBAAAA;AAAAA,GApC8B;AAAA,EAsC/DhX,QAAU,EAAA;AAAA,IACNgN,eAAiB,EAAA,qBAAA;AAAA,IACjBpD,KAAOpC,EAAAA,KAAAA,CAAMsI,OAAQna,CAAAA,IAAAA,KAAS,UAAU,qBAAwB,GAAA,2BAAA;AAAA,IACnD,WAAA,EAAA;AAAA,MACTib,YAAcpJ,EAAAA,KAAAA,CAAMsI,OAAQna,CAAAA,IAAAA,KAAS,UAAU,gCAAmC,GAAA,qCAAA;AAAA,KAJhF;AAAA,IAMM,UAAA,EAAA;AAAA,MACRib,YAAe,EAAA,CAAA,WAAA,EAAapJ,KAAMsI,CAAAA,OAAAA,CAAQmP,OAAQqV,CAAAA,IAAAA,CAAAA,CAAAA;AAAAA,KAPhD;AAAA,IASK,SAAA,EAAA;AAAA,MACP7Z,MAAQ,EAAA,SAAA;AAAA,MACRzN,eAAiB,EAAA,qBAAA;AAAA,KAFV;AAAA,GATL;AAtCqD,CAAD,CAA/B,CAAA,CAAA;AA6D8B,SAAA,cAAA,CAAA;AAAA,EACIlU,IAAAA;AAAAA,EACA6H,KAAAA;AAAAA,EACA0T,QAAAA;AAAAA,EACAnM,KAAAA;AAAAA,EACA2rB,SAAAA;AAAAA,EACA7zB,QAAAA;AAAAA,EACA8zB,OAAAA;AAAAA,EACAvH,SAAAA;AAAAA,EACA3sB,QAAAA;AAAAA,EACAm0B,kBAAAA;AAAAA,EACA5+B,OAAAA;AAAAA,EACA6+B,oBAAAA;AAAAA,CAC4B,EAAA;AAG7F,EAAI,IAAA,OAAOp0B,QAAS7I,CAAAA,IAAAA,KAAS,QAAU,EAAA;AAC7BM,IAAAA,MAAAA,MAAM,2CAAD,CAAA,CAAA;AAAA,GACd;AAEDi4B,EAAqB,oBAAA,CAAA;AAAA,IACjB1vB,QAAAA;AAAAA,IACAe,KAAAA;AAAAA,IACA0T,QAAAA;AAAAA,GAHgB,CAAA,CAAA;AAMdjM,EAAAA,MAAAA,UAAUd,WAAhB,EAAA,CAAA;AAEM,EAAA,MAAA,CAAC9T,IAAAA,EAAM01B,OAAWv1B,CAAAA,GAAAA,cAAAA,CAAMK,SAASu4B,SAAf,CAAA,CAAA;AAClB33B,EAAAA,MAAAA,uBAAuB4kB,uBAA7B,EAAA,CAAA;AAEM3kB,EAAAA,MAAAA,oBAAoB0kB,aAA1B,EAAA,CAAA;AACME,EAAAA,MAAAA,kBAAAA,GAA2D7T,QAAQ,MAAM;AACpE/Q,IAAAA,OAAAA,iBAAAA,CAAkBoP,qBAAsBrE,CAAAA,QAAAA,CAAS7I,IAAxD,CAAA,CAAA;AAAA,GACD,EAAA,CAAC6I,QAAS7I,CAAAA,IAAAA,EAAMlC,iBAAhB,CAFqE,CAAA,CAAA;AAIpE,EAAA,IAAA,CAAC4kB,kBAAoB,EAAA;AACrB,IAAMpiB,MAAAA,KAAAA,CAAO,CAA2DuI,yDAAAA,EAAAA,QAAAA,CAAS7I,IAAtE,CAAA,CAAA,CAAA,CAAA;AAAA,GACd;AAED,EAAA,MAAMiG,iBAAiByc,kBAAmBzc,CAAAA,cAAAA,CAAAA;AAC1C,EAAA,MAAMjG,OAAO6I,QAAS7I,CAAAA,IAAAA,CAAAA;AAEtB,EAAMsyB,MAAAA,UAAAA,GAAa1oB,SAASA,KAAiBlD,YAAAA,eAAAA,CAAAA;AAEvC,EAAA,MAAA;AAAA,IACF+D,MAAAA;AAAAA,IACAmQ,WAAAA;AAAAA,IACAE,gBAAAA;AAAAA,GAAAA,GACA6H,cAAe,CAAA;AAAA,IACf3iB,IAAAA,EAAMsyB,UAAa1oB,GAAAA,KAAAA,CAAM5J,IAAO5C,GAAAA,KAAAA,CAAAA;AAAAA,IAChCgG,QAAAA,EAAUkvB,UAAa1oB,GAAAA,KAAAA,CAAMjD,EAAKvJ,GAAAA,KAAAA,CAAAA;AAAAA,IAClCoG,MAAQyC,EAAAA,cAAAA;AAAAA,IACR+V,QAAU,EAAA,IAAA;AAAA,GAJI,CAAA,CAAA;AAOZmjB,EAAAA,MAAAA,iBAAAA,GAAoB,CAAC10B,OAAsB,KAAA;AAC7C,IAAIxB,IAAAA,QAAAA;AACA,MAAA,OAAA;AACJqU,IAAAA,QAAAA,CAAS7S,OAASgpB,GAAAA,gBAAAA,CAAiBhpB,OAAD,CAAA,GAAW,IAArC,CAAA,CAAA;AACR0nB,IAAAA,OAAAA,CAAQ,KAAD,CAAA,CAAA;AAAA,GAJX,CAAA;AAOMiN,EAAAA,MAAAA,kBAAkB,MAAM;AAC1BjN,IAAAA,OAAAA,CAAQ,IAAD,CAAA,CAAA;AAAA,GADX,CAAA;AAIMkN,EAAAA,MAAAA,UAAAA,GAAa,CAACv8B,CAAwB,KAAA;AACxCA,IAAAA,CAAAA,CAAEgV,eAAF,EAAA,CAAA;AACAwF,IAAAA,QAAAA,CAAS,IAAD,CAAA,CAAA;AACR6U,IAAAA,OAAAA,CAAQ,KAAD,CAAA,CAAA;AAAA,GAHX,CAAA;AAMMmN,EAAAA,MAAAA,gBAAAA,GAAmB,CAACx8B,CAAwB,KAAA;AAC9CA,IAAAA,CAAAA,CAAEgV,eAAF,EAAA,CAAA;AACA,IAAIrN,IAAAA,MAAAA;AACA5M,MAAAA,oBAAAA,CAAqBpB,IAAK,CAAA;AAAA,QACtB2G,UAAUqH,MAAO9D,CAAAA,EAAAA;AAAAA,QACjB3G,IAAAA;AAAAA,QACA8F,sBAAwB,EAAA,KAAA;AAAA,OAH5B,CAAA,CAAA;AAAA,GAHR,CAAA;AAUMy5B,EAAAA,MAAAA,UAAU,MAAM;AAClBpN,IAAAA,OAAAA,CAAQ,KAAD,CAAA,CAAA;AAAA,GADX,CAAA;AAIA,EAAA,SAAA,eAAA,CAAyBlsB,eAAuC,EAAA;AAE5D,IAAMu5B,MAAAA,aAAAA,GAAgB/0B,MAAU,IAAA,CAACA,MAAO5H,CAAAA,MAAAA,CAAAA;AAExC,IAAIyO,IAAAA,IAAAA,CAAAA;AACA,IAAA,IAAA,CAACrL,eAAgB,EAAA;AACjBqL,MAAAA,IAAAA,uBACK,SAAD,EAAA;AAAA,QACI,KAAO,EAAA,wDAAA;AAAA,OAFf,CAAA,CAAA;AAAA,eAIOkuB,aAAe,EAAA;AACtBluB,MAAAA,IAAAA,uBACK,OAAD,EAAA;AAAA,QAAS,KAAA,EAAO1H,SAASA,KAAM5J,CAAAA,IAAAA;AAAAA,QAA/B,QAAA,uBACK,GAAD,EAAA;AAAA,UACI,OAAS,EAAA,MAAA;AAAA,UACT,UAAY,EAAA,QAAA;AAAA,UACZ,CAAG,EAAA,CAAA;AAAA,UACH,QAAU,EAAA,CAAA;AAAA,UAJd,QAAA,EAAA,iBAKItC,GAAA,CAAC,SAAD,EAAA;AAAA,YAAW,QAAU,EAAA,OAAA;AAAA,YAAS,KAAO,EAAA,OAAA;AAAA,WALzC,CAMI,kBAAAD,IAAA,CAAC,GAAD,EAAA;AAAA,YAAK,UAAY,EAAA,CAAA;AAAA,YAAjB,QAAA,EAAA,CAAA,oBACegN,EAAAA,MAAAA,IAAUA,OAAO9D,EADhC,CAAA;AAAA,WANJ,CAAA,CAAA;AAAA,SAAA,CAAA;AAAA,OAFR,CAAA,CAAA;AAAA,KAaG,MAAA;AACH,MAAA,IAAI2rB,UAAY,EAAA;AAEZ,QAAM9uB,MAAAA,MAAAA,GAASyC,eAAe,CAAA,EAAD,CAAA,CAAA;AACvBw5B,QAAAA,MAAAA,aAAgB78B,GAAAA,MAAAA,CAAOiF,IAAKrE,CAAAA,MAAAA,CAAO2F,UAAnB,CAAA,CAAA;AACtB,QAAIyZ,IAAAA,cAAAA,GAAiB/Z,SAAS6Q,iBAAmBlX,EAAAA,MAAAA,CAAOojB,OAAK6Z,aAAcx3B,CAAAA,QAAAA,CAAS2d,EAA/D,CAAA,CAAA;AACrB,QAAA,IAAI,CAAChD,cAAAA,IAAkB,CAACA,cAAAA,CAAeviB,MAAQ,EAAA;AAC3CuiB,UAAiB6c,cAAAA,GAAAA,aAAAA,CAAAA;AAAAA,SACpB;AACD7c,QAAiBA,cAAAA,GAAAA,cAAAA,CAAe9iB,KAAM,CAAA,CAAA,EAAG,CAAxB,CAAA,CAAA;AAEjBwR,QAAAA,IAAAA,uBACK,GAAD,EAAA;AAAA,UAAK,OAAS,EAAA,MAAA;AAAA,UACT,aAAe,EAAA,QAAA;AAAA,UACf,QAAU,EAAA,CAAA;AAAA,UACV,EAAI,EAAA,CAAA;AAAA,UACJ,EAAI,EAAA,CAAA;AAAA,UAEJsR,UAAAA,cAAkBA,IAAAA,cAAAA,CAAejhB,GAAI,CAAA,CAAC2F,KAAKkO,KAAU,KAAA;AAC5C3M,YAAAA,MAAAA,SAAAA,GAAWrF,OAAO2F,UAAW7B,CAAAA,GAAAA,CAAAA,CAAAA;AACnC,YAAA,IAAI,CAACuB,SAAAA;AAAU,cAAO,OAAA,IAAA,CAAA;AACtB,YAAA,2BACK,GAAD,EAAA;AAAA,cAEI,EAAI,EAAA,GAAA;AAAA,cACJ,EAAI,EAAA,GAAA;AAAA,cAHR,QAAA,sBAIK,aAAD,EAAA;AAAA,gBACI4B,QAAAA,EAAAA,MACM,mBAAA/M,GAAA,CAAC,gBAAD,EAAA;AAAA,kBACE,IAAM4J,EAAAA,GAAAA;AAAAA,kBACN,KAAA,EAAQmD,OAAO5H,MAAeyE,CAAAA,GAAAA,CAAAA;AAAAA,kBAC9B,QAAUuB,EAAAA,SAAAA;AAAAA,kBACV,IAAM,EAAA,MAAA;AAAA,iBALR,CAMA,mBAAAnL,GAAA,CAAC,iBAAD,EAAA;AAAA,kBACE,QAAUmL,EAAAA,SAAAA;AAAAA,kBACV,IAAM,EAAA,MAAA;AAAA,iBAFR,CAAA;AAAA,eAPV,CAAA;AAAA,aAJJ,EACU,sBAAqBvB,GAD/B,CAAA,CAAA,CAAA,CAAA;AAAA,WAJW,CAAA;AAAA,SAP3B,CAAA,CAAA;AAAA,OA+BG,MAAA;AACHgK,QAAAA,IAAAA,wBAAQ,GAAD,EAAA;AAAA,UAAK,CAAG,EAAA,CAAA;AAAA,UACH,OAAA,EAASrI,WAAW7L,KAAYgiC,CAAAA,GAAAA,eAAAA;AAAAA,UAChC,cAAe,EAAA,QAAA;AAAA,UACf,OAAQ,EAAA,MAAA;AAAA,UAHb,QAAA,EAAA,iBAIH1hC,GAAA,CAAC,UAAD,EAAA;AAAA,YAAY,OAAS,EAAA,OAAA;AAAA,YAAS,IAAK+S,CAAW,KAAA,MAAA;AAAA,cAC1CqS,QAAU,EAAA,CAAA;AAAA,cACVgH,SAAW,EAAA,QAAA;AAAA,cACXjX,KAAO,EAAA,SAAA;AAAA,cACPqD,UAAAA,EAAYzF,MAAM0F,UAAW8J,CAAAA,gBAAAA;AAAAA,aAJa,CAAA;AAAA,YAA9C,QAAA,EAAA,cAAA;AAAA,WAAA,CAAA,EAMC,CAAChX,QAAAA,wBAAa,MAAD,EAAA;AAAA,YAAQ,OAAQ,EAAA,UAAA;AAAA,YACR,KAAM,EAAA,SAAA;AAAA,YADd,QAAA,EAAA,KAAA;AAAA,WAVX,CAAA,CAAA;AAAA,SAAP,CAAA,CAAA;AAAA,OAeH;AAAA,KACJ;AAED,IAAA,2BACK,GAAD,EAAA;AAAA,MACI,OAAA,EAASA,WAAW7L,KAAYgiC,CAAAA,GAAAA,eAAAA;AAAAA,MAChC,OAAQ,EAAA,MAAA;AAAA,MAFZ,QAAA,uBAIK,GAAD,EAAA;AAAA,QAAK,OAAS,EAAA,MAAA;AAAA,QACT,aAAe,EAAA,QAAA;AAAA,QACf,QAAU,EAAA,CAAA;AAAA,QAFf,QAAA,EAAA,iBAII3hC,IAAA,CAAC,GAAD,EAAA;AAAA,UAAK,OAAS,EAAA,MAAA;AAAA,UACT,aAAe,EAAA,KAAA;AAAA,UACf,QAAU,EAAA,CAAA;AAAA,UAFf,QAAA,EAAA,iBAIIC,GAAA,CAAC,GAAD,EAAA;AAAA,YAAK,QAAU,EAAA,CAAA;AAAA,YAAf,QAAA,sBACK,cAAD,EAAA;AAAA,cAAgB,MAAhB,EAAA,IAAA;AAAA,cACgB,QAAA,EAAUmL,SAAS0B,UAAYC,EAAAA,QAAAA;AAAAA,cAD/C,QAAA,sBAEK,aAAD,EAAA;AAAA,gBACI,QAAA;AAAA,eADJ,CAAA;AAAA,aAFJ,CAAA;AAAA,WADJ,CAAA,EAQCC,MACD,oBAAA/M,GAAA,CAAC,GAAD,EAAA;AAAA,YACI,SAAW,EAAA,QAAA;AAAA,YACX,CAAG,EAAA,CAAA;AAAA,YAFP,QAAA,sBAGK,OAAD,EAAA;AAAA,cAAS,KAAA,EAAOkM,SAASA,KAAM5J,CAAAA,IAAAA;AAAAA,cAA/B,QAAA,sBACK,UAAD,EAAA;AAAA,gBAAY,OAAS,EAAA,SAAA;AAAA,gBACT,SAAW,EAAA,MAAA;AAAA,gBADvB,UAEKyK,MAAO9D,CAAAA,EAAAA;AAAAA,eAFZ,CAAA;AAAA,aADJ,CAAA;AAAA,WAhBR,CAwBK,EAAA,CAAC64B,iBAAiB/0B,MAAUb,IAAAA,KAAAA,wBAAU,GAAD,EAAA;AAAA,YAAA,QAAA,sBACjC,OAAD,EAAA;AAAA,cAAS,KAAA,EAAQ,mBAAkBa,MAAO9D,CAAAA,EAAAA,CAAAA,CAAAA;AAAAA,cACtC,QAAA,sBAAA,MAAA,EAAA;AAAA,gBAAA,QAAA,sBACC,UAAD,EAAA;AAAA,kBACI,OAAS24B,EAAAA,gBAAAA;AAAAA,kBACT,IAAK,EAAA,OAAA;AAAA,kBAFT,QAGI,kBAAA5hC,GAAA,CAAC,eAAD,EAAA,EAAA,CAAA;AAAA,iBAHJ,CAAA;AAAA,eADA,CAAA;AAAA,aADJ,CAAA;AAAA,WADkC,CAAA,EAYrCkM,KAAS,oBAAAlM,GAAA,CAAC,GAAD,EAAA;AAAA,YAAA,QAAA,sBACL,OAAD,EAAA;AAAA,cAAS,KAAM,EAAA,OAAA;AAAA,cACX,QAAA,sBAAA,MAAA,EAAA;AAAA,gBAAA,QAAA,sBACC,UAAD,EAAA;AAAA,kBACI,QAAA;AAAA,kBACA,OAAA,EAASuL,WAAW7L,KAAYiiC,CAAAA,GAAAA,UAAAA;AAAAA,kBAChC,IAAK,EAAA,OAAA;AAAA,kBAHT,QAII,kBAAA3hC,GAAA,CAAC,SAAD,EAAA,EAAA,CAAA;AAAA,iBAJJ,CAAA;AAAA,eADA,CAAA;AAAA,aADJ,CAAA;AAAA,WArCR,CAAA,CAAA;AAAA,SAAA,GAmDC4T,IAvDL,CAAA;AAAA,OAAA,CAAA;AAAA,KALR,CAAA,CAAA;AAAA,GAiEH;AAED,EAAA,4BACK,WAAD,EAAA;AAAA,IAAa,KAAOwrB,EAAAA,SAAAA;AAAAA,IAAW,SAA/B,EAAA,IAAA;AAAA,IAEI,QAAA,EAAA,iBAAAr/B,IAAA,CAAA,KAAA,EAAA;AAAA,MACI,WAAY,CAAE4T,EAAAA,OAAAA,CAAQ0E,IAAQ9M,CAAAA,CAAAA,EAAAA,QAAAA,GAAWoI,QAAQpI,QAAW,GAAA,EAAA,CAAA,CAAA;AAAA,MAE3DhD,QAAAA,EAAAA,CAAAA,cAAkBy5B,IAAAA,eAAAA,CAAgBz5B,cAAD,CAEjCyc,EAAAA,kBAAAA,wBAAuB,eAAD,EAAA;AAAA,QAAiB,IAAA;AAAA,QACA,kBAAA;AAAA,QACA,WAAa,EAAA,KAAA;AAAA,QACb,IAAA;AAAA,QACA,OAAA;AAAA,QACA,sBAAwByc,EAAAA,iBAAAA;AAAAA,OAVpE,CAAA,CAAA;AAAA,KAAA,CAAA,EAgBCnC,kBACD,oBAAAt/B,GAAA,CAAC,gBAAD,EAAA;AAAA,MAAkB,QAAA;AAAA,KAAlB,CAAA,EAECo/B,SAAa,oBAAAp/B,GAAA,CAAC,cAAD,EAAA;AAAA,MAAiByT,QAAAA,EAAAA,KAAAA;AAAAA,KArBnC,CAAA,CAAA;AAAA,GADJ,CAAA,CAAA;AA0BH;;AC9VuD,SAAA,iBAAA,CAAA;AAAA,EACIpP,IAAAA;AAAAA,EACA6H,KAAAA;AAAAA,EACAuH,KAAAA;AAAAA,EACA2rB,SAAAA;AAAAA,EACAe,YAAAA;AAAAA,EACAvgB,QAAAA;AAAAA,EACAsgB,SAAAA;AAAAA,EACA/0B,QAAAA;AAAAA,EACAm0B,kBAAAA;AAAAA,EACA2C,yBAAAA;AAAAA,EACAvhC,OAAAA;AAAAA,EACA6K,QAAAA;AAAAA,EACAg0B,oBAAAA;AAAAA,CACc,EAAA;AAElE,EAAA,IAAA,CAACp0B,QAASiC,CAAAA,EAAAA;AACV,IAAA,MAAMxK,MAAM,2DAAD,CAAA,CAAA;AAEf,EAAA,MAAMoX,aAAkC7O,QAASiC,CAAAA,EAAAA,CAAAA;AAE3C,EAAA,MAAA,CAAC80B,WAAaC,EAAAA,cAAAA,CAAAA,GAAkB5iC,QAAtC,EAAA,CAAA;AAEAs7B,EAAqB,oBAAA,CAAA;AAAA,IACjB1vB,QAAAA;AAAAA,IACAe,KAAAA;AAAAA,IACA0T,QAAAA;AAAAA,GAHgB,CAAA,CAAA;AAMdod,EAAAA,MAAAA,UAAAA,GAAa,CAACllB,KAAAA,EAAe2mB,UAAuB,KAAA;AACtD,IAAA,OAAO2D,kBAAmB,CAAA;AAAA,MACtB/9B,IAAAA,EAAO,GAAEA,IAAQyT,CAAAA,CAAAA,EAAAA,KAAAA,CAAAA,CAAAA,CAAAA;AAAAA,MACjBvM,QAAAA;AAAAA,MACAJ,QAAU6O,EAAAA,UAAAA;AAAAA,MACVslB,kBAAAA;AAAAA,MACA2C,yBAAAA;AAAAA,MACAvhC,OAAAA;AAAAA,MACAw/B,SAAW,EAAA,KAAA;AAAA,MACXmC,WAAa,EAAA,IAAA;AAAA,MACbvK,WAAW2G,UAAeyD,KAAAA,WAAAA;AAAAA,MAC1B3C,oBAAsB,EAAA,KAAA;AAAA,KAVD,CAAA,CAAA;AAAA,GAD7B,CAAA;AAgBA,EAAA,4BAEK,WAAD,EAAA;AAAA,IAAa,SAAb,EAAA,IAAA;AAAA,IAAuB,KAAOH,EAAAA,SAAAA;AAAAA,IAA9B,QAAA,EAAA,CAEK,CAACc,SAAAA,wBAAc,cAAD,EAAA;AAAA,MAAgB,MAAhB,EAAA,IAAA;AAAA,MACgB,QAAA,EAAU/0B,SAAS0B,UAAYC,EAAAA,QAAAA;AAAAA,MAD/C,QAAA,sBAEV,aAAD,EAAA;AAAA,QAAe,QAAA;AAAA,OAAf,CAAA;AAAA,KAJR,CAOI,kBAAA9M,GAAA,CAAC,KAAD,EAAA;AAAA,MAAO,OAAS,EAAA,UAAA;AAAA,MACT,IAAK+S,CAAW,KAAA,MAAA;AAAA,QACZsY,SAAW,EAAA,CAAA;AAAA,QACXpF,OAAAA,EAASlT,KAAMO,CAAAA,OAAAA,CAAQ,CAAd,CAAA;AAAA,QAAA,CACRP,KAAM8V,CAAAA,WAAAA,CAAYC,EAAG,CAAA,IAArB,CAA6B,GAAA;AAAA,UAC1B7C,OAAAA,EAASlT,KAAMO,CAAAA,OAAAA,CAAQ,CAAd,CAAA;AAAA,SADiB;AAAA,OAHlB,CAAA;AAAA,MADvB,QAAA,sBAQK,cAAD,EAAA;AAAA,QAAgB,KAAA;AAAA,QACA,IAAA;AAAA,QACA,UAAA;AAAA,QACA,iBAAmB6uB,EAAAA,cAAAA;AAAAA,QACnB,QAAUhC,EAAAA,YAAAA,IAAgB96B,OAAQ8F,CAAAA,QAAAA,CAASI,QAAV,CAAA;AAAA,QACjC,gBAAA,EAAkB,CAACJ,QAASI,CAAAA,QAAAA;AAAAA,OAL5C,CAAA;AAAA,KARJ,CAAA,EAiBC+zB,kBACD,oBAAAt/B,GAAA,CAAC,gBAAD,EAAA;AAAA,MAAkB,QAAA;AAAA,KAzBtB,CA2BKo/B,EAAAA,SAAAA,IAAa,OAAO3rB,KAAU,KAAA,QAAA,wBAC9B,cAAD,EAAA;AAAA,MAAiBA,QAAAA,EAAAA,KAAAA;AAAAA,KA5BrB,CAAA,CAAA;AAAA,GAFJ,CAAA,CAAA;AAkCH;;ACpEqD,SAAA,eAAA,CAAA;AAAA,EACIpP,IAAAA;AAAAA,EACA6H,KAAAA;AAAAA,EACAuH,KAAAA;AAAAA,EACA2rB,SAAAA;AAAAA,EACAe,YAAAA;AAAAA,EACAvgB,QAAAA;AAAAA,EACAsgB,SAAAA;AAAAA,EACA/0B,QAAAA;AAAAA,EACAm0B,kBAAAA;AAAAA,EACA2C,yBAAAA;AAAAA,EACAvhC,OAAAA;AAAAA,EACA6K,QAAAA;AAAAA,EACAg0B,oBAAAA;AAAAA,CACc,EAAA;AAEhE,EAAA,IAAA,CAACp0B,QAASkC,CAAAA,KAAAA;AACV,IAAA,MAAMzK,MAAM,4DAAD,CAAA,CAAA;AAEfi4B,EAAqB,oBAAA,CAAA;AAAA,IACjB1vB,QAAAA;AAAAA,IACAe,KAAAA;AAAAA,IACA0T,QAAAA;AAAAA,GAHgB,CAAA,CAAA;AAMd,EAAA,MAAA,CAACsiB,WAAaC,EAAAA,cAAAA,CAAAA,GAAkB5iC,QAAtC,EAAA,CAAA;AAEMy9B,EAAAA,MAAAA,UAAAA,GAAa,CAACllB,KAAAA,EAAe2mB,UAAuB,KAAA;AACtD,IAAA,2BAAQ,eAAD,EAAA;AAAA,MAEH,IAAA,EAAO,GAAEp6B,IAAQyT,CAAAA,CAAAA,EAAAA,KAAAA,CAAAA,CAAAA,CAAAA;AAAAA,MACjB,KAAA;AAAA,MACA,OAAO5L,KAAM4L,CAAAA,KAAAA,CAAAA;AAAAA,MACb,SAAA,EAAW3M,QAASkC,CAAAA,KAAAA,CAAOC,SAAa,IAAA,MAAA;AAAA,MACxC,UAAA,EAAYnC,QAASkC,CAAAA,KAAAA,CAAOE,UAAc,IAAA,OAAA;AAAA,MAC1C,UAAA,EAAYpC,SAASkC,KAAO5B,CAAAA,UAAAA;AAAAA,MAC5B,WAAWgzB,UAAeyD,KAAAA,WAAAA;AAAAA,MAC1B,OAAA;AAAA,KARM,EAAA,gBAAepqB,KADlB,CAAA,CAAA,CAAA,CAAA;AAAA,GADX,CAAA;AAaA,EAAA,4BAEK,WAAD,EAAA;AAAA,IAAa,SAAb,EAAA,IAAA;AAAA,IAAuB,KAAOsnB,EAAAA,SAAAA;AAAAA,IAA9B,QAAA,EAAA,CAEK,CAACc,SAAAA,wBAAc,cAAD,EAAA;AAAA,MAAgB,MAAhB,EAAA,IAAA;AAAA,MACgB,QAAA,EAAU/0B,SAAS0B,UAAYC,EAAAA,QAAAA;AAAAA,MAD/C,QAAA,sBAEV,aAAD,EAAA;AAAA,QAAe,QAAA;AAAA,OAAf,CAAA;AAAA,KAJR,CAOI,kBAAA9M,GAAA,CAAC,KAAD,EAAA;AAAA,MAAO,OAAS,EAAA,UAAA;AAAA,MACT,IAAK+S,CAAW,KAAA,MAAA;AAAA,QACZsY,SAAW,EAAA,CAAA;AAAA,QACXpF,OAAAA,EAASlT,KAAMO,CAAAA,OAAAA,CAAQ,CAAd,CAAA;AAAA,QAAA,CACRP,KAAM8V,CAAAA,WAAAA,CAAYC,EAAG,CAAA,IAArB,CAA6B,GAAA;AAAA,UAC1B7C,OAAAA,EAASlT,KAAMO,CAAAA,OAAAA,CAAQ,CAAd,CAAA;AAAA,SADiB;AAAA,OAHlB,CAAA;AAAA,MADvB,QAAA,sBAQK,cAAD,EAAA;AAAA,QAAgB,KAAA;AAAA,QACA,IAAA;AAAA,QACA,UAAA;AAAA,QACA,iBAAmB6uB,EAAAA,cAAAA;AAAAA,QACnB,QAAUhC,EAAAA,YAAAA,IAAgB96B,OAAQ8F,CAAAA,QAAAA,CAASI,QAAV,CAAA;AAAA,QACjC,gBAAA,EAAkB,CAACJ,QAASI,CAAAA,QAAAA;AAAAA,OAL5C,CAAA;AAAA,KARJ,CAAA,EAgBC+zB,kBACD,oBAAAt/B,GAAA,CAAC,gBAAD,EAAA;AAAA,MAAkB,QAAA;AAAA,KAxBtB,CA0BKo/B,EAAAA,SAAAA,IACD,OAAO3rB,KAAU,KAAA,QAAA,wBAChB,cAAD,EAAA;AAAA,MAAiBA,QAAAA,EAAAA,KAAAA;AAAAA,KA5BrB,CAAA,CAAA;AAAA,GAFJ,CAAA,CAAA;AAkCH,CAAA;AA8BD,SAAyB,eAAA,CAAA;AAAA,EACIpP,IAAAA;AAAAA,EACAyT,KAAAA;AAAAA,EACA5L,KAAAA;AAAAA,EACAoB,SAAAA;AAAAA,EACAC,UAAAA;AAAAA,EACA9B,UAAAA;AAAAA,EACAqsB,SAAAA;AAAAA,EACAp3B,OAAAA;AAAAA,CACqB,EAAA;AAG9C,EAAMb,MAAAA,IAAAA,GAAOqM,SAASA,KAAMoB,CAAAA,SAAAA,CAAAA,CAAAA;AAC5B,EAAA,MAAM,CAACg1B,YAAAA,EAAcC,eAAmBhjC,CAAAA,GAAAA,QAAAA,CAA6BM,QAAQH,KAA7B,CAAA,CAAA,CAAA;AAEhDmC,EAAAA,SAAAA,CAAU,MAAM;AACRhC,IAAAA,IAAAA,SAASyiC,YAAc,EAAA;AACvBC,MAAAA,eAAAA,CAAgB1iC,IAAD,CAAA,CAAA;AAAA,KAClB;AAAA,GACJ,EAAE,CAACA,IAAD,CAJM,CAAA,CAAA;AAMHsL,EAAAA,MAAAA,QAAAA,GAAWm3B,YAAe72B,GAAAA,UAAAA,CAAW62B,YAAgB5iC,CAAAA,GAAAA,KAAAA,CAAAA,CAAAA;AAE3D,EAAMqY,MAAAA,UAAAA,GAAyB7S,OAAOvB,OAAQ8H,CAAAA,UAAf,EAA2BxH,GAAI,CAAA,CAAC,CAAC2F,GAAAA,EAAKuB,SAAe,CAAA,MAAA;AAAA,IAAGvB,CAAAA,GAAAA,GAAMuB,UAAS3L,KAASoK,IAAAA,GAAAA;AAAAA,GAAhF,CAAA,CAAA,CAAwFF,MAAO,CAAA,CAACoC,GAAGC,CAAO,MAAA;AAAA,IAAKD,GAAAA,CAAAA;AAAAA,IAAMC,GAAAA,CAAAA;AAAAA,GAArH,CAAA,CAAA,CAAA;AAE/B,EAAMy2B,MAAAA,aAAAA,GAAiB,GAAEn+B,IAAQiJ,CAAAA,CAAAA,EAAAA,SAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AACjC,EAAMm1B,MAAAA,cAAAA,GAAkB,GAAEp+B,IAAQkJ,CAAAA,CAAAA,EAAAA,UAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AAElC,EAAA,4BACK,KAAD,EAAA;AAAA,IAAO,IAAKwF,CAAW,KAAA,MAAA;AAAA,MACnBsY,SAAW,EAAA,CAAA;AAAA,MACXpF,OAAAA,EAASlT,KAAMO,CAAAA,OAAAA,CAAQ,CAAd,CAAA;AAAA,MAAA,CACRP,KAAM8V,CAAAA,WAAAA,CAAYC,EAAG,CAAA,IAArB,CAA6B,GAAA;AAAA,QAC1B7C,OAAAA,EAASlT,KAAMO,CAAAA,OAAAA,CAAQ,CAAd,CAAA;AAAA,OADiB;AAAA,KAHX,CAAA;AAAA,IAMnB,SAAW,EAAA,CAAA;AAAA,IANf,QAAA,EAAA,iBAQItT,GAAA,CAAC,SAAD,EAAA;AAAA,MACI,QAAU,EAAA,IAAA;AAAA,MACV,IAAMwiC,EAAAA,aAAAA;AAAAA,MAFV,QAIK,EAAA,CAAChc,UAEM,qBAAAzmB,IAAA,CAAC,WAAD,EAAA;AAAA,QAAa,SAAb,EAAA,IAAA;AAAA,QAAA,QAAA,EAAA,iBACIC,GAAA,CAAC,UAAD,EAAA;AAAA,UACI,EAAA,EAAK,GAAEqE,IAAQyT,CAAAA,CAAAA,EAAAA,KAAAA,CAAAA,aAAAA,CAAAA;AAAAA,UACf,QAAA,sBAAA,MAAA,EAAA;AAAA,YAAA,QAAA,EAAA,MAAA;AAAA,WAAA,CAAA;AAAA,SAHR,CAKI,kBAAA9X,GAAA,CAAC+qB,QAAD,EAAA;AAAA,UACI,SADJ,EAAA,IAAA;AAAA,UAEI,EAAI,EAAA;AAAA,YAAE8T,YAAc,EAAA,CAAA;AAAA,WAFxB;AAAA,UAGI,OAAA,EAAU,GAAEx6B,IAAQyT,CAAAA,CAAAA,EAAAA,KAAAA,CAAAA,aAAAA,CAAAA;AAAAA,UACpB,KAAA,EAAO0O,UAAWkc,CAAAA,KAAAA,CAAMx2B,KAAUxM,KAAAA,KAAAA,CAAAA,IAAa8mB,UAAWkc,CAAAA,KAAAA,CAAMx2B,KAAU,KAAA,IAAA,GAAOsa,UAAWkc,CAAAA,KAAAA,CAAMx2B,KAAQ,GAAA,EAAA;AAAA,UAC1G,QAAA,EAAU,CAAC8e,GAAa,KAAA;AACpB,YAAM0U,MAAAA,UAAAA,GAAa1U,IAAIlhB,MAAOoC,CAAAA,KAAAA,CAAAA;AAC9Bsa,YAAWmc,UAAAA,CAAAA,IAAAA,CAAKC,gBAAgBJ,aAAhC,CAAA,CAAA;AACAD,YAAAA,eAAAA,CAAgB7C,UAAD,CAAA,CAAA;AACflZ,YAAWmc,UAAAA,CAAAA,IAAAA,CAAKE,aAAcL,CAAAA,aAAAA,EAAe9C,UAA7C,CAAA,CAAA;AACAlZ,YAAWmc,UAAAA,CAAAA,IAAAA,CAAKE,aAAcJ,CAAAA,cAAAA,EAAgB,IAA9C,CAAA,CAAA;AAAA,WAVR;AAAA,UAYI,WAAa,EAAA,CAAC9pB,OACV,qBAAA3Y,GAAA,CAAC,cAAD,EAAA;AAAA,YACI,OAAA;AAAA,YACA,UAAA;AAAA,YACA,KAAO,EAAA,IAAA;AAAA,WAhBnB,CAAA;AAAA,UAAA,QAAA,EAkBKmyB,oBAAoBpa,UAAD,CAAA,CACf9T,IAAI,CAAC,CAAC0U,SAAST,aAAmB,CAAA,KAAA;AAC/B,YAAA,2BACK,QAAD,EAAA;AAAA,cAEI,KAAOS,EAAAA,OAAAA;AAAAA,cAFX,QAAA,sBAGK,cAAD,EAAA;AAAA,gBACI,OAAA;AAAA,gBACA,UAAA;AAAA,gBACA,KAAO,EAAA,IAAA;AAAA,eAHX,CAAA;AAAA,aAFM,EAAA,CAAA,OAAA,EAAStU,IAAQyT,CAAAA,CAAAA,EAAAA,KAAAA,CAAAA,CAAAA,EAASa,OADpC,CAAA,CAAA,CAAA,CAAA;AAAA,WAHX,CAAA;AAAA,SAvBT,CAAA,CAAA;AAAA,OAAA,CAAA;AAAA,KANZ,CAAA,EAgDCxN,QACG,oBAAAnL,GAAA,CAAC,WAAD,EAAA;AAAA,MAAa,SAAb,EAAA,IAAA;AAAA,MAAA,UAEKoiC,kBAAmB,CAAA;AAAA,QAChB/9B,IAAMo+B,EAAAA,cAAAA;AAAAA,QACNt3B,QAAAA;AAAAA,QACAzK,OAAAA;AAAAA,QACAo3B,SAAAA;AAAAA,OAJe,CAAA;AAAA,KADJ,EAAA,CAAA,aAAA,EAAezzB,IAAQi+B,CAAAA,CAAAA,EAAAA,YAAAA,CAAAA,CAD1C,CAzDR,CAAA;AAAA,GADJ,CAAA,CAAA;AAuEH;;ACrN6B,SAAA,aAAA,CAAA;AAAA,EACIj+B,IAAAA;AAAAA,EACkC6H,KAAAA;AAAAA,EACA0T,QAAAA;AAAAA,EACAnM,KAAAA;AAAAA,EACA2rB,SAAAA;AAAAA,EACAe,YAAAA;AAAAA,EACAd,OAAAA;AAAAA,EACAa,SAAAA;AAAAA,EACA/0B,QAAAA;AAAAA,EACAm0B,kBAAAA;AAAAA,EACA5+B,OAAAA;AAAAA,CACgB,EAAA;AAEhF,EAAA,4BAEK,WAAD,EAAA;AAAA,IAAa,SAAb,EAAA,IAAA;AAAA,IAAuB,KAAO0+B,EAAAA,SAAAA;AAAAA,IAA9B,QAAA,EAAA,CAEK,CAACc,SAAAA,wBAAc,cAAD,EAAA;AAAA,MAAgB,MAAhB,EAAA,IAAA;AAAA,MACgB,QAAA,EAAU/0B,SAAS0B,UAAYC,EAAAA,QAAAA;AAAAA,MAD/C,QAAA,sBAEV,aAAD,EAAA;AAAA,QAAe,QAAA;AAAA,OAAf,CAAA;AAAA,KAJR,CAOI,kBAAA9M,GAAA,CAAC,KAAD,EAAA;AAAA,MACI,IAAK+S,CAAW,KAAA,MAAA;AAAA,QACZmW,SAAW,EAAA,MAAA;AAAA,QACXmC,SAAW,EAAA,CAAA;AAAA,QACXpF,OAAAA,EAASlT,KAAMO,CAAAA,OAAAA,CAAQ,CAAd,CAAA;AAAA,QAAA,CACRP,KAAM8V,CAAAA,WAAAA,CAAYC,EAAG,CAAA,IAArB,CAA6B,GAAA;AAAA,UAC1B7C,OAAAA,EAASlT,KAAMO,CAAAA,OAAAA,CAAQ,CAAd,CAAA;AAAA,SADiB;AAAA,OAJlB,CAAA;AAAA,MAQhB,OAAS,EAAA,UAAA;AAAA,MATb,QAAA,sBAWK,aAAD,EAAA;AAAA,QAAA,QAAA,sBACK,gBAAD,EAAA;AAAA,UAAkB,IAAA;AAAA,UACA,KAAA;AAAA,UACA,QAAA;AAAA,UACA,IAAM,EAAA,SAAA;AAAA,SAHxB,CAAA;AAAA,OADJ,CAAA;AAAA,KAlBR,CA2BK8rB,EAAAA,SAAAA,IACD,OAAO3rB,KAAU,KAAA,QAAA,wBAChB,cAAD,EAAA;AAAA,MAAiBA,QAAAA,EAAAA,KAAAA;AAAAA,KAAjB,CAAA,EAEC6rB,kBACD,oBAAAt/B,GAAA,CAAC,gBAAD,EAAA;AAAA,MAAkB,QAAA;AAAA,KAhCtB,CAAA,CAAA;AAAA,GAFJ,CAAA,CAAA;AAsCH;;ACtDM,MAAM6S,WAAYC,GAAAA,UAAAA,CAAW,CAACC,KAAAA,KACjCC,YAAa,CAAA;AAAA,EACTqF,IAAM,EAAA;AAAA,IACoC,oCAAA,EAAA;AAAA,MAClClD,KAAAA,EAAOpC,KAAMsI,CAAAA,OAAAA,CAAQ9H,IAAKsY,CAAAA,SAAAA;AAAAA,KAF5B;AAAA,IAI2C,2CAAA,EAAA;AAAA,MACzC1W,KAAAA,EAAOpC,KAAMsI,CAAAA,OAAAA,CAAQmP,OAAQqV,CAAAA,IAAAA;AAAAA,KAL/B;AAAA,IAOwF,wFAAA,EAAA;AAAA,MACtF1qB,KAAO,EAAA,oBAAA;AAAA,KART;AAAA,IAU+C,+CAAA,EAAA;AAAA,MAC7CA,KAAO,EAAA,SAAA;AAAA,KAXT;AAAA,IAagB,gBAAA,EAAA;AAAA,MACdA,KAAO,EAAA,SAAA;AAAA,MACPoD,eAAiBxF,EAAAA,KAAAA,CAAMsI,OAAQna,CAAAA,IAAAA,KAAS,UAAU,oBAAuB,GAAA,SAAA;AAAA,KAf3E;AAAA,IAiBwB,wBAAA,EAAA;AAAA,MACtBib,YAAc,EAAA,SAAA;AAAA,MACd5D,eAAiBxF,EAAAA,KAAAA,CAAMsI,OAAQna,CAAAA,IAAAA,KAAS,UAAU,qBAAwB,GAAA,2BAAA;AAAA,KAFpD;AAAA,GAjBxB;AADG,CAAD,CADmB,CAAA,CAAA;AAkCL,SAAA,aAAA,CAAA;AAAA,EACImD,IAAAA;AAAAA,EACA6H,KAAAA;AAAAA,EACA0T,QAAAA;AAAAA,EACAnM,KAAAA;AAAAA,EACA2rB,SAAAA;AAAAA,EACA7zB,QAAAA;AAAAA,EACAusB,SAAAA;AAAAA,EACAuH,OAAAA;AAAAA,EACAl0B,QAAAA;AAAAA,EACA+0B,SAAAA;AAAAA,EACAZ,kBAAAA;AAAAA,EACA5+B,OAAAA;AAAAA,EACA6+B,oBAAAA;AAAAA,CACmB,EAAA;AAE3C5rB,EAAAA,MAAAA,UAAUd,WAAhB,EAAA,CAAA;AAEAgoB,EAAqB,oBAAA,CAAA;AAAA,IACjB1vB,QAAAA;AAAAA,IACAe,KAAAA;AAAAA,IACA0T,QAAAA;AAAAA,GAHgB,CAAA,CAAA;AAMpB,EAAMiU,MAAAA,WAAAA,GAAc,CAACQ,QAAiC,KAAA;AAC9C,IAAA,IAAA,CAACA,QAAU,EAAA;AACXzU,MAAAA,QAAAA,CACI,IADI,CAAA,CAAA;AAAA,KAGL,MAAA;AACHA,MAAAA,QAAAA,CACIyU,QADI,CAAA,CAAA;AAAA,KAGX;AAAA,GATL,CAAA;AAYA,EAAA,4BAEK,WAAD,EAAA;AAAA,IACI,QAAA,EAAUlpB,SAAS0B,UAAYC,EAAAA,QAAAA;AAAAA,IAC/B,KAAOsyB,EAAAA,SAAAA;AAAAA,IACP,SAHJ,EAAA,IAAA;AAAA,IAAA,QAAA,EAAA,CAKK,CAACc,SAAAA,wBAAc,cAAD,EAAA;AAAA,MAAgB,MAAhB,EAAA,IAAA;AAAA,MACgB,QAAA,EAAU/0B,SAAS0B,UAAYC,EAAAA,QAAAA;AAAAA,MAD/C,QAAA,sBAEV,aAAD,EAAA;AAAA,QAAe,QAAA;AAAA,OAAf,CAAA;AAAA,KAFW,CAKf,kBAAA9M,GAAA,CAAA,KAAA,EAAA;AAAA,MAAK,WAAW2T,OAAQ0E,CAAAA,IAAAA;AAAAA,MAAxB,QAAA,sBACK,QAAD,EAAA;AAAA,QACI,KAAO,EAAA,OAAOnM,KAAU,KAAA,QAAA,GAAWA,KAAQ,GAAA,EAAA;AAAA,QAC3C,OAAS,EAAA,MAAA;AAAA,QACT,QAAA,EAAWA,CAAU2nB,MAAAA,KAAAA,WAAAA,CAAY3nB,MAAD,CAAA;AAAA,OAHpC,CAAA;AAAA,KAXR,CAkBI,kBAAAlM,GAAA,CAAC,GAAD,EAAA;AAAA,MAAK,OAAS,EAAA,MAAA;AAAA,MAAd,QAAA,uBACK,GAAD,EAAA;AAAA,QAAK,QAAU,EAAA,CAAA;AAAA,QACVo/B,UAAAA,CAAAA,SAAAA,IACD,OAAO3rB,KAAU,KAAA,QAAA,wBAChB,cAAD,EAAA;AAAA,UAAiBA,QAAAA,EAAAA,KAAAA;AAAAA,SAAjB,CAAA,EACC6rB,kBACD,oBAAAt/B,GAAA,CAAC,gBAAD,EAAA;AAAA,UAAkB,QAAA;AAAA,SALtB,CAAA,CAAA;AAAA,OAAA,CAAA;AAAA,KAnBR,CAAA,CAAA;AAAA,GAFJ,CAAA,CAAA;AAiCH;;ACtFsC,SAAA,sBAAA,CAAA;AAAA,EACIqE,IAAAA;AAAAA,EACA6H,KAAAA;AAAAA,EACAuH,KAAAA;AAAAA,EACA2rB,SAAAA;AAAAA,EACAe,YAAAA;AAAAA,EACAD,SAAAA;AAAAA,EACA/0B,QAAAA;AAAAA,EACAm0B,kBAAAA;AAAAA,EACA1f,QAAAA;AAAAA,CAC4B,EAAA;AAE7D5F,EAAAA,MAAAA,aAAuB7O,QAASiC,CAAAA,EAAAA,CAAAA;AACtC,EAAI4M,IAAAA,UAAAA,CAAW3O,aAAa,WAAa,EAAA;AAC/BzI,IAAAA,MAAAA,MAAM,kEAAD,CAAA,CAAA;AAAA,GACd;AAEK,EAAA,MAAA,CAAC7D,IAAAA,EAAM01B,OAAWv1B,CAAAA,GAAAA,cAAAA,CAAMK,SAAS,KAAf,CAAA,CAAA;AAClB,EAAA,MAAA,CAACkc,OAAAA,EAASC,UAAcxc,CAAAA,GAAAA,cAAAA,CAAMK,SAAS,KAAf,CAAA,CAAA;AACxB02B,EAAAA,MAAAA,WAAc/pB,GAAAA,KAAAA,IAAStH,KAAMC,CAAAA,OAAAA,CAAQqH,KAAd,CAAA,GAAuBA,KAAMjI,CAAAA,GAAAA,CAAK6c,CAAQA,GAAAA,KAAAA,GAAAA,CAAI7X,EAAvB,CAAA,GAA6B,EAAjF,CAAA;AAEA4xB,EAAqB,oBAAA,CAAA;AAAA,IACjB1vB,QAAAA;AAAAA,IACAe,KAAAA;AAAAA,IACA0T,QAAAA;AAAAA,GAHgB,CAAA,CAAA;AAMdxf,EAAAA,MAAAA,oBAAoB0kB,aAA1B,EAAA,CAAA;AACME,EAAAA,MAAAA,kBAAAA,GAA2D7T,QAAQ,MAAM;AAC3E,IAAA,OAAO6I,WAAW1X,IAAOlC,GAAAA,iBAAAA,CAAkBoP,qBAAsBwK,CAAAA,UAAAA,CAAW1X,IAAnD,CAA2D5C,GAAAA,KAAAA,CAAAA,CAAAA;AAAAA,GACrF,EAAA,CAACsa,UAAW1X,CAAAA,IAAZ,CAFqE,CAAA,CAAA;AAIpE,EAAA,IAAA,CAAC0iB,kBAAoB,EAAA;AACrB,IAAMpiB,MAAAA,KAAAA,CAAO,CAA2DoX,yDAAAA,EAAAA,UAAAA,CAAW1X,IAAxE,CAAA,CAAA,CAAA,CAAA;AAAA,GACd;AAEKwgC,EAAAA,MAAAA,eAAe,MAAM;AACvBrO,IAAAA,OAAAA,CAAQ,IAAD,CAAA,CAAA;AAAA,GADX,CAAA;AAIMoN,EAAAA,MAAAA,UAAU,MAAM;AAClBpN,IAAAA,OAAAA,CAAQ,KAAD,CAAA,CAAA;AAAA,GADX,CAAA;AAIMuB,EAAAA,MAAAA,0BAAAA,GAA6B,CAACvY,QAA4B,KAAA;AAC5DmC,IAAAA,QAAAA,CAASnC,SAASxZ,GAAImB,CAAAA,CAAAA,CAAAA,KAAK2wB,gBAAiB3wB,CAAAA,CAAD,CAAlC,CAAD,CAAA,CAAA;AAAA,GADZ,CAAA;AAIM43B,EAAAA,MAAAA,UAAAA,GAAa,CAACllB,KAAAA,EAAe2mB,UAAuB,KAAA;AACtD,IAAA,MAAMsE,aAAa72B,KAASA,IAAAA,KAAAA,CAAMvJ,MAASmV,GAAAA,KAAAA,GAAQ5L,MAAM4L,KAASpY,CAAAA,GAAAA,KAAAA,CAAAA,CAAAA;AAC9D,IAAA,IAAA,CAACqjC,UAAAA;AACD,MAAA,2BAAO,KAAA,EAAA;AAAA,QAAA,QAAA,EAAA,gBAAA;AAAA,OAAP,CAAA,CAAA;AAEA,IAAA,2BAAA,KAAA,EAAA;AAAA,MACI,YAAA,EAAc,MAAMrnB,UAAAA,CAAW,IAAD,CAAA;AAAA,MAC9B,WAAA,EAAa,MAAMA,UAAAA,CAAW,IAAD,CAAA;AAAA,MAC7B,YAAA,EAAc,MAAMA,UAAAA,CAAW,KAAD,CAAA;AAAA,MAHlC,QAAA,sBAIK,gBAAD,EAAA;AAAA,QACI,KAAOqnB,EAAAA,UAAAA;AAAAA,QACP,QAAU/oB,EAAAA,UAAAA;AAAAA,QACV,OAAA;AAAA,QACA,IAAM,EAAA,SAAA;AAAA,QACN,OAAS8oB,EAAAA,YAAAA;AAAAA,OALb,CAAA;AAAA,KALR,CAAA,CAAA;AAAA,GAJJ,CAAA;AAqBI,EAAA,4BAAArpB,QAAA,EAAA;AAAA,IAAA,QAAA,EAAA,iBACI1Z,IAAA,CAAC,WAAD,EAAA;AAAA,MAAa,SAAb,EAAA,IAAA;AAAA,MAAuB,KAAOq/B,EAAAA,SAAAA;AAAAA,MAA9B,QAAA,EAAA,CAEK,CAACc,SAAAA,wBAAc,cAAD,EAAA;AAAA,QAAgB,MAAhB,EAAA,IAAA;AAAA,QACgB,QAAA,EAAU/0B,SAAS0B,UAAYC,EAAAA,QAAAA;AAAAA,QAD/C,QAAA,sBAEV,aAAD,EAAA;AAAA,UAAe,QAAA;AAAA,SAAf,CAAA;AAAA,OAJR,CAOI,kBAAA/M,IAAA,CAAC,KAAD,EAAA;AAAA,QAAO,OAAS,EAAA,UAAA;AAAA,QACT,IAAKgT,CAAW,KAAA,MAAA;AAAA,UACZsY,SAAW,EAAA,CAAA;AAAA,UACXpF,OAAAA,EAASlT,KAAMO,CAAAA,OAAAA,CAAQ,CAAd,CAAA;AAAA,UAAA,CACRP,KAAM8V,CAAAA,WAAAA,CAAYC,EAAG,CAAA,IAArB,CAA6B,GAAA;AAAA,YAC1B7C,OAAAA,EAASlT,KAAMO,CAAAA,OAAAA,CAAQ,CAAd,CAAA;AAAA,WADiB;AAAA,SAHlB,CAAA;AAAA,QADvB,QAAA,EAAA,CASK,CAAC0R,kBAAAA,wBAAuB,SAAD,EAAA;AAAA,UACpB,KAAO,EAAA,wDAAA;AAAA,SAVf,CAAA,EAYKA,kBAAsB,oBAAAjlB,IAAA,CAAA0Z,QAAA,EAAA;AAAA,UAAA,QAAA,EAAA,iBAEnBzZ,GAAA,CAAC,cAAD,EAAA;AAAA,YAAgB,KAAA;AAAA,YACA,IAAA;AAAA,YACA,UAAA;AAAA,YACA,QAAUmgC,EAAAA,YAAAA;AAAAA,WALP,CAOnB,kBAAAngC,GAAA,CAAC,GAAD,EAAA;AAAA,YAAK,CAAG,EAAA,CAAA;AAAA,YACH,cAAe,EAAA,QAAA;AAAA,YACf,SAAW,EAAA,MAAA;AAAA,YAFhB,QAAA,uBAGK,MAAD,EAAA;AAAA,cAAQ,OAAQ,EAAA,UAAA;AAAA,cACR,KAAM,EAAA,SAAA;AAAA,cACN,QAAUmgC,EAAAA,YAAAA;AAAAA,cACV,OAAS2C,EAAAA,YAAAA;AAAAA,cACP33B,QAAAA,EAAAA,CAAAA,OAAAA,EAAAA,QAAAA,CAAS3L,KAJnB,CAAA;AAAA,aAAA,CAAA;AAAA,WAVe,CAAA,CAAA;AAAA,SAZ3B,CAAA,CAAA;AAAA,OAAA,CAAA,EAiCC8/B,kBACD,oBAAAt/B,GAAA,CAAC,gBAAD,EAAA;AAAA,QAAkB,QAAA;AAAA,OAzCtB,CA2CKo/B,EAAAA,SAAAA,IACD,OAAO3rB,KAAU,KAAA,QAAA,wBAChB,cAAD,EAAA;AAAA,QAAiBA,QAAAA,EAAAA,KAAAA;AAAAA,OA7CrB,CAAA,CAAA;AAAA,KADJ,CAkDKuR,EAAAA,kBAAAA,IAAsBhL,UAAW1X,CAAAA,IAAAA,wBAAS,eAAD,EAAA;AAAA,MAAiB,IAAA;AAAA,MACnB,WAAa,EAAA,IAAA;AAAA,MACb,kBAAA;AAAA,MACA,MAAM0X,UAAW1X,CAAAA,IAAAA;AAAAA,MACjB,OAAA;AAAA,MACA,0BAAA;AAAA,MACA,iBAAmB2zB,EAAAA,WAAAA;AAAAA,KAxD/D,CAAA,CAAA;AAAA,GADJ,CAAA,CAAA;AA6DH;;ACnGA,SAAA,kBAAA,CAAA;AAAA,EACI5xB,IAAAA;AAAAA,EACA8G,QAAAA;AAAAA,EACAzK,OAAAA;AAAAA,EACA4+B,kBAAAA;AAAAA,EACA2C,yBAAAA;AAAAA,EACA12B,QAAAA;AAAAA,EACA20B,SAAAA;AAAAA,EACAmC,WAAAA;AAAAA,EACAvK,SAAAA;AAAAA,EACAyH,oBAAAA;AAAAA,CACyD,EAAA;AAE1D,EAAIyD,IAAAA,SAAAA,CAAAA;AACJ,EAAI9H,IAAAA,UAAAA,CAAW/vB,QAAD,CAAY,EAAA;AACtB63B,IAAYC,SAAAA,GAAAA,aAAAA,CAAAA;AAAAA,GACf,MAAA,IAAU93B,QAASoO,CAAAA,MAAAA,EAAQyhB,KAAO,EAAA;AAC/BgI,IAAAA,SAAAA,GAAY73B,SAASoO,MAAQyhB,EAAAA,KAAAA,CAAAA;AAAAA,GAChC,MAAA,IAAU7vB,QAASE,CAAAA,QAAAA,KAAa,OAAS,EAAA;AACtC,IAAA,MAAM+B,KAAMjC,QAA2BiC,CAAAA,EAAAA,CAAAA;AACvC,IAAA,IAAIA,EAAI,EAAA;AACJ,MAAKA,IAAAA,CAAAA,EAAAA,CAAG/B,aAAa,QAAY+B,IAAAA,EAAAA,CAAG/B,aAAa,QAAa+B,KAAAA,EAAAA,CAAGmM,QAAQxB,UAAY,EAAA;AACjFirB,QAAYE,SAAAA,GAAAA,eAAAA,CAAAA;AAAAA,iBACL91B,EAAG/B,CAAAA,QAAAA,KAAa,QAAY+B,IAAAA,EAAAA,CAAGmM,QAAQoJ,WAAa,EAAA;AAC3DqgB,QAAYG,SAAAA,GAAAA,kBAAAA,CAAAA;AAAAA,OACf,MAAA,IAAU/1B,EAAG/B,CAAAA,QAAAA,KAAa,WAAa,EAAA;AACpC23B,QAAYI,SAAAA,GAAAA,sBAAAA,CAAAA;AAAAA,OACT,MAAA;AACHJ,QAAYK,SAAAA,GAAAA,iBAAAA,CAAAA;AAAAA,OACf;AAAA,KACJ;AACD,IAAA,MAAMh2B,QAASlC,QAA2BkC,CAAAA,KAAAA,CAAAA;AAC1C,IAAA,IAAIA,KAAO,EAAA;AACP21B,MAAYM,SAAAA,GAAAA,eAAAA,CAAAA;AAAAA,KACf;AACD,IAAI,IAAA,CAACl2B,EAAM,IAAA,CAACC,KAAO,EAAA;AACf,MAAMzK,MAAAA,KAAAA,CAAO,kGAAiGyB,IAAnG,CAAA,CAAA,CAAA,CAAA;AAAA,KACd;AAAA,GACJ,MAAA,IAAU8G,QAASE,CAAAA,QAAAA,KAAa,KAAO,EAAA;AACpC23B,IAAYO,SAAAA,GAAAA,QAAAA,CAAAA;AAAAA,GACf,MAAA,IAAUp4B,QAASE,CAAAA,QAAAA,KAAa,WAAa,EAAA;AAC1C,IAAA,IAAI,CAACF,QAAS7I,CAAAA,IAAAA;AACV0gC,MAAYC,SAAAA,GAAAA,aAAAA,CAAAA;AAAAA,SACX;AACDD,MAAYQ,SAAAA,GAAAA,cAAAA,CAAAA;AAAAA,KACf;AAAA,GACJ,MAAA,IAAUr4B,QAASE,CAAAA,QAAAA,KAAa,WAAa,EAAA;AAC1C23B,IAAYS,SAAAA,GAAAA,aAAAA,CAAAA;AAAAA,GACf,MAAA,IAAUt4B,QAASE,CAAAA,QAAAA,KAAa,SAAW,EAAA;AACxC23B,IAAYzB,SAAAA,GAAAA,WAAAA,CAAAA;AAAAA,GACf,MAAA,IAAUp2B,QAASE,CAAAA,QAAAA,KAAa,QAAU,EAAA;AACvC,IAAIF,IAAAA,QAAAA,CAASoO,QAAQxB,UAAY,EAAA;AAC7BirB,MAAYjY,SAAAA,GAAAA,MAAAA,CAAAA;AAAAA,KACT,MAAA;AACHiY,MAAYU,SAAAA,GAAAA,SAAAA,CAAAA;AAAAA,KACf;AAAA,GACJ,MAAA,IAAUv4B,QAASE,CAAAA,QAAAA,KAAa,QAAU,EAAA;AACvC,IAAIF,IAAAA,QAAAA,CAASoO,QAAQoJ,WAAa,EAAA;AAC9BqgB,MAAYG,SAAAA,GAAAA,kBAAAA,CAAAA;AAAAA,KACf,MAAA,IAAUh4B,QAASoO,CAAAA,MAAAA,EAAQqN,QAAU,EAAA;AAClCoc,MAAYW,SAAAA,GAAAA,aAAAA,CAAAA;AAAAA,KACf,MAAA,IAAUx4B,QAASoO,CAAAA,MAAAA,EAAQxB,UAAY,EAAA;AACpCirB,MAAYjY,SAAAA,GAAAA,MAAAA,CAAAA;AAAAA,KACT,MAAA;AACHiY,MAAYU,SAAAA,GAAAA,SAAAA,CAAAA;AAAAA,KACf;AAAA,GACJ;AAED,EAAA,IAAIV,SAAW,EAAA;AAEX,IAAA,MAAMY,cAAiB,GAAA;AAAA,MACnBv/B,IAAAA;AAAAA,MACA8G,QAAAA;AAAAA,MACAm0B,kBAAAA;AAAAA,MACA2C,yBAAAA;AAAAA,MACAvhC,OAAAA;AAAAA,MACA6K,QAAAA;AAAAA,MACA20B,SAAAA;AAAAA,MACAmC,WAAAA;AAAAA,MACAvK,SAAAA;AAAAA,MACAyH,oBAAAA;AAAAA,KAVmB,CAAA;AAevB,IAAA,MAAMsE,cAAiBtE,GAAAA,oBAAAA,IAAwBp0B,QAASoO,CAAAA,MAAAA,EAAQyhB,QAAQA,KAAQ8I,GAAAA,SAAAA,CAAAA;AAEhF,IAAA,2BACK,cAAD,EAAA;AAAA,MACI,QAAA,EAAU34B,SAAS0B,UAAYC,EAAAA,QAAAA;AAAAA,MAC/B,MAAO,CAAEzI,EAAAA,IAAAA,CAAAA,CAAAA;AAAAA,MAFb,QAAA,EAIK,CAACmiB,UAAoC,KAAA;AAClC,QAAA,2BAAQ,aAAD,EAAA;AAAA,UACH,SAAA;AAAA,UACA,cAAA;AAAA,UACA,UAAA;AAAA,SAHJ,CAAA,CAAA;AAAA,OAIH;AAAA,KAVT,CAAA,CAAA;AAAA,GAcH;AAGG,EAAA,2BAAA,KAAA,EAAA;AAAA,IAAO,QAAA,EAAA,uBAAsBrb,QAASE,CAAAA,QAAAA,CAAAA,iBAAAA,CAAAA;AAAAA,GAD1C,CAAA,CAAA;AAGH,CAAA;AAGD,SACC,aAAA,CAAA;AAAA,EACI23B,SAAAA;AAAAA,EACAY,cAAgB,EAAA;AAAA,IACZv/B,IAAAA;AAAAA,IACA8G,QAAAA;AAAAA,IACAm0B,kBAAAA;AAAAA,IACA2C,yBAAAA;AAAAA,IACA/B,SAAAA;AAAAA,IACAmC,WAAAA;AAAAA,IACAvK,SAAAA;AAAAA,IACAp3B,OAAAA;AAAAA,IACA6K,QAAAA;AAAAA,IACAg0B,oBAAAA;AAAAA,GAAAA;AAAAA,EAEJ/Y,UAAAA;AAAAA,CAOG,EAAA;AAEEud,EAAAA,MAAAA,gBAAAA,GAAwB54B,SAASoO,MAAQoN,EAAAA,WAAAA,CAAAA;AAC/C,EAAMza,MAAAA,KAAAA,GAAQsa,WAAWkc,KAAMx2B,CAAAA,KAAAA,CAAAA;AAC/B,EAAMgsB,MAAAA,YAAAA,GAAe1R,WAAWwd,IAAK9L,CAAAA,YAAAA,CAAAA;AAC/BzkB,EAAAA,MAAAA,KAAQwwB,GAAAA,KAAAA,CAAMzd,UAAWmc,CAAAA,IAAAA,CAAKuB,QAAQ7/B,IAAzB,CAAA,CAAA;AACbg7B,EAAAA,MAAAA,OAAU4E,GAAAA,KAAAA,CAAMzd,UAAWmc,CAAAA,IAAAA,CAAKtD,SAASh7B,IAA1B,CAAA,CAAA;AAEf+6B,EAAAA,MAAAA,SAAAA,GAAqB3rB,UACXkvB,UAAAA,CAAAA,IAAAA,CAAKwB,cAAc,CAAKh5B,IAAAA,QAAAA,CAAS0B,UAAYylB,EAAAA,MAAAA,CAAAA,KACvD1tB,CAAAA,KAAAA,CAAMC,QAAQ4O,KAAd,CAAA,IAAwB,CAAC,CAACA,KAAM3O,CAAAA,MAAAA,CAAO,CAACM,CAAW,KAAA,CAAC,CAACA,CAA3B,CAA8BzC,CAAAA,MAAAA,CAAAA,CAAAA;AAE9D,EAAMw9B,MAAAA,YAAAA,GAAe3Z,WAAWmc,IAAKxC,CAAAA,YAAAA,CAAAA;AAErC,EAAA,MAAM,CAACrM,aAAAA,EAAeC,gBAAoBx0B,CAAAA,GAAAA,QAAAA,CAAmB2M,KAAX,CAAA,CAAA;AAClDrK,EAAAA,SAAAA,CACI,MAAM;AACF,IAAM+nB,MAAAA,OAAAA,GAAU1I,WAAW,MAAM;AAC7BsF,MAAWmc,UAAAA,CAAAA,IAAAA,CAAKE,aAAcx+B,CAAAA,IAAAA,EAAMyvB,aAApC,CAAA,CAAA;AAAA,OACD,EAFuB,CAAA,CAAA;AAI1B,IAAA,OAAO,MAAM;AACTjK,MAAAA,YAAAA,CAAaD,OAAD,CAAA,CAAA;AAAA,KADhB,CAAA;AAAA,GAGH,EACD,CAACkK,aAAD,CAVK,CAAA,CAAA;AAaTjyB,EAAAA,SAAAA,CACI,MAAM;AACF,IAAA,IAAI,CAAC+uB,OAAAA,CAAQ1kB,KAAO4nB,EAAAA,aAAR,CAAwB,EAAA;AAChCC,MAAAA,gBAAAA,CAAiB7nB,KAAD,CAAA,CAAA;AAAA,KACnB;AAAA,GACJ,EACD,CAACA,KAAD,CANK,CAAA,CAAA;AAST,EAAA,MAAMk4B,aAA+B,GAAA;AAAA,IACjC//B,IAAAA;AAAAA,IACA6H,KAAO4nB,EAAAA,aAAAA;AAAAA,IACPoE,YAAAA;AAAAA,IACAtY,QAAAA,EAAU,CAAC1T,MAAoB,KAAA;AAC3Bsa,MAAAA,UAAAA,CAAWmc,IAAKC,CAAAA,eAAAA,CAAgBv+B,IAAM,EAAA,IAAA,EAAM,KAA5C,CAAA,CAAA;AACA0vB,MAAAA,gBAAAA,CAAiB7nB,MAAD,CAAA,CAAA;AAAA,KANa;AAAA,IAQjCuH,KAAAA;AAAAA,IACA4rB,OAAAA;AAAAA,IACAD,SAAAA;AAAAA,IACAe,YAAAA;AAAAA,IACAb,oBAAoBA,kBAAsB,IAAA,IAAA;AAAA,IAC1Cn0B,QAAAA;AAAAA,IACAI,UAAUA,QAAY,IAAA,KAAA;AAAA,IACtB02B,2BAA2BA,yBAA6B,IAAA,KAAA;AAAA,IACxD/B,WAAWA,SAAa,IAAA,KAAA;AAAA,IACxBmC,aAAaA,WAAe,IAAA,KAAA;AAAA,IAC5BvK,WAAWA,SAAa,IAAA,KAAA;AAAA,IACxBnR,WAAaod,EAAAA,gBAAAA;AAAAA,IACbrjC,OAAAA;AAAAA,IACA6+B,sBAAsBA,oBAAwB,IAAA,IAAA;AAAA,GArBlD,CAAA;AAyBI,EAAA,4BAAA9lB,QAAA,EAAA;AAAA,IAAA,QAAA,EAAA,CAEKva,cAAAA,CAAMwnB,aAAcsc,CAAAA,SAAAA,EAAWoB,aAA/B,CAAA,EAEAnC,yBAA6B,IAAA,CAAC9B,YAC/B,oBAAAngC,GAAA,CAAC,cAAD,EAAA;AAAA,MAAA,QAAA,EAAA,uCAAA;AAAA,KALJ,CAAA,CAAA;AAAA,GADJ,CAAA,CAAA;AAYH;;AChP0C,SAAA,QAAA,CAAA;AAAA,EACIqE,IAAAA;AAAAA,EACA6H,KAAAA;AAAAA,EACAkzB,SAAAA;AAAAA,EACA7zB,QAAAA;AAAAA,EACAJ,QAAAA;AAAAA,EACAyU,QAAAA;AAAAA,EACAsgB,SAAAA;AAAAA,EACAZ,kBAAAA;AAAAA,EACA2C,yBAAAA;AAAAA,EACAvhC,OAAAA;AAAAA,CACc,EAAA;AAGnD2jC,EAAAA,MAAAA,gBAAAA,GAAmBl5B,QAASoO,CAAAA,MAAAA,EAAQ8qB,gBAAoB,IAAA,KAAA,CAAA;AAE9D,EAAI,IAAA,CAACl5B,SAASM,UAAY,EAAA;AACtB,IAAM7I,MAAAA,KAAAA,CAAO,4FAA2FyB,IAA7F,CAAA,CAAA,CAAA,CAAA;AAAA,GACd;AAED,EAAI4X,IAAAA,aAAAA,CAAAA;AACA,EAAA,IAAA,CAACooB,gBAAkB,EAAA;AACnBpoB,IAAAA,aAAAA,GAAgB9Q,QAASM,CAAAA,UAAAA,CAAAA;AAAAA,aAClBS,KAAO,EAAA;AACd+P,IAAAA,aAAAA,GAAgB1S,IAAK4B,CAAAA,QAAAA,CAASM,UAC1B,EAAA,GAAGvG,MAAOiF,CAAAA,IAAAA,CAAK+B,KAAZ,CAAA,CACEpH,MAAO8E,CAAAA,CAAAA,GAAAA,KAAOA,GAAOuB,IAAAA,QAAAA,CAASM,UADhC,CADa,CAAA,CAAA;AAAA,GAIjB,MAAA;AACHwQ,IAAAA,aAAAA,GAAgB,EAAhB,CAAA;AAAA,GACH;AAED4e,EAAqB,oBAAA,CAAA;AAAA,IACjB1vB,QAAAA;AAAAA,IACAe,KAAAA;AAAAA,IACA0T,QAAAA;AAAAA,GAHgB,CAAA,CAAA;AAMpB,EAA+B,SAAA,mBAAA,GAAA;AAErBzV,IAAAA,MAAAA,IAAOjF,GAAAA,MAAAA,CAAOiF,IAAKgB,CAAAA,QAAAA,CAASM,UAArB,CAAA,CACR3G,MAAQ8E,CAAAA,CAAAA,GAAAA,KAAQ,CAACsC,KAAAA,IAAS,EAAEtC,GAAAA,IAAOsC,KAD3B,CAAA,CAAA,CAAA;AAGb,IAAMo4B,MAAAA,iBAAAA,GAAoB,CAACva,KAA6B,KAAA;AACpDnK,MAAS,QAAA,CAAA;AAAA,QACF1T,GAAAA,KAAAA;AAAAA,QACF6d,CAAAA,KAAAA,CAAMjgB,OAAOoC,KAAkB,GAAA,IAAA;AAAA,OAF5B,CAAA,CAAA;AAAA,KADZ,CAAA;AAOA,IAAA,IAAI,CAAC/B,IAAKxH,CAAAA,MAAAA;AAAQ,MAAO,uBAAA3C,GAAA,CAAPyZ,QAAA,EAAA,EAAA,CAAA,CAAA;AAElB,IAAA,2BAAQ,GAAD,EAAA;AAAA,MAAK,CAAG,EAAA,CAAA;AAAA,MAAR,QAAA,uBACF,WAAD,EAAA;AAAA,QAAa,SAAb,EAAA,IAAA;AAAA,QAAA,QAAA,EAAA,iBACIzZ,GAAA,CAAC,UAAD,EAAA;AAAA,UAAA,QAAA,EAAA,cAAA;AAAA,SADJ,CAEI,kBAAAA,GAAA,CAAC+qB,QAAD,EAAA;AAAA,UACI,OAAS,EAAA,UAAA;AAAA,UACT,KAAO,EAAA,EAAA;AAAA,UACP,QAAA;AAAA,UACA,QAAUuZ,EAAAA,iBAAAA;AAAAA,UAJd,QAKKn6B,EAAAA,IAAAA,CAAKlG,GAAK2F,CAAAA,CAAAA,GAAAA,yBACN,QAAD,EAAA;AAAA,YAAoB,KAAOA,EAAAA,GAAAA;AAAAA,YACtB,QAACuB,EAAAA,QAAAA,CAASM,UAA0B7B,CAAAA,GAAAA,CAAAA,CAAKpK,KAASoK,IAAAA,GAAAA;AAAAA,WADvD,EAAeA,GAAf,CADH,CAAA;AAAA,SAPT,CAAA,CAAA;AAAA,OAAA,CAAA;AAAA,KADJ,CAAA,CAAA;AAAA,GAgBH;AAED,EAAA,4BACK,WAAD,EAAA;AAAA,IAAa,SAAb,EAAA,IAAA;AAAA,IAAuB,KAAOw1B,EAAAA,SAAAA;AAAAA,IAA9B,QAAA,EAAA,CAEK,CAACc,SAAAA,wBAAc,cAAD,EAAA;AAAA,MAAgB,MAAhB,EAAA,IAAA;AAAA,MACgB,QAAA,EAAU/0B,SAAS0B,UAAYC,EAAAA,QAAAA;AAAAA,MAD/C,QAAA,sBAEV,aAAD,EAAA;AAAA,QAAe,QAAA;AAAA,OAAf,CAAA;AAAA,KAJR,CAOI,kBAAA/M,IAAA,CAAC,KAAD,EAAA;AAAA,MAAO,SAAW,EAAA,CAAA;AAAA,MAAG,OAAS,EAAA,UAAA;AAAA,MAAY,IAAKgT,CAAW,KAAA,MAAA;AAAA,QACtDsY,SAAW,EAAA,CAAA;AAAA,QACXpF,OAAAA,EAASlT,KAAMO,CAAAA,OAAAA,CAAQ,CAAd,CAAA;AAAA,QAAA,CACRP,KAAM8V,CAAAA,WAAAA,CAAYC,EAAG,CAAA,IAArB,CAA6B,GAAA;AAAA,UAC1B7C,OAAAA,EAASlT,KAAMO,CAAAA,OAAAA,CAAQ,CAAd,CAAA;AAAA,SADiB;AAAA,OAHwB,CAAA;AAAA,MAA1D,QAAA,EAAA,iBAOItT,GAAA,CAAC,IAAD,EAAA;AAAA,QAAM,SAAN,EAAA,IAAA;AAAA,QAAgB,OAAS,EAAA,CAAA;AAAA,QAAzB,QAAA,EACKkF,OAAOvB,OAAQsY,CAAAA,aAAf,EACInX,MAAO,CAAA,CAAC,CAAC7E,CAAGkL,EAAAA,SAAAA,CAAAA,KAAc,CAACo5B,QAASp5B,CAAAA,SAAD,CADvC,CAEIlH,CAAAA,GAAAA,CAAI,CAAC,CAACugC,QAAAA,EAAUh3B,gBAAgBsK,KAAU,KAAA;AACvC,UAAA,2BACK,IAAD,EAAA;AAAA,YAAM,IAAN,EAAA,IAAA;AAAA,YACM,EAAI,EAAA,EAAA;AAAA,YACJ,EAAI,EAAA,EAAA;AAAA,YAFV,UAKQsqB,kBAA2B,CAAA;AAAA,cACvB/9B,IAAAA,EAAO,GAAEA,IAAQmgC,CAAAA,CAAAA,EAAAA,QAAAA,CAAAA,CAAAA,CAAAA;AAAAA,cACjBj5B,QAAAA;AAAAA,cACAJ,QAAUqC,EAAAA,aAAAA;AAAAA,cACV8xB,kBAAAA;AAAAA,cACA2C,yBAAAA;AAAAA,cACAvhC,OAAAA;AAAAA,cACAw/B,SAAAA;AAAAA,cACAmC,WAAa,EAAA,KAAA;AAAA,cACbvK,SAAW,EAAA,KAAA;AAAA,cACPyH,oBAAsB,EAAA,KAAA;AAAA,aAVZ,CAAA;AAAA,WAL1B,EAGY,CAAMl7B,IAAAA,EAAAA,IAAAA,CAAAA,CAAAA,EAAQyT,KAH1B,CAAA,CAAA,CAAA,CAAA;AAAA,SAJX,CAAA;AAAA,OADL,CAAA,EA6BCusB,gBAAoBI,IAAAA,mBAAAA,EApCzB,CAAA;AAAA,KAAA,CAAA,EAwCCnF,kBACD,oBAAAt/B,GAAA,CAAC,gBAAD,EAAA;AAAA,MAAkB,QAAA;AAAA,KAhDtB,CAAA,CAAA;AAAA,GADJ,CAAA,CAAA;AAqDH;;ACnJM,MAAM0kC,aAAa,CAAC;AAAA,EAAEjJ,YAAAA;AAAAA,CACyD,KAAA;AAC5E,EAAA,MAAA;AAAA,IAAE0E,YAAAA;AAAAA,IAAcwE,YAAAA;AAAAA,IAAcT,MAAAA;AAAAA,GAAAA,GAAWU,gBAA/C,EAAA,CAAA;AAEA/iC,EAAAA,SAAAA,CAAU,MAAM;AACNsI,IAAAA,MAAAA,IAAAA,GAAOjF,MAAOiF,CAAAA,IAAAA,CAAK+5B,MAAZ,CAAA,CAAA;AAGT/5B,IAAAA,IAAAA,IAAKxH,CAAAA,MAAAA,GAAS,CAAKw9B,IAAAA,YAAAA,IAAgB,CAACwE,YAAc,EAAA;AAClD,MAAA,MAAME,eAAepJ,YAAcr0B,EAAAA,OAAAA,EAAS09B,aACvC,CAAA,CAAA,YAAA,EAAc36B,KAAK,CADH,CAAA,CAAA,CAAA,CAAA,CAAA;AAIrB,MAAI06B,IAAAA,YAAAA,IAAgBpJ,cAAcr0B,OAAS,EAAA;AACvC,QAAM29B,MAAAA,gBAAAA,GAAmBC,mBAAoBvJ,CAAAA,YAAAA,CAAar0B,OAAd,CAAA,CAAA;AAC5C,QAAA,IAAI29B,gBAAkB,EAAA;AAClB,UAAMxY,MAAAA,GAAAA,GAAMsY,YAAa5U,CAAAA,qBAAAA,EAAwB1D,CAAAA,GAAAA,CAAAA;AACjDwY,UAAAA,gBAAAA,CAAiBE,QAAS,CAAA;AAAA,YACtB1Y,GAAAA,EAAKwY,gBAAiBG,CAAAA,SAAAA,GAAY3Y,GAAM,GAAA,EAAA;AAAA,YACxC4Y,QAAU,EAAA,QAAA;AAAA,WAFd,CAAA,CAAA;AAAA,SAIH;AACD,QAAMrjB,MAAAA,KAAAA,GAAQ+iB,YAAaC,CAAAA,aAAAA,CAAc,OAA3B,CAAA,CAAA;AACd,QAAIhjB,IAAAA,KAAAA;AAAOA,UAAAA,KAAAA,CAAM8N,KAAN,EAAA,CAAA;AAAA,OACd;AAAA,KACJ;AAAA,KACF,CAACuQ,YAAAA,EAAcwE,YAAcT,EAAAA,MAAAA,EAAQzI,YAArC,CAtBM,CAAA,CAAA;AAyBT,EAAO,OAAA,IAAA,CAAA;AACV,CAAA,CAAA;AAED,MAAM2J,YAAAA,GAAe,CAACC,GAA4B,KAAA;AACxCC,EAAAA,MAAAA,oBAAuBD,GAAAA,GAAAA,IAAOA,GAAIE,CAAAA,YAAAA,GAAeF,GAAIG,CAAAA,YAAAA,CAAAA;AAE3D,EAAA,MAAMC,iBAAiBJ,GAAMzI,GAAAA,MAAAA,CAAO8I,gBAAiBL,CAAAA,GAAxB,EAA6BM,SAAY,GAAA,IAAA,CAAA;AAChEC,EAAAA,MAAAA,gBAAmBH,GAAAA,cAAAA,IAAkBA,cAAejN,CAAAA,OAAAA,CAAQ,QAAvB,CAAqC,KAAA,CAAA,CAAA,CAAA;AAEzE8M,EAAAA,OAAAA,wBAAwB,CAACM,gBAAAA,CAAAA;AACnC,CAAA,CAAA;AAED,MAAMZ,mBAAAA,GAAsB,CAACK,GAAgD,KAAA;AACjE,EAAA,OAAA,CAACA,GAAAA,IAAOA,GAAQlJ,KAAAA,QAAAA,CAASvoB,IAC3BuoB,GAAAA,QAAAA,CAASvoB,IACRwxB,GAAAA,YAAAA,CAAaC,GAAD,CAAA,GAAQA,GAAML,GAAAA,mBAAAA,CAAoBK,IAAIQ,UAFzD,CAAA,CAAA;AAGH,CAAA;;ACfD,MAAM5G,UAAansB,GAAAA,UAAAA,CAAW,CAACC,KAAAA,KAAiBC,YAAa,CAAA;AAAA,EACzDgb,KAAO,EAAA;AAAA,IACH3C,SAAW,EAAA,CAAA;AAAA,IACXpF,OAAAA,EAASlT,KAAMO,CAAAA,OAAAA,CAAQ,CAAd,CAAA;AAAA,IAAA,CACRP,KAAM8V,CAAAA,WAAAA,CAAYC,EAAG,CAAA,IAArB,CAA6B,GAAA;AAAA,MAC1B7C,OAAAA,EAASlT,KAAMO,CAAAA,OAAAA,CAAQ,CAAd,CAAA;AAAA,KADiB;AAAA,GAJuB;AAAA,EAQzDwyB,YAAc,EAAA;AAAA,IACV7f,OAAAA,EAASlT,KAAMO,CAAAA,OAAAA,CAAQ,CAAd,CAAA;AAAA,IAAA,CACRP,KAAM8V,CAAAA,WAAAA,CAAYC,EAAG,CAAA,IAArB,CAA6B,GAAA;AAAA,MAC1B7C,OAAAA,EAASlT,KAAMO,CAAAA,OAAAA,CAAQ,CAAd,CAAA;AAAA,KADiB;AAAA,GAVuB;AAAA,EAczD4rB,UAAY,EAAA;AAAA,IACR5U,SAAWvX,EAAAA,KAAAA,CAAMO,OAAQ,CAAA,CAAA,GAAI,CAAlB,CAAA;AAAA,IACXsV,UAAY7V,EAAAA,KAAAA,CAAMO,OAAQ,CAAA,CAAA,GAAI,CAAlB,CAAA;AAAA,GAhByC;AAAA,EAkBzD6rB,gBAAkB,EAAA;AAAA,IACd7U,SAAW,EAAA,MAAA;AAAA,IACX1B,UAAY7V,EAAAA,KAAAA,CAAMO,OAAQ,CAAA,CAAA,GAAI,CAAlB,CAAA;AAAA,GApByC;AAAA,EAsBzDyyB,OAAS,EAAA;AAAA,IACL7yB,OAAS,EAAA,MAAA;AAAA,IACT4H,cAAgB,EAAA,UAAA;AAAA,GAxBqC;AAAA,EA0BzDkhB,MAAQ,EAAA;AAAA,IACJ3oB,MAAAA,EAAQN,KAAMO,CAAAA,OAAAA,CAAQ,CAAd,CAAA;AAAA,GA3B6C;AAAA,EA6BzDqvB,IAAM,EAAA;AAAA,IACFrY,SAAAA,EAAWvX,KAAMO,CAAAA,OAAAA,CAAQ,CAAd,CAAA;AAAA,GA9B0C;AAAA,EAgCzDwO,KAAO,EAAA;AAAA,IACHoH,SAAW,EAAA,MAAA;AAAA,GAjC0C;AAAA,EAmCzDiG,MAAQ,EAAA;AAAA,IACJjI,UAAYnU,EAAAA,KAAAA,CAAMO,OAAQ,CAAA,CAAA,GAAI,CAAlB,CAAA;AAAA,GApCyC;AAAA,EAsCzD0yB,UAAY,EAAA;AAAA,IACRnH,YAAAA,EAAc9rB,KAAMO,CAAAA,OAAAA,CAAQ,CAAd,CAAA;AAAA,GADN;AAtC6C,CAAD,CAA/B,CAAA,CAAA;AA4C5B,SAAA,aAAA,CAAA;AAAA,EAAExN,MAAAA;AAAAA,EAAQyG,MAAAA;AAAAA,EAAQqrB,QAAAA;AAAAA,EAAUnkB,KAAAA;AAAAA,EAAO1G,MAAAA;AAAAA,CAMjC,EAAA;AAEO4G,EAAAA,MAAAA,UAAUsrB,UAAhB,EAAA,CAAA;AAEM1zB,EAAAA,MAAAA,QAAWgB,GAAAA,MAAAA,KAAW,UAAc,IAAA,CAACzG,MAAOmgC,CAAAA,QAAAA,CAAAA;AAC5CC,EAAAA,MAAAA,kBAAqB35B,GAAAA,MAAAA,KAAW,UAAc,IAAA,CAACzG,MAAOmgC,CAAAA,QAAAA,CAAAA;AAE5D,EAAME,MAAAA,aAAAA,GAAgB,OAAOrgC,MAAAA,CAAOmgC,QAAa,KAAA,QAAA,CAAA;AAE3C5L,EAAAA,MAAAA,kBAAkB9Z,qBAAxB,EAAA,CAAA;AACM,EAAA,MAAA;AAAA,IAAExY,IAAAA;AAAAA,GAAAA,GAAS0Y,YAAa,CAAA;AAAA,IAC1BE,SAAAA,EAAYpN,CAAS8mB,IAAAA,KAAAA,eAAAA,CAAgBt7B,IAAK,CAAA;AAAA,MACtCc,IAAM,EAAA,SAAA;AAAA,MACNF,SAAU,CAAS4T,OAAAA,EAAAA,IAAAA,CAAAA,CAAAA;AAAAA,KAFF,CAAA;AAAA,GADI,CAAA,CAAA;AAOvByO,EAAAA,MAAAA,YAAkD1F,iBAAxD,EAAA,CAAA;AACA,EAAA,MAAM8pB,UAAa,GAAA;AAAA,IACfC,WAAW1yB,OAAQmO,CAAAA,KAAAA;AAAAA,IACnBwkB,YAAAA,EAAcv5B,MAEV,mBAAAhN,IAAA,CAAC,cAAD,EAAA;AAAA,MAAgB,QAAS,EAAA,KAAA;AAAA,MAAzB,QAAA,EAAA,iBAEIC,GAAA,CAAC,UAAD,EAAA;AAAA,QAAY,OAAUoF,EAAAA,CAAAA,CAAAA,KAAM2C,IAAKgF,CAAAA,MAAAA,CAAO9D,EAAR,CAAA;AAAA,QACpB,YAAW,EAAA,SAAA;AAAA,QACX,IAAK,EAAA,OAAA;AAAA,QAFjB,QAAA,sBAGK,OAAD,EAAA;AAAA,UAAS,KAAO,EAAA,MAAA;AAAA,UACZ,QAAA,sBAAA,KAAA,EAAA;AAAA,YACI,SAAW,EAAA,0CAAA;AAAA,YACX,IAAM,EAAA,cAAA;AAAA,YACN,KAAM,EAAA,IAAA;AAAA,YAAK,MAAO,EAAA,IAAA;AAAA,YAAK,OAAQ,EAAA,WAAA;AAAA,YAC/B,QAAA,sBAAA,MAAA,EAAA;AAAA,cACI,CAAE,EAAA,iIAAA;AAAA,aADN,CAAA;AAAA,WAJJ,CAAA;AAAA,SADJ,CAAA;AAAA,OAHJ,CAAA,EAcC+Y,SAAW7P,EAAAA,iBAAAA,wBACZ,GAAA,EAAA;AAAA,QAAG,IAAA,EAAM6P,UAAU7P,iBAAkB,CAAA;AAAA,UAAEpF,MAAAA;AAAAA,SAA9B,CAAA;AAAA,QACN,GAAI,EAAA,qBAAA;AAAA,QACJ,MAAO,EAAA,QAAA;AAAA,QAFV,QAAA,sBAGK,UAAD,EAAA;AAAA,UAAY,OAAA,EAAU3H,CAAMA,CAAAA,KAAAA,CAAAA,CAAEgV,eAA9B,EAAA;AAAA,UACY,YAAW,EAAA,kBAAA;AAAA,UAAmB,IAAK,EAAA,OAAA;AAAA,UAD/C,QAAA,sBAEK,OAAD,EAAA;AAAA,YAAS,KAAO,EAAA,qBAAA;AAAA,YAAhB,QAAA,sBACK,aAAD,EAAA;AAAA,cAAe,QAAU,EAAA,OAAA;AAAA,aAAzB,CAAA;AAAA,WADJ,CAAA;AAAA,SAFJ,CAAA;AAAA,OApBR,CAAA,CAAA;AAAA,KAAA,CA8BV1a,GAAAA,KAAAA,CAAAA;AAAAA,GAlCE,CAAA;AAqCM8mB,EAAAA,MAAAA,UAAkB,GAAA;AAAA,IACpBpO,KAAAA,EAAO8tB,qBAAqB,yBAA4B,GAAA,IAAA;AAAA,IACxD36B,QAAAA;AAAAA,IACAlH,IAAM,EAAA,IAAA;AAAA,IACNxE,IAAM,EAAA,IAAA;AAAA,IACNqM,KAAOa,EAAAA,MAAAA,IAAUR,MAAW,KAAA,UAAA,GAAaQ,OAAO9D,EAAKvJ,GAAAA,KAAAA,CAAAA;AAAAA,IACrD6mC,OAAS,EAAA,QAAA;AAAA,GANb,CAAA;AASA,EAAA,uCACK,WAAD,EAAA;AAAA,IAAa,SAAb,EAAA,IAAA;AAAA,IACa,KAAA;AAAA,IACI/f,GAAAA,UAAAA;AAAAA,IACJ,GAAK,EAAA,iBAAA;AAAA,GAEb2f,EAAAA,aAAAA,IAAiBrgC,MAAOmgC,CAAAA,QAAAA,yBACzBxsB,QAAA,EAAA;AAAA,IAAA,QAAA,EAAA,iBACIzZ,GAAA,CAAC,UAAD,EAAA;AAAA,MAAY,EAAI,EAAA,UAAA;AAAA,MAAhB,UAA6BwmB,UAAWpO,CAAAA,KAAAA;AAAAA,KAD5C,CAEI,kBAAApY,GAAA,CAACy/B,QAAD,EAAA;AAAA,MACI,OAAS,EAAA,UAAA;AAAA,MACT,WAAW9rB,OAAQwb,CAAAA,MAAAA;AAAAA,MACnB,KAAA;AAAA,MACI3I,GAAAA,UAAAA;AAAAA,MACJ,UAAU,CAACuD,KAAAA,KAAe6N,QAAS7N,CAAAA,KAAAA,CAAMjgB,OAAOoC,KAAd,CAAA;AAAA,MALtC,QAMKhH,EAAAA,MAAAA,CAAOvB,OAAQmC,CAAAA,MAAAA,CAAOmgC,QAAtB,CAAA,CAAgChiC,GAAI,CAAA,CAAC,CAAC2F,GAAAA,EAAKwO,KACxC,CAAA,qBAAApY,GAAA,CAAC,QAAD,EAAA;AAAA,QAEI,KAAO4J,EAAAA,GAAAA;AAAAA,QACL,QAAA,EAAA,GAAEA,GAASwO,CAAAA,GAAAA,EAAAA,KAAAA,CAAAA,CAAAA;AAAAA,OAFP,EAAA,CAAiBxO,eAAAA,EAAAA,GAAAA,CAAAA,CAD3B,CADH,CAAA;AAAA,KART,CAAA,CAAA;AAAA,GAAA,CAAA,EAiBC,CAACu8B,aAAAA,wBACD1Q;IAAiBjP,GAAAA,UAAAA;AAAAA,IACJ,KAAA;AAAA,IACA,UAAY4f,EAAAA,UAAAA;AAAAA,IACZ,UAAYtgC,EAAAA,MAAAA,CAAOmgC,QAAa,KAAA,UAAA,GAAa,wCAA2C,GAAA,wBAAA;AAAA,IACxF,UAAWlc,CAAU,KAAA,KAAA;AACjB,MAAI7d,IAAAA,KAAAA,GAAQ6d,MAAMjgB,MAAOoC,CAAAA,KAAAA,CAAAA;AACzB,MAAIA,IAAAA,KAAAA;AAAOA,QAAAA,KAAAA,GAAQA,MAAMymB,IAAd,EAAA,CAAA;AACJiF,MAAAA,OAAAA,QAAS1rB,CAAAA,KAAAA,CAAMvJ,MAASuJ,GAAAA,KAAAA,GAAQxM,KAAxB,CAAA,CAAA,CAAA;AAAA,KAClB;AAAA,GAhCnB,CAkCI,kBAAAM,GAAA,CAAC,YAAD,EAAA;AAAA,IAAc,IAAM,EAAA,IAAA;AAAA,IACN,SAAU,EAAA,KAAA;AAAA,IADxB,UAEMC,CAAM,CAAA,KAAA,2BAAA;AAAA,GAFZ,CAlCJ,CAAA,CAAA;AAyCP;;AC/JM,MAAM4S,WAAYC,GAAAA,UAAAA,CAAW,CAACC,KAAAA,KAAiBC,YAAa,CAAA;AAAA,EAC/DwzB,aAAe,EAAA;AAAA,IACXlc,SAAAA,EAAWvX,KAAMO,CAAAA,OAAAA,CAAQ,CAAd,CAAA;AAAA,IACXqS,UAAY5S,EAAAA,KAAAA,CAAMsI,OAAQna,CAAAA,IAAAA,KAAS,UAAU,uBAA0B,GAAA,wBAAA;AAAA,IACvEulC,cAAgB,EAAA,WAAA;AAAA,IAChBC,SAAAA,EAAW3zB,MAAMsI,OAAQ8O,CAAAA,OAAAA;AAAAA,IACzBtP,QAAU,EAAA,QAAA;AAAA,IACVM,MAAQ,EAAA,CAAA;AAAA,IACR8b,MAAQ,EAAA,GAAA;AAAA,GARmD;AAAA,EAU/D0P,SAAW,EAAA;AAAA,IACP1gB,OAAAA,EAASlT,KAAMO,CAAAA,OAAAA,CAAQ,CAAd,CAAA;AAAA,IACTgX,SAAAA,EAAWvX,KAAMO,CAAAA,OAAAA,CAAQ,CAAd,CAAA;AAAA,IACXurB,YAAAA,EAAc9rB,KAAMO,CAAAA,OAAAA,CAAQ,CAAd,CAAA;AAAA,IAAA,CACbP,KAAM8V,CAAAA,WAAAA,CAAYoB,IAAK,CAAA,IAAvB,CAA+B,GAAA;AAAA,MAC5BzW,WAAAA,EAAaT,KAAMO,CAAAA,OAAAA,CAAQ,CAAd,CAAA;AAAA,MACb4W,YAAAA,EAAcnX,KAAMO,CAAAA,OAAAA,CAAQ,CAAd,CAAA;AAAA,MACd4T,UAAAA,EAAYnU,KAAMO,CAAAA,OAAAA,CAAQ,CAAd,CAAA;AAAA,MACZiX,aAAAA,EAAexX,KAAMO,CAAAA,OAAAA,CAAQ,CAAd,CAAA;AAAA,KARZ;AAAA,IAAA,CAUNP,KAAM8V,CAAAA,WAAAA,CAAYoB,IAAK,CAAA,IAAvB,CAA+B,GAAA;AAAA,MAC5BhE,OAAAA,EAASlT,KAAMO,CAAAA,OAAAA,CAAQ,CAAd,CAAA;AAAA,KADmB;AAAA,GApB2B;AAAA,EAwB/D0oB,MAAQ,EAAA;AAAA,IACJ3oB,MAAAA,EAAQN,KAAMO,CAAAA,OAAAA,CAAQ,CAAd,CAAA;AAAA,GAzBmD;AAAA,EA2B/DqvB,IAAM,EAAA;AAAA,IACFrY,SAAAA,EAAWvX,KAAMO,CAAAA,OAAAA,CAAQ,CAAd,CAAA;AAAA,GADT;AA3ByD,CAAD,CAA/B,CAAA,CAAA;AAwGL,SAAAszB,YAAA,CAAA;AAAA,EACIr6B,MAAAA;AAAAA,EACAjK,IAAAA;AAAAA,EACA6F,gBAAAA;AAAAA,EACA4E,MAAAA;AAAAA,EACA85B,YAAAA;AAAAA,EACAC,SAAAA;AAAAA,EACAC,UAAAA;AAAAA,EACAC,eAAAA;AAAAA,CACmB,EAAA;AAE3CrzB,EAAAA,MAAAA,UAAUd,WAAhB,EAAA,CAAA;AACMxS,EAAAA,MAAAA,aAAa0c,aAAnB,EAAA,CAAA;AAMMrX,EAAAA,MAAAA,QAAW6G,GAAAA,MAAAA,KAAW,UAAaQ,GAAAA,MAAAA,EAAQ9D,EAAKvJ,GAAAA,KAAAA,CAAAA,CAAAA;AAChDunC,EAAAA,MAAAA,qBAAAA,GAAiD91B,OAAQ,CAAA,MAAM+N,aAAc,CAAA;AAAA,IAC/E/W,gBAAAA;AAAAA,IACA7F,IAAAA;AAAAA,IACAoD,QAAAA;AAAAA,GAH8E,CAAA,EAI9E,CAACpD,IAAAA,EAAMoD,QAAP,CAJ0D,CAAA,CAAA;AAM9D,EAAMwhC,MAAAA,oBAAAA,GAAiD/1B,QAAQ,MAAM;AACjE,IAAA,MAAM1F,aAAaw7B,qBAAsBx7B,CAAAA,UAAAA,CAAAA;AACrC,IAAA,IAACc,CAAW,MAAA,KAAA,UAAA,IAAcA,MAAW,KAAA,MAAA,KAAWQ,MAAQ,EAAA;AACjDA,MAAAA,OAAAA,MAAO5H,CAAAA,MAAAA,IAAUkH,kBAAmBZ,CAAAA,UAAAA,EAAYw7B,sBAAsBj7B,aAAnC,CAAA,CAAA;AAAA,KAC7C,MAAA,IAAUO,WAAW,KAAO,EAAA;AACzB,MAAOF,OAAAA,kBAAAA,CAAmBZ,UAAYw7B,EAAAA,qBAAAA,CAAsBj7B,aAAnC,CAAA,CAAA;AAAA,KACtB,MAAA;AACHf,MAAAA,OAAAA,CAAQwI,KAAM,CAAA;AAAA,QAAElH,MAAAA;AAAAA,QAAQQ,MAAAA;AAAAA,OAAxB,CAAA,CAAA;AACA,MAAM,MAAA,IAAInK,MAAM,2DAAV,CAAA,CAAA;AAAA,KACT;AAAA,GACF,EAAA,CAAC2J,MAAQ06B,EAAAA,qBAAAA,EAAuBl6B,MAAhC,CAV2D,CAAA,CAAA;AAYxDo6B,EAAAA,MAAAA,OAAAA,GAAUjoC,cAAMsH,CAAAA,MAAAA,CAAuB,IAA7B,CAAA,CAAA;AAEhB,EAAA,MAAM,CAACy/B,QAAAA,EAAUmB,WAAeloC,CAAAA,GAAAA,cAAAA,CAAMK,SAA6BG,KAAnC,CAAA,CAAA,CAAA;AAChC,EAAA,MAAM,CAAC2nC,aAAAA,EAAeC,gBAAoBpoC,CAAAA,GAAAA,cAAAA,CAAMK,SAAkB,KAAxB,CAAA,CAAA;AACpC,EAAA,MAAA,CAACgoC,WAAAA,EAAaC,cAAkBtoC,CAAAA,GAAAA,cAAAA,CAAMK,QAA5C,EAAA,CAAA;AAEMkoC,EAAAA,MAAAA,gBAAmBvoC,GAAAA,cAAAA,CAAMsH,MAAwBuG,CAAAA,MAAAA,EAAQ5H,UAAU+hC,oBAAhD,CAAA,CAAA;AACzB,EAAA,MAAMQ,gBAAgBD,gBAAiBrgC,CAAAA,OAAAA,CAAAA;AAEvC,EAAA,MAAM,CAAC0sB,aAAAA,EAAeC,gBAAoBx0B,CAAAA,GAAAA,QAAAA,CAAsCmoC,aAA9B,CAAA,CAAA;AAE5C5hC,EAAAA,MAAAA,MAAAA,GAAkCqL,OAAQ,CAAA,MAAM+N,aAAc,CAAA;AAAA,IAChE/W,gBAAAA;AAAAA,IACA7F,IAAAA;AAAAA,IACAoD,QAAAA;AAAAA,IACAP,MAAQ2uB,EAAAA,aAAAA;AAAAA,IACR/oB,cAAgB28B,EAAAA,aAAAA;AAAAA,GAL+C,CAM/D,EAAA,CAACv/B,kBAAkB7F,IAAMoD,EAAAA,QAAAA,EAAUouB,aAAnC,CAN2C,CAAA,CAAA;AAQzC6T,EAAAA,MAAAA,eAAAA,GAA4Bp7B,CAAW,MAAA,KAAA,KAAA,IAASA,MAAW,KAAA,MAAA,KAAY,CAAC,CAACzG,MAAAA,CAAOmgC,QAAYngC,IAAAA,MAAAA,CAAOmgC,QAAa,KAAA,UAAA,CAAA;AAEtH,EAAM2B,MAAAA,iBAAAA,GAA8Cz2B,QAAQ,MAAM;AAC9D,IAAIu2B,IAAAA,aAAAA,IAAiBn7B,WAAW,UAAY,EAAA;AACjCrH,MAAAA,OAAAA,OAAOiF,IAAKrE,CAAAA,MAAAA,CAAO2F,UAAnB,CAAA,CACFxH,IAAK2F,CAAQ,GAAA,KAAA;AACJsuB,QAAAA,MAAAA,eAAgBwP,aAAsB99B,CAAAA,GAAAA,CAAAA,CAAAA;AACtCi+B,QAAAA,MAAAA,cAAeX,oBAA6Bt9B,CAAAA,GAAAA,CAAAA,CAAAA;AAClD,QAAA,IAAI,CAACgnB,OAAAA,CAAQsH,YAAc2P,EAAAA,WAAf,CAA6B,EAAA;AAC9B,UAAA,OAAA;AAAA,YAAA,CAAGj+B,GAAMi+B,GAAAA,WAAAA;AAAAA,WAAhB,CAAA;AAAA,SACH;AACD,QAAA,OAAO,EAAP,CAAA;AAAA,OAPD,CAAA,CASFn+B,MAAO,CAAA,CAACoC,GAAGC,CAAO,MAAA;AAAA,QAAKD,GAAAA,CAAAA;AAAAA,QAAMC,GAAAA,CAAAA;AAAAA,OAAtB,CAAA,EAA4B,EATjC,CAAA,CAAA;AAAA,KAUJ,MAAA;AACH,MAAA,OAAO,EAAP,CAAA;AAAA,KACH;AAAA,GACF,EAAA,CAAC27B,aAAeR,EAAAA,oBAAhB,CAfwD,CAAA,CAAA;AAiBrDY,EAAAA,MAAAA,UAAa/gC,GAAAA,WAAAA,CAAY,CAAC5B,MAAAA,EAAyB4iC,aAAkD,KAAA;AAEvG,IAAIJ,IAAAA,eAAAA,IAAmB,CAAC1B,QAAU,EAAA;AAC9Bh7B,MAAAA,OAAAA,CAAQwI,MAAM,mBAAd,CAAA,CAAA;AACA6zB,MAAAA,gBAAAA,CAAiB,IAAD,CAAA,CAAA;AAChBS,MAAAA,aAAAA,CAAcC,cAAc,KAA5B,CAAA,CAAA;AACA,MAAA,OAAA;AAAA,KACH;AAEDR,IAAAA,cAAAA,CAAe,IAAD,CAAA,CAAA;AACdF,IAAAA,gBAAAA,CAAiB,KAAD,CAAA,CAAA;AAEZW,IAAAA,IAAAA,aAAAA,CAAAA;AACA17B,IAAAA,IAAAA,WAAW,UAAY,EAAA;AACnB,MAAA,IAAA,CAACQ,MAAQ9D,EAAAA,EAAAA;AAAI,QAAA,MAAMrG,MAAM,8DAAD,CAAA,CAAA;AAC5BqlC,MAAAA,aAAAA,GAAgBl7B,MAAO9D,CAAAA,EAAAA,CAAAA;AAAAA,KAChBsD,MAAAA,IAAAA,MAAAA,KAAW,KAASA,IAAAA,MAAAA,KAAW,MAAQ,EAAA;AAC1CzG,MAAAA,IAAAA,OAAOmgC,QAAU,EAAA;AACbngC,QAAAA,IAAAA,MAAOmgC,CAAAA,QAAAA,KAAa,UAAc,IAAA,CAACA,QAAU,EAAA;AACvCrjC,UAAAA,MAAAA,MAAM,2DAAD,CAAA,CAAA;AAAA,SACd;AACDqlC,QAAgBhC,aAAAA,GAAAA,QAAAA,CAAAA;AAAAA,OACnB;AAAA,KACE,MAAA;AACGrjC,MAAAA,MAAAA,MAAM,sCAAD,CAAA,CAAA;AAAA,KACd;AAEGikC,IAAAA,IAAAA,YAAAA;AACAA,MAAa,YAAA,CAAA;AAAA,QACT/gC,MAAAA;AAAAA,QACAxD,IAAAA;AAAAA,QACAoD,QAAUuiC,EAAAA,aAAAA;AAAAA,QACV9iC,MAAAA;AAAAA,QACA4F,gBAAgBgC,MAAQ5H,EAAAA,MAAAA;AAAAA,OALhB,CAOP2J,CAAAA,IAAAA,CAAK7O,CAAK,CAAA,KAAA;AACPwnC,QAAAA,gBAAAA,CAAiBrgC,OAAUjC,GAAAA,MAAAA,CAAAA;AAC3B4iC,QAAcG,aAAAA,CAAAA,UAAAA,CAAW,EAAzB,CAAA,CAAA;AAAA,OATR,CAWKn5B,CAAAA,KAAAA,CAAM3J,CAAK,CAAA,KAAA;AACR6F,QAAAA,OAAAA,CAAQwI,MAAMrO,CAAd,CAAA,CAAA;AACAoiC,QAAAA,cAAAA,CAAepiC,CAAD,CAAA,CAAA;AAAA,OAbtB,CAeKkb,CAAAA,OAAAA,CAAQ,MAAM;AACXynB,QAAAA,aAAAA,CAAcC,cAAc,KAA5B,CAAA,CAAA;AAAA,OAhBR,CAAA,CAAA;AAAA,GAmBP,EAAE,CAACz7B,MAAQjK,EAAAA,IAAAA,EAAMwD,QAAQiH,MAAQ85B,EAAAA,YAAAA,EAAcc,eAAiB1B,EAAAA,QAA9D,CA/C2B,CAAA,CAAA;AAkD9B,EAAMkC,MAAAA,oBAAAA,GAA6CphC,YAAY,CAAC;AAAA,IACI1C,IAAAA;AAAAA,IACA6H,KAAAA;AAAAA,IACAf,QAAAA;AAAAA,GAAAA,KACE9K,UAAW+nC,CAAAA,gBAAAA,CAAiB9lC,IAAM+B,EAAAA,IAAAA,EAAM6H,KAAOf,EAAAA,QAAAA,EAAUzF,QAAzD,CAAA,EAClE,CAACrF,UAAAA,EAAYiC,IAAMoD,EAAAA,QAAnB,CAL0D,CAAA,CAAA;AAO9D,EAAM2iC,MAAAA,gBAAAA,GAAmBl3B,OAAQ,CAAA,MAAMm3B,kBACnCxiC,CAAAA,MAAAA,CAAO2F,UACP08B,EAAAA,oBAFqD,CAE9B,EAAA,CAACriC,MAAO2F,CAAAA,UAAR,CAFK,CAAA,CAAA;AAKhC,EAAA,2BACK,MAAD,EAAA;AAAA,IACI,aAAA;AAAA,IACA,QAAUq8B,EAAAA,UAAAA;AAAAA,IACV,gBAAA;AAAA,IACA,QAAW3iC,EAAAA,CAAAA,MAAAA,KAAW8F,OAAQC,CAAAA,KAAAA,CAAM,cAAc/F,MAA5B,CAAA;AAAA,IACtB,OAAA,EAAS,MAAM2hC,SAAAA,IAAaA,SALhC,EAAA;AAAA,IAAA,UAOK,CAAC;AAAA,MACI3hC,MAAAA;AAAAA,MACAk6B,OAAAA;AAAAA,MACAwD,aAAAA;AAAAA,MACA0F,YAAAA;AAAAA,MACApI,YAAAA;AAAAA,MACAqI,KAAAA;AAAAA,KACE,KAAA;AAEJ,MAAA,2BAAQ,YAAD,EAAA;AAAA,QAAc,oBAAA;AAAA,QACA,MAAA;AAAA,QAAgB,UAAA;AAAA,QAChB,gBAAA;AAAA,QACA,eAAA;AAAA,QACA,iBAAA;AAAA,QACA,QAAA;AAAA,QACA,MAAA;AAAA,QACA,OAAA;AAAA,QACA,aAAA;AAAA,QACA,MAAA;AAAA,QACA,YAAA;AAAA,QACA,OAAA;AAAA,QACA,OAAA;AAAA,QACA,MAAA;AAAA,QACA,WAAA;AAAA,QACA,aAAA;AAAA,QACA,YAAA;AAAA,QACA,WAAA;AAAA,OAjBrB,CAAA,CAAA;AAAA,KAkBH;AAAA,GAnCT,CAAA,CAAA;AAsCH,CAAA;AAED,SAAyB,YAAA,CAAA;AAAA,EACItB,oBAAAA;AAAAA,EACA/hC,MAAAA;AAAAA,EACA4hC,UAAAA;AAAAA,EACAhT,gBAAAA;AAAAA,EACAiT,eAAAA;AAAAA,EACAY,iBAAAA;AAAAA,EACA76B,MAAAA;AAAAA,EACAsyB,OAAAA;AAAAA,EACAwD,aAAAA;AAAAA,EACA/8B,MAAAA;AAAAA,EACAJ,QAAAA;AAAAA,EACAy6B,YAAAA;AAAAA,EACAxsB,OAAAA;AAAAA,EACAwzB,OAAAA;AAAAA,EACA56B,MAAAA;AAAAA,EACA66B,WAAAA;AAAAA,EACAC,aAAAA;AAAAA,EACAkB,YAAAA;AAAAA,EACAhB,WAAAA;AAAAA,CAqB1B,EAAA;AACC,EAAMkB,MAAAA,QAAAA,GAAWt3B,OAAQ,CAAA,MAAM,CAACyf,OAAAA,CAAQsW,oBAAsB/hC,EAAAA,MAAvB,CAAgC,EAAA,CAAC+hC,oBAAsB/hC,EAAAA,MAAvB,CAA/C,CAAA,CAAA;AACxBtD,EAAAA,SAAAA,CAAU,MAAM;AACZ,IAAIklC,IAAAA,UAAAA;AACAA,MAAAA,UAAAA,CAAW0B,QAAD,CAAA,CAAA;AACd1U,IAAAA,gBAAAA,CAAiB5uB,MAAD,CAAA,CAAA;AAChB,IAAI6hC,IAAAA,eAAAA;AACAA,MAAAA,eAAAA,CAAgB7hC,MAAD,CAAA,CAAA;AAAA,GACpB,EAAA,CAACsjC,QAAUtjC,EAAAA,MAAX,CANM,CAAA,CAAA;AAQLyiC,EAAAA,IAAAA,qBAAqB76B,MAAQ,EAAA;AAG7B7H,IAAAA,MAAAA,CAAOvB,QAAQikC,iBAAf,CAAA,CAAkCx9B,QAAQ,CAAC,CAACR,KAAKsC,KAAW,CAAA,KAAA;AAClDw8B,MAAAA,MAAAA,YAAavjC,MAAeyE,CAAAA,GAAAA,CAAAA,CAAAA;AAClC,MAAA,IAAI,CAACgnB,OAAQ1kB,CAAAA,KAAAA,EAAOw8B,SAAR,CAAsB,IAAA,CAAErJ,QAAgBz1B,GAAM,CAAA,EAAA;AACtDqB,QAAQC,OAAAA,CAAAA,KAAAA,CAAM,oCAAsCtB,EAAAA,GAAAA,EAAKsC,KAAzD,CAAA,CAAA;AACA22B,QAAAA,aAAAA,CAAcj5B,GAAKsC,EAAAA,KAAAA,KAAUxM,KAAYwM,CAAAA,GAAAA,KAAAA,GAAQ,IAApC,CAAA,CAAA;AAAA,OAChB;AAAA,KALL,CAAA,CAAA;AAAA,GAOH;AAED,EAAA,MAAMxL,OAA0B,GAAA;AAAA,IAC5BoF,MAAAA;AAAAA,IACAJ,QAAAA;AAAAA,IACAP,MAAAA;AAAAA,GAHJ,CAAA;AAMMwjC,EAAAA,MAAAA,UAAAA,uBACD,IAAD,EAAA;AAAA,IAAM,SAAN,EAAA,IAAA;AAAA,IAAgB,OAAS,EAAA,CAAA;AAAA,IAAzB,QAAA,EAEKzjC,OAAOvB,OAAkBmC,CAAAA,MAAAA,CAAO2F,UAAhC,CACI3G,CAAAA,MAAAA,CAAO,CAAC,CAAC8E,GAAAA,EAAKuB,cAAc,CAACo5B,QAAAA,CAASp5B,QAAD,CADzC,CAAA,CAEIlH,IAAI,CAAC,CAAC2F,KAAKuB,QAAc,CAAA,KAAA;AAEhB82B,MAAAA,MAAAA,yBACF,GAAA,CAAC,CAAC2F,iBAAAA,IACF1iC,MAAOiF,CAAAA,IAAAA,CAAKy9B,iBAAZ,CAAA,CAA+Br9B,QAASX,CAAAA,GAAxC,CACA,IAAA,CAAC,CAAEy1B,OAAgBz1B,CAAAA,GAAAA,CAAAA,CAAAA;AAEvB,MAAA,MAAM21B,oBAAuB,GAAA,OAAQz5B,MAAO8F,CAAAA,cAAAA,CAAeH,WAAmB7B,GAAS,CAAA,KAAA,UAAA,CAAA;AAEvF,MAAA,MAAM2B,WAAW40B,YAAgBjF,IAAAA,UAAAA,CAAW/vB,QAAD,CAAc9F,IAAAA,OAAAA,CAAQ8F,SAASI,QAAV,CAAA,CAAA;AAC1Dq9B,MAAAA,MAAAA,iBAAuC,GAAA;AAAA,QACzCvkC,IAAMuF,EAAAA,GAAAA;AAAAA,QACN2B,QAAAA;AAAAA,QACAJ,QAAAA;AAAAA,QACAm0B,kBAAoB,EAAA,IAAA;AAAA,QACpB2C,yBAAAA;AAAAA,QACAvhC,OAAAA;AAAAA,QACAw/B,SAAW,EAAA,KAAA;AAAA,QACXmC,WAAa,EAAA,KAAA;AAAA,QACbvK,SAAW,EAAA,KAAA;AAAA,QACXyH,oBAAAA;AAAAA,OAVJ,CAAA;AAYA,MAAA,2BACK,IAAD,EAAA;AAAA,QAAM,IAAN,EAAA,IAAA;AAAA,QACM,EAAI,EAAA,EAAA;AAAA,QACJ,IAAK,CAAa31B,WAAAA,EAAAA,GAAAA,CAAAA,CAAAA;AAAAA,QAEnBw4B,QAAAA,EAAAA,mBAAmBwG,iBAAD,CAAA;AAAA,OADX,EAAA,CAAA,MAAA,EAAQ9iC,MAAOzB,CAAAA,IAAAA,CAAAA,CAAAA,EAAQuF,GAHnC,CAAA,CAAA,CAAA,CAAA;AAAA,KAzBX,CAAA;AAAA,GAHT,CAAA,CAAA;AAwCA,EAAA,4BACK,SAAD,EAAA;AAAA,IAAW,QAAU,EAAA,IAAA;AAAA,IACV,WAAW+J,OAAQgzB,CAAAA,SAAAA;AAAAA,IACnB,GAAKQ,EAAAA,OAAAA;AAAAA,IAFhB,QAAA,EAAA,iBAIInnC,GAAA,CAAC,aAAD,EAAA;AAAA,MAAe,MAAA;AAAA,MACA,MAAA;AAAA,MACA,QAAUonC,EAAAA,WAAAA;AAAAA,MACV,KAAOC,EAAAA,aAAAA;AAAAA,MACP,MAAA;AAAA,KARnB,CAUI,kBAAAtnC,IAAA,CAAC,IAAD,EAAA;AAAA,MAAM,WAAW4T,OAAQgvB,CAAAA,IAAAA;AAAAA,MACnB,QAAU4F,EAAAA,YAAAA;AAAAA,MACV,UAFN,EAAA,IAAA;AAAA,MAAA,QAAA,EAAA,iBAIIvoC,GAAA,CAAC,GAAD,EAAA;AAAA,QAAK,EAAI,EAAA,CAAA;AAAA,QACJ2oC,QAAAA,EAAAA,UAAAA;AAAAA,OADL,CAIA,kBAAA5oC,IAAA,CAAA,KAAA,EAAA;AAAA,QAAK,WAAW4T,OAAQ6yB,CAAAA,aAAAA;AAAAA,QAEnBe,QAAAA,EAAAA,CAAAA,WACD,oBAAAvnC,GAAA,CAAC,GAAD,EAAA;AAAA,UAAK,SAAU,EAAA,OAAA;AAAA,UAAf,QAAA,sBACK,UAAD,EAAA;AAAA,YAAY,KAAO,EAAA,OAAA;AAAA,YAAnB,UACKunC,WAAY5nC,CAAAA,OAAAA;AAAAA,WADjB,CAAA;AAAA,SAJR,CASKkpC,EAAAA,YAAAA,CAAal1B,SAASwsB,YAAcsI,EAAAA,QAAAA,EAAUl8B,MAAlC,CATjB,CAAA;AAAA,OARJ,CAAA,CAAA;AAAA,KAVJ,CAkCI,kBAAAvM,GAAA,CAAC,UAAD,EAAA;AAAA,MAAY,YAAcmnC,EAAAA,OAAAA;AAAAA,KAlC9B,CAAA,CAAA;AAAA,GADJ,CAAA,CAAA;AAuCH,CAAA;AAED,SAAsBxzB,YAAAA,CAAAA,OAAAA,EAAcwsB,YAAuBsI,EAAAA,QAAAA,EAAmBl8B,MAAsB,EAAA;AAC1FhB,EAAAA,MAAAA,QAAW40B,GAAAA,YAAAA,IAAiB,CAACsI,QAAAA,IAAYl8B,MAAW,KAAA,UAAA,CAAA;AAC1D,EAAA,4BACK,GAAD,EAAA;AAAA,IAAK,SAAU,EAAA,OAAA;AAAA,IAAf,QAAA,EAAA,CAEKA,MAAW,KAAA,UAAA,wBACX,MAAD,EAAA;AAAA,MACI,OAAQ,EAAA,MAAA;AAAA,MACR,KAAM,EAAA,SAAA;AAAA,MACN,QAAA;AAAA,MACA,WAAWoH,OAAQqoB,CAAAA,MAAAA;AAAAA,MACnB,IAAK,EAAA,OAAA;AAAA,MALT,QAAA,EAAA,SAAA;AAAA,KAHJ,CAaI,kBAAAj8B,IAAA,CAAC,MAAD,EAAA;AAAA,MACI,OAAQ,EAAA,WAAA;AAAA,MACR,KAAM,EAAA,SAAA;AAAA,MACN,IAAK,EAAA,QAAA;AAAA,MACL,QAAA;AAAA,MACA,WAAW4T,OAAQqoB,CAAAA,MAAAA;AAAAA,MALvB,QAAA,EAAA,CAOKzvB,MAAAA,KAAW,UAAc,IAAA,MAAA,EACzBA,WAAW,MAAU,IAAA,aAAA,EACrBA,MAAW,KAAA,KAAA,IAAS,QATzB,CAAA;AAAA,KAbJ,CAAA,CAAA;AAAA,GADJ,CAAA,CAAA;AA4BH;;;;;;;;;ACpeM,MAAMu8B,wBAAyC,CAAC;AAAA,EAAEC,QAAAA;AAAAA,CAAe,KAAA;AACpE,EAAMC,MAAAA,MAAAA,GAASxiC,OAAO,CAAD,CAAA,CAAA;AACfyiC,EAAAA,MAAAA,SAAAA,GAA0CziC,OAAO,IAAD,CAAA,CAAA;AACtD,EAAM0iC,MAAAA,WAAAA,GAAc1iC,OAAOuiC,QAAD,CAAA,CAAA;AAE1BG,EAAAA,WAAAA,CAAY9hC,OAAU2hC,GAAAA,QAAAA,CAAAA;AAEhBI,EAAAA,MAAAA,SAAAA,GAAYpiC,WAAY,CAAA,CAAC3B,CAAa,KAAA;AACpC4jC,IAAAA,IAAAA,OAAO5hC,OAAS,EAAA;AAChBgiC,MAAAA,oBAAAA,CAAqBJ,OAAO5hC,OAAR,CAAA,CAAA;AAAA,KACvB;AACD4hC,IAAO5hC,MAAAA,CAAAA,OAAAA,GAAUiiC,sBAAsB,MAAM;AACzCH,MAAAA,WAAAA,CAAY9hC,QAAQhC,CAApB,CAAA,CAAA;AAAA,KADkC,CAAA,CAAA;AAAA,GAJb,EAO1B,EAP0B,CAAA,CAAA;AAS7B,EAAMkkC,MAAAA,MAAAA,GAASviC,YAAY,MAAM;AAC7B,IAAA,MAAMyC,MAAMy/B,SAAU7hC,CAAAA,OAAAA,CAAAA;AAClBoC,IAAAA,IAAAA,GAAOA,IAAAA,GAAAA,CAAI+/B,eAAmB//B,IAAAA,GAAAA,CAAI+/B,gBAAgBC,WAAa,EAAA;AAC/DhgC,MAAAA,GAAAA,CAAI+/B,eAAgBC,CAAAA,WAAAA,CAAYpN,gBAAiB,CAAA,QAAA,EAAU+M,SAA3D,CAAA,CAAA;AAAA,KACH;AAAA,GACJ,EAAE,CAACA,SAAD,CALuB,CAAA,CAAA;AAO1BtnC,EAAAA,SAAAA,CAAU,MAAM;AACZ,IAAA,MAAM2H,MAAMy/B,SAAU7hC,CAAAA,OAAAA,CAAAA;AACtB,IAAA,OAAO,MAAM;AACLoC,MAAAA,IAAAA,GAAOA,IAAAA,GAAAA,CAAI+/B,eAAmB//B,IAAAA,GAAAA,CAAI+/B,gBAAgBC,WAAa,EAAA;AAC/DhgC,QAAAA,GAAAA,CAAI+/B,eAAgBC,CAAAA,WAAAA,CAAYjN,mBAAoB,CAAA,QAAA,EAAU4M,SAA9D,CAAA,CAAA;AAAA,OACH;AAAA,KAHL,CAAA;AAAA,GAKH,EAAE,CAACA,SAAD,CAPM,CAAA,CAAA;AAUL,EAAA,2BAAA,QAAA,EAAA;AAAA,IACI,MAAA;AAAA,IACA,GAAKF,EAAAA,SAAAA;AAAAA,IAAW,QAAU,EAAA,CAAA,CAAA;AAAA,IAC1B,IAAM,EAAA,WAAA;AAAA,IACN,IAAM,EAAA,aAAA;AAAA,IACN,KAAO,EAAA,EAAA;AAAA,IACP,KAAO,EAAA;AAAA,MACHpuB,QAAU,EAAA,UAAA;AAAA,MACV0R,GAAK,EAAA,CAAA;AAAA,MACLkQ,IAAM,EAAA,CAAA;AAAA,MACNniB,MAAQ,EAAA,MAAA;AAAA,MACRtS,KAAO,EAAA,MAAA;AAAA,MACPghB,aAAe,EAAA,MAAA;AAAA,MACfiO,MAAQ,EAAA,CAAA,CAAA;AAAA,MACRzK,OAAS,EAAA,CAAA;AAAA,KARN;AAAA,GAPf,CAAA,CAAA;AAmBH,CAAA;;AClBM,MAAM3Z,WAAYC,GAAAA,UAAAA,CAAW,CAACC,KAAAA,KAAiBC,YAAa,CAAA;AAAA,EAC/D2vB,IAAM,EAAA;AAAA,IACFzvB,OAAS,EAAA,MAAA;AAAA,IACTyG,aAAe,EAAA,QAAA;AAAA,GAH4C;AAAA,EAK/DqiB,MAAQ,EAAA;AAAA,IACJ1R,SAAAA,EAAWvX,KAAMO,CAAAA,OAAAA,CAAQ,CAAd,CAAA;AAAA,IACXm2B,SAAW,EAAA,UAAA;AAAA,IACX5uB,QAAU,EAAA,QAAA;AAAA,IACVM,MAAQ,EAAA,CAAA;AAAA,GATmD;AAAA,EAW/DuuB,KAAO,EAAA;AAAA,IACHx2B,OAAS,EAAA,cAAA;AAAA,IACTy2B,UAAY,EAAA,MAAA;AAAA,IACZ9uB,QAAU,EAAA,OAAA;AAAA,IACVoc,MAAQ,EAAA,IAAA;AAAA,IACRlR,SAAW,EAAA,iCAAA;AAAA,IACX1L,YAAc,EAAA,KAAA;AAAA,IACd9B,eAAAA,EAAiBxF,KAAMsI,CAAAA,OAAAA,CAAQsK,UAAWqI,CAAAA,KAAAA;AAAAA,GAlBiB;AAAA,EAsB/D4b,UAAY,EAAA;AAAA,IACR3jB,OAAAA,EAASlT,KAAMO,CAAAA,OAAAA,CAAQ,CAAd,CAAA;AAAA,IACTgS,QAAU,EAAA,MAAA;AAAA,IACVU,MAAQ,EAAA,SAAA;AAAA,GAzBmD;AAAA,EA2B/Dxa,MAAQ,EAAA;AAAA,IACJq+B,UAAY,EAAA,QAAA;AAAA,IAEZ5S,MAAQ,EAAA,CAAA,CAAA;AAAA,GAHJ;AA3BuD,CAAD,CAA/B,CAAA,CAAA;AAuD8B,SAAA,cAAA,CAAA;AAAA,EACI6S,QAAAA;AAAAA,EACA/8B,MAAAA;AAAAA,EACAkkB,oBAAAA;AAAAA,EACA5sB,IAAAA;AAAAA,EACAkE,cAAAA;AAAAA,EACAjG,IAAAA;AAAAA,EACA0tB,QAAAA;AAAAA,EACAuE,sBAAAA;AAAAA,EACAx1B,IAAAA;AAAAA,EACA8iC,OAAAA;AAAAA,EACAkI,WAAAA;AAAAA,EACAC,iBAAAA;AAAAA,CACuB,EAAA;AAElF,EAAA,MAAA,CAACzC,WAAAA,EAAaC,cAAkBtoC,CAAAA,GAAAA,cAAAA,CAAMK,QAA5C,EAAA,CAAA;AACA,EAAM,MAAA,CAAC0qC,aAAeC,EAAAA,gBAAAA,CAAAA,GAAoB3qC,QAA1C,EAAA,CAAA;AACA,EAAA,MAAM,CAACu0B,aAAAA,EAAeC,gBAAoBx0B,CAAAA,GAAAA,QAAAA,CAAsCwN,QAAQ5H,MAAtC,CAAA,CAAA;AAE5CwO,EAAAA,MAAAA,UAAUd,WAAhB,EAAA,CAAA;AACMs3B,EAAAA,MAAAA,aAAaC,aAAnB,EAAA,CAAA;AAEMtpB,EAAAA,MAAAA,GAAAA,GAAM5hB,cAAMsH,CAAAA,MAAAA,CAAuB,IAA7B,CAAA,CAAA;AACNi1B,EAAAA,MAAAA,YAAAA,GAAev8B,cAAMsH,CAAAA,MAAAA,CAAuB,IAA7B,CAAA,CAAA;AACf6jC,EAAAA,MAAAA,kBAAAA,GAAqBnrC,cAAMsH,CAAAA,MAAAA,CAAgB,KAAtB,CAAA,CAAA;AAE3B,EAAM8jC,MAAAA,qBAAAA,GAAwBxpB,GAAI1Z,CAAAA,OAAAA,EAAS6oB,qBAA3C,EAAA,CAAA;AAEAsa,EAAa,YAAA,CAAA;AAAA,IACT9O,YAAAA;AAAAA,IACA3a,GAAAA;AAAAA,IACA4a,GAAGuO,aAAevO,EAAAA,CAAAA;AAAAA,IAClBC,GAAGsO,aAAetO,EAAAA,CAAAA;AAAAA,IAClBC,MAAQ,EAAA,CAACF,CAAGC,EAAAA,CAAAA,KAAMC,MAAO,CAAA;AAAA,MAAEF,CAAAA;AAAAA,MAAGC,CAAAA;AAAAA,KAAN,CAAA;AAAA,GALhB,CAAA,CAAA;AAQZ95B,EAAAA,SAAAA,CACI,MAAM;AACFwoC,IAAAA,kBAAAA,CAAmBjjC,OAAU,GAAA,KAAA,CAAA;AAAA,GAEjC,EAAA,CAAC/C,IAAM0I,EAAAA,MAAP,CAJK,CAAA,CAAA;AAOT,EAAMy9B,MAAAA,kBAAAA,GAAqBzjC,YAAY,MAAM;AACzC,IAAA,IAAI,CAACipB,QAAAA;AAAU,MAAA,MAAMptB,MAAM,0BAAD,CAAA,CAAA;AAEnB,IAAA,OAAA;AAAA,MACH84B,CAAG1L,EAAAA,QAAAA,CAASyM,IAAO0N,GAAAA,UAAAA,CAAWniC,QAAQgoB,QAAS5U,CAAAA,KAAAA,GACzC4U,QAAS0L,CAAAA,CAAAA,GAAI1L,SAAShoB,KAAQ,GAAA,CAAA,GAC9BgoB,QAAS0L,CAAAA,CAAAA,GAAI1L,SAAShoB,KAAQ,GAAA,CAAA;AAAA,MACpC2zB,CAAG3L,EAAAA,QAAAA,CAASzD,GAAM4d,GAAAA,UAAAA,CAAW7vB,SAAS0V,QAAS7U,CAAAA,MAAAA,GACzC6U,QAAS2L,CAAAA,CAAAA,GAAI3L,SAAS1V,MAAS,GAAA,CAAA,GAC/B0V,QAAS2L,CAAAA,CAAAA,GAAI3L,SAAS1V,MAAS,GAAA,CAAA;AAAA,KANzC,CAAA;AAAA,KAQD,CAAC0V,QAAAA,EAAUma,WAAW7vB,MAAQ6vB,EAAAA,UAAAA,CAAWniC,KAAzC,CAXmC,CAAA,CAAA;AAatC,EAAMyiC,MAAAA,iBAAAA,GAAoB1jC,YAAY,CAAC;AAAA,IACI20B,CAAAA;AAAAA,IACAC,CAAAA;AAAAA,GAC4B,KAAA;AACnE,IAAA,IAAI,CAAC2O,qBAAAA;AACD,MAAA,MAAM1nC,MAAM,8DAAD,CAAA,CAAA;AAER,IAAA,OAAA;AAAA,MACH84B,CAAAA,EAAG3mB,IAAKyd,CAAAA,GAAAA,CAAI,CAAGzd,EAAAA,IAAAA,CAAKwd,GAAImJ,CAAAA,CAAAA,EAAGyO,UAAWniC,CAAAA,KAAAA,GAAQsiC,qBAAsBtiC,CAAAA,KAArD,CAAZ,CAAA;AAAA,MACH2zB,CAAAA,EAAG5mB,IAAKyd,CAAAA,GAAAA,CAAI,CAAGzd,EAAAA,IAAAA,CAAKwd,GAAIoJ,CAAAA,CAAAA,EAAGwO,UAAW7vB,CAAAA,MAAAA,GAASgwB,qBAAsBhwB,CAAAA,MAAtD,CAAZ,CAAA;AAAA,KAFP,CAAA;AAAA,GAID,EAAA,CAACgwB,qBAAuBH,EAAAA,UAAxB,CAXkC,CAAA,CAAA;AAarC,EAAMO,MAAAA,mBAAAA,GAAsB3jC,WAAY,CAAA,CAAC8T,QAAwC,KAAA;AAC7E,IAAI,IAAA,CAACmV,YAAY,CAACsa,qBAAAA;AAAuB,MAAA,OAAA;AACnCK,IAAAA,MAAAA,WAAcF,GAAAA,iBAAAA,CAAkB5vB,QAAY2vB,IAAAA,kBAAAA,EAAb,CAAA,CAAA;AACjC,IAAA,IAAA,CAACP,iBAAiBU,WAAYjP,CAAAA,CAAAA,KAAMuO,cAAcvO,CAAKiP,IAAAA,WAAAA,CAAYhP,MAAMsO,aAActO,CAAAA,CAAAA;AACvFuO,MAAAA,gBAAAA,CAAiBS,WAAD,CAAA,CAAA;AAAA,KACrB,CAAC3a,QAAAA,EAAUsa,uBAAuBE,kBAAoBC,EAAAA,iBAAAA,EAAmBR,aAAzE,CALoC,CAAA,CAAA;AAOvCpoC,EAAAA,SAAAA,CACI,MAAM;AACE,IAAA,IAAA,CAACmuB,QAAAA,IAAY,CAACsa,qBAAAA,IAAyBD,kBAAmBjjC,CAAAA,OAAAA;AAAS,MAAA,OAAA;AACvEijC,IAAAA,kBAAAA,CAAmBjjC,OAAU,GAAA,IAAA,CAAA;AAC7BsjC,IAAAA,mBAAAA,CAAoBF,oBAAD,CAAA,CAAA;AAAA,KAEvB,CAACxa,QAAAA,EAAUsa,qBAAuBE,EAAAA,kBAAAA,EAAoBE,mBAAtD,CANK,CAAA,CAAA;AAST/N,EAAAA,eAAAA,CACI,MAAM;AACF+N,IAAAA,mBAAAA,CAAoBT,aAAD,CAAA,CAAA;AAAA,GAEvB,EAAA,CAACE,UAAYna,EAAAA,QAAb,CAJW,CAAA,CAAA;AAOfnuB,EAAAA,SAAAA,CACI,MAAM;AACF0yB,IAAAA,sBAAAA,CAAuBx1B,IAAD,CAAA,CAAA;AAAA,GACzB,EACD,CAACA,IAAD,CAJK,CAAA,CAAA;AAOT,EAAMspC,MAAAA,gBAAAA,GAAmBl3B,QAAQ,MAAM;AAC/B,IAAA,IAAA,CAAC5I,cAAAA;AAAgB,MAAA,OAAA;AACfzC,IAAAA,MAAAA,SAASoZ,aAAc,CAAA;AAAA,MACzB/W,gBAAkBI,EAAAA,cAAAA;AAAAA,MAClBjG,IAAAA;AAAAA,MACA6C,MAAQ2uB,EAAAA,aAAAA;AAAAA,MACR/oB,gBAAgBgC,MAAQ5H,EAAAA,MAAAA;AAAAA,KAJA,CAAA,CAAA;AAMrBmjC,IAAAA,OAAAA,kBACHjkC,CAAAA,IAAAA,IAAQyB,MAAO2F,CAAAA,UAAAA,CAAWpH,IACpB,CAAA,GAAA;AAAA,MAAGA,CAAAA,IAAAA,GAAOyB,OAAO2F,UAAWpH,CAAAA,IAAAA,CAAAA;AAAAA,KAA5B,GACA,EAAA,EACN4sB,oBAJqB,CAAA,CAAA;AAAA,GAK1B,EAAA,CAAC3uB,IAAMwxB,EAAAA,aAAAA,EAAezvB,IAAtB,CAb6B,CAAA,CAAA;AAe1BumC,EAAAA,MAAAA,cAAc,MAAM;AAClB,IAAA,IAAA,CAACN,qBAAAA;AAAuB,MAAA,OAAA;AACrBI,IAAAA,OAAAA,oBAAoBT,aAAD,CAAA,CAAA;AAAA,GAF9B,CAAA;AAKA,EAAMrO,MAAAA,MAAAA,GAAS,CAAC/gB,QAAuC,KAAA;AAC/C,IAAA,IAAA,CAACyvB,qBAAAA;AAAuB,MAAA,OAAA;AACrBI,IAAAA,OAAAA,oBAAoB7vB,QAAD,CAAA,CAAA;AAAA,GAF9B,CAAA;AAKA,EAAMgwB,MAAAA,SAAAA,GAAY,OAAO1lC,MAAc,KAAA;AACnCqiC,IAAAA,cAAAA,CAAe,IAAD,CAAA,CAAA;AACd,IAAIz6B,IAAAA,MAAAA,IAAUi9B,qBAAqB3lC,IAAM,EAAA;AACrC,MAAA,OAAO2lC,iBAAkB,CAAA;AAAA,QACrB99B,OAAO/G,MAAOd,CAAAA,IAAAA,CAAAA;AAAAA,QACdA,IAAAA;AAAAA,QACA0I,MAAAA;AAAAA,QACAutB,QAAUkN,EAAAA,cAAAA;AAAAA,QACV1M,UAAU,MAAM;AAAA,SACf;AAAA,OANmB,CAAA,CAAA;AAAA,KAQ3B;AACM7a,IAAAA,OAAAA,QAAQC,OAAf,EAAA,CAAA;AAAA,GAZJ,CAAA;AAeA,EAAA,IAAI,CAACnT,MAAAA;AACD,IAAO,uBAAA/M,GAAA,CAAPyZ,QAAA,EAAA,EAAA,CAAA,CAAA;AAEEkpB,EAAAA,MAAAA,IAAAA,GAAO51B,MACT,oBAAAhN,IAAA,CAAA,KAAA,EAAA;AAAA,IAEI,KAAO,EAAA;AAAA,MACHiI,KAAO,EAAA,GAAA;AAAA,MACPsQ,QAAU,EAAA,OAAA;AAAA,MACVqC,SAAW,EAAA,MAAA;AAAA,KALnB;AAAA,IAAA,QAAA,EAAA,iBAOI3a,GAAA,CAAC,MAAD,EAAA;AAAA,MACI,eAAe+M,MAAO5H,CAAAA,MAAAA;AAAAA,MACtB,gBAAA;AAAA,MACA,QAAWA,EAAAA,CAAAA,MAAAA,KAAW8F,OAAQC,CAAAA,KAAAA,CAAM,cAAc/F,MAA5B,CAAA;AAAA,MACtB,QAAA,EAAU,CAACA,MAAAA,EAAQilB,OAAY,KAAA;AAC3BygB,QAAAA,SAAAA,CAAU1lC,MAAD,CAAA,CACJ2J,IAAK,CAAA,MAAM+yB,SADhB,CAEKvhB,CAAAA,OAAAA,CAAQ,MAAM8J,OAAAA,CAAQ4d,aAAc,CAAA,KAAtB,CAFnB,CAAA,CAAA;AAAA,OALR;AAAA,MAAA,UAUK,CAAC;AAAA,QACI8C,YAAAA;AAAAA,QACA3lC,MAAAA;AAAAA,QACA++B,MAAAA;AAAAA,QACA7E,OAAAA;AAAAA,QACAmJ,KAAAA;AAAAA,QACA3F,aAAAA;AAAAA,QACAD,eAAAA;AAAAA,QACA2F,YAAAA;AAAAA,QACApI,YAAAA;AAAAA,OACgC,KAAA;AAElC,QAAA,IAAI,CAACvP,OAAAA,CAAQzrB,MAAQ2uB,EAAAA,aAAT,CAAyB,EAAA;AACjCC,UAAAA,gBAAAA,CAAiB5uB,MAAD,CAAA,CAAA;AAAA,SACnB;AAED,QAAA,IAAI,CAAC4H,MAAAA;AACD,UAAA,2BAAQ,SAAD,EAAA;AAAA,YACH,KAAO,EAAA,iCAAA;AAAA,WADX,CAAA,CAAA;AAGJ,QAAA,IAAI,CAACxE,cAAAA;AACD,UAAO,uBAAAvI,GAAA,CAAPyZ,QAAA,EAAA,EAAA,CAAA,CAAA;AAEElO,QAAAA,MAAAA,QAAW40B,GAAAA,YAAAA,CAAAA;AAEXr6B,QAAAA,MAAAA,SAASoZ,aAAc,CAAA;AAAA,UACzB/W,gBAAkBI,EAAAA,cAAAA;AAAAA,UAClBjG,IAAAA;AAAAA,UACA6C,MAAAA;AAAAA,UACA4F,gBAAgBgC,MAAQ5H,EAAAA,MAAAA;AAAAA,SAJA,CAAA,CAAA;AAO5B,QAAA,MAAMzE,OAA0B,GAAA;AAAA,UAC5BoF,MAAAA;AAAAA,UACAJ,UAAUqH,MAAO9D,CAAAA,EAAAA;AAAAA,UACjB9D,MAAAA;AAAAA,SAHJ,CAAA;AAMA,QAAMgG,MAAAA,QAAAA,GAAsCrF,OAAO2F,UAAWpH,CAAAA,IAAAA,CAAAA,CAAAA;AAE9D,QAAA,4BAAQ,IAAD,EAAA;AAAA,UACH,WAAWsP,OAAQgvB,CAAAA,IAAAA;AAAAA,UACnB,QAAU4F,EAAAA,YAAAA;AAAAA,UACV,UAHG,EAAA,IAAA;AAAA,UAKFlkC,QAAAA,EAAAA,CAAAA,IAAQ8G,IAAAA,QAAAA,IAAYi3B,kBAA2B,CAAA;AAAA,YAC5C/9B,IAAAA;AAAAA,YACAkH,UAAU40B,YAAgBjF,IAAAA,UAAAA,CAAW/vB,QAAD,CAAc,IAAA,CAAC,CAACA,QAASI,CAAAA,QAAAA;AAAAA,YAC7DJ,QAAAA;AAAAA,YACAm0B,kBAAoB,EAAA,KAAA;AAAA,YACpB2C,yBAA2B,EAAA,KAAA;AAAA,YAC3BvhC,OAAAA;AAAAA,YACAw/B,SAAW,EAAA,IAAA;AAAA,YACXmC,WAAa,EAAA,KAAA;AAAA,YACbvK,SAAW/4B,EAAAA,IAAAA;AAAAA,YACXwgC,oBAAsB,EAAA,IAAA;AAAA,WAVa,CAavC,kBAAAv/B,GAAA,CAAC,MAAD,EAAA;AAAA,YACI,WAAW2T,OAAQqoB,CAAAA,MAAAA;AAAAA,YACnB,OAAQ,EAAA,WAAA;AAAA,YACR,KAAM,EAAA,SAAA;AAAA,YACN,IAAK,EAAA,QAAA;AAAA,YACL,QAAA;AAAA,YALJ,QAAA,EAAA,MAAA;AAAA,WAlBG,CAAA,CAAA;AAAA,SAAP,CAAA,CAAA;AAAA,OA6BH;AAAA,KA/EL,CAAA,EAkFCuL,WACD,oBAAAvnC,GAAA,CAAC,UAAD,EAAA;AAAA,MAAY,KAAO,EAAA,OAAA;AAAA,MAAnB,UACKunC,WAAY5nC,CAAAA,OAAAA;AAAAA,KA3FrB,CAAA,CAAA;AAAA,GACU,EAAA,CAAA,WAAA,EAAamqC,QAAY/8B,CAAAA,CAAAA,EAAAA,MAAAA,CAAO9D,MAAM8gC,WADhD,CAAA,CAAA,CAAA,CAAA;AAkGJ,EAAMgB,MAAAA,SAAAA,wBACF,KAAA,EAAA;AAAA,IAEI,SAAA,EAAWl3B,IAAKF,CAAAA,OAAAA,CAAQ+1B,KACpB,EAAA;AAAA,MAAG/1B,CAAAA,OAAAA,CAAQnI,SAAS,CAACzM,IAAAA;AAAAA,KADV,CAAA;AAAA,IAGf,GAAK08B,EAAAA,YAAAA;AAAAA,IALT,QAAA,EAAA,iBAOIz7B,GAAA,CAAC,qBAAD,EAAA;AAAA,MAAuB,QAAU4qC,EAAAA,WAAAA;AAAAA,KAAjC,CAEA,kBAAA7qC,IAAA,CAAA,KAAA,EAAA;AAAA,MAAK,WAAW4T,OAAQi2B,CAAAA,UAAAA;AAAAA,MACnB,GAAA;AAAA,MAEAjH,QAAAA,EAAAA,CAAAA,IAED,kBAAA3iC,GAAA,CAAC,UAAD,EAAA;AAAA,QACI,IAAM,EAAA,OAAA;AAAA,QACN,KAAO,EAAA;AAAA,UACH6a,QAAU,EAAA,UAAA;AAAA,UACV0R,GAAK,EAAA,CAAA,EAAA;AAAA,UACLnR,KAAO,EAAA,CAAA,EAAA;AAAA,UACP7C,eAAiB,EAAA,MAAA;AAAA,SANzB;AAAA,QAQI,SAAUwR,CAAU,KAAA,KAAA;AAChBA,UAAAA,KAAAA,CAAM3P,eAAN,EAAA,CAAA;AACAynB,UAAO,OAAA,EAAA,CAAA;AAAA,SAVf;AAAA,QAAA,QAAA,sBAYK,SAAD,EAAA;AAAA,UAAW,KAAO,EAAA;AAAA,YAAE1sB,KAAO,EAAA,OAAA;AAAA,WAA3B;AAAA,UACW,QAAU,EAAA,OAAA;AAAA,SADrB,CAAA;AAAA,OAjBR,CAAA,CAAA;AAAA,KATJ,CAAA,CAAA;AAAA,GACU,EAAA,CAAA,UAAA,EAAY9Q,IAAQ0I,CAAAA,CAAAA,EAAAA,MAAAA,CAAO9D,EADrC,CAAA,CAAA,CAAA,CAAA;AAkCJ,EAAA,2BACK,MAAD,EAAA;AAAA,IAAQ,WAAWkzB,QAASvoB,CAAAA,IAAAA;AAAAA,IACvBm3B,QAAAA,EAAAA,SAAAA;AAAAA,GAFT,CAAA,CAAA;AAMH;;AC5QM,SAAA,kBAAA,CAA+BC,eAA6Dj+B,MAAmB,EAAA;AAClH,EAAI,IAAA,OAAOi+B,kBAAkB,SAAW,EAAA;AACpC,IAAOA,OAAAA,aAAAA,CAAAA;AAAAA,GACV,MAAA,IAAU,OAAOA,aAAAA,KAAkB,UAAY,EAAA;AACrCA,IAAAA,OAAAA,cAAcj+B,MAAD,CAAA,CAAA;AAAA,GACjB,MAAA;AACH,IAAO,OAAA,IAAA,CAAA;AAAA,GACV;AACJ,CAAA;AAcoF,SAAA,yBAAA,CAAA;AAAA,EACIxE,cAAAA;AAAAA,EACAqf,iBAAAA;AAAAA,EACAqjB,mBAAAA;AAAAA,EACA3oC,IAAAA;AAAAA,EACA0oC,aAAAA;AAAAA,EACA1xB,IAAAA;AAAAA,EACA0wB,iBAAAA;AAAAA,EACA7B,oBAAAA;AAAAA,CAEpB,EAAA;AAE3DznC,EAAAA,MAAAA,UAAoC4b,iBAA1C,EAAA,CAAA;AAEA,EAAA,MAAM,CAAC4uB,YAAAA,EAAcC,eAAmBjsC,CAAAA,GAAAA,cAAAA,CAAMK,SAA2CG,KAAjD,CAAA,CAAA,CAAA;AACxC,EAAA,MAAM,CAAC0rC,SAAAA,EAAWC,YAAgBnsC,CAAAA,GAAAA,cAAAA,CAAMK,SAA2CG,KAAjD,CAAA,CAAA,CAAA;AAClC,EAAA,MAAM,CAACqvB,OAAAA,EAAS4L,UAAcz7B,CAAAA,GAAAA,cAAAA,CAAMK,SAAkB,KAAxB,CAAA,CAAA;AAE9B,EAAA,MAAM,CAAC+rC,mBAAAA,EAAqB/W,sBAA0Br1B,CAAAA,GAAAA,cAAAA,CAAMK,SAAkB,KAAxB,CAAA,CAAA;AAEtD,EAAMuqC,MAAAA,QAAAA,GAAW5qC,eAAMsH,MAAeuO,CAAAA,IAAAA,CAAKqjB,QAAStf,CAAAA,QAAAA,CAAS,EAAvB,CAArB,CAAA,CAAA;AAEjB,EAAMyyB,MAAAA,oBAAAA,GAAsFp6B,QAAQ,MAAM;AACtG,IAAOyW,OAAAA,iBAAAA,GACDA,iBACG3jB,CAAAA,GAAAA,CAAKunC,CAAQ,EAAA,MAAA;AAAA,MAAA,CAAGA,GAAGviC,EAAKuiC,GAAAA,EAAAA;AAAAA,KAD3B,CAAA,CAAA,CAEG9hC,MAAO,CAAA,CAACoC,GAAGC,CAAO,MAAA;AAAA,MAAKD,GAAAA,CAAAA;AAAAA,MAAMC,GAAAA,CAAAA;AAAAA,KAAM,CAAA,EAAA,EAFtC,CAAA,GAGA,EAJN,CAAA;AAAA,GAKH,EAAE,CAAC6b,iBAAD,CANgG,CAAA,CAAA;AASnG/lB,EAAAA,SAAAA,CAAU,MAAM;AACZ,IAAM4pC,MAAAA,WAAAA,GAAc,CAAC1hB,KAAe,KAAA;AAChC,MAAIA,IAAAA,KAAAA,CAAM2hB,YAAY,EAAI,EAAA;AACtBC,QAAQ,QAAA,EAAA,CAAA;AAAA,OACX;AAAA,KAHL,CAAA;AAKAxP,IAASC,QAAAA,CAAAA,gBAAAA,CAAiB,SAAWqP,EAAAA,WAAAA,EAAa,KAAlD,CAAA,CAAA;AACA,IAAA,OAAO,MAAM;AACTtP,MAASI,QAAAA,CAAAA,mBAAAA,CAAoB,SAAWkP,EAAAA,WAAAA,EAAa,KAArD,CAAA,CAAA;AAAA,KADJ,CAAA;AAAA,GAPK,CAAA,CAAA;AAYT,EAAMtc,MAAAA,MAAAA,GAASpoB,WAAY,CAAA,CAAC6kC,IAAgC,KAAA;AACxDT,IAAAA,eAAAA,CAAgBS,IAAD,CAAA,CAAA;AACfjR,IAAAA,UAAAA,CAAW,IAAD,CAAA,CAAA;AAAA,GAFY,EAGvB,EAHuB,CAAA,CAAA;AAK1B,EAAMgR,MAAAA,QAAAA,GAAW5kC,YAAY,MAAM;AAC/BokC,IAAAA,eAAAA,CAAgBzrC,KAAD,CAAA,CAAA,CAAA;AACfi7B,IAAAA,UAAAA,CAAW,KAAD,CAAA,CAAA;AACVpG,IAAAA,sBAAAA,CAAuB,KAAD,CAAA,CAAA;AAAA,GAHE,EAIzB,EAJyB,CAAA,CAAA;AAM5B,EAAMsX,MAAAA,YAAAA,GAAe9kC,YAAY,MAAM;AACnCskC,IAAAA,YAAAA,CAAa3rC,KAAD,CAAA,CAAA,CAAA;AACZi7B,IAAAA,UAAAA,CAAW,IAAD,CAAA,CAAA;AAAA,GAFkB,EAG7B,EAH6B,CAAA,CAAA;AAKhC,EAAMmR,MAAAA,qBAAAA,GAAwB/kC,YAAY,CAAC5B,MAAAA,KAAwCgtB,oBAAoBhtB,MAAD,CAAA,CACjGL,OAAO,CAAC,CAAC6T,SAAST,aAAmB,CAAA,KAAA,CAAC6c,oBAAoB7c,aAAD,CADqB,EAE9EjU,GAAI,CAAA,CAAC,CAAC0U,OAAAA,EAAST,aAAoB,CAAA,MAAA;AAAA,IAAGS,CAAAA,OAAAA,GAAUI,eAAeb,aAAD,CAAA;AAAA,GAFgB,CAAA,CAAA,CAG9ExO,MAAO,CAAA,CAACoC,GAAGC,CAAO,MAAA;AAAA,IAAKD,GAAAA,CAAAA;AAAAA,IAAMC,GAAAA,CAAAA;AAAAA,GAAM,CAAA,EAAA,EAH2C,CAAA,EAGtC,EAHJ,CAAA,CAAA;AAKzC,EAAA,MAAMggC,2BAA8BhlC,GAAAA,WAAAA,CAAY,CAACoE,QAAAA,EACAtG,UAAmB,KAAyC,KAAA;AAErGsG,IAAAA,IAAAA,QAASE,CAAAA,QAAAA,KAAa,QAAYF,IAAAA,QAAAA,CAASE,aAAa,QAAU,EAAA;AAClE,MAAA,MAAM7L,QAAQ2L,QAAS3L,CAAAA,KAAAA,CAAAA;AACvB,MAAMuY,MAAAA,UAAAA,GAAa5M,SAASoO,MAAQxB,EAAAA,UAAAA,CAAAA;AAC7B,MAAA,OAAA;AAAA,QACH1M,UAAUF,QAASE,CAAAA,QAAAA;AAAAA,QACnBxG,OAAAA;AAAAA,QACArF,KAAAA;AAAAA,QACAuY,UAAYA,EAAAA,UAAAA,GAAa+zB,qBAAsB/zB,CAAAA,UAAD,CAAerY,GAAAA,KAAAA,CAAAA;AAAAA,OAJjE,CAAA;AAAA,KAMOyL,MAAAA,IAAAA,QAAAA,CAASE,QAAa,KAAA,OAAA,IAAWF,SAASiC,EAAI,EAAA;AACrD,MAAO2+B,OAAAA,2BAAAA,CAA4B5gC,QAASiC,CAAAA,EAAAA,EAAI,IAAd,CAAA,CAAA;AAAA,KACrC,MAAA,IAAUjC,QAASE,CAAAA,QAAAA,KAAa,SAAW,EAAA;AACxC,MAAA,MAAM7L,QAAQ2L,QAAS3L,CAAAA,KAAAA,CAAAA;AAChB,MAAA,OAAA;AAAA,QACH6L,UAAUF,QAASE,CAAAA,QAAAA;AAAAA,QACnBxG,OAAAA;AAAAA,QACArF,KAAAA;AAAAA,OAHJ,CAAA;AAAA,KAKH,MAAA,IAAU2L,QAASE,CAAAA,QAAAA,KAAa,WAAa,EAAA;AAC1C,MAAA,MAAM7L,QAAQ2L,QAAS3L,CAAAA,KAAAA,CAAAA;AAChB,MAAA,OAAA;AAAA,QACH6L,UAAUF,QAASE,CAAAA,QAAAA;AAAAA,QACnBxG,OAAAA;AAAAA,QACArF,KAAAA;AAAAA,OAHJ,CAAA;AAAA,KAKH;AAED,IAAOE,OAAAA,KAAAA,CAAAA,CAAAA;AAAAA,GAEV,EAAE,CAACosC,qBAAD,CAhC4C,CAAA,CAAA;AAkCzC7sB,EAAAA,MAAAA,cAAAA,GAA0C9N,OAAQ,CAAA,MAAM+N,aAAc,CAAA;AAAA,IACxE/W,gBAAkBI,EAAAA,cAAAA;AAAAA,IAClBjG,IAAAA;AAAAA,GAFuE,CAAA,EAGvE,CAACiG,cAAAA,EAAgBjG,IAAjB,CAHmD,CAAA,CAAA;AAMjD0pC,EAAAA,MAAAA,OAAOC,iBAAb,EAAA,CAAA;AACA,EAAMC,MAAAA,aAAAA,GAAgBF,KAAKj7B,KAAMo7B,CAAAA,KAAAA,CAAAA;AAEjC,EAAA,MAAMC,WAAgB,EAAtB,CAAA;AACAlnC,EAAAA,MAAAA,CAAOiF,IAAK8U,CAAAA,cAAAA,CAAexT,UAA3B,CAAA,CAAuCrB,QAAQiiC,CAAK,CAAA,KAAA;AAChD,IAAIptB,IAAAA,cAAAA,CAAexT,UAAW4gC,CAAAA,CAAAA,CAAAA,CAAGC,kBAAoB,EAAA;AACjD,MAAA,IAAIJ,aAAe,EAAA;AACfE,QAASC,QAAAA,CAAAA,CAAAA,CAAAA,GAAKptB,eAAexT,UAAW4gC,CAAAA,CAAAA,CAAAA,CAAAA;AAAAA,OAC3C;AAAA,KACE,MAAA;AACHD,MAASC,QAAAA,CAAAA,CAAAA,CAAAA,GAAKptB,eAAexT,UAAW4gC,CAAAA,CAAAA,CAAAA,CAAAA;AAAAA,KAC3C;AAAA,GAPL,CAAA,CAAA;AAUAptB,EAAAA,cAAAA,CAAexT,UAAa2gC,GAAAA,QAAAA,CAAAA;AAGtBG,EAAAA,MAAAA,uBAAuB,CAAC;AAAA,IACItkB,MAAAA;AAAAA,IACA8hB,WAAAA;AAAAA,IACAyC,OAAAA;AAAAA,IACAC,QAAAA;AAAAA,GACO,KAAA;AAGrC,IAAA,MAAM1/B,MAAoBy/B,GAAAA,OAAAA,CAAAA;AAEpBnoC,IAAAA,MAAAA,OAAO4jB,MAAOykB,CAAAA,OAAAA,CAAAA;AAEdztB,IAAAA,MAAAA,kBAAiB1W,cAAe,CAAA;AAAA,MAClC7C,UAAUqH,MAAO9D,CAAAA,EAAAA;AAAAA,MACjB9D,QAAQ4H,MAAO5H,CAAAA,MAAAA;AAAAA,KAFkB,CAAA,CAAA;AAIrC,IAAMgG,MAAAA,QAAAA,GAAW8T,gBAAexT,UAAWpH,CAAAA,IAAAA,CAAAA,CAAAA;AAC3C,IAAA,IAAI,CAAC8G,QAAAA;AACD,MAAO,OAAA,IAAA,CAAA;AAEX,IAAMwhC,MAAAA,oBAAAA,GAAuBC,kBAAmB5B,CAAAA,aAAAA,EAAej+B,MAAhB,CAAA,CAAA;AAE3C,IAAA,IAAA,CAAC4/B,oBAAsB,EAAA;AACvB,MAAA,2BACK,SAAD,EAAA;AAAA,QAEI,IAAA;AAAA,QACA,KAAA,EAAO5/B,OAAO5H,MAAOd,CAAAA,IAAAA,CAAAA;AAAAA,QACrB,OAAO4jB,MAAOgG,CAAAA,KAAAA;AAAAA,QACd,QAAU,EAAA,IAAA;AAAA,QALd,QAAA,sBAMK,gBAAD,EAAA;AAAA,UACI,OAAOhG,MAAOjgB,CAAAA,KAAAA;AAAAA,UACd,QAAQigB,MAAO3N,CAAAA,MAAAA;AAAAA,UACf,IAAA,EAAO,CAAUjW,QAAAA,EAAAA,IAAAA,CAAAA,CAAAA,EAAQooC,QAAY1C,CAAAA,CAAAA,EAAAA,WAAAA,CAAAA,CAAAA;AAAAA,UACrC,QAAA;AAAA,UACA,KAAA,EAAOh9B,OAAO5H,MAAOd,CAAAA,IAAAA,CAAAA;AAAAA,UACrB,IAAA,EAAM8xB,mBAAmB7c,IAAD,CAAA;AAAA,SAN5B,CAAA;AAAA,OALM,EAAA,CAAA,aAAA,EAAejV,IAAQooC,CAAAA,CAAAA,EAAAA,QAAAA,CAAAA,CAAAA,EAAY1C,WAD7C,CAAA,CAAA,CAAA,CAAA;AAAA,KAgBD,MAAA;AAEG7a,MAAAA,MAAAA,SAAAA,GAAY,CAACc,QAAkC,KAAA;AAC7C,QAAA,IAAA,CAACA,QAAU,EAAA;AACXqb,UAAAA,YAAAA,CAAa3rC,KAAD,CAAA,CAAA,CAAA;AAAA,SACT,MAAA;AACH2rC,UAAa,YAAA,CAAA;AAAA,YACTtB,WAAAA;AAAAA,YACA/hC,OAAOigB,MAAOjgB,CAAAA,KAAAA;AAAAA,YACdsS,QAAQ2N,MAAO3N,CAAAA,MAAAA;AAAAA,YACfvN,MAAAA;AAAAA,YACAijB,QAAAA;AAAAA,YACA3rB,IAAAA;AAAAA,YACAkE,cAAAA;AAAAA,WAPQ,CAAA,CAAA;AAAA,SASf;AAAA,OAbL,CAAA;AAgBM4nB,MAAAA,MAAAA,QAAAA,GAAW,CAACH,QAAkC,KAAA;AAC5C,QAAA,IAAA,CAACA,QAAU,EAAA;AACXb,UAAAA,MAAAA,CAAOzvB,KAAD,CAAA,CAAA,CAAA;AAAA,SACH,MAAA;AACHyvB,UAAO,MAAA,CAAA;AAAA,YACH4a,WAAAA;AAAAA,YAEA/hC,OAAOigB,MAAOjgB,CAAAA,KAAAA;AAAAA,YACdsS,QAAQ2N,MAAO3N,CAAAA,MAAAA;AAAAA,YACfvN,MAAAA;AAAAA,YACAijB,QAAAA;AAAAA,YACA3rB,IAAAA;AAAAA,YACAkE,cAAAA;AAAAA,WARE,CAAA,CAAA;AAAA,SAUT;AAAA,OAdL,CAAA;AAiBA,MAAA,MAAM8lB,WAAW6c,YAAcnB,EAAAA,WAAAA,KAAgBA,eAC3CmB,YAAcn+B,EAAAA,MAAAA,CAAO9D,OAAO8D,MAAO9D,CAAAA,EAAAA,CAAAA;AAEvC,MAAA,MAAM4jC,YAAYxe,QAAYU,IAAAA,OAAAA,CAAAA;AAExBkC,MAAAA,MAAAA,qBAAAA,GAAyDkX,uBACzD,CAAC;AAAA,QAAE9jC,IAAAA,EAAAA,KAAAA;AAAAA,QAAM6H,KAAAA;AAAAA,QAAOf,QAAAA,EAAAA,SAAAA;AAAAA,OAAAA,KAAeg9B,oBAAqB,CAAA;AAAA,QAClD9jC,IAAAA,EAAAA,KAAAA;AAAAA,QAAM6H,KAAAA;AAAAA,QAAOf,QAAAA,EAAAA,SAAAA;AAAAA,QAAUzF,UAAUqH,MAAO9D,CAAAA,EAAAA;AAAAA,OADS,CAGnDvJ,GAAAA,KAAAA,CAAAA,CAAAA;AAEAmN,MAAAA,MAAAA,aAAaskB,gBAAiB,CAAA;AAAA,QAChChmB,QAAAA;AAAAA,QACA8lB,oBAAAA,EAAAA,qBAAAA;AAAAA,QACA5sB,IAAAA;AAAAA,OAH+B,CAAA,CAAA;AAMnC,MAAA,MAAMu2B,aAAgBoP,GAAAA,iBAAAA,GAChB,CAAChrC,KAAAA,KAAmCgrC,iBAAkB,CAAA;AAAA,QACjDhrC,GAAAA,KAAAA;AAAAA,QACH+N,MAAAA;AAAAA,OAFmD,CAIrDrN,GAAAA,KAAAA,CAAAA,CAAAA;AAECqN,MAAAA,OAAAA,MAAAA,uBACA,iBAAD,EAAA;AAAA,QAEE,IAAA;AAAA,QACA,OAAOkb,MAAOgG,CAAAA,KAAAA;AAAAA,QACd,IAAA;AAAA,QACA,UAAA;AAAA,QACA,aAAA;AAAA,QACA,QAAA;AAAA,QACA,OAAS4e,EAAAA,SAAAA;AAAAA,QACT,sBAAA;AAAA,QACA,UAAA;AAAA,QACA,KAAO9/B,EAAAA,MAAAA,EAAQ5H,MAAS4H,GAAAA,MAAAA,CAAO5H,OAAOd,IAAQ3E,CAAAA,GAAAA,KAAAA,CAAAA;AAAAA,QAC9C,QAAA;AAAA,QACA,SAAA;AAAA,QACA,MAAQywB,EAAAA,QAAAA;AAAAA,QACR,OAAOlI,MAAOjgB,CAAAA,KAAAA;AAAAA,QACd,QAAQigB,MAAO3N,CAAAA,MAAAA;AAAAA,QACf,UAAUvN,MAAO9D,CAAAA,EAAAA;AAAAA,QACjB,cAAc8D,MAAO5H,CAAAA,MAAAA;AAAAA,SAjBf,CAAad,WAAAA,EAAAA,IAAAA,CAAAA,CAAAA,EAAQooC,YAAY1C,WADzC,CAAA,CAAA,CAAA,uBAmBC,iBAAD,EAAA;AAAA,QAAmB,QAAA;AAAA,QACA,IAAA,EAAM5T,mBAAmB7c,IAAD,CAAA;AAAA,OArBjD,CAAA,CAAA;AAAA,KAsBH;AAAA,GAzHL,CAAA;AA8HMwzB,EAAAA,MAAAA,yBAAyB,CAAC;AAAA,IACI7kB,MAAAA;AAAAA,IACA8hB,WAAAA;AAAAA,IACAyC,OAAAA;AAAAA,IACAC,QAAAA;AAAAA,GACO,KAAA;AAEvC,IAAA,MAAM1/B,MAAoBy/B,GAAAA,OAAAA,CAAAA;AAEpBO,IAAAA,MAAAA,gBAAAA,GAAmBxB,qBAAqBtjB,MAAOykB,CAAAA,OAAAA,CAAAA,CAAAA;AACrD,IAAMxgC,MAAAA,KAAAA,GAAQ6gC,iBAAiBC,YACzB9nC,GAAAA,MAAAA,CAAOvB,QAAQoJ,MAAO5H,CAAAA,MAAtB,CACGL,CAAAA,MAAAA,CAAO,CAAC,CAAC8E,KAAKsC,MAAW6gC,CAAAA,KAAAA,gBAAAA,CAAiBC,aAAcziC,QAASX,CAAAA,GAAxC,CAD5B,CAEGF,CAAAA,MAAAA,CAAO,CAACoC,CAAAA,EAAGC,CAAO,MAAA;AAAA,MAAKD,GAAAA,CAAAA;AAAAA,MAAMC,GAAAA,CAAAA;AAAAA,KAAX,CAAA,EAAiB,EAFtC,CAGArM,GAAAA,KAAAA,CAAAA,CAAAA;AAEN,IAAA,2BACK,SAAD,EAAA;AAAA,MACI,KAAA;AAAA,MACA,OAAS,EAAA,KAAA;AAAA,MACT,QAAU,EAAA,KAAA;AAAA,MACV,QAAU,EAAA,IAAA;AAAA,MACV,IAAA;AAAA,MACA,KAAO,EAAA,MAAA;AAAA,MACP,WAAa,EAAA,KAAA;AAAA,MACb,cAAgB,EAAA,KAAA;AAAA,MAChB,eAAiB,EAAA,6CAAA;AAAA,MATrB,QAAA,sBAWK,aAAD,EAAA;AAAA,QACKqtC,QAAAA,EAAAA,iBAAiBj5B,OAAQ,CAAA;AAAA,UACtB/G,MAAAA;AAAAA,UACArM,OAAAA;AAAAA,SAFH,CAAA;AAAA,OADL,CAAA;AAAA,KAZR,CAAA,CAAA;AAAA,GAhBJ,CAAA;AAuCMusC,EAAAA,MAAAA,aAAgC/nC,MAAOiF,CAAAA,IAAAA,CAAK8U,eAAexT,UAA3B,CAAA,CACjCxH,IAAK2F,CAAQ,GAAA,KAAA;AACV,IAAMuB,MAAAA,QAAAA,GAAsC8T,eAAexT,UAAW7B,CAAAA,GAAAA,CAAAA,CAAAA;AAE9D,IAAA,OAAA;AAAA,MACJA,GAAAA;AAAAA,MACAuB,QAAAA;AAAAA,MACA8iB,KAAAA,EAAOif,iBAAiB/hC,QAAD,CAAA;AAAA,MACvBgiC,MAAOC,CAAgBrmB,WAAAA,KAAAA,kBAAAA,CAAmB5b,UAAUiiC,WAAc1tC,GAAAA,KAAAA,CAAAA,GAAY,YAAY,OAAjD,CAAA;AAAA,MACzC0Y,KAAAA,EAAOjN,SAAS3L,KAASoK,IAAAA,GAAAA;AAAAA,MACzByjC,QAAU,EAAA,IAAA;AAAA,MACVvoC,MAAAA,EAAQinC,4BAA4B5gC,QAAD,CAAA;AAAA,MACnCnD,KAAAA,EAAOwf,uBAAuBrc,QAAD,CAAA;AAAA,MAC7BmiC,YAAcf,EAAAA,oBAAAA;AAAAA,KATlB,CAAA;AAAA,GAJ6B,CAAA,CAAA;AAiBrC,EAAA,IAAI3kB,iBAAmB,EAAA;AACnB,IAAM2Q,MAAAA,KAAAA,GAA0B3Q,iBAAkB3jB,CAAAA,GAAAA,CAAK8oC,CAClD,gBAAA,MAAA;AAAA,MACGnjC,KAAKmjC,gBAAiB9jC,CAAAA,EAAAA;AAAAA,MACtBpJ,IAAM,EAAA,YAAA;AAAA,MACNouB,KAAO,EAAA,MAAA;AAAA,MACPof,QAAU,EAAA,KAAA;AAAA,MACVj1B,OAAO20B,gBAAiBvtC,CAAAA,KAAAA;AAAAA,MACxBwI,KAAAA,EAAO+kC,iBAAiB/kC,KAAS,IAAA,GAAA;AAAA,MACjCslC,YAAcR,EAAAA,sBAAAA;AAAAA,KARU,CAAA,CAAA,CAAA;AAUhCG,IAAWppC,UAAAA,CAAAA,IAAAA,CAAK,GAAG00B,KAAnB,CAAA,CAAA;AAAA,GACH;AAED,EAAMgV,MAAAA,OAAAA,GAAUtC,mBACXhnC,CAAAA,GAAAA,CAAKikB,CAAM,CAAA,KAAA;AACD+kB,IAAAA,OAAAA,UAAW5pC,CAAAA,IAAAA,CAAK8kB,CAAKA,CAAAA,KAAAA,CAAAA,CAAEve,QAAQse,CAA/B,CAAA,CAAA;AAAA,GAFC,CAGTpjB,CAAAA,MAAAA,CAAOqjB,CAAK,CAAA,KAAA,CAAC,CAACA,CAHL,CAAA,CAAA;AAKV8I,EAAAA,MAAAA,oBAAAA,GAAyDkX,uBACzD,CAAC;AAAA,IAAE9jC,IAAAA;AAAAA,IAAM6H,KAAAA;AAAAA,IAAOf,QAAAA;AAAAA,GAAAA,KAAeg9B,oBAAqB,CAAA;AAAA,IAClD9jC,IAAAA;AAAAA,IACA6H,KAAAA;AAAAA,IACAf,QAAAA;AAAAA,IACAzF,QAAAA,EAAUwlC,cAAcn+B,MAAO9D,CAAAA,EAAAA;AAAAA,GAJkB,CAMnDvJ,GAAAA,KAAAA,CAAAA,CAAAA;AAEA8tC,EAAAA,MAAAA,cAAAA,uBACD,cAAD,EAAA;AAAA,IACI,IAAA,EAAMnoC,QAAQ+lC,SAAD,CAAA;AAAA,IACb,OAASS,EAAAA,YAAAA;AAAAA,IACT,UAAUT,SAAWpb,EAAAA,QAAAA;AAAAA,IACrB,aAAaob,SAAWrB,EAAAA,WAAAA;AAAAA,IACxB,MAAMqB,SAAW/mC,EAAAA,IAAAA;AAAAA,IACjB,gBAAgB+mC,SAAW7iC,EAAAA,cAAAA;AAAAA,IAC3B,QAAQ6iC,SAAWr+B,EAAAA,MAAAA;AAAAA,IACnB,UAAU+8B,QAAS1iC,CAAAA,OAAAA;AAAAA,IACnB,oBAAA;AAAA,IACA,IAAA;AAAA,IACA,iBAAA;AAAA,IACA,sBAAA;AAAA,GAbR,CAAA,CAAA;AAiBO,EAAA,OAAA;AAAA,IAAEmmC,OAAAA;AAAAA,IAASC,cAAAA;AAAAA,GAAlB,CAAA;AAEH;;AC9bD,MAAMC,iBAAoB,GAAA,EAAA,CAAA;AAEb56B,MAAAA,WAAAA,GAAYC,YAAkBC,CAAAA,CAAAA,KAAAA,KAASC,YAAa,CAAA;AAAA,EAC7DqF,IAAM,EAAA;AAAA,IACFiC,MAAQ,EAAA,MAAA;AAAA,IACRtS,KAAO,EAAA,MAAA;AAAA,IACPkL,OAAS,EAAA,MAAA;AAAA,IACTyG,aAAe,EAAA,QAAA;AAAA,GAJb;AADuD,CAAD,CAA7B,CAAA,CAAA;AAkC5B,MAAM+zB,eAAkBxuC,GAAAA,cAAAA,CAAMiV,IAAqCw5B,CAAAA,uBAAAA,EAAyB7pB,QAApE,EAAA;AAE/B,SAAA,QAAA,CAAkBC,WAA2CC,SAA2C,EAAA;AAC7FD,EAAAA,OAAAA,SAAAA,CAAUzhB,SAAS0hB,SAAU1hB,CAAAA,IAAAA,IAChCyhB,UAAU7f,UAAe8f,KAAAA,SAAAA,CAAU9f,UACnC6f,IAAAA,SAAAA,CAAUvkB,KAAUwkB,KAAAA,SAAAA,CAAUxkB,SAC9BukB,SAAU6pB,CAAAA,qBAAAA,KAA0B5pB,UAAU4pB,qBAC9C7pB,IAAAA,SAAAA,CAAU8pB,2BAA2B7pB,SAAU6pB,CAAAA,sBAAAA,IAC/C9pB,SAAUinB,CAAAA,aAAAA,KAAkBhnB,SAAUgnB,CAAAA,aAAAA,CAAAA;AAE7C,CAAA;AAMA,SAAA,uBAAA,CAAA;AAAA,EACI1oC,IAAAA;AAAAA,EACA4B,UAAAA;AAAAA,EACAqE,cAAAA;AAAAA,EACAyiC,aAAAA;AAAAA,EACA4C,qBAAAA;AAAAA,EACApuC,KAAAA;AAAAA,EACAquC,sBAAAA;AAAAA,EACAjxB,sBAAAA;AAAAA,EACAkxB,aAAAA;AAAAA,EACAC,cAAAA;AAAAA,EACA9iB,aAAAA;AAAAA,EACA+iB,QAAW,GAAA,IAAA;AAAA,CAC4B,EAAA;AAElCttC,EAAAA,MAAAA,UAAU4b,iBAAhB,EAAA,CAAA;AACMjc,EAAAA,MAAAA,aAAa0c,aAAnB,EAAA,CAAA;AACM5c,EAAAA,MAAAA,uBAAuB4kB,uBAA7B,EAAA,CAAA;AAEMhS,EAAAA,MAAAA,QAAQ0X,QAAd,EAAA,CAAA;AACA,EAAA,MAAMC,cAAclpB,aAAcuR,CAAAA,KAAAA,CAAM8V,WAAYC,CAAAA,EAAAA,CAAG,IAArB,CAAD,CAAA,CAAA;AAEjC,EAAA,MAAM,CAACxP,IAAAA,EAAMojB,OAAWx9B,CAAAA,GAAAA,cAAAA,CAAMK,SAAyB,IAA/B,CAAA,CAAA;AAExB,EAAA,MAAM0uC,gBAAgB/pC,UAAW+pC,CAAAA,aAAAA,CAAAA;AACjC,EAAA,MAAMC,cAAchqC,UAAWgqC,CAAAA,WAAAA,CAAAA;AAC/B,EAAA,MAAMC,qBAAqBjqC,UAAWiqC,CAAAA,kBAAAA,CAAAA;AACtC,EAAA,MAAMC,oBAAoBlqC,UAAWkqC,CAAAA,iBAAAA,CAAAA;AACrC,EAAA,MAAMC,oBAAoBnqC,UAAWoqC,CAAAA,UAAAA,KAAe5uC,KAAa2F,CAAAA,IAAAA,OAAAA,CAAQnB,WAAWoqC,UAAZ,CAAA,CAAA;AACxE,EAAA,MAAMC,WAAW,OAAOrqC,UAAAA,CAAWoqC,UAAe,KAAA,QAAA,GAAWpqC,WAAWoqC,UAAab,GAAAA,iBAAAA,CAAAA;AAErF,EAAA,MAAM,CAAC/wB,SAAW8xB,EAAAA,YAAAA,CAAAA,GAAgBtvC,eAAMK,QAA6B8uC,CAAAA,iBAAAA,GAAoBE,WAAW7uC,KAAlE,CAAA,CAAA,CAAA;AAE5B,EAAA,MAAA,CAAC8c,YAAciyB,EAAAA,eAAAA,CAAAA,GAAmBvvC,eAAMK,QAAsC0uC,CAAAA,aAAAA,IAAiB,EAA7D,CAAA,CAAA;AAClC,EAAA,MAAA,CAACxxB,MAAAA,EAAQiyB,SAAaxvC,CAAAA,GAAAA,cAAAA,CAAMK,SAAiE2uC,WAAvE,CAAA,CAAA;AAE5B,EAAMtjB,MAAAA,WAAAA,GAAc,CAAC,CAACpO,YAAAA,IAAgBtX,OAAOiF,IAAKqS,CAAAA,YAAZ,EAA0B7Z,MAAS,GAAA,CAAA,CAAA;AAEnEgR,EAAAA,MAAAA,UAAUd,WAAhB,EAAA,CAAA;AAEA,EAAM+U,MAAAA,iBAAAA,GAAoBzW,QAAQ,MAAM;AACpC,IAAA,MAAMw9B,oBAAgEzqC,GAAAA,UAAAA,CAAWX,cAAgBU,EAAAA,GAAAA,CAAK2qC,CAAkB,aAAA,KAAA;AAC7G,MAAA,OAAA;AAAA,QACH3lC,EAAAA,EAAIqf,yBAAyBsmB,aAAD,CAAA;AAAA,QAC5BpvC,OAAOovC,aAAcvqC,CAAAA,IAAAA;AAAAA,QACrB2D,KAAO,EAAA,GAAA;AAAA,QACPglC,cAAc,EAJX;AAAA,QAKHl5B,SAAS,CAAC;AAAA,UAAE/G,MAAAA;AAAAA,SAAAA,yBACP,MAAD,EAAA;AAAA,UAAQ,KAAO,EAAA,SAAA;AAAA,UACP,SAAUgd,CAAU,KAAA,KAAA;AAChBA,YAAAA,KAAAA,CAAM3P,eAAN,EAAA,CAAA;AACAja,YAAAA,oBAAAA,CAAqBpB,IAAK,CAAA;AAAA,cACtBuD,IAAAA;AAAAA,cACAoD,UAAUqH,MAAO9D,CAAAA,EAAAA;AAAAA,cACjBnB,iBAAiB8mC,aAActsC,CAAAA,IAAAA;AAAAA,cAC/B4F,aAAahE,UAAWgE,CAAAA,WAAAA;AAAAA,cACxBpC,MAAQyC,EAAAA,cAAAA;AAAAA,cACRhF,gBAAgBW,UAAWX,CAAAA,cAAAA;AAAAA,cAC3BiF,WAAWtE,UAAWsE,CAAAA,SAAAA;AAAAA,cACtBJ,sBAAwB,EAAA,KAAA;AAAA,aAR5B,CAAA,CAAA;AAAA,WAHZ;AAAA,UAcK,QAACwmC,EAAAA,CAAAA,aAAAA,CAAcC,aAAiBD,IAAAA,aAAAA,CAAcC,aAAc,CAAA;AAAA,YAAE9hC,MAAAA;AAAAA,WAA9B,MAA4C6hC,aAAcvqC,CAAAA,IAAAA;AAAAA,SAd/F,CAAA;AAAA,OANR,CAAA;AAAA,KADkE,KAyBhE,EAzBN,CAAA;AA0BO,IAAA,OAAA,CAAC,GAAIH,UAAAA,CAAW0jB,qBAAqB,EAAA,EAAK,GAAG+mB,oBAA7C,CAAA,CAAA;AAAA,GACR,EAAA,CAACzqC,UAAY5B,EAAAA,IAAb,CA5B8B,CAAA,CAAA;AA8B3B2c,EAAAA,MAAAA,cAAAA,GAAiB9N,QAAQ,MAAM5I,cAAAA,CAAe,EAAD,CAAA,EAAM,EAA3B,CAAA,CAAA;AACxB0iC,EAAAA,MAAAA,mBAAsB6D,GAAAA,YAAAA,CAAa5qC,UAAY+a,EAAAA,cAAAA,EAAgB,IAA7B,CAAA,CAAA;AAExC,EAAMkpB,MAAAA,oBAAAA,GAA6CphC,YAC/C,CAAC;AAAA,IACI1C,IAAAA;AAAAA,IACA6H,KAAAA;AAAAA,IACAf,QAAAA;AAAAA,IACAzF,QAAAA;AAAAA,GACErF,KAAAA,UAAAA,CAAW+nC,gBAAiB9lC,CAAAA,IAAAA,EAAM+B,IAAM6H,EAAAA,KAAAA,EAAOf,QAAUzF,EAAAA,QAAzD,CACP,EAAA,CAACpD,IAAMjC,EAAAA,UAAP,CAP0D,CAAA,CAAA;AAUxD0uC,EAAAA,MAAAA,aAAAA,GAA2ChoC,YAAY,CAAC;AAAA,IACImF,KAAAA;AAAAA,IACA7H,IAAAA;AAAAA,IACAy2B,QAAAA;AAAAA,IACAR,QAAAA;AAAAA,IACAvtB,MAAAA;AAAAA,GACE,KAAA;AAChE,IAAA,MAAMiiC,SAAgC,GAAA;AAAA,MAClC1sC,IAAAA;AAAAA,MACAoD,UAAUqH,MAAO9D,CAAAA,EAAAA;AAAAA,MACjB9D,MAAQ,EAAA;AAAA,QAAA,GACD4H,MAAO5H,CAAAA,MAAAA;AAAAA,QAAAA,CACTd,IAAO6H,GAAAA,KAAAA;AAAAA,OALsB;AAAA,MAOlCnB,gBAAgBgC,MAAO5H,CAAAA,MAAAA;AAAAA,MACvBW,MAAQyC,EAAAA,cAAAA;AAAAA,MACRgE,MAAQ,EAAA,UAAA;AAAA,KATZ,CAAA;AAYA,IAAA,OAAO0iC,uBAAwB,CAAA;AAAA,MACxBD,GAAAA,SAAAA;AAAAA,MACHxmC,WAAWtE,UAAWsE,CAAAA,SAAAA;AAAAA,MACtBnI,UAAAA;AAAAA,MACAK,OAAAA;AAAAA,MACAke,aAAAA,EAAe,MAAMkc,QAAAA,CAAS,IAAD,CAAA;AAAA,MAC7Bjc,aAAAA,EAAe,CAACzZ,CAAa,KAAA;AACzBk1B,QAAAA,QAAAA,CAASl1B,CAAD,CAAA,CAAA;AAAA,OACX;AAAA,KARyB,CAAA,CAAA;AAAA,GAW/B,EAAA,CAAC9C,IAAM4B,EAAAA,UAAAA,EAAYqE,cAAnB,CA9ByD,CAAA,CAAA;AAgCxD,EAAA,IAAA;AAAA,IAAEglC,OAAAA;AAAAA,IAASC,cAAAA;AAAAA,GAAAA,GAAmB0B,yBAA0B,CAAA;AAAA,IACxD3mC,cAAAA;AAAAA,IACAqf,iBAAAA;AAAAA,IACAqjB,mBAAAA;AAAAA,IACA3oC,IAAAA;AAAAA,IACA0oC,aAAAA;AAAAA,IACA1xB,IAAAA;AAAAA,IACA0wB,iBAAmB+E,EAAAA,aAAAA;AAAAA,IACnB5G,oBAAAA;AAAAA,GARuD,CAAA,CAAA;AAU3Dl9B,EAAQqmB,OAAAA,CAAAA,GAAAA,CAAI,WAAWic,OAAvB,CAAA,CAAA;AACAA,EAAUA,OAAAA,GAAAA,OAAAA,CAAQzoC,OAAOqjB,CAAK,CAAA,KAAA;AACtBA,IAAAA,IAAAA,EAAEhd,QAAU,EAAA;AACZ,MAAO,OAAA,CAACgd,EAAEhd,QAASgkC,CAAAA,WAAAA,CAAAA;AAAAA,KAChB,MAAA;AACH,MAAO,OAAA,IAAA,CAAA;AAAA,KACV;AAAA,GALK,CAAA,CAAA;AAOV,EAAA,MAAM,CAACxyB,YAAAA,EAAcyyB,eAAmBlwC,CAAAA,GAAAA,cAAAA,CAAMK,QAA9C,EAAA,CAAA;AAEM,EAAA,MAAA;AAAA,IACFmS,IAAAA;AAAAA,IACAwL,WAAAA;AAAAA,IACAI,YAAAA;AAAAA,IACAF,gBAAAA;AAAAA,GAAAA,GACAiyB,kBAAmB,CAAA;AAAA,IACnBzyB,sBAAAA;AAAAA,IACAta,IAAAA;AAAAA,IACAiG,cAAAA;AAAAA,IACAiU,YAAAA;AAAAA,IACAC,MAAAA;AAAAA,IACAE,YAAAA;AAAAA,IACAD,SAAAA;AAAAA,GAPkB,CAAA,CAAA;AAUhB0N,EAAAA,MAAAA,OAAUjZ,GAAAA,OAAAA,CAAQ,MAAMy8B,qBAAAA,IAAyBA,qBAAsB,CAAA;AAAA,IACzEt0B,IAAAA;AAAAA,IACA5H,IAAAA;AAAAA,GAFwE,CAGxE,EAAA,CAACk8B,qBAAuBt0B,EAAAA,IAAAA,EAAM5H,IAA9B,CAHmB,CAAA,CAAA;AAKvB,EAAM49B,MAAAA,YAAAA,GAAevoC,YAAY,MAAM;AACnC,IAAI,IAAA,CAACsnC,qBAAqBnxB,WAAeI,IAAAA,YAAAA;AACrC,MAAA,OAAA;AACAZ,IAAAA,IAAAA,SAAchd,KAAAA,KAAAA,CAAAA;AACd8uC,MAAAA,YAAAA,CAAa9xB,YAAY6xB,QAAb,CAAA,CAAA;AAAA,KACjB,CAACrxB,WAAAA,EAAaR,WAAWY,YAAcixB,EAAAA,QAAAA,EAAUF,iBAAjD,CAL6B,CAAA,CAAA;AAOhC,EAAMkB,MAAAA,eAAAA,GAAkBxoC,YAAY,MAAM;AACtCynC,IAAAA,YAAAA,CAAaD,QAAD,CAAA,CAAA;AAAA,GACf,EAAE,CAACA,QAAD,CAFgC,CAAA,CAAA;AAI7B1jB,EAAAA,MAAAA,WAAAA,GAAc9jB,YAAY,MAAM0nC,eAAAA,CAAgB,EAAD,CAAA,EAAM,EAA5B,CAAA,CAAA;AAE/B,EAAMe,MAAAA,aAAAA,GAAgBzoC,YAAY,CAAC;AAAA,IAAEzD,KAAAA;AAAAA,IAAOgW,IAAAA,EAAAA,KAAAA;AAAAA,GAGtC,KAAA;AACF,IAAIu0B,IAAAA,sBAAAA;AACA,MAAA,OAAOA,sBAAuB,CAAA;AAAA,QAAE9gC,MAAQzJ,EAAAA,KAAAA;AAAAA,QAAOgW,IAAAA,EAAAA,KAAAA;AAAAA,OAAlB,CAAA,CAAA;AAAA;AAE7B,MAAA,2BAAQ,oBAAD,EAAA;AAAA,QAAsB,MAAQhW,EAAAA,KAAAA;AAAAA,QAAO,IAAMgW,EAAAA,KAAAA;AAAAA,QAAM,IAAA;AAAA,OAAxD,CAAA,CAAA;AAAA,GAEP,EAAE,CAACu0B,sBAAD,CAT8B,CAAA,CAAA;AAWjC,EAAM4B,MAAAA,UAAAA,GAAa1oC,YAAY,CAAC;AAAA,IAAEylC,OAAAA;AAAAA,GAAsC,KAAA;AAAA,GAEvE,EAAE,CAACsB,aAAD,CAF2B,CAAA,CAAA;AAIxB/Q,EAAAA,MAAAA,UAAAA,GAAah2B,WAAY,CAAA,CAACuS,KAAyB,KAAA;AACrD,IAAI2R,IAAAA,aAAAA;AACAA,MAAAA,aAAAA,CAAc3R,KAAD,CAAA,CAAA;AACjBojB,IAAAA,OAAAA,CAAQpjB,KAAD,CAAA,CAAA;AAAA,GAHmB,EAI3B,EAJ2B,CAAA,CAAA;AAM9B,EAAA,MAAMiQ,eAAexiB,WAAa2oC,CAAAA,CAAAA,eAAAA,KAAoBN,gBAAgBM,eAAD,CAAA,EAAmB,EAAxD,CAAA,CAAA;AAChC,EAAA,4BAEK,KAAD,EAAA;AAAA,IAAO,WAAW/7B,OAAQ0E,CAAAA,IAAAA;AAAAA,IAA1B,QAAA,EAAA,iBAEIrY,GAAA,CAAC,sBAAD,EAAA;AAAA,MAAwB,WAAA;AAAA,MACA,YAAA,EAAcouC,oBAAoB7kB,YAAe7pB,GAAAA,KAAAA,CAAAA;AAAAA,MACjD,WAAA;AAAA,MACA,OAAA;AAAA,MACA,IAAA;AAAA,MACA,aAAeq9B,EAAAA,UAAAA;AAAAA,MACf,KAAA;AAAA,MACA,OAAS7f,EAAAA,WAAAA;AAAAA,KATrC,CAWI,kBAAAld,GAAA,CAAC,KAAD,EAAA;AAAA,MACI,IAAA;AAAA,MACA,OAAA;AAAA,MACA,UAAA;AAAA,MACA,YAAcsvC,EAAAA,YAAAA;AAAAA,MACd,iBAAmBC,EAAAA,eAAAA;AAAAA,MACnB,eAAiBC,EAAAA,aAAAA;AAAAA,MACjB,KAAOpyB,EAAAA,gBAAAA;AAAAA,MACP,iBAAA;AAAA,MACA,cAAA;AAAA,MACA,cAAgBsN,EAAAA,WAAAA;AAAAA,MAChB,IAAA;AAAA,MACA,OAASxN,EAAAA,WAAAA;AAAAA,MACT,MAAQV,EAAAA,YAAAA;AAAAA,MACR,cAAgBiyB,EAAAA,eAAAA;AAAAA,MAChB,MAAA;AAAA,MACA,cAAgBC,EAAAA,SAAAA;AAAAA,MAChB,QAAA;AAAA,MACA,wBAAwB,CAAClyB,aAAAA,EAAcC,YAAWkzB,wBAAyBnzB,CAAAA,aAAAA,EAAc2xB,oBAAoB1xB,OAAnC,CAAA;AAAA,MAC1E,UAAA;AAAA,KAnBJ,GAsBC+wB,cAjCL,CAAA;AAAA,GAFJ,CAAA,CAAA;AAyCH,CAAA;AAED,SACIhxB,wBAAAA,CAAAA,YAAAA,EACAozB,SACAnzB,MACO,EAAA;AAEDozB,EAAAA,MAAAA,OAAAA,GAAUpzB,MAASA,GAAAA,MAAAA,CAAO,CAAK/c,CAAAA,GAAAA,KAAAA,CAAAA,CAAAA;AAC/BowC,EAAAA,MAAAA,aAAAA,GAAgBrzB,MAASA,GAAAA,MAAAA,CAAO,CAAK/c,CAAAA,GAAAA,KAAAA,CAAAA,CAAAA;AAG3C,EAAMyF,MAAAA,MAAAA,GAAiCD,MAAOC,CAAAA,MAAAA,CAAOqX,YAAd,CAAA,CAAA;AACvC,EAAIqzB,IAAAA,OAAAA,IAAW1qC,OAAOlB,GAAKyG,CAAAA,CAAAA,CAAAA,KAAMA,EAAE,CAApB,CAAA,CAAA,CAAwBH,QAAS,CAAA,IAAjC,CAAwC,EAAA;AACnD,IAAO,OAAA,KAAA,CAAA;AAAA,GACV;AAED,EAAMwlC,MAAAA,UAAAA,GAAa7qC,MAAOiF,CAAAA,IAAAA,CAAKqS,YAAZ,CAAA,CAAA;AACnB,EAAA,MAAMwzB,eAAeD,UAAWptC,CAAAA,MAAAA,CAAAA;AAEhC,EAAA,IAAIqtC,iBAAiB,CAAM,KAAA,CAACH,OAAWA,IAAAA,OAAAA,KAAYE,WAAW,CAAK,CAAA,CAAA,EAAA;AAC/D,IAAO,OAAA,IAAA,CAAA;AAAA,GACV;AAED,EAAI,IAAA,CAACH,OAAWI,IAAAA,YAAAA,GAAe,CAAG,EAAA;AAC9B,IAAO,OAAA,KAAA,CAAA;AAAA,GACV;AAGD,EAAA,IAAIH,OAAWG,IAAAA,YAAAA,KAAiB,CAAKD,IAAAA,UAAAA,CAAW,OAAOF,OAAS,EAAA;AAC5D,IAAO,OAAA,KAAA,CAAA;AAAA,GACV;AAEM,EAAA,OAAA,CAAC,CAACD,OAAWA,IAAAA,OAAAA,CACf9qC,MAAQmrC,CAAAA,CAAAA,cAAAA,KAAmB,CAACJ,OAAAA,IAAWA,OAAWI,IAAAA,cADnC,CAEf5sC,CAAAA,IAAAA,CAAM4sC,oBACH/qC,MAAOvB,CAAAA,OAAAA,CAAQ6Y,YAAf,CAAA,CAA6B0zB,KAAM,CAAA,CAAC,CAACtmC,GAAAA,EAAKsC,WAAW+jC,cAAermC,CAAAA,GAAAA,CAAAA,KAASlK,KAAc,CAAA,KAAA,CAACowC,aAAiBG,IAAAA,cAAAA,CAAermC,GAASkmC,CAAAA,KAAAA,aAAAA,CAArI,CAHY,CAIVpwC,KAAAA,KAAAA,CAAAA,CAAAA;AACb;;AClVYmT,MAAAA,WAAAA,GAAYC,UAAWC,CAAAA,CAAAA,KAAAA,KAASC,YAAa,CAAA;AAAA,EACtDm9B,UAAY,EAAA;AAAA,IACR/qB,QAAU,EAAA,CAAA;AAAA,IACVE,QAAU,EAAA,MAAA;AAAA,IACV4G,QAAU,EAAA,MAAA;AAAA,GAJwC;AAAA,EAMtD8B,KAAO,EAAA;AAAA,IACH1T,MAAQ,EAAA,MAAA;AAAA,GADL;AAN+C,CAAD,CAAtB,CAAA,CAAA;AAwE/B,SAAA,eAAA,CAAA;AAAA,EACI81B,sBAAAA;AAAAA,EACApa,0BAAAA;AAAAA,EACA6L,OAAAA;AAAAA,EACA9iC,IAAAA;AAAAA,EACA82B,WAAAA;AAAAA,EACA7Q,kBAAAA;AAAAA,EACA1iB,IAAAA;AAAAA,EACA+tC,iBAAAA;AAAAA,CACqB,EAAA;AAEnB18B,EAAAA,MAAAA,UAAUd,WAAhB,EAAA,CAAA;AACMxS,EAAAA,MAAAA,aAAa0c,aAAnB,EAAA,CAAA;AAEM7Y,EAAAA,MAAAA,UAAa8gB,GAAAA,kBAAAA,CAAAA;AACnB,EAAA,MAAMlf,SAASkf,kBAAmBlf,CAAAA,MAAAA,CAAAA;AAClC,EAAA,MAAMyC,iBAAiByc,kBAAmBzc,CAAAA,cAAAA,CAAAA;AAE1C,EAAM,MAAA,CAAC+nC,gBAAkBC,EAAAA,mBAAAA,CAAAA,GAAuBhxC,QAAhD,EAAA,CAAA;AAEAsC,EAAAA,SAAAA,CAAU,MAAM;AACRoS,IAAAA,IAAAA,SAAY,GAAA,KAAA,CAAA;AAChB,IAAA,IAAIo8B,iBAAmB,EAAA;AACnBpwB,MAAQG,OAAAA,CAAAA,GAAAA,CACJiwB,iBAAkBpsC,CAAAA,GAAAA,CAAKyB,CAAa,QAAA,KAAA;AACzBrF,QAAAA,OAAAA,WAAWse,WAAY,CAAA;AAAA,UAC1Brc,IAAAA;AAAAA,UACAoD,QAAAA;AAAAA,UACAI,MAAQyC,EAAAA,cAAAA;AAAAA,SAHL,CAAA,CAAA;AAAA,OADX,CADJ,CAQKuG,CAAAA,IAAAA,CAAM2O,CAAa,QAAA,KAAA;AAChB,QAAA,IAAI,CAACxJ,SAAAA;AACDs8B,UAAAA,mBAAAA,CAAoB9yB,QAAD,CAAA,CAAA;AAAA,OAV/B,CAAA,CAAA;AAAA,KAYG,MAAA;AACH8yB,MAAAA,mBAAAA,CAAoB,EAAD,CAAA,CAAA;AAAA,KACtB;AACD,IAAA,OAAO,MAAM;AACTt8B,MAAY,SAAA,GAAA,IAAA,CAAA;AAAA,KADhB,CAAA;AAAA,GAGD,EAAA,CAAC5T,UAAYiC,EAAAA,IAAAA,EAAM+tC,iBAAnB,CArBM,CAAA,CAAA;AAwBHvC,EAAAA,MAAAA,aAAAA,GAAgB,CAAC/gC,MAAwB,KAAA;AAC3C,IAAI,IAAA,CAAC8oB,eAAeua,sBAAwB,EAAA;AACxCA,MAAAA,sBAAAA,CAAuBrjC,MAAD,CAAA,CAAA;AAAA,KACnB,MAAA;AACH6f,MAAAA,qBAAAA,CAAsB7f,MAAD,CAAA,CAAA;AAAA,KACxB;AAAA,GALL,CAAA;AAQMmsB,EAAAA,MAAAA,UAAU,MAAM;AAClB,IAAI,IAAA,CAACrD,eAAeua,sBAAwB,EAAA;AACxCA,MAAAA,sBAAAA,CAAuB,IAAD,CAAA,CAAA;AAAA,eACfpa,0BAA4B,EAAA;AACnCA,MAAAA,0BAAAA,CAA2B,EAAD,CAAA,CAAA;AAAA,KAC7B;AAAA,GALL,CAAA;AASMpJ,EAAAA,MAAAA,qBAAAA,GAAwB,CAAC7f,MAAwB,KAAA;AACnD,IAAIsnB,IAAAA,QAAAA,CAAAA;AACJ,IAAA,IAAIic,gBAAkB,EAAA;AAClB,MAAIA,IAAAA,gBAAAA,CAAiBrsC,GAAKmB,CAAAA,CAAAA,CAAAA,KAAMA,CAAE6D,CAAAA,EAA9B,EAAkCuvB,OAAQzrB,CAAAA,MAAAA,CAAO9D,EAAjD,CAAA,GAAuD,CAAI,CAAA,EAAA;AAC3DorB,QAAAA,QAAAA,GAAWic,iBAAiBxrC,MAAO,CAAA,CAAC+E,SAAsBA,IAAKZ,CAAAA,EAAAA,KAAO8D,OAAO9D,EAAlE,CAAA,CAAA;AAAA,OACR,MAAA;AACHorB,QAAW,QAAA,GAAA,CAAC,GAAGic,gBAAAA,EAAkBvjC,MAAtB,CAAA,CAAA;AAAA,OACd;AACDwjC,MAAAA,mBAAAA,CAAoBlc,QAAD,CAAA,CAAA;AAEnB,MAAI2B,IAAAA,0BAAAA;AACAA,QAAAA,0BAAAA,CAA2B3B,QAAD,CAAA,CAAA;AAAA,KACjC;AAAA,GAZL,CAAA;AAeMwZ,EAAAA,MAAAA,yBAAyB,CAAC;AAAA,IACI9gC,MAAAA;AAAAA,IACAuM,IAAAA;AAAAA,GACiD,KAAA;AAEjF,IAAA,MAAMmT,aAAa4jB,iBAAqBA,IAAAA,iBAAAA,CAAkB7X,OAAQzrB,CAAAA,MAAAA,CAAO9D,EAAjC,CAAuC,GAAA,CAAA,CAAA,CAAA;AAC/E,IAAA,2BAAQ,oBAAD,EAAA;AAAA,MACH,MAAA;AAAA,MACA,IAAA;AAAA,MACA,UAAA;AAAA,MACA,gBAAkB4sB,EAAAA,WAAAA;AAAAA,MAClB,qBAAA;AAAA,KALJ,CAAA,CAAA;AAAA,GANJ,CAAA;AAgBA,EAAM+X,MAAAA,qBAAAA,GAAwB,sBAC1B5tC,GAAA,CAAC,MAAD,EAAA;AAAA,IAAQ,OAASk5B,EAAAA,OAAAA;AAAAA,IACT,KAAM,EAAA,SAAA;AAAA,IADd,QAAA,EAAA,OAAA;AAAA,GADJ,CAAA,CAAA;AAOM15B,EAAAA,MAAAA,KAAAA,uBACD,UAAD,EAAA;AAAA,IAAY,OAAS,EAAA,IAAA;AAAA,IACf,QAAA,EAAA,UAASsG,MAAOzB,CAAAA,IAAAA,CAAAA,CAAAA;AAAAA,GAF1B,CAAA,CAAA;AAKA,EAAA,4BAEK,MAAD,EAAA;AAAA,IACI,OAAA;AAAA,IACA,OAAS,EAAA;AAAA,MACL2pB,OAAOra,OAAQqa,CAAAA,KAAAA;AAAAA,KAHvB;AAAA,IAKI,QAAU,EAAA,IAAA;AAAA,IACV,MAAQ,EAAA,OAAA;AAAA,IACR,IAAA;AAAA,IAEA,QAAA,EAAA,iBAAAhuB,GAAA,CAAA,KAAA,EAAA;AAAA,MAAK,WAAW2T,OAAQw8B,CAAAA,UAAAA;AAAAA,MAEnBG,QAAAA,EAAAA,gBACD,oBAAAtwC,GAAA,CAAC,eAAD,EAAA;AAAA,QAAiB,IAAA;AAAA,QACA,UAAA;AAAA,QACA,cAAA;AAAA,QACA,aAAe,EAAA,KAAA;AAAA,QACf,qBAAA;AAAA,QACA,aAAA;AAAA,QACA,sBAAA;AAAA,QACA,KAAA;AAAA,QACA,sBAAwBswC,EAAAA,gBAAAA;AAAAA,OARzC,CAAA;AAAA,KAHJ,mBAeCtwC,GAAA,CAAA,OAAA,EAxBL,EAAA,CAAA,sBA0BK,aAAD,EAAA;AAAA,MAAA,QAAA,sBACK,MAAD,EAAA;AAAA,QAAQ,SAAU+pB,CAAU,KAAA,KAAA;AACxBA,UAAAA,KAAAA,CAAM3P,eAAN,EAAA,CAAA;AACAynB,UAAO,OAAA,EAAA,CAAA;AAAA,SAFX;AAAA,QAIQ,KAAM,EAAA,SAAA;AAAA,QACN,OAAQ,EAAA,WAAA;AAAA,QALhB,QAAA,EAAA,OAAA;AAAA,OAAA,CAAA;AAAA,KA3BR,CAAA,CAAA;AAAA,GAFJ,CAAA,CAAA;AA2CH;;ACtMoE,SAAA,kBAAA,CAAA;AAAA,EACc2O,wBAAAA;AAAAA,EACAjoC,cAAAA;AAAAA,EACAs5B,OAAAA;AAAAA,EACA9iC,IAAAA;AAAAA,EACAyJ,SAAAA;AAAAA,EACAioC,cAAAA;AAAAA,EACAC,wBAAAA;AAAAA,EACApuC,IAAAA;AAAAA,EACGquC,GAAAA,KAAAA;AAAAA,CAEiB,EAAA;AAE7FtwC,EAAAA,MAAAA,aAAa0c,aAAnB,EAAA,CAAA;AACMsd,EAAAA,MAAAA,kBAAkB9Z,qBAAxB,EAAA,CAAA;AACM,EAAA,MAAA,CAAChQ,OAAAA,EAASwD,UAAcxU,CAAAA,GAAAA,QAAAA,CAAS,KAAD,CAAA,CAAA;AAEhC,EAAA,MAAA,CAACqxC,gBAAAA,EAAkBC,uBAA2B3xC,CAAAA,GAAAA,cAAAA,CAAMK,QAA1D,EAAA,CAAA;AACM,EAAA,MAAA,CAACuxC,gBAAAA,EAAkBC,mBAAuB7xC,CAAAA,GAAAA,cAAAA,CAAMK,QAAtD,EAAA,CAAA;AACMmB,EAAAA,MAAAA,UAAU4b,iBAAhB,EAAA,CAAA;AAEMxW,EAAAA,MAAAA,MAAAA,GAASqL,QAAQ,MAAM5I,cAAAA,CAAe,EAAD,CAAA,EAAM,EAA3B,CAAA,CAAA;AAEtBrJ,EAAAA,cAAAA,CAAM2C,UAAU,MAAM;AAClB,IAAA,IAAI2uC,wBAA0B,EAAA;AAC1B,MAAMQ,MAAAA,uBAAAA,GAA0BpsC,MAAMC,OAAQ2rC,CAAAA,wBAAd,KAA2CA,wBAAyB7tC,CAAAA,MAAAA,KAAW,CACzG6tC,GAAAA,wBAAAA,CAAyB,CACzBA,CAAAA,GAAAA,wBAAAA,CAAAA;AACNK,MAAAA,uBAAAA,CAAwBG,uBAAD,CAAA,CAAA;AACvBD,MAAoBnsC,mBAAAA,CAAAA,KAAAA,CAAMC,OAAQmsC,CAAAA,uBAAd,CAAD,CAAA,CAAA;AAAA,KACtB;AAAA,GAPL,EAQG,CAACR,wBAAD,CARH,CAAA,CAAA;AAUA,EAAMS,MAAAA,YAAAA,GAAelqC,YAAY,MAAM;AACnC86B,IAAO,OAAA,EAAA,CAAA;AAAA,GACV,EAAE,CAACA,OAAD,CAF6B,CAAA,CAAA;AAI1BziB,EAAAA,MAAAA,eAAAA,GAAkBrY,WAAY,CAAA,CAACgG,MAAwB,KAAA;AACzD9B,IAAQC,OAAAA,CAAAA,KAAAA,CAAM,WAAW6B,MAAzB,CAAA,CAAA;AAAA,GAD+B,EAEhC,EAFgC,CAAA,CAAA;AAInC,EAAA,MAAMsS,eAAkBtY,GAAAA,WAAAA,CAAY,CAACgG,MAAAA,EAAqB3H,CAAa,KAAA;AACnEi1B,IAAAA,eAAAA,CAAgBt7B,IAAK,CAAA;AAAA,MACjBc,IAAM,EAAA,OAAA;AAAA,MACNL,KAAAA,EAAQ,GAAEsG,MAAOzB,CAAAA,IAAAA,CAAAA,gBAAAA,CAAAA;AAAAA,MACjB1E,SAASyF,CAAGzF,EAAAA,OAAAA;AAAAA,KAHhB,CAAA,CAAA;AAMAsL,IAAAA,OAAAA,CAAQwI,MAAM,uBAAd,CAAA,CAAA;AACAxI,IAAAA,OAAAA,CAAQwI,MAAMrO,CAAd,CAAA,CAAA;AAAA,GACD,EAAA,CAACU,MAAOzB,CAAAA,IAAR,CATgC,CAAA,CAAA;AAWnC,EAAA,MAAMib,oBAAuBvY,GAAAA,WAAAA,CAAY,CAACgG,MAAAA,EAAqB3H,CAAa,KAAA;AACxEi1B,IAAAA,eAAAA,CAAgBt7B,IAAK,CAAA;AAAA,MACjBc,IAAM,EAAA,OAAA;AAAA,MACNL,KAAAA,EAAQ,GAAEsG,MAAOzB,CAAAA,IAAAA,CAAAA,uBAAAA,CAAAA;AAAAA,MACjB1E,SAASyF,CAAGzF,EAAAA,OAAAA;AAAAA,KAHhB,CAAA,CAAA;AAKAsL,IAAAA,OAAAA,CAAQwI,MAAMrO,CAAd,CAAA,CAAA;AAAA,GACD,EAAA,CAACU,MAAOzB,CAAAA,IAAR,CAPqC,CAAA,CAAA;AASxC,EAAA,MAAMkb,wBAA2BxY,GAAAA,WAAAA,CAAY,CAACgG,MAAAA,EAAqB3H,CAAa,KAAA;AAC5Ei1B,IAAAA,eAAAA,CAAgBt7B,IAAK,CAAA;AAAA,MACjBc,IAAM,EAAA,OAAA;AAAA,MACNL,KAAAA,EAAQ,GAAEsG,MAAOzB,CAAAA,IAAAA,CAAAA,0CAAAA,CAAAA;AAAAA,MACjB1E,SAASyF,CAAGzF,EAAAA,OAAAA;AAAAA,KAHhB,CAAA,CAAA;AAKAsL,IAAAA,OAAAA,CAAQwI,MAAMrO,CAAd,CAAA,CAAA;AAAA,GACD,EAAA,CAACU,MAAOzB,CAAAA,IAAR,CAPyC,CAAA,CAAA;AAS5C,EAAA,MAAM6sC,aAAgBnqC,GAAAA,WAAAA,CAAY,CAACgG,MAAAA,KAC/BokC,yBAA0B,CAAA;AAAA,IACtB9wC,UAAAA;AAAAA,IACA0M,MAAAA;AAAAA,IACAjH,MAAAA;AAAAA,IACA0C,SAAAA;AAAAA,IACA4W,eAAAA;AAAAA,IACAC,eAAAA;AAAAA,IACAC,oBAAAA;AAAAA,IACAC,wBAAAA;AAAAA,IACA7e,OAAAA;AAAAA,GATqB,CAUrB,EAAA,CAACL,UAAYyF,EAAAA,MAAAA,EAAQ0C,SAAW4W,EAAAA,eAAAA,EAAiBC,eAAiBC,EAAAA,oBAAAA,EAAsBC,wBAA0B7e,EAAAA,OAAlH,CAXyB,CAAA,CAAA;AAajC,EAAM0wC,MAAAA,QAAAA,GAAWrqC,YAAY,YAAY;AACrC,IAAA,IAAI6pC,gBAAkB,EAAA;AAElB78B,MAAAA,UAAAA,CAAW,IAAD,CAAA,CAAA;AAEV,MAAA,IAAI+8B,gBAAkB,EAAA;AAClB7wB,QAAAA,OAAAA,CAAQG,IAAKwwB,gBAAiC3sC,CAAAA,GAAAA,CAAIitC,aAAtC,CAAZ,CAAA,CAAkEpiC,KAAMuiC,CAAY,OAAA,KAAA;AAEhFt9B,UAAAA,UAAAA,CAAW,KAAD,CAAA,CAAA;AAEV,UAAA,IAAI28B,wBAA4BE,IAAAA,gBAAAA;AAC5BF,YAAAA,wBAAAA,CAAyBpuC,MAAMsuC,gBAA/B,CAAA,CAAA;AAEJ,UAAIS,IAAAA,OAAAA,CAAQnB,KAAM7qC,CAAAA,OAAd,CAAwB,EAAA;AACxBg1B,YAAAA,eAAAA,CAAgBt7B,IAAK,CAAA;AAAA,cACjBc,IAAM,EAAA,SAAA;AAAA,cACNF,OAAAA,EAAU,GAAEmG,MAAOzB,CAAAA,IAAAA,CAAAA,kBAAAA,CAAAA;AAAAA,aAFvB,CAAA,CAAA;AAAA,WAIOgtC,MAAAA,IAAAA,OAAAA,CAAQC,IAAKjsC,CAAAA,OAAb,CAAuB,EAAA;AAC9Bg1B,YAAAA,eAAAA,CAAgBt7B,IAAK,CAAA;AAAA,cACjBc,IAAM,EAAA,SAAA;AAAA,cACNF,OAAAA,EAAU,GAAEmG,MAAOzB,CAAAA,IAAAA,CAAAA,qDAAAA,CAAAA;AAAAA,aAFvB,CAAA,CAAA;AAAA,WAIG,MAAA;AACHg2B,YAAAA,eAAAA,CAAgBt7B,IAAK,CAAA;AAAA,cACjBc,IAAM,EAAA,OAAA;AAAA,cACNF,OAAAA,EAAU,GAAEmG,MAAOzB,CAAAA,IAAAA,CAAAA,yBAAAA,CAAAA;AAAAA,aAFvB,CAAA,CAAA;AAAA,WAIH;AACDw9B,UAAO,OAAA,EAAA,CAAA;AAAA,SAvBX,CAAA,CAAA;AAAA,OA0BG,MAAA;AACHqP,QAAcN,aAAAA,CAAAA,gBAAd,CAA6C9hC,CAAAA,IAAAA,CAAMyf,CAAY,OAAA,KAAA;AAC3Dxa,UAAAA,UAAAA,CAAW,KAAD,CAAA,CAAA;AACV,UAAA,IAAIwa,OAAS,EAAA;AACT,YAAA,IAAIkiB,cAAkBG,IAAAA,gBAAAA;AAClBH,cAAAA,cAAAA,CAAenuC,MAAMsuC,gBAArB,CAAA,CAAA;AACJvW,YAAAA,eAAAA,CAAgBt7B,IAAK,CAAA;AAAA,cACjBc,IAAM,EAAA,SAAA;AAAA,cACNF,OAAAA,EAAU,GAAEmG,MAAOzB,CAAAA,IAAAA,CAAAA,QAAAA,CAAAA;AAAAA,aAFvB,CAAA,CAAA;AAIAw9B,YAAO,OAAA,EAAA,CAAA;AAAA,WACV;AAAA,SAVL,CAAA,CAAA;AAAA,OAYH;AAAA,KACJ;AAAA,GACF,EAAA,CAAC+O,gBAAkBE,EAAAA,gBAAAA,EAAkBI,aAAeR,EAAAA,wBAAAA,EAA0BpuC,IAAMu/B,EAAAA,OAAAA,EAASxH,eAAiBv0B,EAAAA,MAAAA,CAAOzB,IAAMosC,EAAAA,cAA3H,CA/CyB,CAAA,CAAA;AAkD5B,EAAI7tB,IAAAA,OAAAA,CAAAA;AACAguB,EAAAA,IAAAA,oBAAoBE,gBAAkB,EAAA;AACtCluB,IAAAA,OAAAA,uBAAU,KAAA,EAAA;AAAA,MAAA,QAAA,EAAA,mBAAA;AAAA,KAAV,CAAA,CAAA;AAAA,GACG,MAAA;AACG7V,IAAAA,MAAAA,MAAS6jC,GAAAA,gBAAAA,CAAAA;AACT3xB,IAAAA,MAAAA,iBAAiB1W,cAAe,CAAA;AAAA,MAClC7C,UAAUqH,MAAQ9D,EAAAA,EAAAA;AAAAA,MAClB9D,QAAQ4H,MAAQ5H,EAAAA,MAAAA;AAAAA,KAFiB,CAAA,CAAA;AAIrCyd,IAAU7V,OAAAA,GAAAA,MAAAA,uBACHqa,eAAD,EAAA;AAAA,MACE,MAAA;AAAA,MACA,MAAQnI,EAAAA,cAAAA;AAAAA,MACR,IAAA;AAAA,KAHF,CAAA,mBADNjf,GAAA,CAAAyZ,QAAA,EAAA,EAAA,CAAA,CAAA;AAAA,GAMH;AAED,EAAA,MAAM83B,cAAcT,gBACb,GAAA,CAAA,EAAEhrC,MAAOzB,CAAAA,IAAAA,CAAAA,0BAAAA,CAAAA,GACT,iCAAgCyB,MAAOzB,CAAAA,IAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AAE9C,EAAA,4BACK,MAAD,EAAA;AAAA,IACI,QAAS,EAAA,IAAA;AAAA,IACT,iBAAgB,EAAA,eAAA;AAAA,IAChB,IAAA;AAAA,IACA,eAAiBw9B,EAAAA,OAAAA;AAAAA,IACb8O,GAAAA,KAAAA;AAAAA,IALR,QAAA,EAAA,iBAOI3wC,GAAA,CAAC,WAAD,EAAA;AAAA,MAAa,EAAG,EAAA,qBAAA;AAAA,MACXuxC,QAAAA,EAAAA,WAAAA;AAAAA,KADL,CAAA,EAIC,CAACT,gBAAAA,wBAAqB,aAAD,EAAA;AAAA,MAAe,QAAf,EAAA,IAAA;AAAA,MACjBluB,QAAAA,EAAAA,OAAAA;AAAAA,KAZT,CAeI,kBAAA7iB,IAAA,CAAC,aAAD,EAAA;AAAA,MAEKwQ,QAAAA,EAAAA,CAAAA,OAAW,oBAAAvQ,GAAA,CAAC,gBAAD,EAAA;AAAA,QAAkB,IAAM,EAAA,EAAA;AAAA,QAAI,SAAW,EAAA,CAAA;AAAA,OAFvD,CAII,kBAAAA,GAAA,CAAC,MAAD,EAAA;AAAA,QAAQ,OAASixC,EAAAA,YAAAA;AAAAA,QACT,QAAU1gC,EAAAA,OAAAA;AAAAA,QACV,KAAM,EAAA,SAAA;AAAA,QAFd,QAAA,EAAA,QAAA;AAAA,OAJJ,CASI,kBAAAvQ,GAAA,CAAC,MAAD,EAAA;AAAA,QACI,SADJ,EAAA,IAAA;AAAA,QAEI,QAAUuQ,EAAAA,OAAAA;AAAAA,QACV,OAAS6gC,EAAAA,QAAAA;AAAAA,QACT,KAAM,EAAA,SAAA;AAAA,QAJV,QAAA,EAAA,IAAA;AAAA,OATJ,CAAA,CAAA;AAAA,KAfJ,CAAA,CAAA;AAAA,GADJ,CAAA,CAAA;AAoCH;;ACrNM,SAAA,WAAA,CAAwB1/B,IACA8/B,EAAAA,cAAAA,EACA1rC,MACAxD,EAAAA,IAAAA,EACAmvC,YAAwC,EAAA;AACnE,EAAA,MAAMhmC,aAAa3F,MAAO2F,CAAAA,UAAAA,CAAAA;AACpBimC,EAAAA,MAAAA,OAAUC,GAAAA,gBAAAA,CAAiBlmC,UAAYnJ,EAAAA,IAAAA,EAAMmvC,YAAnB,CAAA,CAAA;AAC1BG,EAAAA,MAAAA,cAAiBC,GAAAA,iBAAAA,CAAkBngC,IAAM8/B,EAAAA,cAAAA,EAAgB/lC,YAAYimC,OAAnC,CAAA,CAAA;AACxC,EAAA,MAAMI,cAAcC,aAAcL,CAAAA,OAAAA,CAAQztC,IAAI+tC,CAAKA,CAAAA,KAAAA,CAAAA,CAAE55B,KAAnB,CAAD,CAAA,CAAA;AACjC,EAAA,MAAM65B,UAAUL,cAAe3tC,CAAAA,GAAAA,CAAIX,CAASyuC,KAAAA,KAAAA,aAAAA,CAAczuC,KAAD,CAAzC,CAAA,CAAA;AAChB4uC,EAAa,YAAA,CAAA,CAACJ,aAAa,GAAGG,OAAjB,GAA4B,CAAEnsC,EAAAA,MAAAA,CAAOzB,YAAY,UAAlD,CAAA,CAAA;AACf,CAAA;AAEiCqN,SAAAA,iBAAAA,CAAAA,IAAAA,EACA8/B,cACA/lC,EAAAA,UAAAA,EACAimC,OAChC,EAAA;AAEQS,EAAAA,MAAAA,UAAAA,GAAoBzgC,IAAKzN,CAAAA,GAAAA,CAAImB,CAAM,CAAA,MAAA;AAAA,IAAE6D,IAAI7D,CAAE6D,CAAAA,EAAAA;AAAAA,IAAOmpC,GAAAA,gBAAAA,CAAiBhtC,CAAED,CAAAA,MAAAA,EAAesG,UAAlB,CAAA;AAAA,GAA9C,CAAA,CAAA,CAAA;AAC1B,EAAA,IAAI+lC,cAAgB,EAAA;AAChBA,IAAepnC,cAAAA,CAAAA,OAAAA,CAAQ,CAACioC,UAAAA,EAAYv6B,KAAU,KAAA;AAC1Cq6B,MAAAA,UAAAA,CAAWr6B,KAAS,CAAA,GAAA;AAAA,QAAA,GAAKq6B,UAAWr6B,CAAAA,KAAAA,CAAAA;AAAAA,QAAWu6B,GAAAA,UAAAA;AAAAA,OAA/C,CAAA;AAAA,KADJ,CAAA,CAAA;AAAA,GAGH;AACD,EAAOF,OAAAA,UAAAA,IAAcA,UAAWluC,CAAAA,GAAAA,CAAKX,CAAU,KAAA,KAAA;AAC3C,IAAA,OAAOouC,QAAQztC,GAAK2nB,CAAAA,CAAAA,MAAAA,KAAWnhB,eAAenH,KAAOsoB,EAAAA,MAAAA,CAAOhiB,GAAf,CAAtC,CAAA,CAAA;AAAA,GADU,CAAA,CAAA;AAGxB,CAAA;AAGD,SAAsE6B,gBAAAA,CAAAA,UAAAA,EACAnJ,MACAmvC,YAAiD,EAAA;AAC7GC,EAAAA,MAAAA,UAAU,CACZ;AAAA,IAAEt5B,KAAO,EAAA,IAAA;AAAA,IAAMxO,GAAK,EAAA,IAAA;AAAA,KACpB,GAAG1E,MAAAA,CAAOvB,QAAQ8H,UAAf,CAAA,CACExH,IAAI,CAAC,CAACquC,QAAUnnC,EAAAA,QAAAA,CAAAA,KAAconC,WAAWpnC,QAAUmnC,EAAAA,QAAAA,EAAU,EAArB,CAD1C,CAAA,CAEEE,MAJO,CAAA,CAAA;AAOZf,EAAAA,IAAAA,cAAc7pB,iBAAmB,EAAA;AACjC8pB,IAAAA,OAAAA,CAAQ7tC,IAAK,CAAA,GAAG4tC,YAAa7pB,CAAAA,iBAAAA,CAAkB3jB,IAAKgkB,CAAY,MAAA,MAAA;AAAA,MAC5D7P,OAAO6P,MAAOre,CAAAA,GAAAA;AAAAA,MACdA,KAAKqe,MAAOre,CAAAA,GAAAA;AAAAA,MAFA,CAAhB,CAAA,CAAA;AAAA,GAIH;AAED,EAAO8nC,OAAAA,OAAAA,CAAAA;AACV,CAAA;AAQD,SAAoBvmC,UAAAA,CAAAA,QAAAA,EAAoB4c,WAAqB0qB,EAAAA,MAAAA,GAAiB,EAAc,EAAA;AAClFviC,EAAAA,MAAAA,UAAauiC,GAAAA,MAAAA,GAAU,CAAEA,EAAAA,MAAAA,CAAAA,CAAAA,EAAU1qB,WAAgBA,CAAAA,CAAAA,GAAAA,WAAAA,CAAAA;AACrD5c,EAAAA,IAAAA,QAASE,CAAAA,QAAAA,KAAa,KAASF,IAAAA,QAAAA,CAASM,UAAY,EAAA;AAC7CvG,IAAAA,OAAAA,OAAOvB,OAAQwH,CAAAA,QAAAA,CAASM,UAAxB,CAAA,CACFxH,IAAI,CAAC,CAACquC,QAAUpqB,EAAAA,CAAAA,CAAAA,KAAOqqB,WAAWrqB,CAAGoqB,EAAAA,QAAAA,EAAUpiC,UAAd,CAD/B,EAEFsiC,IAFL,EAAA,CAAA;AAAA,GAGG,MAAA;AACH,IAAA,OAAO,CAAC;AAAA,MAAEp6B,KAAOlI,EAAAA,UAAAA;AAAAA,MAAYtG,GAAKsG,EAAAA,UAAAA;AAAAA,KAA3B,CAAA,CAAA;AAAA,GACV;AACJ,CAAA;AAED,SAAA,eAAA,CAAyBtD,YACAzB,QAAyB,EAAA;AAE9C,EAAIe,IAAAA,KAAAA,CAAAA;AACAf,EAAAA,IAAAA,QAASE,CAAAA,QAAAA,KAAa,KAASF,IAAAA,QAAAA,CAASM,UAAY,EAAA;AACpDS,IAAQkmC,KAAAA,GAAAA,gBAAAA,CAAiBxlC,UAAYzB,EAAAA,QAAAA,CAASM,UAA9C,CAAA,CAAA;AAAA,GACH,MAAA,IAAUN,QAASE,CAAAA,QAAAA,KAAa,OAAS,EAAA;AAClCF,IAAAA,IAAAA,QAASiC,CAAAA,EAAAA,IAAMxI,KAAMC,CAAAA,OAAAA,CAAQ+H,UAAd,CAA2B,EAAA;AAC1C,MAAIzB,IAAAA,QAAAA,CAASiC,EAAG/B,CAAAA,QAAAA,KAAa,KAAO,EAAA;AAChCa,QAAAA,KAAAA,GAAQU,WAAW3I,GAAKmB,CAAAA,CAAAA,CAAAA,KAAMyM,IAAKC,CAAAA,SAAAA,CAAU1M,CAAf,CAAtB,CAAA,CAAA;AAAA,OACL,MAAA;AACH8G,QAAAA,KAAAA,GAAQU,WAAW3I,GAAKmB,CAAAA,CAAAA,CAAAA,KAAMstC,gBAAgBttC,CAAG+F,EAAAA,QAAAA,CAASiC,GAAlD,CAAA,CAAA;AAAA,OACX;AAAA,KACE,MAAA;AACHlB,MAAQU,KAAAA,GAAAA,UAAAA,CAAAA;AAAAA,KACX;AAAA,GACJ,MAAA,IAAUzB,QAASE,CAAAA,QAAAA,KAAa,WAAa,EAAA;AACpCyV,IAAAA,MAAAA,GAAAA,GAAMlU,aAAaA,UAAgClN,GAAAA,KAAAA,CAAAA,CAAAA;AACzDwM,IAAQ4U,KAAAA,GAAAA,GAAAA,GAAMA,IAAI3X,UAAa,GAAA,IAAA,CAAA;AAAA,GAClC,MAAA,IAAUgC,QAASE,CAAAA,QAAAA,KAAa,WAAa,EAAA;AAC1Ca,IAAQU,KAAAA,GAAAA,UAAAA,GAAaA,UAAW+lC,CAAAA,OAAAA,EAAY,GAAA,IAAA,CAAA;AAAA,GACzC,MAAA;AACHzmC,IAAQU,KAAAA,GAAAA,UAAAA,CAAAA;AAAAA,GACX;AAED,EAAOV,OAAAA,KAAAA,CAAAA;AACV,CAAA;AAED,SAAA,gBAAA,CACCI,aAAmCb,UAAiD,EAAA;AACjF,EAAMwB,MAAAA,aAAAA,GAAgB/H,OAAOvB,OAAQ8H,CAAAA,UAAf,EACjBxH,GAAI,CAAA,CAAC,CAAC2F,GAAAA,EAAKuB,QAAc,CAAA,KAAA;AAChByB,IAAAA,MAAAA,UAAAA,GAAaN,eAAgBA,WAAoB1C,CAAAA,GAAAA,CAAAA,CAAAA;AACjDsD,IAAAA,MAAAA,YAAAA,GAAewlC,eAAgB9lC,CAAAA,UAAAA,EAAYzB,QAAjD,CAAA,CAAA;AACA,IAAA,IAAI+B,YAAiBxN,KAAAA,KAAAA,CAAAA;AAAW,MAAA,OAAO,EAAP,CAAA;AACxB,IAAA,OAAA;AAAA,MAAA,CAAGkK,GAAMsD,GAAAA,YAAAA;AAAAA,KAAjB,CAAA;AAAA,GALc,CAAA,CAOjBxD,MAAO,CAAA,CAACoC,GAAGC,CAAO,MAAA;AAAA,IAAKD,GAAAA,CAAAA;AAAAA,IAAMC,GAAAA,CAAAA;AAAAA,GAAtB,CAAA,EAA4B,EAPlB,CAAA,CAAA;AAQf,EAAA,OAAA;AAAA,IAAKO,GAAAA,WAAAA;AAAAA,IAAgBW,GAAAA,aAAAA;AAAAA,GAA5B,CAAA;AACH,CAAA;AAED,SAAA,aAAA,CAAuB3J,KAAc,EAAA;AAC1BA,EAAAA,OAAAA,KAAAA,CACFW,GAAI,CAAA,CAACyG,CAA0B,KAAA;AACxBA,IAAAA,IAAAA,CAAAA,KAAM,QAAQA,CAAMhL,KAAAA,KAAAA,CAAAA;AAAW,MAAO,OAAA,EAAA,CAAA;AAC1C,IAAMsC,MAAAA,CAAAA,GAAI4wC,OAAOloC,CAAD,CAAA,CAAA;AACT,IAAA,OAAA,GAAM1I,GAAAA,CAAAA,CAAE6wC,UAAW,CAAA,GAAA,EAAK,IAAlB,CAA0B,GAAA,GAAA,CAAA;AAAA,GAJxC,CAAA,CAMFnvC,IAAK,CAAA,GANH,CAMU,GAAA,MAAA,CAAA;AACpB,CAAA;AAE4Bkf,SAAAA,YAAAA,CAAAA,OAAAA,EAAqBkwB,UAAkBC,WAAqB,EAAA;AACrF,EAAMC,MAAAA,IAAAA,GAAO,IAAIC,IAAAA,CAAKrwB,OAAS,EAAA;AAAA,IAAE/iB,IAAMkzC,EAAAA,WAAAA;AAAAA,GAA1B,CAAA,CAAA;AACb,EAAM5uC,MAAAA,GAAAA,GAAM+uC,GAAIC,CAAAA,eAAAA,CAAgBH,IAApB,CAAA,CAAA;AACZ,EAAMI,MAAAA,GAAAA,GAAMjX,QAASzV,CAAAA,aAAAA,CAAc,GAAvB,CAAA,CAAA;AACZ0sB,EAAAA,GAAAA,CAAIC,IAAOlvC,GAAAA,GAAAA,CAAAA;AACXivC,EAAIE,GAAAA,CAAAA,YAAAA,CAAa,YAAYR,QAA7B,CAAA,CAAA;AACAM,EAAAA,GAAAA,CAAIG,KAAJ,EAAA,CAAA;AACH;;AC9GD,MAAMC,uBAA0B,GAAA,GAAA,CAAA;AAEyC,SAAA,YAAA,CAAA;AAAA,EACI1tC,MAAAA;AAAAA,EACAyC,cAAAA;AAAAA,EACAjG,IAAAA;AAAAA,EACAmvC,YAAAA;AAAAA,CAE3E,EAAA;AAEQpxC,EAAAA,MAAAA,aAAa0c,aAAnB,EAAA,CAAA;AACMrc,EAAAA,MAAAA,UAAU4b,iBAAhB,EAAA,CAAA;AAEMm3B,EAAAA,MAAAA,UAAUjtC,MAAhB,EAAA,CAAA;AACMktC,EAAAA,MAAAA,oBAAoBltC,MAA1B,EAAA,CAAA;AAEA,EAAA,MAAM,CAAC0W,WAAAA,EAAaC,cAAkBje,CAAAA,GAAAA,cAAAA,CAAMK,SAAkB,KAAxB,CAAA,CAAA;AACtC,EAAA,MAAM,CAAC6d,gBAAAA,EAAkBC,mBAAuBne,CAAAA,GAAAA,cAAAA,CAAMK,QAAN,EAAA,CAAA;AAGhD,EAAA,MAAM,CAACo0C,oBAAAA,EAAsBC,uBAA2B10C,CAAAA,GAAAA,cAAAA,CAAMK,SAAkB,KAAxB,CAAA,CAAA;AAGxD,EAAA,MAAM,CAACs0C,sBAAAA,EAAwBC,yBAA6B50C,CAAAA,GAAAA,cAAAA,CAAMK,SAAkB,KAAxB,CAAA,CAAA;AAEtD,EAAA,MAAA,CAACR,IAAAA,EAAM01B,OAAWv1B,CAAAA,GAAAA,cAAAA,CAAMK,SAAS,KAAf,CAAA,CAAA;AAExB,EAAMmiC,MAAAA,eAAAA,GAAkB36B,YAAY,MAAM;AACtC0tB,IAAAA,OAAAA,CAAQ,IAAD,CAAA,CAAA;AAAA,GACV,EAAE,CAACA,OAAD,CAFgC,CAAA,CAAA;AAInC,EAAME,MAAAA,WAAAA,GAAc5tB,YAAY,MAAM;AAClC0tB,IAAAA,OAAAA,CAAQ,KAAD,CAAA,CAAA;AAAA,GACV,EAAE,CAACA,OAAD,CAF4B,CAAA,CAAA;AAIzBsf,EAAAA,MAAAA,UAAAA,GAAahtC,YAAY,CAAC2K,IAAAA,EACA8/B,gBACA1rC,OACAyC,EAAAA,eAAAA,EACAjG,OACAmvC,aAA2C,KAAA;AACvE,IAAA,IAAI,CAAC//B,IAAAA;AACD,MAAA,MAAM9O,MAAM,qDAAD,CAAA,CAAA;AAEf,IAAMqc,MAAAA,cAAAA,GAAiB1W,eAAe,CAAA,EAAD,CAAA,CAAA;AACrCyrC,IAAAA,WAAAA,CAAYtiC,IAAM8/B,EAAAA,cAAAA,EAAgBvyB,cAAgB3c,EAAAA,KAAAA,EAAMmvC,aAA7C,CAAA,CAAA;AAAA,GAVe,EAW3B,EAX2B,CAAA,CAAA;AAa9B5vC,EAAAA,SAAAA,CAAU,MAAM;AAER,IAAA,IAAA,CAAC9C,IAAAA;AAAM,MAAA,OAAA;AAEXoe,IAAAA,cAAAA,CAAe,IAAD,CAAA,CAAA;AAER82B,IAAAA,MAAAA,cAAAA,GAAiB,OAAOx2B,QAA0B,KAAA;AACpD,MAAIA,IAAAA,QAAAA,CAAS9a,UAAU6wC,uBAAyB,EAAA;AAC5CI,QAAAA,uBAAAA,CAAwB,IAAD,CAAA,CAAA;AAAA,OAC1B;AAED,MAAA,MAAMM,kBAAkBT,OAAQrsC,CAAAA,OAAAA,IAAWqW,SAAS9a,MAAS8wC,GAAAA,OAAAA,CAAQrsC,QAAQzE,MAAUkxC,IAAAA,sBAAAA,CAAAA;AAEvFJ,MAAAA,OAAAA,CAAQrsC,OAAUqW,GAAAA,QAAAA,CAAAA;AAClB,MAAM02B,MAAAA,qBAAAA,GAAwB,MAAMC,sBAAAA,CAAuB32B,QAAD,CAAA,CAAA;AAC1Di2B,MAAAA,iBAAAA,CAAkBtsC,OAAU+sC,GAAAA,qBAAAA,CAAAA;AAC5Bh3B,MAAAA,cAAAA,CAAe,KAAD,CAAA,CAAA;AACdE,MAAAA,mBAAAA,CAAoB3d,KAAD,CAAA,CAAA,CAAA;AAEnB,MAAA,IAAIw0C,eAAiB,EAAA;AACjBH,QAAAA,UAAAA,CAAWt2B,QAAU02B,EAAAA,qBAAAA,EAAuBruC,MAAQyC,EAAAA,cAAAA,EAAgBjG,MAAMmvC,YAAhE,CAAA,CAAA;AACV9c,QAAW,WAAA,EAAA,CAAA;AAAA,OACd;AAAA,KAhBL,CAAA;AAmBMyf,IAAAA,MAAAA,sBAAAA,GAAyB,OAAO32B,QAA0B,KAAA;AAE5D,MAAI,IAAA,CAACg0B,cAAc7pB,iBAAmB,EAAA;AAClC,QAAA,OAAA;AAAA,OACH;AAED,MAAA,MAAMA,oBAAoB6pB,YAAa7pB,CAAAA,iBAAAA,CAAAA;AAEjCysB,MAAAA,MAAAA,wBAA+C,MAAMp0B,OAAAA,CAAQG,IAAI3C,QAASxZ,CAAAA,GAAAA,CAAI,OAAO8I,MAAW,KAAA;AAClG,QAAA,OAAQ,OAAMkT,OAAQG,CAAAA,GAAAA,CAAIwH,iBAAkB3jB,CAAAA,GAAAA,CAAI,OAAOgkB,MAAW,KAAA;AACvD,UAAA,OAAA;AAAA,YAAA,CACFA,MAAOre,CAAAA,GAAAA,GAAM,MAAMqe,MAAAA,CAAOnU,OAAQ,CAAA;AAAA,cAC/B/G,MAAAA;AAAAA,cACArM,OAAAA;AAAAA,aAFgB,CAAA;AAAA,WADxB,CAAA;AAAA,SADsB,CAAZ,CAAA,EAOTgJ,MAAO,CAAA,CAACoC,GAAGC,CAAO,MAAA;AAAA,UAAKD,GAAAA,CAAAA;AAAAA,UAAMC,GAAAA,CAAAA;AAAAA,SAAtB,CAAA,EAA4B,EAPjC,CAAA,CAAA;AAAA,OAD4D,CAAZ,CAAA,CAAA;AAU3D,MAAOsoC,OAAAA,qBAAAA,CAAAA;AAAAA,KAlBX,CAAA;AAqBA,IAAMC,MAAAA,YAAAA,GAAe,CAAC7gC,KAAiB,KAAA;AACnCxI,MAAQwI,OAAAA,CAAAA,KAAAA,CAAM,SAASA,KAAvB,CAAA,CAAA;AACA0J,MAAAA,cAAAA,CAAe,KAAD,CAAA,CAAA;AACdE,MAAAA,mBAAAA,CAAoB5J,KAAD,CAAA,CAAA;AAAA,KAHvB,CAAA;AAMApT,IAAAA,UAAAA,CAAW+d,eAAmB,CAAA;AAAA,MAC1B9b,IAAAA;AAAAA,MACAwD,MAAQyC,EAAAA,cAAAA;AAAAA,MACRyV,KAAAA,EAAO61B,yBAAyBn0C,KAAY8zC,CAAAA,GAAAA,uBAAAA;AAAAA,KAHhD,CAKK1kC,CAAAA,IAAAA,CAAKmlC,cALV,CAAA,CAMKllC,MAAMulC,YANX,CAAA,CAAA;AAAA,GAQD,EAAA,CAAChyC,IAAMuxC,EAAAA,sBAAAA,EAAwB/tC,MAAQ/G,EAAAA,IAAAA,EAAMsB,UAAYkI,EAAAA,cAAAA,EAAgBwrC,UAAYtC,EAAAA,YAAAA,EAAc9c,WAAaj0B,EAAAA,OAAhH,CA5DM,CAAA,CAAA;AA8DT,EAAM6zC,MAAAA,yBAAAA,GAA4BZ,wBAAwB,CAACE,sBAAAA,CAAAA;AAE3D,EAAMW,MAAAA,WAAAA,GAAcztC,YAAY,MAAM;AAClC,IAAA,IAAIwtC,yBAA2B,EAAA;AAC3BT,MAAAA,yBAAAA,CAA0B,IAAD,CAAA,CAAA;AAAA,KACtB,MAAA;AACHC,MAAAA,UAAAA,CAAWN,QAAQrsC,OAASssC,EAAAA,iBAAAA,CAAkBtsC,SAAStB,MAAQyC,EAAAA,cAAAA,EAAgBjG,MAAMmvC,YAA3E,CAAA,CAAA;AACV9c,MAAW,WAAA,EAAA,CAAA;AAAA,KACd;AAAA,GACJ,EAAE,CAAC4f,yBAA2BR,EAAAA,UAAAA,EAAYjuC,QAAQyC,cAAgBjG,EAAAA,IAAAA,EAAMmvC,YAAc9c,EAAAA,WAApF,CAP4B,CAAA,CAAA;AASxB,EAAA,4BAAAlb,QAAA,EAAA;AAAA,IAAA,QAAA,EAAA,iBAEHzZ,GAAA,CAAC,OAAD,EAAA;AAAA,MAAS,KAAO,EAAA,QAAA;AAAA,MAAhB,QAAA,sBACK,UAAD,EAAA;AAAA,QAAY,KAAO,EAAA,SAAA;AAAA,QAAW,OAAS0hC,EAAAA,eAAAA;AAAAA,QAC3B,IAAK,EAAA,OAAA;AAAA,QADjB,QAEI,kBAAA1hC,GAAA,CAAC,MAAD,EAAA,EAAA,CAAA;AAAA,OAFJ,CAAA;AAAA,KAHD,CASH,kBAAAD,IAAA,CAAC,MAAD,EAAA;AAAA,MACI,IAAA;AAAA,MACA,OAAS40B,EAAAA,WAAAA;AAAAA,MAFb,QAAA,EAAA,iBAII30B,GAAA,CAAC,WAAD,EAAA;AAAA,QAAA,QAAA,EAAA,aAAA;AAAA,OAJJ,CAMI,kBAAAA,GAAA,CAAC,aAAD,EAAA;AAAA,QAAA,QAAA,uBACK,iBAAD,EAAA;AAAA,UAEI,QAAA,EAAA,iBAAAA,GAAA,CAAA,KAAA,EAAA;AAAA,YAAA,QAAA,EAAA,iDAAA;AAAA,WAAA,mBAFJA,GAAA,CAAA,IAAA,EAAA,EAAA,CAAA,EAMKu0C,yBACD,oBAAAx0C,IAAA,CAAC,KAAD,EAAA;AAAA,YAAO,SAAW,EAAA,CAAA;AAAA,YACR,OAAQ,EAAA,QAAA;AAAA,YACR,QAAU,EAAA,SAAA;AAAA,YAChB,QAAA,EAAA,iBAAAA,IAAA,CAAA,KAAA,EAAA;AAAA,cAAA,QAAA,EAAA,CAAA,8DAE6ByzC,EAAAA,uBAAAA,EAF7B,IAAA,CAAA;AAAA,aAAA,CAIA,kBAAAxzC,GAAA,CAAA,KAAA,EAAA;AAAA,cAAA,QAAA,EAAA,4BAAA;AAAA,aAPJ,CAAA,CAAA;AAAA,WAPJ,CAAA,CAAA;AAAA,SAAA,CAAA;AAAA,OAPR,CA8BI,kBAAAD,IAAA,CAAC,aAAD,EAAA;AAAA,QAEKmd,QAAAA,EAAAA,CAAAA,WAAe,oBAAAld,GAAA,CAAC,gBAAD,EAAA;AAAA,UAAkB,IAAM,EAAA,EAAA;AAAA,UAAI,SAAW,EAAA,CAAA;AAAA,SAF3D,CAII,kBAAAA,GAAA,CAAC,MAAD,EAAA;AAAA,UAAQ,KAAM,EAAA,SAAA;AAAA,UAAU,OAAS20B,EAAAA,WAAAA;AAAAA,UAAjC,QAAA,EAAA,QAAA;AAAA,SAJJ,CAQI,kBAAA30B,GAAA,CAAC,MAAD,EAAA;AAAA,UAAQ,KAAM,EAAA,SAAA;AAAA,UACN,QAAUkd,EAAAA,WAAAA;AAAAA,UACV,OAASs3B,EAAAA,WAAAA;AAAAA,UAFjB,QAAA,EAAA,UAAA;AAAA,SARJ,CAAA,CAAA;AAAA,OA9BJ,CAAA,CAAA;AAAA,KATG,CAAA,CAAA;AAAA,GAAP,CAAA,CAAA;AA0DH;;AC1MD,MAAMC,mBAAsB,GAAA;AAAA,EACxBC,IAAM,EAAA,IAAA;AAAA,EACNrrB,MAAQ,EAAA,IAAA;AAAA,EACRsrB,MAAQ,EAAA,IAAA;AAHgB,CAAA,CAAA;AAM5B,SAAA,0BAAA,CACCC,UACA7nC,EAAAA,MAAAA,EACAxM,cACA+B,EAAAA,IAAAA,EACA5B,OAAgD,EAAA;AAEzCk0C,EAAAA,IAAAA,eAAel1C,KAAW,CAAA,EAAA;AAC1B,IAAO+0C,OAAAA,mBAAAA,CAAAA;AAAAA,GACV,MAAA,IAAU,OAAOG,UAAAA,KAAe,QAAU,EAAA;AAChCA,IAAAA,OAAAA,UAAAA,CAAAA;AAAAA,GACV,MAAA,IAAU,OAAOA,UAAAA,KAAe,UAAY,EAAA;AACzC,IAAA,OAAOA,UAAW,CAAA;AAAA,MACd/lC,MAAMtO,cAAesO,CAAAA,IAAAA;AAAAA,MACrBtO,cAAAA;AAAAA,MACAwM,MAAAA;AAAAA,MACAzK,IAAAA;AAAAA,MACA5B,OAAAA;AAAAA,KALa,CAAA,CAAA;AAAA,GAOpB;AAEKkC,EAAAA,MAAAA,MAAM,gDAAD,CAAA,CAAA;AACd,CAAA;AAEM,SAAA,OAAA,CACNgyC,UACA7nC,EAAAA,MAAAA,EACAxM,cACA+B,EAAAA,IAAAA,EACA5B,OAA4C,EAAA;AACzC,EAAOm0C,OAAAA,0BAAAA,CAA2BD,YAAY7nC,MAAQxM,EAAAA,cAAAA,EAAgB+B,MAAM5B,OAA3C,CAAA,CAAoDg0C,QAAQD,mBAAoBC,CAAAA,IAAAA,CAAAA;AACpH,CAAA;AAGAE,SAAAA,SAAAA,CAAAA,UAAAA,EACAr0C,cACA+B,EAAAA,IAAAA,EACA5B,OAA4C,EAAA;AACzC,EAAOm0C,OAAAA,0BAAAA,CAA2BD,YAAY,IAAMr0C,EAAAA,cAAAA,EAAgB+B,MAAM5B,OAAzC,CAAA,CAAkD2oB,UAAUorB,mBAAoBprB,CAAAA,MAAAA,CAAAA;AACpH,CAAA;AAEM,SAAA,SAAA,CACNurB,UACA7nC,EAAAA,MAAAA,EACAxM,cACA+B,EAAAA,IAAAA,EACA5B,OAA4C,EAAA;AACzC,EAAOm0C,OAAAA,0BAAAA,CAA2BD,YAAY7nC,MAAQxM,EAAAA,cAAAA,EAAgB+B,MAAM5B,OAA3C,CAAA,CAAoDi0C,UAAUF,mBAAoBE,CAAAA,MAAAA,CAAAA;AACtH;;ACRM,SAAA,sBAAA,CAAyCzwC,UAAuC,EAAA;AAEnF,EAAA,MAAM,CAACosC,gBAAAA,EAAkBC,mBAAuBhxC,CAAAA,GAAAA,QAAAA,CAAsB,EAAd,CAAA,CAAA;AACpDu1C,EAAAA,IAAAA,iBAAiBzF,kBAAmB,CAAA;AAAA,IACpC/sC,MAAM4B,UAAW5B,CAAAA,IAAAA;AAAAA,IACjBiG,gBAAgBrE,UAAWqE,CAAAA,cAAAA;AAAAA,GAFQ,CAAA,CAAA;AAKvCusC,EAAAA,cAAAA,GAAiBzF,kBAAmB,CAAA;AAAA,IAChC/sC,MAAM4B,UAAW5B,CAAAA,IAAAA;AAAAA,IACjBiG,gBAAgBrE,UAAWqE,CAAAA,cAAAA;AAAAA,GAFI,CAAA,CAAA;AAK7BqkB,EAAAA,MAAAA,qBAAAA,GAAwB7lB,WAAY,CAAA,CAACgG,MAAsB,KAAA;AAC7D,IAAIsnB,IAAAA,QAAAA,CAAAA;AACJ,IAAIic,IAAAA,gBAAAA,CAAiBrsC,IAAImB,CAAKA,CAAAA,KAAAA,CAAAA,CAAE6D,EAA5B,CAAgCsB,CAAAA,QAAAA,CAASwC,MAAO9D,CAAAA,EAAhD,CAAqD,EAAA;AACrDorB,MAAAA,QAAAA,GAAWic,iBAAiBxrC,MAAO,CAAA,CAAC+E,SAAoBA,IAAKZ,CAAAA,EAAAA,KAAO8D,OAAO9D,EAAhE,CAAA,CAAA;AAAA,KACR,MAAA;AACHorB,MAAW,QAAA,GAAA,CAAC,GAAGic,gBAAAA,EAAkBvjC,MAAtB,CAAA,CAAA;AAAA,KACd;AACDwjC,IAAAA,mBAAAA,CAAoBlc,QAAD,CAAA,CAAA;AAAA,GACtB,EAAE,CAACic,gBAAD,CARsC,CAAA,CAAA;AAUnCzjB,EAAAA,MAAAA,SAAAA,GAAY9lB,WAAY,CAAA,CAACguC,CAAW,KAAA;AACtC,IAAA,IAAKzE,iBAAiB3tC,MAAWmyC,KAAAA,cAAAA,CAAepjC,KAAK/O,MAAW2tC,IAAAA,gBAAAA,CAAiB3tC,WAAW,CAAG,EAAA;AAC3F4tC,MAAAA,mBAAAA,CAAoB,EAAD,CAAA,CAAA;AAAA,KAChB,MAAA;AACCuE,MAAAA,IAAAA,eAAepjC,IAAM,EAAA;AACrB,QAAA,MAAMsjC,OAAYF,cAAepjC,CAAAA,IAAAA,CAAAA;AACjC6+B,QAAAA,mBAAAA,CAAoByE,IAAD,CAAA,CAAA;AAAA,OACtB;AAAA,KACJ;AAAA,GACJ,EAAE,CAAC1E,gBAAD,CAT0B,CAAA,CAAA;AAW7B,EAAA,MAAM2E,mBAAmBluC,WAAY,CAAA,CAACgG,MAAsBujC,KAAAA,gBAAAA,CAAiBrsC,IAAImB,CAAKA,CAAAA,KAAAA,CAAAA,CAAE6D,EAA5B,CAAA,CAAgCsB,SAASwC,MAAO9D,CAAAA,EAAhD,CAAqD,EAAA,CAACqnC,gBAAD,CAA7E,CAAA,CAAA;AAC9B4E,EAAAA,MAAAA,qBAAwBnuC,GAAAA,WAAAA,CAAY,MAAOupC,gBAAAA,CAAiB3tC,WAAWmyC,cAAepjC,CAAAA,IAAAA,CAAK/O,MAAW2tC,IAAAA,gBAAAA,CAAiB3tC,MAAW,KAAA,CAAA,EAAG,CAAC2tC,gBAAAA,EAAkBwE,cAAnB,CAAlG,CAAA,CAAA;AAElC,EAAA,OAAA;AAAA,IACHxE,gBAAAA;AAAAA,IACAC,mBAAAA;AAAAA,IACA0E,gBAAAA;AAAAA,IACAC,qBAAAA;AAAAA,IACAtoB,qBAAAA;AAAAA,IACAC,SAAAA;AAAAA,GANJ,CAAA;AAQH,CAAA;AA0BsE,SAAAsoB,sBAAA,CAAA;AAAA,EACI7yC,IAAAA;AAAAA,EACA4B,UAAYuL,EAAAA,cAAAA;AAAAA,CAErF,EAAA;AAEQtP,EAAAA,MAAAA,uBAAuB4kB,uBAA7B,EAAA,CAAA;AACMrkB,EAAAA,MAAAA,UAAU4b,iBAAhB,EAAA,CAAA;AACM/b,EAAAA,MAAAA,iBAAiB0rC,iBAAvB,EAAA,CAAA;AACM7rC,EAAAA,MAAAA,oBAAoB0kB,aAA1B,EAAA,CAAA;AAEM/R,EAAAA,MAAAA,QAAQ0X,QAAd,EAAA,CAAA;AACA,EAAA,MAAMC,cAAclpB,aAAcuR,CAAAA,KAAAA,CAAM8V,WAAYC,CAAAA,EAAAA,CAAG,IAArB,CAAD,CAAA,CAAA;AAE3B,EAAA,MAAA,CAACssB,mBAAAA,EAAqBC,sBAA0Bn2C,CAAAA,GAAAA,cAAAA,CAAMK,SAA8CG,KAApD,CAAA,CAAA,CAAA;AAChDslB,EAAAA,MAAAA,kBAAAA,GAAqB5kB,iBAAkBoP,CAAAA,qBAAAA,CAAyBlN,IAA3C,CAAA,CAAA;AACvB,EAAA,IAAA,CAAC0iB,kBAAoB,EAAA;AACrB,IAAMpiB,MAAAA,KAAAA,CAAO,iEAAgEN,IAAlE,CAAA,CAAA,CAAA,CAAA;AAAA,GACd;AAEK6N,EAAAA,MAAAA,2BAAAA,GAA8BpJ,WAAY,CAAA,CAACqJ,iBAAoD,KAAA;AACjGhQ,IAAkB+P,iBAAAA,CAAAA,2BAAAA,CAA4B7N,MAAM8N,iBAApD,CAAA,CAAA;AAAA,GACH,EAAE,CAAC9N,IAAD,CAF4C,CAAA,CAAA;AAIzC4B,EAAAA,MAAAA,aAAkC8gB,kBAAsBvV,IAAAA,cAAAA,CAAAA;AAExD,EAAA,MAAA;AAAA,IAAElH,cAAAA;AAAAA,GAAmByc,GAAAA,kBAAAA,CAAAA;AAErBswB,EAAAA,MAAAA,UAAapxC,GAAAA,UAAAA,CAAWoxC,UAAe51C,KAAAA,KAAAA,CAAAA,IAAawE,UAAWoxC,CAAAA,UAAAA,CAAAA;AAE/D3oB,EAAAA,MAAAA,gBAAmBzoB,GAAAA,UAAAA,CAAWyoB,gBAAqBjtB,KAAAA,KAAAA,CAAAA,IAAawE,UAAWyoB,CAAAA,gBAAAA,CAAAA;AAC3EqhB,EAAAA,MAAAA,QAAW9pC,GAAAA,UAAAA,CAAW8mC,aAAkBtrC,KAAAA,KAAAA,CAAAA,IAAa,CAACwE,UAAW8mC,CAAAA,aAAAA,CAAAA;AAEvE,EAAA,MAAM,CAAC7d,QAAAA,EAAUC,WAAeluB,CAAAA,GAAAA,cAAAA,CAAMK,SAA6B,IAAnC,CAAA,CAAA;AAEhC,EAAMg2C,MAAAA,mBAAAA,GAAsBC,uBAA0BtxC,UAAJ,CAAA,CAAA;AAClD,EAAMuxC,MAAAA,uBAAAA,GAA0BvxC,WAAWqxC,mBAAuBA,IAAAA,mBAAAA,CAAAA;AAC5D,EAAA,MAAA;AAAA,IACFjF,gBAAAA;AAAAA,IACA1jB,qBAAAA;AAAAA,IACAC,SAAAA;AAAAA,IACAqoB,qBAAAA;AAAAA,IACAD,gBAAAA;AAAAA,IACA1E,mBAAAA;AAAAA,IACAuE,cAAAA;AAAAA,GACAW,GAAAA,uBAAAA,CAAAA;AAEJ5zC,EAAAA,SAAAA,CAAU,MAAM;AACZwzC,IAAAA,sBAAAA,CAAuB31C,KAAD,CAAA,CAAA,CAAA;AAAA,GACzB,EAAE,CAAC4wC,gBAAD,CAFM,CAAA,CAAA;AAIHxC,EAAAA,MAAAA,aAAAA,GAAgB/mC,WAAY,CAAA,CAACgG,MAAsB,KAAA;AAC9C5M,IAAAA,OAAAA,qBAAqBpB,IAAK,CAAA;AAAA,MAC7B2G,UAAUqH,MAAO9D,CAAAA,EAAAA;AAAAA,MACjB3G,IAAAA;AAAAA,MACA4F,aAAahE,UAAWgE,CAAAA,WAAAA;AAAAA,MACxBpC,QAAQ5B,UAAW4B,CAAAA,MAAAA;AAAAA,MACnBvC,gBAAgBW,UAAWX,CAAAA,cAAAA;AAAAA,MAC3BiF,WAAWtE,UAAWsE,CAAAA,SAAAA;AAAAA,MACtBJ,sBAAwB,EAAA,KAAA;AAAA,KAPrB,CAAA,CAAA;AAAA,GASR,EAAA,CAAC9F,IAAM4B,EAAAA,UAAAA,EAAY/D,oBAAnB,CAV8B,CAAA,CAAA;AAY3Bu1C,EAAAA,MAAAA,UAAAA,GAAa3uC,WAAY,CAAA,CAAC3B,CAAwB,KAAA;AACpDA,IAAAA,CAAAA,CAAEgV,eAAF,EAAA,CAAA;AACOja,IAAAA,OAAAA,qBAAqBpB,IAAK,CAAA;AAAA,MAC7BuD,IAAAA;AAAAA,MACA4F,aAAahE,UAAWgE,CAAAA,WAAAA;AAAAA,MACxBpC,QAAQ5B,UAAW4B,CAAAA,MAAAA;AAAAA,MACnBvC,gBAAgBW,UAAWX,CAAAA,cAAAA;AAAAA,MAC3BiF,WAAWtE,UAAWsE,CAAAA,SAAAA;AAAAA,MACtBJ,sBAAwB,EAAA,KAAA;AAAA,KANrB,CAAA,CAAA;AAAA,GAQR,EAAA,CAAC9F,IAAM4B,EAAAA,UAAAA,EAAY/D,oBAAnB,CAV2B,CAAA,CAAA;AAY9B,EAAA,MAAMw1C,sBAAyB5uC,GAAAA,WAAAA,CAAY,CAAC6uC,KAAAA,EAAe7oC,MAAsB,KAAA;AAC7EwjC,IAAAA,mBAAAA,CAAoBD,iBAAiBxrC,MAAQM,CAAAA,CAAAA,CAAAA,KAAMA,EAAE6D,EAAO8D,KAAAA,MAAAA,CAAO9D,EAA/C,CAAD,CAAA,CAAA;AAAA,GACpB,EAAA,CAACqnC,gBAAkBC,EAAAA,mBAAnB,CAFuC,CAAA,CAAA;AAI1C,EAAA,MAAMsF,gCAAmC9uC,GAAAA,WAAAA,CAAY,CAAC6uC,KAAAA,EAAen4B,QAA0B,KAAA;AAC3F8yB,IAAAA,mBAAAA,CAAoB,EAAD,CAAA,CAAA;AACnB8E,IAAAA,sBAAAA,CAAuB31C,KAAD,CAAA,CAAA,CAAA;AAAA,GACzB,EAAE,CAAC6wC,mBAAD,CAHiD,CAAA,CAAA;AAK9C3D,EAAAA,MAAAA,kBAAAA,GAAqB7lC,WAAY,CAAA,CAACgG,MAAwB,KAAA;AAC5D,IAAI,IAAA,CAAC+oC,QAAQ5xC,UAAWgE,CAAAA,WAAAA,EAAa6E,QAAQxM,cAAgB+B,EAAAA,IAAAA,EAAM5B,OAAvD,CAAiE,EAAA;AACzE,MAAO,OAAA,KAAA,CAAA;AAAA,KACV;AACMwD,IAAAA,OAAAA,UAAAA,CAAW8mC,aAAkBtrC,KAAAA,KAAAA,CAAAA,IAAawE,UAAW8mC,CAAAA,aAAAA,CAAAA;AAAAA,KAC7D,CAAC9mC,UAAAA,CAAW8mC,eAAe9mC,UAAWgE,CAAAA,WAAAA,EAAa5F,IAAnD,CALmC,CAAA,CAAA;AAOtC,EAAMyrC,MAAAA,cAAAA,GAAiBhnC,YAAY,CAAC;AAAA,IACIiB,KAAAA;AAAAA,IACA4B,GAAAA;AAAAA,GACwB,KAAA;AAExD,IAAA,IAAA,CAAC1F,UAAW4B,CAAAA,MAAAA,CAAO2F,UAAW7B,CAAAA,GAAAA,CAAAA;AAAM,MAAA,OAAA;AACxC,IAAA,MAAMuB,QAAiC,GAAA;AAAA,MAAEmc,WAAatf,EAAAA,KAAAA;AAAAA,KAAtD,CAAA;AACA,IAAA,MAAM+tC,aAA8C,GAAA;AAAA,MAAEjwC,MAAQ,EAAA;AAAA,QAAE2F,UAAY,EAAA;AAAA,UAAA,CAAG7B,GAAiBuB,GAAAA,QAAAA;AAAAA,SAApB;AAAA,OAAd;AAAA,KAA9D,CAAA;AACA,IAAIgF,IAAAA,2BAAAA;AACAA,MAAAA,2BAAAA,CAA4B4lC,aAAD,CAAA,CAAA;AAAA,KAChC,CAAC7xC,UAAAA,CAAW4B,MAAO2F,CAAAA,UAAAA,EAAY0E,2BAA/B,CAV+B,CAAA,CAAA;AAY5B8a,EAAAA,MAAAA,aAAAA,GAAgBlkB,WAAY,CAAA,CAACuS,IAAyB,KAAA;AACpDnJ,IAAAA,IAAAA,2BAAAA;AACAA,MAA4B,2BAAA,CAAA;AAAA,QAAE6lC,WAAa,EAAA,IAAA;AAAA,OAAhB,CAAA,CAAA;AAAA,GAClC,EAAE,CAAC7lC,2BAAD,CAH8B,CAAA,CAAA;AAKjC,EAAA,MAAMpR,OAAOouB,QAAY,IAAA,IAAA,CAAA;AACzB,EAAA,MAAM3tB,KAAQ2R,GAAAA,OAAAA,CAAQ,sBAClBpR,IAAA,CAAA,KAAA,EAAA;AAAA,IAAK,KAAO,EAAA;AAAA,MACRkmB,OAAS,EAAA,KAAA;AAAA,KADb;AAAA,IAAA,QAAA,EAAA,iBAIIjmB,GAAA,CAAC,UAAD,EAAA;AAAA,MACI,OAAQ,EAAA,IAAA;AAAA,MACR,KAAO,EAAA;AAAA,QACHka,UAAY,EAAA,KAAA;AAAA,QACZqL,YAAc,EAAA,UAAA;AAAA,QACdF,UAAY,EAAA,QAAA;AAAA,QACZC,QAAU,EAAA,QAAA;AAAA,QACVhN,QAAU,EAAA,OAAA;AAAA,QACV0N,MAAAA,EAAQ9hB,UAAWI,CAAAA,WAAAA,GAAc,SAAY,GAAA,SAAA;AAAA,OARrD;AAAA,MAUI,OAAA,EAASJ,UAAWI,CAAAA,WAAAA,GACbc,CAAM,CAAA,KAAA;AACLgoB,QAAAA,WAAAA,CAAYhoB,EAAEkoB,aAAH,CAAA,CAAA;AACXloB,QAAAA,CAAAA,CAAEgV,eAAF,EAAA,CAAA;AAAA,OAEF1a,GAAAA,KAAAA,CAAAA;AAAAA,MAEJ,QAAA,EAAA,GAAEwE,UAAWG,CAAAA,IAAAA,CAAAA,CAAAA;AAAAA,KArBvB,CAuBI,kBAAArE,GAAA,CAAC,UAAD,EAAA;AAAA,MACI,KAAO,EAAA;AAAA,QACHkT,OAAS,EAAA,OAAA;AAAA,QACTqS,YAAc,EAAA,UAAA;AAAA,QACdF,UAAY,EAAA,QAAA;AAAA,QACZC,QAAU,EAAA,QAAA;AAAA,QACVhN,QAAU,EAAA,OAAA;AAAA,QACV29B,SAAW,EAAA,KAAA;AAAA,QACX7pB,SAAW,EAAA,MAAA;AAAA,OARnB;AAAA,MAUI,OAAS,EAAA,SAAA;AAAA,MACT,KAAO,EAAA,eAAA;AAAA,MAXX,UAYM,CAAG9pB,CAAAA,EAAAA,IAAAA,CAAAA,CAAAA;AAAAA,KAZT,CAAA,EAeC4B,UAAWI,CAAAA,WAAAA,wBACP,OAAD,EAAA;AAAA,MACI,EAAI,EAAA,aAAA;AAAA,MACJ,IAAA;AAAA,MACA,QAAA;AAAA,MACA,SAAW,EAAA,CAAA;AAAA,MACX,SAAS,MAAM;AACX8oB,QAAAA,WAAAA,CAAY,IAAD,CAAA,CAAA;AAAA,OANnB;AAAA,MAQI,YAAc,EAAA;AAAA,QACV8oB,QAAU,EAAA,QAAA;AAAA,QACVC,UAAY,EAAA,QAAA;AAAA,OAVpB;AAAA,MAYI,eAAiB,EAAA;AAAA,QACbD,QAAU,EAAA,KAAA;AAAA,QACVC,UAAY,EAAA,QAAA;AAAA,OAdpB;AAAA,MAAA,QAAA,sBAkBK,GAAD,EAAA;AAAA,QAAK,CAAG,EAAA,CAAA;AAAA,QAAR,QAAA,sBACK,QAAD,EAAA;AAAA,UAAU,QAAQjyC,UAAWI,CAAAA,WAAAA;AAAAA,SAA7B,CAAA;AAAA,OADJ,CAAA;AAAA,KAzDZ,CAAA,CAAA;AAAA,GAAA,CAiED,EAAA,CAACJ,UAAWI,CAAAA,WAAAA,EAAaJ,WAAWG,IAAM/B,EAAAA,IAAAA,EAAMvD,IAAMouB,EAAAA,QAAtD,CAlEkB,CAAA,CAAA;AAoErB,EAAM0gB,MAAAA,sBAAAA,GAAyB9mC,YAAY,CAAC;AAAA,IACIgG,MAAAA;AAAAA,IACAuM,IAAAA;AAAAA,GACiD,KAAA;AAE7F,IAAMmT,MAAAA,UAAAA,GAAawoB,iBAAiBloC,MAAD,CAAA,CAAA;AACnC,IAAA,MAAM2f,gBAAqBwoB,qBAA3B,EAAA,CAAA;AAGA,IAAA,MAAMkB,gBAAgBC,SAAUnyC,CAAAA,UAAAA,CAAWgE,WAAa3H,EAAAA,cAAAA,EAAgB+B,MAAM5B,OAA/C,CAAA,CAAA;AAC/B,IAAA,MAAMusB,cAAc6oB,OAAQ5xC,CAAAA,UAAAA,CAAWgE,aAAa6E,MAAQxM,EAAAA,cAAAA,EAAgB+B,MAAM5B,OAAvD,CAAA,CAAA;AAC3B,IAAA,MAAMwsB,gBAAgBopB,SAAUpyC,CAAAA,UAAAA,CAAWgE,aAAa6E,MAAQxM,EAAAA,cAAAA,EAAgB+B,MAAM5B,OAAvD,CAAA,CAAA;AAE/B,IAAA,MAAMosB,aAAgB,GAAA,CAACypB,aAA6Bp2C,KAAAA,oBAAAA,CAAqBpB,IAAK,CAAA;AAAA,MAC1E2G,UAAU6wC,aAActtC,CAAAA,EAAAA;AAAAA,MACxB3G,IAAAA;AAAAA,MACAyF,IAAM,EAAA,IAAA;AAAA,MACNG,WAAa,EAAA;AAAA,QACTwsC,IAAMznB,EAAAA,WAAAA;AAAAA,QACN5D,MAAQ+sB,EAAAA,aAAAA;AAAAA,QACRzB,MAAQznB,EAAAA,aAAAA;AAAAA,OAP8D;AAAA,MAS1EpnB,QAAQ5B,UAAW4B,CAAAA,MAAAA;AAAAA,MACnBvC,gBAAgBW,UAAWX,CAAAA,cAAAA;AAAAA,MAC3BiF,WAAWtE,UAAWsE,CAAAA,SAAAA;AAAAA,MACtBJ,sBAAwB,EAAA,KAAA;AAAA,KAZwB,CAAA,CAAA;AAepD,IAAA,MAAM2kB,aAAgB,GAAA,CAACwpB,aAA6Bp2C,KAAAA,oBAAAA,CAAqBpB,IAAK,CAAA;AAAA,MAC1E2G,UAAU6wC,aAActtC,CAAAA,EAAAA;AAAAA,MACxB3G,IAAAA;AAAAA,MACA4F,WAAa,EAAA;AAAA,QACTwsC,IAAMznB,EAAAA,WAAAA;AAAAA,QACN5D,MAAQ+sB,EAAAA,aAAAA;AAAAA,QACRzB,MAAQznB,EAAAA,aAAAA;AAAAA,OAN8D;AAAA,MAQ1EpnB,QAAQ5B,UAAW4B,CAAAA,MAAAA;AAAAA,MACnBvC,gBAAgBW,UAAWX,CAAAA,cAAAA;AAAAA,MAC3BiF,WAAWtE,UAAWsE,CAAAA,SAAAA;AAAAA,MACtBJ,sBAAwB,EAAA,KAAA;AAAA,KAXwB,CAAA,CAAA;AAcpD,IAAA,2BACK,oBAAD,EAAA;AAAA,MACI,MAAA;AAAA,MACA,UAAA;AAAA,MACA,aAAA;AAAA,MACA,gBAAA;AAAA,MACA,IAAA;AAAA,MACA,qBAAA;AAAA,MACA,SAAA;AAAA,MACA,aAAA;AAAA,MACA,aAAA,EAAeguC,gBAAgBtpB,aAAgBptB,GAAAA,KAAAA,CAAAA;AAAAA,MAC/C,eAAA,EAAiBwtB,gBAAgBmoB,sBAAyB31C,GAAAA,KAAAA,CAAAA;AAAAA,KAXlE,CAAA,CAAA;AAAA,GAeH,EAAE,CAAC+1C,uBAAyBt1C,EAAAA,oBAAAA,EAAsB+D,WAAWgE,WAAa3H,EAAAA,cAAAA,EAAgB+B,IAAxF,CAzDuC,CAAA,CAAA;AA2D1C,EAAMsrC,MAAAA,qBAAAA,GAAwB7mC,WAAY,CAAA,CAAC9G,CAAqD,KAAA;AAEtFu2C,IAAAA,MAAAA,SAAAA,GAAYH,SAAUnyC,CAAAA,UAAAA,CAAWgE,WAAa3H,EAAAA,cAAAA,EAAgB+B,IAAM5B,EAAAA,OAA/C,CAA2Dg1C,IAAAA,UAAAA,KAChF,WAAA,mBAAA31C,IAAA,CAAC,MAAD,EAAA;AAAA,MACE,OAAS21C,EAAAA,UAAAA;AAAAA,MACT,SAAW,kBAAA11C,GAAA,CAAC,GAFd,EAAA,EAAA,CAAA;AAAA,MAGE,IAAK,EAAA,OAAA;AAAA,MACL,OAAQ,EAAA,WAAA;AAAA,MACR,KAAM,EAAA,SAAA;AAAA,MALR,QAAA,EAAA,CAAA,MAMOkE,EAAAA,UAAAA,CAAW4B,OAAOzB,IANzB,CAAA;AAAA,KAD0G,CAS1G,mBAAArE,GAAA,CAAC,MAAD,EAAA;AAAA,MACE,OAAS01C,EAAAA,UAAAA;AAAAA,MACT,IAAK,EAAA,QAAA;AAAA,MACL,OAAQ,EAAA,WAAA;AAAA,MACR,KAAM,EAAA,SAAA;AAAA,MAJR,QAME,kBAAA11C,GAAA,CAAC,GAAD,EAAA,EAAA,CAAA;AAAA,KANF,CAAA,CAAA,CAAA;AASAy2C,IAAwBnG,gBAAiBJ,CAAAA,KAAAA,CAAOnjC,CAAWupC,MAAAA,KAAAA,SAAAA,CAAUpyC,UAAWgE,CAAAA,WAAAA,EAAa6E,MAAQxM,EAAAA,cAAAA,EAAgB+B,IAAM5B,EAAAA,OAAvD,CAA5C,EAAA;AAOxBg2C,IAAAA,MAAAA,YAAexyC,GAAAA,UAAAA,CAAWwyC,YAC1BxyC,GAAAA,UAAAA,CAAWwyC,YAAa,CAAA;AAAA,MACtBp0C,IAAAA;AAAAA,MACA4B,UAAAA;AAAAA,MACAqxC,mBAAqBE,EAAAA,uBAAAA;AAAAA,MACrB/0C,OAAAA;AAAAA,KAJF,CAMAhB,GAAAA,KAAAA,CAAAA,CAAAA;AAEN,IAAMi3C,MAAAA,YAAAA,GAAerB,UACjB,oBAAAt1C,GAAA,CAAC,YAAD,EAAA;AAAA,MAAc,QAAQkE,UAAW4B,CAAAA,MAAAA;AAAAA,MACnB,cAAA;AAAA,MACA,cAAc,OAAO5B,UAAAA,CAAWoxC,UAAe,KAAA,QAAA,GAAWpxC,WAAWoxC,UAAa51C,GAAAA,KAAAA,CAAAA;AAAAA,MAClF,IAAA;AAAA,KAJlB,CAAA,CAAA;AAOI,IAAA,4BAAA+Z,QAAA,EAAA;AAAA,MAAA,QAAA,EAAA,CACKi9B,YACAC,EAAAA,YAAAA,EACAH,SAHL,CAAA;AAAA,KADJ,CAAA,CAAA;AAAA,KAOD,CAACf,uBAAAA,EAAyBnzC,IAAM4B,EAAAA,UAAAA,EAAYwmB,WAA5C,CAjDsC,CAAA,CAAA;AAoDrC,EAAA,4BAAAjR,QAAA,EAAA;AAAA,IAAA,QAAA,EAAA,iBAEIzZ,GAAA,CAAC,eAAD,EAAA;AAAA,MAEI,KAAA;AAAA,MACA,IAAA;AAAA,MACA,UAAA;AAAA,MACA,cAAA;AAAA,MACA,aAAA;AAAA,MACA,aAAe4sC,EAAAA,kBAAAA;AAAAA,MACf,aAAA;AAAA,MACA,cAAA;AAAA,MACA,sBAAA;AAAA,MACA,qBAAA;AAAA,MACA,QAAA;AAAA,OAXM,CAAmBtqC,iBAAAA,EAAAA,IAAAA,CAAAA,CAD7B,CAeC8yC,EAAAA,mBAAAA,wBAAwB,kBAAD,EAAA;AAAA,MAAoB,wBAA0BA,EAAAA,mBAAAA;AAAAA,MAC1B,IAAA;AAAA,MACA,QAAQlxC,UAAW4B,CAAAA,MAAAA;AAAAA,MACnB,cAAA;AAAA,MACA,WAAW5B,UAAWsE,CAAAA,SAAAA;AAAAA,MACtB,IAAA,EAAM,CAAC,CAAC4sC,mBAAAA;AAAAA,MACR,cAAgBO,EAAAA,sBAAAA;AAAAA,MAChB,wBAA0BE,EAAAA,gCAAAA;AAAAA,MAC1B,OAAA,EAAS,MAAMR,sBAAAA,CAAuB31C,KAAD,CAAA,CAAA;AAAA,KAzBrF,CAAA,CAAA;AAAA,GADJ,CAAA,CAAA;AA6BH;;;;;;;;;AChbM,SAAA,sBAAA,CAAgCV,KAA8B,EAAA;AACjE,EAAA,2BACK,GAAD,EAAA;AAAA,IACI,OAAQ,EAAA,MAAA;AAAA,IACR,KAAO,EAAA,MAAA;AAAA,IACP,SAAW,EAAA,MAAA;AAAA,IACX,MAAQ,EAAA,OAAA;AAAA,IAJZ,QAAA,sBAKK,GAAD,EAAA;AAAA,MAAK,CAAE,EAAA,MAAA;AAAA,MACH,QAAA,sBAAC,gBAAqBA,EAAAA;AAAAA,QAAAA,GAAAA,KAAAA;AAAAA,OAAtB,CAAA;AAAA,KADJ,CAAA;AAAA,GANR,CAAA,CAAA;AAWH;;ACMM,MAAM6T,WAAYC,GAAAA,UAAAA,CAAW,CAACC,KAAAA,KACjCC,YAAa,CAAA;AAAA,EACT4jC,IAAM,EAAA;AAAA,IACF1jC,OAAS,EAAA,MAAA;AAAA,IACTyG,aAAe,EAAA,QAAA;AAAA,IACfxG,UAAY,EAAA,YAAA;AAAA,IACZ+V,SAAW,EAAA,GAAA;AAAA,GALN;AAAA,EAOT9D,QAAU,EAAA;AAAA,IACNA,QAAU,EAAA,CAAA;AAAA,GADJ;AAPD,CAAD,CADmB,CAAA,CAAA;AAqBD,SAAA,eAAA,GAAA;AAExBzR,EAAAA,MAAAA,UAAUd,WAAhB,EAAA,CAAA;AACMzS,EAAAA,MAAAA,oBAAoB0kB,aAA1B,EAAA,CAAA;AACA,EAAA,IAAI,CAAC1kB,iBAAkB2D,CAAAA,UAAAA;AACnB,IAAO,uBAAA/D,GAAA,CAAPyZ,QAAA,EAAA,EAAA,CAAA,CAAA;AAEE,EAAA,MAAA;AAAA,IACFzV,iBAAAA;AAAAA,IACAe,MAAAA;AAAAA,GACA8xC,GAAAA,oBAAAA,CAAqBz2C,mBAAmB,KAApB,CAAA,CAAA;AAElB02C,EAAAA,MAAAA,SAAAA,GAAkC,CAAC,GAAG/xC,MAAJ,CAAA,CAAA;AACxC,EAAIf,IAAAA,iBAAAA,CAAkBc,OAAOM,CAAK,CAAA,KAAA,CAACA,EAAEb,KAAjC,CAAA,CAAwC5B,SAAS,CAAG,EAAA;AACpDm0C,IAAAA,SAAAA,CAAUjzC,KAAK,IAAf,CAAA,CAAA;AAAA,GACH;AAED,EAAA,SAAA,mBAAA,CAA6BP,KAA2B,EAAA;AACpD,IAAA,2BACK,IAAD,EAAA;AAAA,MAAM,IAAN,EAAA,IAAA;AAAA,MAAW,EAAI,EAAA,EAAA;AAAA,MACT,EAAI,EAAA,CAAA;AAAA,MACJ,EAAI,EAAA,CAAA;AAAA,MAFV,QAAA,sBAIK,KAAD,EAAA;AAAA,QAAO,OAAS,EAAA,UAAA;AAAA,QAAhB,QAAA,uBAEK,cAAD,EAAA;AAAA,UACI,WAAWqQ,OAAQijC,CAAAA,IAAAA;AAAAA,UACnB,SAAWG,EAAAA,MAAAA;AAAAA,UACX,IAAIzzC,KAAMa,CAAAA,GAAAA;AAAAA,UAHd,QAAA,EAAA,iBAIIpE,IAAA,CAAC,WAAD,EAAA;AAAA,YACI,WAAW4T,OAAQyR,CAAAA,QAAAA;AAAAA,YADvB,QAAA,EAAA,iBAGIplB,GAAA,CAAC,gBAAD,EAAA;AAAA,cAAkB,KAAO,EAAA,UAAA;AAAA,aAH7B,CAII,kBAAAA,GAAA,CAAC,UAAD,EAAA;AAAA,cAAY,YAAZ,EAAA,IAAA;AAAA,cAAyB,OAAQ,EAAA,IAAA;AAAA,cACrB,SAAU,EAAA,IAAA;AAAA,cADtB,UAEKsD,KAAMe,CAAAA,IAAAA;AAAAA,aAFX,CAAA,EAKCf,KAAMgB,CAAAA,WAAAA,wBAAgB,UAAD,EAAA;AAAA,cAAY,OAAQ,EAAA,OAAA;AAAA,cACR,KAAM,EAAA,eAAA;AAAA,cACN,SAAU,EAAA,KAAA;AAAA,cAFtB,QAAA,sBAGjB,QAAD,EAAA;AAAA,gBAAU,QAAQhB,KAAMgB,CAAAA,WAAAA;AAAAA,eAAxB,CAAA;AAAA,aAZR,CAAA,CAAA;AAAA,WAJJ,CAoBI,kBAAAtE,GAAA,CAAC,WAAD,EAAA;AAAA,YAAa,KAAO,EAAA;AAAA,cAAEypC,SAAW,EAAA,UAAA;AAAA,aAAjC;AAAA,YAAA,QAAA,sBACK,GAAD,EAAA;AAAA,cAAK,CAAG,EAAA,CAAA;AAAA,cAAR,QAAA,sBACK,gBAAD,EAAA;AAAA,gBAAkB,KAAM,EAAA,SAAA;AAAA,eAAxB,CAAA;AAAA,aADJ,CAAA;AAAA,WArBR,CAAA,CAAA;AAAA,SAAA,CAAA;AAAA,OAFJ,CAAA;AAAA,KADQ,EAAA,CAAA,IAAA,EAAMnmC,KAAMiB,CAAAA,KAAAA,CAAAA,CAAAA,EAASjB,MAAMe,IAHvC,CAAA,CAAA,CAAA,CAAA;AAAA,GAoCP;AAED,EAAA,2BACK,SAAD,EAAA;AAAA,IACKyyC,UAAAA,SAAU7yC,CAAAA,GAAAA,CAAI,CAACM,KAAOuT,EAAAA,KAAAA,0BAClB,GAAD,EAAA;AAAA,MAAK,EAAI,EAAA,CAAA;AAAA,MAAG,EAAI,EAAA,CAAA;AAAA,MAAhB,UAAA,CACKg/B,SAAAA,CAAUn0C,MAAS,GAAA,CAAA,yBAAK8W,QAAA,EAAA;AAAA,QAAA,QAAA,EAAA,iBACrBzZ,GAAA,CAAC,UAAD,EAAA;AAAA,UAAY,KAAO,EAAA,eAAA;AAAA,UACP,SAAW,EAAA,YAAA;AAAA,UADvB,QAEKuE,EAAAA,KAAAA,EAAOgnB,WAAP,EAAA,IAAwB,cAAcA,WAAd,EAAA;AAAA,SAHR,CAKrB,kBAAAvrB,GAAA,CAAC,OALoB,EAAA,EAAA,CAAA,CAAA;AAAA,OAD7B,CASI,kBAAAA,GAAA,CAAC,GAAD,EAAA;AAAA,QAAK,EAAI,EAAA,CAAA;AAAA,QAAT,QAAA,uBACK,IAAD,EAAA;AAAA,UAAM,SAAN,EAAA,IAAA;AAAA,UAAgB,OAAS,EAAA,CAAA;AAAA,UACpBuE,QAAAA,EAAAA,CAAAA,KAASP,IAAAA,iBAAAA,CACLc,MAAQxB,CAAAA,CAAAA,KAAAA,KAAUA,KAAMiB,CAAAA,KAAAA,KAAUA,KAD7B,CAAA,CAELN,GAAKX,CAAAA,CAAAA,KAAAA,KAAU0zC,oBAAoB1zC,KAAD,CAF7B,CAIT,EAAA,CAACiB,KAASP,IAAAA,iBAAAA,CACNc,MAAQxB,CAAAA,CAAAA,KAAAA,KAAU,CAACA,KAAAA,CAAMiB,KADnB,CAAA,CAENN,GAAKX,CAAAA,CAAAA,KAAAA,KAAU0zC,mBAAoB1zC,CAAAA,KAAD,CAF5B,CALf,CAAA;AAAA,SAAA,CAAA;AAAA,OAVR,CAAA,CAAA;AAAA,KAAyB,EAAA,CAAQwU,MAAAA,EAAAA,KAAAA,CAAAA,CAAjC,CADH,CAAA;AAAA,GAFT,CAAA,CAAA;AA4BH;;AC9HM,MAAMm/B,YAAY,GAAA;AAAA,EAAA,IAAA,EAAA,SAAA;AAAA,EAAA,MAAA,EAAA,gpJAAA;AAAA,CAAA,CAAA;;ACiBzB,MAAMC,iBAAkB,GAAA;AAAA,EACpB,IAAM,EAAA,IAAA;AAAA,EACN,IAAM,EAAA,IAAA;AAAA,EACN,GAAK,EAAA,GAAA;AAAA,EACL,GAAK,EAAA,GAAA;AAAA,EACL,IAAM,EAAA,IAAA;AAAA,EACN,IAAM,EAAA,IAAA;AAAA,EACNC,EAAI,EAAA,IAAA;AAAA,EACJ,gBAAkB,EAAA,UAAA;AAAA,EACI,oBAAA,EAAA,KAAA;AATF,CAAA,CAAA;AAYxB,MAAMC,0BAAAA,GAA2B,CAAC,oBAAA,EAAsB,IAAvB,CAAA,CAAA;AAEO,SAAA,uBAAA,CAAA;AAAA,EACI/yC,IAAAA;AAAAA,EACA6H,KAAAA;AAAAA,EACA0T,QAAAA;AAAAA,EACAvU,QAAAA;AAAAA,EACAxG,OAAAA;AAAAA,EACAkT,UAAAA;AAAAA,EACAvY,KAAAA;AAAAA,CAC6B,EAAA;AAE/D63C,EAAAA,MAAAA,kBAAAA,GAAwDxyC,OACxD,GAAA,CAAC,gBAAD,CAAA,GACA,CAAC,IAAA,EAAM,IAAM,EAAA,GAAA,EAAK,GAAK,EAAA,IAAA,EAAM,IAA7B,CAAA,CAAA;AAEN,EAAIkT,IAAAA,UAAAA;AACAlT,IAAAA,OAAAA,GACMwyC,mBAAmBxzC,IAAK,CAAA,oBAAxB,CACAwzC,GAAAA,kBAAAA,CAAmBxzC,KAAK,IAAxB,CAAA,CAAA;AAEV,EAAA,MAAM,CAACyzC,cAAgBre,EAAAA,UAAAA,CAAAA,GAAc/sB,SAAS,CAACmrC,kBAAAA,CAAmB,IAAI33C,KAAxB,CAAA,CAAA,CAAA;AACxC,EAAA,MAAA,CAACsN,SAAAA,EAAWuqC,YAAgBh4C,CAAAA,GAAAA,QAAAA,CAA6B+3C,cAArB,CAAA,CAAA;AAC1C,EAAA,MAAM,CAACxjB,aAAAA,EAAeC,gBAAoBx0B,CAAAA,GAAAA,QAAAA,CAA4D05B,UAApD,CAAA,CAAA;AAElD,EAAA,SAAA,YAAA,CAAsBue,IAAwBC,GAAwD,EAAA;AAC9FpjB,IAAAA,IAAAA,QAAWojB,GAAAA,GAAAA,CAAAA;AACf,IAAMC,MAAAA,aAAAA,GAAgBN,0BAAyB7sC,CAAAA,QAAAA,CAASyC,SAAlC,CAAA,CAAA;AACtB,IAAM2qC,MAAAA,YAAAA,GAAeP,0BAAyB7sC,CAAAA,QAAAA,CAASitC,EAAlC,CAAA,CAAA;AACjBE,IAAAA,IAAAA,kBAAkBC,YAAc,EAAA;AAEhCtjB,MAAWsjB,QAAAA,GAAAA,YAAAA,GAAgB,OAAOF,GAAAA,KAAQ,QAAY,IAAA,OAAOA,GAAQ,KAAA,QAAA,GAAW,CAACA,GAAD,CAAQ,GAAA,EAAM,GAAA,EAAA,CAAA;AAAA,KACjG;AAED,IAAA,IAAI,OAAOpjB,QAAAA,KAAa,QAAYe,IAAAA,KAAAA,CAAMf,QAAD,CAAA;AACrCA,MAAW30B,QAAAA,GAAAA,KAAAA,CAAAA,CAAAA;AAEf63C,IAAAA,YAAAA,CAAaC,EAAD,CAAA,CAAA;AACZzjB,IAAAA,gBAAAA,CAAiBM,QAAD,CAAA,CAAA;AAEVujB,IAAAA,MAAAA,WAAAA,GAAcvjB,QAAa,KAAA,IAAA,IAAQzvB,KAAMC,CAAAA,OAAAA,CAAQwvB,QAAd,CACnCA,GAAAA,QAAAA,CAAS1xB,MAAS,GAAA,CAAA,GAClB0xB,QAAa30B,KAAAA,KAAAA,CAAAA,CAAAA;AACf83C,IAAAA,IAAAA,MAAMI,WAAa,EAAA;AACnBh4B,MACI,QAAA,CAAA,CAAC43B,EAAInjB,EAAAA,QAAL,CADI,CAAA,CAAA;AAAA,KAGL,MAAA;AACHzU,MAAAA,QAAAA,CACIlgB,KADI,CAAA,CAAA,CAAA;AAAA,KAGX;AAAA,GACJ;AAED,EAAM40B,MAAAA,QAAAA,GAAW8iB,0BAAyB7sC,CAAAA,QAAAA,CAASyC,SAAlC,CAAA,CAAA;AACjB,EAAA,4BAEK,GAAD,EAAA;AAAA,IAAK,OAAS,EAAA,MAAA;AAAA,IAAQ,KAAO,EAAA,GAAA;AAAA,IAAK,UAAY,EAAA,QAAA;AAAA,IAA9C,QAAA,EAAA,iBACIhN,GAAA,CAAC,GAAD,EAAA;AAAA,MAAK,KAAO,EAAA,EAAA;AAAA,MAAZ,QAAA,sBACK,WAAD,EAAA;AAAA,QAAa,SAAb,EAAA,IAAA;AAAA,QAAA,QAAA,sBACKy/B,QAAD,EAAA;AAAA,UAAW,KAAOzyB,EAAAA,SAAAA;AAAAA,UACP,SADX,EAAA,IAAA;AAAA,UAEW,QAAA,EAAU,CAACge,GAAa,KAAA;AACpB6sB,YAAa7sB,YAAAA,CAAAA,GAAAA,CAAIlhB,MAAOoC,CAAAA,KAAAA,EAAO4nB,aAAnB,CAAA,CAAA;AAAA,WAH3B;AAAA,UAAA,QAKKujB,EAAAA,kBAAAA,CAAmBpzC,GAAKuzC,CAAAA,CAAAA,EAAAA,yBACpB,QAAD,EAAA;AAAA,YAEI,KAAOA,EAAAA,EAAAA;AAAAA,YAAKN,UAAAA,iBAAgBM,CAAAA,EAAAA,CAAAA;AAAAA,WADtB,EAAA,CAAA,UAAA,EAAYnzC,IAAQmzC,CAAAA,CAAAA,EAAAA,EAAAA,CAAAA,CAD9B,CADH,CAAA;AAAA,SALL,CAAA;AAAA,OADJ,CAAA;AAAA,KAFR,CAkBI,kBAAAx3C,GAAA,CAAC,GAAD,EAAA;AAAA,MAAK,QAAU,EAAA,CAAA;AAAA,MAAG,EAAI,EAAA,CAAA;AAAA,MAAtB,QAAA,uBAEK,WAAD,EAAA;AAAA,QAAa,SAAb,EAAA,IAAA;AAAA,QAAA,QAAA,EAAA,CACK,CAAC+X,UAAAA,wBAAe,aAAD,EAAA;AAAA,UACZ,SADY,EAAA,IAAA;AAAA,UAGZ,IAAA,EAAM1M,QAAa,KAAA,QAAA,GAAW,QAAW3L,GAAAA,KAAAA,CAAAA;AAAAA,UACzC,KAAA,EAAOo0B,aAAkBp0B,KAAAA,KAAAA,CAAAA,GAAYo0B,aAAgB,GAAA,EAAA;AAAA,UACrD,UAAW9I,CAAQ,GAAA,KAAA;AACf,YAAMysB,MAAAA,GAAAA,GAAMpsC,aAAa,QACnBwpB,GAAAA,UAAAA,CAAW7J,IAAIlhB,MAAOoC,CAAAA,KAAZ,CACV8e,GAAAA,GAAAA,CAAIlhB,MAAOoC,CAAAA,KAAAA,CAAAA;AACjB2rC,YAAAA,YAAAA,CAAa7qC,WAAWyqC,GAAZ,CAAA,CAAA;AAAA,WACf;AAAA,WARK,CAASpzC,OAAAA,EAAAA,IAAAA,CAAAA,CAFH,CAaf0T,EAAAA,UAAAA,wBACA0nB,QAAD,EAAA;AAAA,UACI,SADJ,EAAA,IAAA;AAAA,UAGI,QAAA;AAAA,UACA,OAAO3L,aAAkBp0B,KAAAA,KAAAA,CAAAA,GAAYo0B,aAAgBjvB,GAAAA,OAAAA,GAAU,EAAK,GAAA,EAAA;AAAA,UACpE,QAAU,EAAA,CAACmmB,GAAa6sB,KAAAA,YAAAA,CAAa7qC,WAAW3B,QAAa,KAAA,QAAA,GAAWysC,QAAS9sB,CAAAA,GAAAA,CAAIlhB,MAAOoC,CAAAA,KAAZ,CAAqB8e,GAAAA,GAAAA,CAAIlhB,OAAOoC,KAA5E,CAAA;AAAA,UACpC,WAAaooB,EAAAA,QAAAA,GACnC,CAACjG,QAAAA,yBAE6B,KAAA,EAAA;AAAA,YACKA,QAAAA,EAAAA,QAAAA,CAASpqB,GAAI,CAAA,CAAC0U,OAAiB,KAAA;AAC5B,cAAA,2BAAQ,cAAD,EAAA;AAAA,gBAEH,OAAA;AAAA,gBACA,UAAA;AAAA,gBACA,KAAO,EAAA,IAAA;AAAA,eAJJ,EACG,CAAetU,aAAAA,EAAAA,IAAAA,CAAAA,CAAAA,EAAQsU,OAD1B,CAAA,CAAA,CAAA,CAAA;AAAA,aADV,CAAA;AAAA,WADL,CAU9BjZ,GAAAA,KAAAA,CAAAA;AAAAA,UAnBkB,QAAA,EAoBKwF,OAAOvB,OAAQoU,CAAAA,UAAf,EAA2B9T,GAAI,CAAA,CAAC,CAAC0U,OAAAA,EAAST,aAAmB,CAAA,KAAA;AAC1D,YAAA,2BACK,QAAD,EAAA;AAAA,cAEI,KAAOS,EAAAA,OAAAA;AAAAA,cAFX,QAAA,sBAGK,cAAD,EAAA;AAAA,gBACI,OAAA;AAAA,gBACA,UAAA;AAAA,gBACA,KAAO,EAAA,IAAA;AAAA,eAHX,CAAA;AAAA,aAHJ,EACU,CAAStU,OAAAA,EAAAA,IAAAA,CAAAA,CAAAA,EAAQsU,OAD3B,CAAA,CAAA,CAAA,CAAA;AAAA,WAFP,CAAA;AAAA,SAlBK,EAAA,CAAA,cAAA,EAAgB2b,QAAYjwB,CAAAA,CAAAA,EAAAA,IAAAA,CAAAA,CAFtC,CAfJ,CAAA;AAAA,OAAA,CAAA;AAAA,KAFJ,CAAA,EAqDCyvB,aAAkBp0B,KAAAA,KAAAA,CAAAA,wBAAc,GAAD,EAAA;AAAA,MAAK,EAAI,EAAA,CAAA;AAAA,MAAT,QAAA,sBAC3B,UAAD,EAAA;AAAA,QACI,OAAU0F,EAAAA,CAAAA,CAAAA,KAAMyyC,YAAa7qC,CAAAA,SAAAA,EAAWtN,KAAZ,CAAA,CAAA;AAAA,QAC5B,IAAM,EAAA,OAAA;AAAA,QAFV,QAAA,sBAGKq4C,SAAD,EAAA;AAAA,UAAS,OAAQ,CAAQv4C,MAAAA,EAAAA,KAAAA,CAAAA,CAAAA;AAAAA,UAAzB,QAAA,sBACK,SAAD,EAAA;AAAA,YAAW,QAAU,EAAA,OAAA;AAAA,WAArB,CAAA;AAAA,SADJ,CAAA;AAAA,OAHJ,CAAA;AAAA,KAxER,CAAA,CAAA;AAAA,GAFJ,CAAA,CAAA;AAsFH;;AC3KM,MAAMqT,WAAYC,GAAAA,UAAAA,CAAW,CAACC,KAAAA,KACjCC,YAAa,CAAA;AAAA,EACTkuB,WAAa,EAAA;AAAA,IACTl5B,KAAO,EAAA,OAAA;AAAA,GAFF;AAAA,EAIToQ,KAAO,EAAA;AAAA,IACHpQ,KAAO,EAAA,MAAA;AAAA,IACPsS,MAAQ,EAAA,MAAA;AAAA,GAFL;AAJE,CAAD,CADmB,CAAA,CAAA;AAmBA,SAAA,kBAAA,CAAA;AAAA,EACIjW,IAAAA;AAAAA,EACA7E,KAAAA;AAAAA,EACA0M,KAAAA;AAAAA,EACA0T,QAAAA;AAAAA,CACkB,EAAA;AAC/CjM,EAAAA,MAAAA,UAAUd,WAAhB,EAAA,CAAA;AAEA,EAAA,SAAA,YAAA,CAAsB4kC,GAAe,EAAA;AAC7BA,IAAAA,IAAAA,QAAQ/3C,KAAW,CAAA,EAAA;AACnBkgB,MACI,QAAA,CAAA,CAAC,IAAM63B,EAAAA,GAAP,CADI,CAAA,CAAA;AAAA,KAGL,MAAA;AACH73B,MAAAA,QAAAA,CACIlgB,KADI,CAAA,CAAA,CAAA;AAAA,KAGX;AAAA,GACJ;AAED,EAAMs4C,MAAAA,cAAAA,GAAiB9rC,SAASA,KAAM,CAAA,CAAA,CAAA,CAAA;AACtC,EAAM+rC,MAAAA,QAAAA,GAAW,CAAC,CAAC/rC,KAAAA,CAAAA;AAEnB,EAAA,2BACK,gBAAD,EAAA;AAAA,IACI,WAAWyH,OAAQutB,CAAAA,WAAAA;AAAAA,IACnB,cAAgB,EAAA,KAAA;AAAA,IAChB,SAAS+W,QAAYD,IAAAA,cAAAA;AAAAA,IACrB,OAAA,sBACK,QAAD,EAAA;AAAA,MAEI,eAAe,CAACC,QAAAA;AAAAA,MAChB,UAAWjtB,CAAQ,GAAA,KAAA;AACf,QAAA,IAAIgtB,cAAgB,EAAA;AAAEH,UAAAA,YAAAA,CAAa,KAAD,CAAA,CAAA;AAAA,SAAU,MAAA,IAAU,CAACI,QAAU,EAAA;AAAEJ,UAAAA,YAAAA,CAAa,IAAD,CAAA,CAAA;AAAA,SAAe,MAAA;AAAEA,UAAAA,YAAAA,CAAan4C,KAAD,CAAA,CAAA,CAAA;AAAA,SAAc;AAAA,OAC7H;AAAA,KAJK,EAAA,UAAS2E,IADnB,CAAA,CAAA,CAAA;AAAA,IAQJ,OAAO,CAAC4zC,QAAAA,GAAW,cAAeD,cAAkB,GAAA,CAAA,EAAEx4C,kBAAmB,CAAEA,EAAAA,KAAAA,CAAAA,SAAAA,CAAAA;AAAAA,GAdnF,CAAA,CAAA;AAiBH;;ACzCD,MAAM03C,eAAkB,GAAA;AAAA,EACpB,IAAM,EAAA,IAAA;AAAA,EACN,IAAM,EAAA,IAAA;AAAA,EACN,GAAK,EAAA,GAAA;AAAA,EACL,GAAK,EAAA,GAAA;AAAA,EACL,IAAM,EAAA,IAAA;AAAA,EACN,IAAM,EAAA,IAAA;AAAA,EACNC,EAAI,EAAA,IAAA;AAAA,EACJ,gBAAkB,EAAA,UAAA;AAAA,EACI,oBAAA,EAAA,KAAA;AATF,CAAA,CAAA;AAYxB,MAAMC,wBAAAA,GAA2B,CAAC,oBAAA,EAAsB,IAAvB,CAAA,CAAA;AAGG,SAAA,mBAAA,CAAA;AAAA,EACI/yC,IAAAA;AAAAA,EACAQ,OAAAA;AAAAA,EACAqH,KAAAA;AAAAA,EACA0T,QAAAA;AAAAA,EACApgB,KAAAA;AAAAA,CACyB,EAAA;AAEvD63C,EAAAA,MAAAA,kBAAAA,GAAwDxyC,OACxD,GAAA,CAAC,gBAAD,CAAA,GACA,CAAC,IAAA,EAAM,IAAM,EAAA,GAAA,EAAK,GAAK,EAAA,IAAA,EAAM,IAA7B,CAAA,CAAA;AAEN,EAAA,MAAM,CAACyyC,cAAgBre,EAAAA,UAAAA,CAAAA,GAAc/sB,SAAS,CAACmrC,kBAAAA,CAAmB,IAAI33C,KAAxB,CAAA,CAAA,CAAA;AACxC,EAAA,MAAA,CAACsN,SAAAA,EAAWuqC,YAAgBh4C,CAAAA,GAAAA,QAAAA,CAA6B+3C,cAArB,CAAA,CAAA;AAC1C,EAAA,MAAM,CAACxjB,aAAAA,EAAeC,gBAAoBx0B,CAAAA,GAAAA,QAAAA,CAA2B05B,UAAnB,CAAA,CAAA;AAEzC4e,EAAAA,SAAAA,YAAAA,CAAaL,IAAwBC,GAAuB,EAAA;AACjE,IAAA,IAAIpjB,QAA6BojB,GAAAA,GAAAA,CAAAA;AACjC,IAAMC,MAAAA,aAAAA,GAAgBN,wBAAyB7sC,CAAAA,QAAAA,CAASyC,SAAlC,CAAA,CAAA;AACtB,IAAM2qC,MAAAA,YAAAA,GAAeP,wBAAyB7sC,CAAAA,QAAAA,CAASitC,EAAlC,CAAA,CAAA;AACjBE,IAAAA,IAAAA,kBAAkBC,YAAc,EAAA;AAEhCtjB,MAAAA,QAAAA,GAAWsjB,eAAgBF,GAAM,GAAA,CAACA,GAAD,CAAA,GAAQ,EAAM,GAAA,EAAA,CAAA;AAAA,KAClD;AAEDF,IAAAA,YAAAA,CAAaC,EAAD,CAAA,CAAA;AACZzjB,IAAiBM,gBAAAA,CAAAA,QAAAA,KAAa,IAAO30B,GAAAA,KAAAA,CAAAA,GAAY20B,QAAjC,CAAA,CAAA;AAEVujB,IAAAA,MAAAA,WAAAA,GAAcvjB,QAAa,KAAA,IAAA,IAAQzvB,KAAMC,CAAAA,OAAAA,CAAQwvB,QAAd,CACnCA,GAAAA,QAAAA,CAAS1xB,MAAS,GAAA,CAAA,GAClB0xB,QAAa30B,KAAAA,KAAAA,CAAAA,CAAAA;AACf83C,IAAAA,IAAAA,MAAMI,WAAa,EAAA;AACnBh4B,MACI,QAAA,CAAA,CAAC43B,EAAInjB,EAAAA,QAAL,CADI,CAAA,CAAA;AAAA,KAGL,MAAA;AACHzU,MAAAA,QAAAA,CACIlgB,KADI,CAAA,CAAA,CAAA;AAAA,KAGX;AAAA,GACJ;AAED,EAAA,4BAEK,GAAD,EAAA;AAAA,IAAK,OAAS,EAAA,MAAA;AAAA,IAAQ,KAAO,EAAA,GAAA;AAAA,IAAK,UAAY,EAAA,QAAA;AAAA,IAA9C,QAAA,EAAA,iBACIM,GAAA,CAAC,GAAD,EAAA;AAAA,MAAK,KAAO,EAAA,EAAA;AAAA,MAAZ,QAAA,sBACK,WAAD,EAAA;AAAA,QAAa,SAAb,EAAA,IAAA;AAAA,QAAA,QAAA,sBACKy/B,QAAD,EAAA;AAAA,UAAW,KAAOzyB,EAAAA,SAAAA;AAAAA,UACP,SADX,EAAA,IAAA;AAAA,UAEW,QAAA,EAAU,CAACge,GAAa,KAAA;AACpB6sB,YAAa7sB,YAAAA,CAAAA,GAAAA,CAAIlhB,MAAOoC,CAAAA,KAAAA,EAAO4nB,aAAnB,CAAA,CAAA;AAAA,WAH3B;AAAA,UAAA,QAKKujB,EAAAA,kBAAAA,CAAmBpzC,GAAKuzC,CAAAA,CAAAA,EAAAA,yBACpB,QAAD,EAAA;AAAA,YAEI,KAAOA,EAAAA,EAAAA;AAAAA,YAAKN,UAAAA,eAAgBM,CAAAA,EAAAA,CAAAA;AAAAA,WADtB,EAAA,CAAA,UAAA,EAAYnzC,IAAQmzC,CAAAA,CAAAA,EAAAA,EAAAA,CAAAA,CAD9B,CADH,CAAA;AAAA,SALL,CAAA;AAAA,OADJ,CAAA;AAAA,KAFR,CAkBI,kBAAAx3C,GAAA,CAAC,GAAD,EAAA;AAAA,MAAK,QAAU,EAAA,CAAA;AAAA,MAAG,EAAI,EAAA,CAAA;AAAA,MAAtB,QAAA,sBAEK,cAAD,EAAA;AAAA,QACI,SADJ,EAAA,IAAA;AAAA,QAEI,YAAY,EAFhB;AAAA,QAKI,WAAA,EAAchB,CACV,KAAA,qBAAAgB,GAAA,CAAC,KAAD,EAAA;AAAA,UACI,cAAA,sBACK,iBAAD,EAAA;AAAA,YAAmB,QAAU,EAAA,OAAA;AAAA,WAA7B,CAAA;AAAA,SARhB,CAAA;AAAA,QAYI,OAAO8zB,aAAiB,IAAA,IAAA;AAAA,QACxB,QAAA,EAAU,CAACyB,SAA2B,KAAA;AAClCsiB,UAAAA,YAAAA,CAAa7qC,SAAWuoB,EAAAA,SAAAA,KAAc,IAAO71B,GAAAA,KAAAA,CAAAA,GAAY61B,SAA7C,CAAA,CAAA;AAAA,SACf;AAAA,OAfL,CAAA;AAAA,KAFJ,CAAA,EAsBCzB,aAAkBp0B,KAAAA,KAAAA,CAAAA,wBAAc,GAAD,EAAA;AAAA,MAAK,EAAI,EAAA,CAAA;AAAA,MAAT,QAAA,sBAC3B,UAAD,EAAA;AAAA,QACI,OAAU0F,EAAAA,CAAAA,CAAAA,KAAMyyC,YAAa7qC,CAAAA,SAAAA,EAAWtN,KAAZ,CAAA,CAAA;AAAA,QAC5B,IAAM,EAAA,OAAA;AAAA,QAFV,QAAA,sBAGKq4C,SAAD,EAAA;AAAA,UAAS,OAAQ,CAAQv4C,MAAAA,EAAAA,KAAAA,CAAAA,CAAAA;AAAAA,UAAzB,QAAA,sBACK,SAAD,EAAA;AAAA,YAAW,QAAU,EAAA,OAAA;AAAA,WAArB,CAAA;AAAA,SADJ,CAAA;AAAA,OAHJ,CAAA;AAAA,KAzCR,CAAA,CAAA;AAAA,GAFJ,CAAA,CAAA;AAuDH;;ACxGYqT,MAAAA,WAAAA,GAAYC,UAA8EC,CAAAA,CAAAA,KAAAA,KAASC,YAAa,CAAA;AAAA,EACzH4Y,QAAQ,CAAC;AAAA,IAAEnQ,OAAAA;AAAAA,GAAe,MAAA;AAAA,IACtBzT,KAAO,EAAA,mBAAA;AAAA,IACPqL,MAAQ,EAAA,WAAA;AAAA,IACR4S,OAAS,EAAA,UAAA;AAAA,IACT9Q,KAAAA,EAAOsG,UAAU1I,KAAMsI,CAAAA,OAAAA,CAAQ9H,KAAKiX,OAAUzX,GAAAA,KAAAA,CAAMsI,QAAQ9H,IAAKsY,CAAAA,SAAAA;AAAAA,IACjEtT,eAAAA,EAAiBkD,OAAUoK,GAAAA,MAAAA,CAAO9S,KAAMsI,CAAAA,OAAAA,CAAQsK,UAAWC,CAAAA,OAAAA,EAAS,IAAnC,CAAA,GAA2C7S,KAAMsI,CAAAA,OAAAA,CAAQsK,UAAWC,CAAAA,OAAAA;AAAAA,IACrGE,UAAY,EAAA,8CAAA;AAAA,IACZxL,MAAQ,EAAA,MAAA;AAAA,IACRL,QAAU,EAAA,UAAA;AAAA,IACV0R,aAAe,EAAA,WAAA;AAAA,IACfnT,UAAY,EAAA,GAAA;AAAA,GAVU,CAAA;AAAA,EAY1B0/B,gBAAgB,CAAC;AAAA,IAAEjqB,KAAAA;AAAAA,GAAa,MAAA;AAAA,IAC5B/a,OAAS,EAAA,MAAA;AAAA,IACTyG,aAAe,EAAA,KAAA;AAAA,IACfxG,UAAY,EAAA,QAAA;AAAA,IACZ2H,gBAAgBmT,KAAU,KAAA,OAAA,GAAU,UAAcA,GAAAA,KAAAA,KAAU,WAAW,QAAW,GAAA,YAAA;AAAA,GAJtD,CAAA;AAAA,EAMhCkqB,aAAa,CAAC;AAAA,IAAElqB,KAAAA;AAAAA,GAAa,MAAA;AAAA,IACzB3I,QAAU,EAAA,QAAA;AAAA,IACV8yB,UAAY,EAAA,CAAA;AAAA,GAFa,CAAA;AAAA,EAI7BC,qBAAqB,CAAC;AAAA,IAAEpqB,KAAAA;AAAAA,GAAa,MAAA;AAAA,IACjC5a,MAAQ,EAAA,SAAA;AAAA,IACRiS,QAAU,EAAA,QAAA;AAAA,IACVxK,cAAgBmT,EAAAA,KAAAA;AAAAA,IAChBmqB,UAAY,EAAA,CAAA;AAAA,GAJqB,CAAA;AAAA,EAMrCE,UAAY,EAAA;AAAA,IACRpxB,UAAY,EAAA,KAAA;AAAA,GA9ByG;AAAA,EAgCzHqxB,gBAAkB,EAAA;AAAA,IACdhgC,eAAAA,EAAiBxF,MAAMsI,OAAQna,CAAAA,IAAAA,KAAS,UAAU,SAAY6R,GAAAA,KAAAA,CAAMsI,QAAQsK,UAAWC,CAAAA,OAAAA;AAAAA,GAjC8B;AAAA,EAmCzH8F,gBAAkB,EAAA;AAAA,IACdzR,QAAU,EAAA,UAAA;AAAA,IACVzB,UAAY,EAAA,GAAA;AAAA,IACZmT,aAAe,EAAA,WAAA;AAAA,GAHD;AAnCuG,CAAD,CAAzF,CAAA,CAAA;AA2CtB6sB,MAAAA,WAAAA,GAAct5C,cAAMiV,CAAAA,IAAAA,CAA4BskC,mBAAlC,CAAA,CAAA;AAU3B,SAA+D,mBAAA,CAAA;AAAA,EACIC,IAAAA;AAAAA,EACAC,YAAAA;AAAAA,EACAC,cAAAA;AAAAA,EACA9zC,MAAAA;AAAAA,EACAmjB,MAAAA;AAAAA,CACoB,EAAA;AAC7E,EAAA,MAAA,CAACxM,OAAAA,EAASC,UAAcnc,CAAAA,GAAAA,QAAAA,CAAS,KAAD,CAAA,CAAA;AACtC,EAAMuhB,MAAAA,GAAAA,GAAMta,OAAuB,IAAjB,CAAA,CAAA;AAEZmN,EAAAA,MAAAA,UAAUd,WAAU,CAAA;AAAA,IAAE4I,OAAAA;AAAAA,IAASwS,OAAOhG,MAAOgG,CAAAA,KAAAA;AAAAA,GAA1B,CAAA,CAAA;AAEnB,EAAA,MAAA,CAAClvB,IAAAA,EAAM01B,OAAWv1B,CAAAA,GAAAA,cAAAA,CAAMK,SAAS,KAAf,CAAA,CAAA;AAElBs5C,EAAAA,MAAAA,mBAAAA,GAAsB9xC,WAAY,CAAA,CAACgjB,KAAe,KAAA;AACpD0K,IAAAA,OAAAA,CAAQ,IAAD,CAAA,CAAA;AAAA,GAD4B,EAEpC,EAFoC,CAAA,CAAA;AAIvC,EAAME,MAAAA,WAAAA,GAAc5tB,YAAY,MAAM;AAClC0tB,IAAAA,OAAAA,CAAQ,KAAD,CAAA,CAAA;AAAA,GADoB,EAE5B,EAF4B,CAAA,CAAA;AAI/B,EAAM+H,MAAAA,MAAAA,GAASz1B,WAAY,CAAA,CAAC+xC,iBAAkD,KAAA;AAC1EF,IAAAA,cAAAA,CAAeE,iBAAD,CAAA,CAAA;AACdrkB,IAAAA,OAAAA,CAAQ,KAAD,CAAA,CAAA;AAAA,GAFe,EAGvB,EAHuB,CAAA,CAAA;AAK1B,EAAA,4BACK,aAAD,EAAA;AAAA,IAAA,QAAA,EAAA,iBACI10B,IAAA,CAAC,IAAD,EAAA;AAAA,MACI,WAAW4T,OAAQiY,CAAAA,MAAAA;AAAAA,MACnB,GAAA;AAAA,MACA,IAAM,EAAA,QAAA;AAAA,MACN,UAAY,EAAA,QAAA;AAAA,MACZ,YAAA,EAAc,MAAMlQ,UAAAA,CAAW,IAAD,CAAA;AAAA,MAC9B,WAAA,EAAa,MAAMA,UAAAA,CAAW,IAAD,CAAA;AAAA,MAC7B,YAAA,EAAc,MAAMA,UAAAA,CAAW,KAAD,CAAA;AAAA,MAC9B,SARJ,EAAA,IAAA;AAAA,MAAA,QAAA,EAAA,iBAUI1b,GAAA,CAAC,IAAD,EAAA;AAAA,QAAM,IAAN,EAAA,IAAA;AAAA,QAAW,EAAI,EAAA,IAAA;AAAA,QAAM,WAAW2T,OAAQwkC,CAAAA,WAAAA;AAAAA,QACpC,QAAA,uBAAA,KAAA,EAAA;AAAA,UAAK,WAAWxkC,OAAQukC,CAAAA,cAAAA;AAAAA,UACpB,QAAA,EAAA,iBAAAl4C,GAAA,CAAA,KAAA,EAAA;AAAA,YAAK,WAAW2T,OAAQ2kC,CAAAA,UAAAA;AAAAA,YACnBrwB,UAAAA,MAAOklB,CAAAA,IAAAA,IAAQllB,MAAOklB,CAAAA,IAAAA,CAAK1xB,WAAW1c,IAAvB,CAAA;AAAA,WADpB,CAGA,kBAAAiB,GAAA,CAAA,KAAA,EAAA;AAAA,YAAK,WAAW2T,OAAQ0kC,CAAAA,mBAAAA;AAAAA,YAAxB,UACKpwB,MAAO7P,CAAAA,KAAAA;AAAAA,WALhB,CAAA,CAAA;AAAA,SAAA,CAAA;AAAA,OAXR,CAAA,EAqBK6P,MAAO9c,CAAAA,QAAAA,IAAY,CAAC8c,MAAO9c,CAAAA,QAAAA,CAAS4tC,UAAc9wB,IAAAA,MAAAA,CAAOolB,QAAaqL,KAAAA,IAAAA,IAAQj9B,OAAW1c,IAAAA,IAAAA,CAAAA,wBACzF,IAAD,EAAA;AAAA,QAAM,IAAN,EAAA,IAAA;AAAA,QAAA,QAAA,sBACK,KAAD,EAAA;AAAA,UAAO,KAAM,EAAA,WAAA;AAAA,UACN,OAAQ,EAAA,KAAA;AAAA,UACR,OAAQ,EAAA,UAAA;AAAA,UACR,WAAW,CAAC25C,IAAAA;AAAAA,UAHnB,QAAA,uBAIK,UAAD,EAAA;AAAA,YACI,IAAM,EAAA,OAAA;AAAA,YACN,WAAW/kC,OAAQ4kC,CAAAA,gBAAAA;AAAAA,YACnB,SAAS,MAAM;AACXI,cAAAA,YAAAA,CAAa1wB,OAAOre,GAApB,CAAA,CAAA;AAAA,aAJR;AAAA,YAAA,QAAA,EAAA,CAOK,CAAC8uC,IAAAA,wBAAS,eAAD,EAAA;AAAA,cAAiB,QAAU,EAAA,OAAA;AAAA,aAA3B,CAAA,EACTA,IAAS,KAAA,KAAA,wBACT,eAAD,EAAA;AAAA,cAAiB,QAAU,EAAA,OAAA;AAAA,aAA3B,CAAA,EACCA,IAAS,KAAA,MAAA,wBACT,iBAAD,EAAA;AAAA,cAAmB,QAAU,EAAA,OAAA;AAAA,aAXjC,CAAA,CAAA;AAAA,WAAA,CAAA;AAAA,SAJJ,CAAA;AAAA,OADJ,CAsBCzwB,EAAAA,MAAAA,CAAO9c,QAAY,IAAA,CAAC8c,MAAO9c,CAAAA,QAAAA,CAAS4tC,UAAc9wB,IAAAA,MAAAA,CAAOnjB,MAAU,oBAAA9E,GAAA,CAAC,IAAD,EAAA;AAAA,QAAM,IAAN,EAAA,IAAA;AAAA,QAAA,QAAA,sBAC/D,KAAD,EAAA;AAAA,UAAO,KAAM,EAAA,WAAA;AAAA,UACN,OAAQ,EAAA,KAAA;AAAA,UACR,OAAQ,EAAA,UAAA;AAAA,UACR,WAAW,CAAC8E,MAAAA;AAAAA,UAHnB,QAAA,sBAIK,UAAD,EAAA;AAAA,YACI,WAAW6O,OAAQ4kC,CAAAA,gBAAAA;AAAAA,YACnB,IAAM,EAAA,OAAA;AAAA,YACN,OAASM,EAAAA,mBAAAA;AAAAA,YAHb,QAAA,sBAIK,uBAAD,EAAA;AAAA,cAAyB,QAAU,EAAA,OAAA;AAAA,cACV,KAAA,EAAOp9B,OAAW1c,IAAAA,IAAAA,GAAOW,KAAY,CAAA,GAAA,UAAA;AAAA,aAD9D,CAAA;AAAA,WAJJ,CAAA;AAAA,SAJJ,CAAA;AAAA,OA7CR,CAAA,CAAA;AAAA,KAAA,CAAA,EA6DCuoB,MAAOolB,CAAAA,QAAAA,wBAAa,OAAD,EAAA;AAAA,MAChB,EAAItuC,EAAAA,IAAAA,GAAQ,CAAUkpB,QAAAA,EAAAA,MAAAA,CAAOre,GAAQlK,CAAAA,CAAAA,GAAAA,KAAAA,CAAAA;AAAAA,MACrC,IAAA;AAAA,MACA,SAAW,EAAA,CAAA;AAAA,MACX,UAAUohB,GAAI1Z,CAAAA,OAAAA;AAAAA,MACd,OAASutB,EAAAA,WAAAA;AAAAA,MACT,YAAc,EAAA;AAAA,QACVuhB,QAAU,EAAA,QAAA;AAAA,QACVC,UAAY,EAAA,OAAA;AAAA,OARA;AAAA,MAUhB,eAAiB,EAAA;AAAA,QACbD,QAAU,EAAA,KAAA;AAAA,QACVC,UAAY,EAAA,OAAA;AAAA,OAZA;AAAA,MAAA,QAAA,sBAef,UAAD,EAAA;AAAA,QAAY,MAAA;AAAA,QACA,MAAA;AAAA,QACA,cAAgB3Z,EAAAA,MAAAA;AAAAA,OAF5B,CAAA;AAAA,KA7ER,CAAA,CAAA;AAAA,GADJ,CAAA,CAAA;AAqFH,CAAA;AASD,SAAuB,UAAA,CAAA;AAAA,EACIvU,MAAAA;AAAAA,EACA2wB,cAAAA;AAAAA,EACA9zC,MAAAA;AAAAA,CACmB,EAAA;AAG1C,EAAA,MAAMmE,KAAKgf,MAAOre,CAAAA,GAAAA,CAAAA;AAClB,EAAM+J,MAAAA,OAAAA,GAAUd,WAAU,CAAA,EAAD,CAAA,CAAA;AAEzB,EAAA,MAAM,CAACmmC,cAAAA,EAAgBC,iBAAqB15C,CAAAA,GAAAA,QAAAA,CAAgDuF,MAAxC,CAAA,CAAA;AAEpD,EAAMo0C,MAAAA,MAAAA,GAAS,CAAC9zC,CAAW,KAAA;AACvBwzC,IAAAA,cAAAA,CAAeI,cAAD,CAAA,CAAA;AAAA,GADlB,CAAA;AAIA,EAAMG,MAAAA,KAAAA,GAAQ,CAAC/zC,CAAW,KAAA;AACtBwzC,IAAAA,cAAAA,CAAel5C,KAAD,CAAA,CAAA,CAAA;AAAA,GADlB,CAAA;AAIA,EAAMkrB,MAAAA,WAAAA,GAAc,CAAC,CAAC9lB,MAAAA,CAAAA;AAEtB,EAA2BmE,SAAAA,iBAAAA,CAAAA,GAAAA,EACAmwC,YACAC,EAAAA,WAAAA,EACAC,cACZ,EAAA;AAEPF,IAAAA,IAAAA,YAAa/tC,CAAAA,QAAAA,KAAa,QAAY+tC,IAAAA,YAAAA,CAAa/tC,aAAa,QAAU,EAAA;AAC1E,MAAA,MAAMA,WAAW+tC,YAAa/tC,CAAAA,QAAAA,CAAAA;AAC9B,MAAA,MAAM7L,QAAQ45C,YAAa55C,CAAAA,KAAAA,CAAAA;AAC3B,MAAA,MAAMuY,aAAaqhC,YAAarhC,CAAAA,UAAAA,CAAAA;AAChC,MAAA,2BAAQ,uBAAD,EAAA;AAAA,QAAyB,KAAOshC,EAAAA,WAAAA;AAAAA,QACP,QAAUC,EAAAA,cAAAA;AAAAA,QACV,IAAMrwC,EAAAA,GAAAA;AAAAA,QACN,QAAA;AAAA,QACA,SAASmwC,YAAav0C,CAAAA,OAAAA;AAAAA,QACtB,UAAA;AAAA,QACA,KAAA;AAAA,OANhC,CAAA,CAAA;AAAA,KAOH,MAAA,IAAUu0C,YAAa/tC,CAAAA,QAAAA,KAAa,SAAW,EAAA;AAC5C,MAAA,MAAM7L,QAAQ45C,YAAa55C,CAAAA,KAAAA,CAAAA;AAC3B,MAAA,2BAAQ,kBAAD,EAAA;AAAA,QAAoB,KAAO65C,EAAAA,WAAAA;AAAAA,QACP,QAAUC,EAAAA,cAAAA;AAAAA,QACV,IAAMrwC,EAAAA,GAAAA;AAAAA,QACN,KAAA;AAAA,OAH3B,CAAA,CAAA;AAAA,KAIH,MAAA,IAAUmwC,YAAa/tC,CAAAA,QAAAA,KAAa,WAAa,EAAA;AAC9C,MAAA,MAAM7L,QAAQ45C,YAAa55C,CAAAA,KAAAA,CAAAA;AAC3B,MAAA,2BAAQ,mBAAD,EAAA;AAAA,QAAqB,KAAO65C,EAAAA,WAAAA;AAAAA,QACP,QAAUC,EAAAA,cAAAA;AAAAA,QACV,IAAMrwC,EAAAA,GAAAA;AAAAA,QACN,SAASmwC,YAAav0C,CAAAA,OAAAA;AAAAA,QACtB,KAAA;AAAA,OAJ5B,CAAA,CAAA;AAAA,KAKH;AAGG,IAAA,2BAAA,KAAA,EAAA;AAAA,MAAO,QAAA,EAAA,uBAAsBu0C,YAAa/tC,CAAAA,QAAAA,CAAAA,iBAAAA,CAAAA;AAAAA,KAD9C,CAAA,CAAA;AAAA,GAGH;AAIG,EAAA,4BAAAoO,QAAA,EAAA;AAAA,IAAA,QAAA,EAAA,iBAEIzZ,GAAA,CAAC,GAAD,EAAA;AAAA,MAAK,CAAG,EAAA,CAAA;AAAA,MAAG,WAAW2T,OAAQ+X,CAAAA,gBAAAA;AAAAA,MACzBzD,QAAAA,EAAAA,OAAO7P,KAASnP,IAAAA,EAAAA;AAAAA,KAHzB,CAMI,kBAAAjJ,GAAA,CAAC,OANL,EAAA,EAAA,CAQKioB,EAAAA,MAAAA,CAAOnjB,MAAU,oBAAA9E,GAAA,CAAC,GAAD,EAAA;AAAA,MAAK,CAAG,EAAA,CAAA;AAAA,MACrBu5C,UAAAA,iBAAkBtwC,CAAAA,EAAAA,EAAIgf,MAAOnjB,CAAAA,MAAAA,EAAQk0C,gBAAgBC,iBAApC,CAAA;AAAA,KAT1B,CAYI,kBAAAl5C,IAAA,CAAC,GAAD,EAAA;AAAA,MAAK,OAAQ,EAAA,MAAA;AAAA,MACR,cAAe,EAAA,UAAA;AAAA,MACf,CAAG,EAAA,CAAA;AAAA,MAFR,QAAA,EAAA,iBAGIC,GAAA,CAAC,GAAD,EAAA;AAAA,QAAK,EAAI,EAAA,CAAA;AAAA,QAAT,QAAA,sBACK,MAAD,EAAA;AAAA,UACI,UAAU,CAAC4qB,WAAAA;AAAAA,UACX,KAAM,EAAA,SAAA;AAAA,UACN,IAAK,EAAA,OAAA;AAAA,UACL,YAAW,EAAA,cAAA;AAAA,UACX,OAASuuB,EAAAA,KAAAA;AAAAA,UALb,QAAA,EAAA,OAAA;AAAA,SAAA,CAAA;AAAA,OAJR,CAWI,kBAAAn5C,GAAA,CAAC,MAAD,EAAA;AAAA,QACI,OAAQ,EAAA,UAAA;AAAA,QACR,KAAM,EAAA,SAAA;AAAA,QACN,OAASk5C,EAAAA,MAAAA;AAAAA,QAHb,QAAA,EAAA,QAAA;AAAA,OAXJ,CAAA,CAAA;AAAA,KAZJ,CAAA,CAAA;AAAA,GADJ,CAAA,CAAA;AAgCH;;ACvRD,MAAMM,sBAAyB,GAAA,IAAA,CAAA;AASlBhuB,MAAAA,cAAAA,GAAiB1Y,UAAkBC,CAAAA,CAAAA,KAAAA,KAASC,YAAa,CAAA;AAAA,EAClEyY,cAAgB,EAAA;AAAA,IACZzjB,KAAO,EAAA,MAAA;AAAA,IACPsS,MAAQ,EAAA,MAAA;AAAA,IACR8K,QAAU,EAAA,CAAA;AAAA,GAJoD;AAAA,EAMlEwG,MAAQ,EAAA;AAAA,IACJ5jB,KAAO,EAAA,mBAAA;AAAA,IACPqL,MAAQ,EAAA,WAAA;AAAA,IACR4S,OAAS,EAAA,UAAA;AAAA,IACT9Q,KAAAA,EAAOpC,KAAMsI,CAAAA,OAAAA,CAAQ9H,IAAKsY,CAAAA,SAAAA;AAAAA,IAC1BtT,eAAAA,EAAiBxF,KAAMsI,CAAAA,OAAAA,CAAQsK,UAAWC,CAAAA,OAAAA;AAAAA,IAC1CE,UAAY,EAAA,8CAAA;AAAA,IACZxL,MAAQ,EAAA,MAAA;AAAA,IACRL,QAAU,EAAA,UAAA;AAAA,IACV0R,aAAe,EAAA,WAAA;AAAA,IACfnT,UAAY,EAAA,GAAA;AAAA,GAhBkD;AAAA,EAkBlEsT,QAAU,EAAA;AAAA,IACN9F,MAAQ,EAAA,SAAA;AAAA,IACR9S,OAAS,EAAA,MAAA;AAAA,IACTC,UAAY,EAAA,QAAA;AAAA,IACZ8G,QAAU,EAAA,UAAA;AAAA,GAtBoD;AAAA,EAwBlE8R,iBAAmB,EAAA;AAAA,IACJ,SAAA,EAAA;AAAA,MACPxT,iBAAiBxF,KAAMsI,CAAAA,OAAAA,CAAQna,IAAS,KAAA,MAAA,GAASwnB,QAAM3V,KAAMsI,CAAAA,OAAAA,CAAQsK,UAAWC,CAAAA,OAAAA,EAAS,GAAnC,CAA0C8C,GAAAA,OAAAA,CAAM3V,MAAMsI,OAAQsK,CAAAA,UAAAA,CAAWC,SAAS,GAAnC,CAAA;AAAA,KAD9F;AAAA,GAzBmD;AAAA,EA6BlEqC,MAAQ,EAAA;AAAA,IACJhC,OAAS,EAAA,gBAAA;AAAA,GA9BqD;AAAA,EAgClEwzB,SAAW,EAAA;AAAA,IACPjmC,WAAa,EAAA,iBAAA;AAAA,GADN;AAhCuD,CAAD,CAA7B,CAAA,CAAA;AAkDf,SAAA,KAAA,CAAA;AAAA,EACI9B,IAAAA;AAAAA,EACAgoC,eAAAA;AAAAA,EACAC,iBAAAA;AAAAA,EACAC,YAAAA;AAAAA,EACAtgC,IAAAA;AAAAA,EACAi0B,OAAAA;AAAAA,EACAsM,cAAAA;AAAAA,EACApK,UAAAA;AAAAA,EACA1B,cAAAA;AAAAA,EACAjpC,MAAAA;AAAAA,EACAg1C,sBAAAA;AAAAA,EACA51C,UAAAA;AAAAA,EACA00C,cAAAA;AAAAA,EACAn8B,MAAAA;AAAAA,EACAhJ,KAAAA;AAAAA,EACAsmC,YAAAA;AAAAA,EACAC,cAAAA;AAAAA,EACAzpC,OAAAA;AAAAA,EACAy9B,QAAW,GAAA,IAAA;AAAA,CACG,EAAA;AACvC,EAAMnxB,MAAAA,cAAAA,GAAqCJ,MAASA,GAAAA,MAAAA,CAAO,CAAK/c,CAAAA,GAAAA,KAAAA,CAAAA,CAAAA;AAChE,EAAMod,MAAAA,WAAAA,GAA0CL,MAASA,GAAAA,MAAAA,CAAO,CAAK/c,CAAAA,GAAAA,KAAAA,CAAAA,CAAAA;AAErE,EAAA,MAAM,CAACu6C,SAAAA,EAAWC,YAAgBh7C,CAAAA,GAAAA,cAAAA,CAAMK,QAAxC,EAAA,CAAA;AAEM46C,EAAAA,MAAAA,QAAAA,GAAW3zC,OAAkB,IAAZ,CAAA,CAAA;AAIvB,EAAM4zC,MAAAA,SAAAA,GAAY5zC,OAAe,CAAT,CAAA,CAAA;AACxB,EAAM6zC,MAAAA,sBAAAA,GAAyB7zC,OAAe,CAAT,CAAA,CAAA;AAE/BmN,EAAAA,MAAAA,UAAU6X,cAAhB,EAAA,CAAA;AACA,EAAM8uB,MAAAA,QAAAA,GAAW,CAACryB,MAAgB,KAAA;AAC9Bhd,IAAQqmB,OAAAA,CAAAA,GAAAA,CAAI,aAAarJ,MAAzB,CAAA,CAAA;AACAhd,IAAQqmB,OAAAA,CAAAA,GAAAA,CAAI,YAAY5f,IAAxB,CAAA,CAAA;AACAzG,IAAQqmB,OAAAA,CAAAA,GAAAA,CAAI,kBAAkBic,OAA9B,CAAA,CAAA;AACI,IAAA,IAAA,CAACtlB,MAAO9c,CAAAA,QAAAA;AAAU,MAAA,OAAOwI,OAAQsU,CAAAA,MAAAA,CAAAA;AAErC,IAAA,IAAI,CAACA,MAAAA,CAAO9c,QAASovC,CAAAA,mBAAAA,YACTpvC,QAASE,CAAAA,QAAAA,KAAa,QAC1B4c,IAAAA,MAAAA,CAAO9c,SAASE,QAAa,KAAA,QAAA,IAC7B4c,MAAO9c,CAAAA,QAAAA,CAASE,aAAa,WACnC,CAAA,EAAA;AACU,MAAA,OAAA,CAAA,EAAEsI,OAAQsU,CAAAA,MAAAA,CAAAA,CAAAA,EAAUtU,OAAQ8lC,CAAAA,SAAAA,CAAAA,UAAAA,CAAAA,CAAAA;AAAAA,KACvC;AAAM,MAAA,OAAO9lC,OAAQsU,CAAAA,MAAAA,CAAAA;AAAAA,GAZ1B,CAAA;AAcApmB,EAAAA,SAAAA,CAAU,MAAM;AACZ,IAAIs4C,IAAAA,QAAAA,CAAS/yC,OAAWsK,IAAAA,IAAAA,EAAM/O,MAAQ,EAAA;AAClCw3C,MAAS/yC,QAAAA,CAAAA,OAAAA,CAAQozC,WAAYJ,CAAAA,SAAAA,CAAUhzC,OAAvC,CAAA,CAAA;AAAA,KACH;AAAA,GACF,EAAA,CAACsK,IAAM/O,EAAAA,MAAP,CAJM,CAAA,CAAA;AAMT,EAAMg2C,MAAAA,YAAAA,GAAe,CAAC/uC,GAAgB,KAAA;AAE5B6wC,IAAAA,MAAAA,MAAAA,GAAS59B,cAAmBjT,KAAAA,GAAAA,IAAOkT,WAAgB,KAAA,MAAA,CAAA;AACnD49B,IAAAA,MAAAA,KAAAA,GAAQ79B,cAAmBjT,KAAAA,GAAAA,IAAOkT,WAAgB,KAAA,KAAA,CAAA;AAClD69B,IAAAA,MAAAA,OAAUD,GAAAA,KAAAA,GAAQ,MAAUD,GAAAA,MAAAA,GAAS/6C,KAAY,CAAA,GAAA,KAAA,CAAA;AACjDk7C,IAAAA,MAAAA,eAAAA,GAAsCH,SAAS/6C,KAAYkK,CAAAA,GAAAA,GAAAA,CAAAA;AAE3DixC,IAAAA,MAAAA,YAAkDF,OAAWC,IAAAA,eAAAA,GAAkB,CAACA,eAAAA,EAAiBD,OAAlB,CAA6Bj7C,GAAAA,KAAAA,CAAAA,CAAAA;AAClH,IAAA,IAAIoF,MAAQ,EAAA;AACJg1C,MAAAA,IAAAA,sBAA0B,IAAA,CAACA,sBAAuBh1C,CAAAA,MAAAA,EAAQ+1C,SAAT,CAAqB,EAAA;AACtE,QAAIjC,IAAAA,cAAAA;AACAA,UAAAA,cAAAA,CAAel5C,KAAD,CAAA,CAAA,CAAA;AAAA,OACrB;AAAA,KACJ;AAED,IAAA,IAAIi6C,iBAAmB,EAAA;AACnBA,MAAiB,iBAAA,EAAA,CAAA;AAAA,KACpB;AAED,IAAA,IAAIK,cAAgB,EAAA;AAChBA,MAAAA,cAAAA,CAAea,SAAD,CAAA,CAAA;AAAA,KACjB;AAEDL,IAAW,WAAA,EAAA,CAAA;AAAA,GAvBf,CAAA;AA2BM,EAAA,MAAA,CAAC/tB,UAAAA,EAAYquB,aAAiB57C,CAAAA,GAAAA,cAAAA,CAAMK,SAASG,KAAf,CAAA,CAAA,CAAA;AAE9BmtB,EAAAA,MAAAA,YAAY,MAAM;AACpB,IAAMkuB,MAAAA,QAAAA,GAAW5e,SAAS6e,gBAAiB,CAAA,aAA1B,EAAyC,CAAGC,CAAAA,CAAAA,oBAAAA,CAAqB,OAAjE,CAA0E,CAAA,CAAA,CAAA,CAAA;AACvFxuB,IAAAA,IAAAA,eAAe/sB,KAAW,CAAA,EAAA;AAC1Bq7C,MAAAA,QAAAA,CAASxH,KAAT,EAAA,CAAA;AACAryB,MAAAA,UAAAA,CAAW,MAAM;AACb65B,QAAAA,QAAAA,CAASxH,KAAT,EAAA,CAAA;AAAA,SACD,GAFO,CAAA,CAAA;AAAA,KAGP,MAAA;AACHwH,MAAAA,QAAAA,CAASxH,KAAT,EAAA,CAAA;AAAA,KACH;AACDuH,IAAAA,aAAAA,CAAcC,SAASzlB,OAAV,CAAA,CAAA;AAAA,GAVjB,CAAA;AAaM4lB,EAAAA,MAAAA,YAAY,MAAM;AACpB,IAAIlB,IAAAA,cAAAA;AACAA,MAAAA,cAAAA,CAAet6C,KAAD,CAAA,CAAA,CAAA;AAAA,GAFtB,CAAA;AAKM86C,EAAAA,MAAAA,cAAc,MAAM;AAClBL,IAAAA,IAAAA,SAAS/yC,OAAS,EAAA;AAClBgzC,MAAAA,SAAAA,CAAUhzC,OAAU,GAAA,CAAA,CAAA;AACpB+yC,MAAS/yC,QAAAA,CAAAA,OAAAA,CAAQozC,YAAY,CAA7B,CAAA,CAAA;AAAA,KACH;AAAA,GAJL,CAAA;AAMMW,EAAAA,MAAAA,WAAW,CAAC;AAAA,IAAEjW,SAAAA;AAAAA,IAAWkW,wBAAAA;AAAAA,GAMzB,KAAA;AACIC,IAAAA,MAAAA,WAAc1wC,GAAAA,IAAAA,CAAK2wC,QAAQjB,uBAAuBjzC,OAAU,GAAA,GAAA,CAAA;AAClE,IAAI,IAAA,CAACg0C,4BAA4BC,WAAa,EAAA;AAC1CjB,MAAAA,SAAAA,CAAUhzC,OAAU89B,GAAAA,SAAAA,CAAAA;AAAAA,KACvB;AAAA,GAVL,CAAA;AAaMqW,EAAAA,MAAAA,uBAAuB,MAAM;AAC/BlB,IAAuBjzC,sBAAAA,CAAAA,OAAAA,GAAUuD,KAAK2wC,GAAtC,EAAA,CAAA;AACI1B,IAAAA,IAAAA,YAAAA;AACAA,MAAY,YAAA,EAAA,CAAA;AAAA,GAHpB,CAAA;AAMA,EAAM4B,MAAAA,QAAAA,GAAW,CAACx8C,KAAyF,KAAA;AACnG,IAAA,IAAA,CAACywC,UAAAA;AACD,MAAA,OAAA;AACJA,IAAAA,UAAAA,CAAWzwC,KAAD,CAAA,CAAA;AAAA,GAHd,CAAA;AAMMy8C,EAAAA,MAAAA,iBAAiB,CAAC;AAAA,IAAE1R,WAAAA;AAAAA,GAAuB,KAAA;AAE7C,IAAM9hB,MAAAA,MAAAA,GAASslB,QAAQxD,WAAc,GAAA,CAAA,CAAA,CAAA;AAE/B2R,IAAAA,MAAAA,qBAAAA,GACFzzB,UAAUnjB,MAAUA,IAAAA,MAAAA,CAAOmjB,OAAOre,GAC5B9E,CAAAA,GAAAA,MAAAA,CAAOmjB,OAAOre,GACdlK,CAAAA,GAAAA,KAAAA,CAAAA,CAAAA;AAEJi8C,IAAAA,MAAAA,sBAAAA,GAAyB,CAAC7C,iBAAkD,KAAA;AAE1E8C,MAAAA,IAAAA,iBAAyC92C,MAAS,GAAA;AAAA,QAAKA,GAAAA,MAAAA;AAAAA,UAAW,EAAtE,CAAA;AAEI,MAAA,IAAA,CAACg0C,iBAAmB,EAAA;AACpB,QAAA,OAAO8C,eAAe3zB,MAAOre,CAAAA,GAAAA,CAAAA,CAAAA;AAAAA,OAC1B,MAAA;AACHgyC,QAAAA,cAAAA,CAAe3zB,OAAOre,GAAOkvC,CAAAA,GAAAA,iBAAAA,CAAAA;AAAAA,OAChC;AAEK+B,MAAAA,MAAAA,YAAkDh+B,cAAkBC,IAAAA,WAAAA,GAAc,CAACD,cAAAA,EAAgBC,WAAjB,CAAgCpd,GAAAA,KAAAA,CAAAA,CAAAA;AAClHm8C,MAAAA,MAAAA,2BAA8B,GAAA,CAAC/B,sBAA0BA,IAAAA,sBAAAA,CAAuB8B,gBAAgBf,SAAjB,CAAA,CAAA;AACjF,MAAA,IAAA,CAACgB,2BAA6B,EAAA;AAC9BD,QAAAA,cAAAA,GAAiB9C,iBAAoB,GAAA;AAAA,UAAA,CAAG7wB,OAAOre,GAAMkvC,GAAAA,iBAAAA;AAAAA,YAA8C,EAAnG,CAAA;AAAA,OACH;AAED,MAAIF,IAAAA,cAAAA;AAAgBA,QAAAA,cAAAA,CAAegD,cAAD,CAAA,CAAA;AAElC,MAAI3zB,IAAAA,MAAAA,CAAOre,QAAQiT,cAAgB,EAAA;AAC/Bq+B,QAAS,SAAA,EAAA,CAAA;AAAA,OACZ;AAAA,KApBL,CAAA;AAuBA,IAAA,2BAEK,aAAD,EAAA;AAAA,MACKnR,QAAAA,EAAAA,WAAAA,KAAgB,CACX,mBAAAhqC,IAAA,CAAA,KAAA,EAAA;AAAA,QAAK,WAAW4T,OAAQiY,CAAAA,MAAAA;AAAAA,QACnB,KAAO,EAAA;AAAA,UACH1Y,OAAS,EAAA,MAAA;AAAA,UACT4H,cAAgB,EAAA,QAAA;AAAA,UAChB3H,UAAY,EAAA,QAAA;AAAA,UACZnL,KAAO,EAAA,MAAA;AAAA,UACPie,OAAS,EAAA,CAAA;AAAA,SANlB;AAAA,QAQE,QAAA,EAAA,iBAAAjmB,GAAA,CAAA,GAAA,EAAA;AAAA,UAAG,KAAO,EAAA;AAAA,YACNqT,MAAQ,EAAA,CAAA;AAAA,YACRrL,KAAO,EAAA,MAAA;AAAA,WAFX;AAAA,UAAA,QAAA,EAAA,IAAA;AAAA,SARF,CAaE,kBAAAhI,GAAA,CAAC,OAAD,EAAA;AAAA,UAAS,KAAO,EAAA,YAAA;AAAA,UAAc,SAAW,EAAA,YAAA;AAAA,UAAzC,QAAA,sBACK,QAAD,EAAA;AAAA,YACI,OAASysB,EAAAA,UAAAA;AAAAA,YACT,QAAUI,EAAAA,SAAAA;AAAAA,WAFd,CAAA;AAAA,SAdN,CAAA,CAAA;AAAA,OADL,CAqBK,mBAAA7sB,GAAA,CAAC,WAAD,EAAA;AAAA,QACE,cAAgB27C,EAAAA,sBAAAA;AAAAA,QAChB,MAAQD,EAAAA,qBAAAA;AAAAA,QACR,IAAM7+B,EAAAA,cAAAA,KAAmBoL,MAAOre,CAAAA,GAAAA,GAAMkT,WAAcpd,GAAAA,KAAAA,CAAAA;AAAAA,QACpD,YAAA;AAAA,QACA,MAAA;AAAA,OALF,CAAA;AAAA,KAxBd,CAAA,CAAA;AAAA,GAhCJ,CAAA;AAqEA,EAA0B,SAAA,cAAA,GAAA;AACtB,IAAA,4BACK,GAAD,EAAA;AAAA,MAAK,OAAQ,EAAA,MAAA;AAAA,MACR,aAAe,EAAA,QAAA;AAAA,MACf,cAAe,EAAA,QAAA;AAAA,MACf,MAAQ,EAAA,CAAA;AAAA,MAHb,QAAA,EAAA,iBAKIM,GAAA,CAAC,UAAD,EAAA;AAAA,QAAY,OAAS,EAAA,IAAA;AAAA,QAChB,QAAA,EAAA,0CAAA;AAAA,OADL,CAAA,EAICyT,KAAOpP,EAAAA,IAAAA,wBAAS,UAAD,EAAA;AAAA,QAAA,UACXoP,KAAOpP,EAAAA,IAAAA;AAAAA,OADI,CAAA,EAIfoP,KAAO9T,EAAAA,OAAAA,wBAAY,UAAD,EAAA;AAAA,QAAA,UACd8T,KAAO9T,EAAAA,OAAAA;AAAAA,OAdhB,CAAA,CAAA;AAAA,KADJ,CAAA,CAAA;AAAA,GAqBH;AAED,EAA0B,SAAA,cAAA,GAAA;AACtB,IAAI4Q,IAAAA,OAAAA;AACA,MAAO,uBAAAvQ,GAAA,CAAC,sBAAR,EAAA,EAAA,CAAA,CAAA;AACJ,IAAA,4BACK,GAAD,EAAA;AAAA,MAAK,OAAQ,EAAA,MAAA;AAAA,MACR,aAAe,EAAA,QAAA;AAAA,MACf,UAAW,EAAA,QAAA;AAAA,MACX,cAAe,EAAA,QAAA;AAAA,MACf,KAAO,EAAA,MAAA;AAAA,MACP,MAAQ,EAAA,MAAA;AAAA,MACR,OAAS,EAAA,CAAA;AAAA,MANd,QAAA,EAAA,iBAOIA,GAAA,CAAC,GAAD,EAAA;AAAA,QAAK,OAAS,EAAA,CAAA;AAAA,QAAd,QACI,kBAAAA,GAAA,CAAC,cAAD,EAAA,EAAA,CAAA;AAAA,OARR,CAUI,kBAAAA,GAAA,CAAC,UAAD,EAAA;AAAA,QACK+5C,QAAAA,EAAAA,YAAAA;AAAAA,OAXT,CAAA,CAAA;AAAA,KADJ,CAAA,CAAA;AAAA,GAgBH;AAED,EAAM+B,MAAAA,uBAAAA,GAA0B/0C,YAAY,CAAC;AAAA,IACIkhB,MAAAA;AAAAA,IACAjgB,KAAAA;AAAAA,GAC0C,KAAA;AACvF,IAAA,IAAI+lC,cAAgB,EAAA;AAChBA,MAAe,cAAA,CAAA;AAAA,QACX/lC,KAAAA;AAAAA,QACA4B,KAAKqe,MAAOre,CAAAA,GAAAA;AAAAA,QACZqe,MAAAA;AAAAA,OAHU,CAAA,CAAA;AAAA,KAKjB;AAAA,GACJ,EAAE,CAAC8lB,cAAD,CAXwC,CAAA,CAAA;AAevC,EAAA,2BAAAt0B,QAAA,EAAA;AAAA,IAAA,QAAA,sBAEK,OAAD,EAAA;AAAA,MACI,MADJ,EAAA,IAAA;AAAA,MAEI,QAAUygC,EAAAA,YAAAA;AAAAA,MAFd,UAGK,CAAC;AAAA,QAAEvpB,UAAAA;AAAAA,OAAiB,KAAA;AAGb,QAAA,2BAAA,KAAA,EAAA;AAAA,UAAK,GAAKA,EAAAA,UAAAA;AAAAA,UACL,WAAWhd,OAAQ8X,CAAAA,cAAAA;AAAAA,UACnB,GAAKwrB,EAAAA,YAAAA;AAAAA,UAFV,QAIKgD,EAAAA,SAAAA,EAAW1pB,MACR,oBAAAxwB,IAAA,CAAC,SAAD,EAAA;AAAA,YACI,YAAA,EAAc8T,IAAKF,CAAAA,OAAAA,CAAQmY,QAAU,EAAA;AAAA,cAAA,CAAGnY,QAAQoY,iBAAoBiiB,GAAAA,QAAAA;AAAAA,aAAlD,CAAA;AAAA,YAClB,IAAA;AAAA,YACA,iBAAmB8N,EAAAA,uBAAAA;AAAAA,YACnB,KAAA,EAAO7B,UAAU1pB,MAAOvoB,CAAAA,KAAAA;AAAAA,YACxB,MAAA,EAAQiyC,UAAU1pB,MAAOjW,CAAAA,MAAAA;AAAAA,YACzB,aAAe7G,EAAAA,KAAAA,GAAQsoC,cAAH,EAAA,GAAsBC,cAN9C,EAAA;AAAA,YAOI,KAPJ,EAAA,IAAA;AAAA,YAQI,6BAA+B,EAAA,KAAA;AAAA,YAC/B,SAAA,EAAWxsB,aAAalW,IAAD,CAAA;AAAA,YACvB,GAAK6gC,EAAAA,QAAAA;AAAAA,YACL,QAAA;AAAA,YACA,gBAAkB,EAAA,CAAA;AAAA,YAClB,qBAAuBX,EAAAA,sBAAAA;AAAAA,YACvB,YAAc+B,EAAAA,oBAAAA;AAAAA,YACd,gBACI,EAAA;AAAA,cAAE32B,OAAS42B,EAAAA,QAAAA;AAAAA,aAhBnB;AAAA,YAAA,QAAA,EAAA,iBAoBIx7C,GAAA,CAAC,MAAD,EAAA;AAAA,cACI,cAAA;AAAA,cACA,cAAc,CAAC;AAAA,gBACIwsC,OAAAA;AAAAA,eAAAA,KAEfkN,kBACMA,eAAgB,CAAA;AAAA,gBACdpgC,IAAAA;AAAAA,gBACAhW,KAAOkpC,EAAAA,OAAAA;AAAAA,eAFM,CAIf,GAAA,IAAA;AAAA,cAEV,KAAO,EAAA,QAAA;AAAA,cAEP,OAAS,EAAA,IAAA;AAAA,cACT,UAAY,EAAA,CAAA;AAAA,cACZ,MAAA,EAAQqN,iBAAiB,MAASn6C,GAAAA,KAAAA,CAAAA;AAAAA,cAClC,KAAO,EAAA,GAAA;AAAA,eAJF,WAbT,CAAA,EAmBC6tC,QAAQtpC,GAAKgkB,CAAAA,CAAAA,MAAAA,yBACT,MAAD,EAAA;AAAA,cAEI,OAAOA,MAAO7P,CAAAA,KAAAA;AAAAA,cACd,WAAW,CAAC;AAAA,gBAAEo0B,OAAAA;AAAAA,eAAc,KAAA;AAClByP,gBAAAA,MAAAA,aAAAA,GAAqBvqC,MAAM5M,MAAO,CAAA,CAACiwC,MAAWA,CAAE9rC,CAAAA,EAAAA,KAAOujC,OAAQvjC,CAAAA,EAA1C,CAA8C,CAAA,CAAA,CAAA,CAAA;AACzE,gBAAIgzC,IAAAA,aAAAA,CAAe92C,OAAO+2C,QAAU,EAAA;AAChC,kBAAQ,OAAA,CAAA,EAAE5B,SAASryB,MAAD,CAAA,CAAA,aAAA,CAAA,CAAA;AAAA,iBACf,MAAA;AACIqyB,kBAAAA,OAAAA,SAASryB,MAAD,CAAA,CAAA;AAAA,iBAClB;AAAA,eATT;AAAA,cAYI,KAAO,EAAA;AAAA,gBAAE9S,KAAAA,EAAO8S,OAAO9c,QAAY8c,IAAAA,MAAAA,CAAO9c,SAASgxC,SAAYl0B,GAAAA,MAAAA,CAAO9c,SAASgxC,SAAY,GAAA,qBAAA;AAAA,eAZ/F;AAAA,cAaI,cAAA;AAAA,cACA,cAAcl0B,MAAOqlB,CAAAA,YAAAA;AAAAA,cACrB,MAAA,EAAQ9d,aAAalW,IAAD,CAAA;AAAA,cACpB,OAAO2O,MAAOgG,CAAAA,KAAAA;AAAAA,cACd,QAAU,EAAA,CAAA;AAAA,cACV,UAAY,EAAA,CAAA;AAAA,cACZ,SAAW,EAAA,IAAA;AAAA,cACX,IAAA;AAAA,cACA,SAAShG,MAAOre,CAAAA,GAAAA;AAAAA,cAChB,OAAOqe,MAAOjgB,CAAAA,KAAAA;AAAAA,aArBTigB,EAAAA,MAAAA,CAAOre,GADhB,CADH,CAvCL,CAAA;AAAA,WAAA,CAAA;AAAA,SANZ,CAAA,CAAA;AAAA,OAyEH;AAAA,KA9EL,CAAA;AAAA,GAJR,CAAA,CAAA;AAuFH;;ACzYYwyC,MAAAA,qBAAAA,GAAwB,MAA6B7/B,UAAAA,CAAWzb,iBAAD,CAAA;;AC5B7C,SAAA,YAAA,GAAA;AAE3B,EAAA,2BACK,GAAD,EAAA;AAAA,IACI,OAAQ,EAAA,MAAA;AAAA,IACR,KAAO,EAAA,MAAA;AAAA,IACP,MAAQ,EAAA,MAAA;AAAA,IAHZ,QAAA,uBAIK,GAAD,EAAA;AAAA,MAAK,CAAE,EAAA,MAAA;AAAA,MAAP,QAAA,EAAA,iBACId,GAAA,CAAC,UAAD,EAAA;AAAA,QAAY,OAAS,EAAA,IAAA;AAAA,QAAM,KAAO,EAAA,QAAA;AAAA,QAAU,YAAc,EAAA,IAAA;AAAA,QAA1D,QAAA,EAAA,gBAAA;AAAA,OADJ,CAII,kBAAAA,GAAA,CAAC,UAAD,EAAA;AAAA,QAAY,KAAO,EAAA,QAAA;AAAA,QAAnB,QAAA,EAAA,2DAAA;AAAA,OAJJ,CAAA,CAAA;AAAA,KAAA,CAAA;AAAA,GALR,CAAA,CAAA;AAeH;;ACQgC,SAAA,gBAAA,CAAA;AAAA,EAAEq8C,QAAAA;AAAAA,CAAmC,EAAA;AAE5Dl2C,EAAAA,MAAAA,WAAWC,WAAjB,EAAA,CAAA;AACMhG,EAAAA,MAAAA,oBAAoB0kB,aAA1B,EAAA,CAAA;AACA,EAAA,MAAM/gB,aAAa3D,iBAAkB2D,CAAAA,UAAAA,CAAAA;AAErC,EAAA,IAAI,CAACA,UAAAA;AACD,IAAO,uBAAA/D,GAAA,CAAPyZ,QAAA,EAAA,EAAA,CAAA,CAAA;AAEJ,EAAA,MAAM9S,QAAQR,QAASQ,CAAAA,KAAAA,CAAAA;AAMvB,EAAA,MAAMC,YAAeD,GAAAA,KAAAA,IAASA,KAAME,CAAAA,aAAAA,GAAgBF,MAAME,aAAgBV,GAAAA,QAAAA,CAAAA;AAE1E,EAAA,MAAMm2C,eAA8B,EAApC,CAAA;AACIv4C,EAAAA,IAAAA,WAAWS,KAAO,EAAA;AACZ+3C,IAAAA,MAAAA,iBAAAA,GAAoB,CAACj6C,IAAAA,EAAck6C,OAAqB,KAAA;AAC1D,MAAA,2BAAQ,KAAD,EAAA;AAAA,QAEH,IAAA;AAAA,QACA,OAAA,sBACK,iBAAD,EAAA;AAAA,UACI,IAAA;AAAA,UAEA,OAAOA,OAAQn4C,CAAAA,IAAAA;AAAAA,UAHnB,UAIKm4C,OAAQ/3C,CAAAA,IAAAA;AAAAA,SAFH,EAAA,cAAanC,IAFvB,CAAA,CAAA,CAAA;AAAA,OAHC,EAAA,qBAAqBA,IADvB,CAAA,CAAA;AAAA,KADX,CAAA;AAcAyB,IAAWS,UAAAA,CAAAA,KAAAA,CAAM4F,QAASoyC,CAAY,OAAA,KAAA;AAClC,MAAI53C,IAAAA,KAAAA,CAAMC,OAAQ23C,CAAAA,OAAAA,CAAQl6C,IAAtB,CAAA;AACAg6C,QAAaz4C,YAAAA,CAAAA,IAAAA,CAAK,GAAG24C,OAAAA,CAAQl6C,IAAK2B,CAAAA,GAAAA,CAAI3B,UAAQi6C,iBAAkBj6C,CAAAA,IAAAA,EAAMk6C,OAAP,CAA1C,CAArB,CAAA,CAAA;AAAA;AAEAF,QAAAA,YAAAA,CAAaz4C,IAAK04C,CAAAA,iBAAAA,CAAkBC,OAAQl6C,CAAAA,IAAAA,EAAMk6C,OAAf,CAAnC,CAAA,CAAA;AAAA,KAJR,CAAA,CAAA;AAAA,GAMH;AAED,EAAA,MAAMC,mBAAmB,CAAC,GAAG14C,WAAWxB,WAAf,CAAA,CAEpBm2C,KAAK,CAAC5sC,CAAAA,EAAGC,CAAMA,KAAAA,CAAAA,CAAEzJ,KAAKK,MAASmJ,GAAAA,CAAAA,CAAExJ,KAAKK,MAFlB,CAAA,CAGpBsB,IAAKC,CAAe,UAAA,KAAA;AACPw4C,IAAAA,MAAAA,OAAUt8C,GAAAA,iBAAAA,CAAkBgE,sBAAuBF,CAAAA,UAAAA,CAAW5B,IAApD,CAAA,CAAA;AAChB,IAAA,2BAAQ,KAAD,EAAA;AAAA,MAAO,MAAMo6C,OAAU,GAAA,IAAA;AAAA,MAEhB,OAAA,sBACK,iBAAD,EAAA;AAAA,QACI,IAAMA,EAAAA,OAAAA;AAAAA,QACN,OAAOx4C,UAAWG,CAAAA,IAAAA;AAAAA,QAFtB,QAAA,sBAGK8wC,sBAAD,EAAA;AAAA,UACI,MAAMjxC,UAAW5B,CAAAA,IAAAA;AAAAA,UACjB,UAAA;AAAA,SAFJ,CAAA;AAAA,OAHJ,CAAA;AAAA,KAHX,EACa,CAAa4B,WAAAA,EAAAA,UAAAA,CAAW5B,IADrC,CAAA,CAAA,CAAA,CAAA;AAAA,GALM,CAAA,CAAA;AAmBnBq6C,EAAAA,MAAAA,SAAAA,uBACD,KAAD,EAAA;AAAA,IAAO,IAAM,EAAA,GAAA;AAAA,IACN,OAAA,sBACK,iBAAD,EAAA;AAAA,MACI,IAAM,EAAA,GAAA;AAAA,MAEN,KAAO,EAAA,MAAA;AAAA,MAHX,QAAA,EAIKN,QAAW,mBAAAr8C,GAAA,CAAC,QAAJ,EAAA,EAAA,CAAiB,mBAAAA,GAAA,CAAC,eAAD,EAAA,EAAA,CAAA;AAAA,OAFrB,iBAFT,CAAA;AAAA,GAHf,CAAA,CAAA;AAWM48C,EAAAA,MAAAA,aAAAA,uBAAiB,KAAD,EAAA;AAAA,IAAO,IAAM,EAAA,GAAA;AAAA,IACN,OACI,kBAAA58C,GAAA,CAAC,YAAD,EAAA,EAAA,CAAA;AAAA,GAFjC,CAAA,CAAA;AAKA,EAAA,4BACK,MAAD,EAAA;AAAA,IAAQ,QAAU4G,EAAAA,YAAAA;AAAAA,IAAlB,QAAA,EAAA,CAEK61C,gBAEAH,EAAAA,YAAAA,EAEAK,WAEAC,aARL,CAAA;AAAA,GADJ,CAAA,CAAA;AAaH,CAAA;AAgBD,SAA2B,iBAAA,CAAA;AAAA,EACIv9C,QAAAA;AAAAA,EACAG,KAAAA;AAAAA,EACA8C,IAAAA;AAAAA,CAE2C,EAAA;AAEhEu6C,EAAAA,MAAAA,qBAAqBT,qBAA3B,EAAA,CAAA;AACAl9C,EAAAA,cAAAA,CAAM2C,UAAU,MAAM;AAClBg7C,IAAAA,kBAAAA,CAAmBh8C,GAAI,CAAA;AAAA,MACnBD,aAAa,CAAC;AAAA,QACVpB,KAAAA;AAAAA,QACA2E,GAAK7B,EAAAA,IAAAA;AAAAA,OAFI,CAAA;AAAA,KADjB,CAAA,CAAA;AAAA,GAMD,EAAA,CAACA,IAAM9C,EAAAA,KAAP,CAPH,CAAA,CAAA;AASO,EAAA,2BAAAia,QAAA,EAAA;AAAA,IAAGpa,QAAAA;AAAAA,GAAV,CAAA,CAAA;AACH;;ACrJ6B,SAAA,WAAA,GAAA;AAEtB,EAAA,4BAAA,KAAA,EAAA;AAAA,IACI,KAAM,EAAA,KAAA;AAAA,IAAM,MAAO,EAAA,KAAA;AAAA,IACnB,OAAQ,EAAA,aAAA;AAAA,IAAc,OAAQ,EAAA,KAAA;AAAA,IAC9B,KAAM,EAAA,4BAAA;AAAA,IACN,QAAA,EAAA,iBAAAU,IAAA,CAAA,MAAA,EAAA;AAAA,MACI,QAAA,EAAA,iBAAAA,IAAA,CAAA,gBAAA,EAAA;AAAA,QAAgB,EAAG,EAAA,aAAA;AAAA,QAAc,EAAG,EAAA,aAAA;AAAA,QACpB,EAAG,EAAA,aAAA;AAAA,QACH,EAAG,EAAA,aAAA;AAAA,QAAc,CAAE,EAAA,aAAA;AAAA,QACnB,iBAAkB,EAAA,uGAAA;AAAA,QAClB,EAAG,EAAA,kBAAA;AAAA,QACf,QAAA,EAAA,iBAAAC,GAAA,CAAA,MAAA,EAAA;AAAA,UAAM,SAAU,EAAA,SAAA;AAAA,UAAU,MAAO,EAAA,IAAA;AAAA,SAAjC,CACA,kBAAAA,GAAA,CAAA,MAAA,EAAA;AAAA,UAAM,SAAU,EAAA,SAAA;AAAA,UAAU,MAAO,EAAA,aAAA;AAAA,SAAjC,CACA,kBAAAA,GAAA,CAAA,MAAA,EAAA;AAAA,UAAM,SAAU,EAAA,SAAA;AAAA,UAAU,MAAO,EAAA,aAAA;AAAA,SAAjC,CACA,kBAAAA,GAAA,CAAA,MAAA,EAAA;AAAA,UAAM,SAAU,EAAA,SAAA;AAAA,UAAU,MAAO,EAAA,aAAA;AAAA,SAAjC,CACA,kBAAAA,GAAA,CAAA,MAAA,EAAA;AAAA,UAAM,SAAU,EAAA,SAAA;AAAA,UAAU,MAAO,EAAA,MAAA;AAAA,SATrC,CAAA,CAAA;AAAA,OAAA,CAWA,kBAAAD,IAAA,CAAA,gBAAA,EAAA;AAAA,QAAgB,EAAG,EAAA,aAAA;AAAA,QAAc,EAAG,EAAA,aAAA;AAAA,QACpB,EAAG,EAAA,aAAA;AAAA,QACH,EAAG,EAAA,aAAA;AAAA,QAAc,CAAE,EAAA,aAAA;AAAA,QACnB,iBAAkB,EAAA,wGAAA;AAAA,QAClB,EAAG,EAAA,kBAAA;AAAA,QACf,QAAA,EAAA,iBAAAC,GAAA,CAAA,MAAA,EAAA;AAAA,UAAM,SAAU,EAAA,SAAA;AAAA,UAAU,WAAY,EAAA,GAAA;AAAA,UAAI,MAAO,EAAA,IAAA;AAAA,SAAjD,CACA,kBAAAA,GAAA,CAAA,MAAA,EAAA;AAAA,UAAM,SAAU,EAAA,SAAA;AAAA,UAAU,WAAY,EAAA,YAAA;AAAA,UAChC,MAAO,EAAA,aAAA;AAAA,SADb,CAEA,kBAAAA,GAAA,CAAA,MAAA,EAAA;AAAA,UAAM,SAAU,EAAA,SAAA;AAAA,UAAU,WAAY,EAAA,aAAA;AAAA,UAChC,MAAO,EAAA,MAAA;AAAA,SATjB,CAAA,CAAA;AAAA,OAAA,CAWA,kBAAAD,IAAA,CAAA,gBAAA,EAAA;AAAA,QAAgB,EAAG,EAAA,aAAA;AAAA,QAAc,EAAG,EAAA,aAAA;AAAA,QACpB,EAAG,EAAA,aAAA;AAAA,QACH,EAAG,EAAA,aAAA;AAAA,QAAc,CAAE,EAAA,aAAA;AAAA,QACnB,iBAAkB,EAAA,yGAAA;AAAA,QAClB,EAAG,EAAA,kBAAA;AAAA,QACf,QAAA,EAAA,iBAAAC,GAAA,CAAA,MAAA,EAAA;AAAA,UAAM,SAAU,EAAA,SAAA;AAAA,UAAU,WAAY,EAAA,GAAA;AAAA,UAAI,MAAO,EAAA,IAAA;AAAA,SAAjD,CACA,kBAAAA,GAAA,CAAA,MAAA,EAAA;AAAA,UAAM,SAAU,EAAA,SAAA;AAAA,UAAU,WAAY,EAAA,YAAA;AAAA,UAChC,MAAO,EAAA,aAAA;AAAA,SADb,CAEA,kBAAAA,GAAA,CAAA,MAAA,EAAA;AAAA,UAAM,SAAU,EAAA,SAAA;AAAA,UAAU,WAAY,EAAA,aAAA;AAAA,UAChC,MAAO,EAAA,MAAA;AAAA,SATjB,CAAA,CAAA;AAAA,OAvBJ,CAAA,CAAA;AAAA,KAAA,CAmCA,kBAAAA,GAAA,CAAA,GAAA,EAAA;AAAA,MAAG,EAAG,EAAA,QAAA;AAAA,MAAS,MAAO,EAAA,MAAA;AAAA,MAAO,WAAY,EAAA,GAAA;AAAA,MAAI,IAAK,EAAA,MAAA;AAAA,MAC/C,QAAS,EAAA,SAAA;AAAA,MACR,QAAA,uBAAA,GAAA,EAAA;AAAA,QAAG,EAAG,EAAA,cAAA;AAAA,QACF,QAAA,EAAA,iBAAAA,GAAA,CAAA,QAAA,EAAA;AAAA,UAAQ,IAAK,EAAA,wBAAA;AAAA,UAAyB,EAAG,EAAA,OAAA;AAAA,UAAQ,EAAG,EAAA,OAAA;AAAA,UAC5C,CAAE,EAAA,OAAA;AAAA,SADV,CAEA,kBAAAA,GAAA,CAAA,QAAA,EAAA;AAAA,UAAQ,IAAK,EAAA,wBAAA;AAAA,UAAyB,EAAG,EAAA,OAAA;AAAA,UAAQ,EAAG,EAAA,OAAA;AAAA,UAC5C,CAAE,EAAA,OAAA;AAAA,SADV,CAEA,kBAAAA,GAAA,CAAA,QAAA,EAAA;AAAA,UAAQ,IAAK,EAAA,wBAAA;AAAA,UAAyB,EAAG,EAAA,OAAA;AAAA,UAAQ,EAAG,EAAA,OAAA;AAAA,UAC5C,CAAE,EAAA,OAAA;AAAA,SANd,CAAA,CAAA;AAAA,OAAA,CAAA;AAAA,KAzCR,CAAA,CAAA;AAAA,GADJ,CAAA,CAAA;AAsDH;;ACnCD,MAAM6S,WAAYC,GAAAA,UAAAA,CAAW,CAACC,KAAAA,KAC1BC,YAAa,CAAA;AAAA,EACT8pC,IAAM,EAAA;AAAA,IACF72B,OAAAA,EAASlT,KAAMO,CAAAA,OAAAA,CAAQ,CAAd,CAAA;AAAA,IACTgF,QAAU,EAAA,GAAA;AAAA,GAFR;AADG,CAAD,CADY,CAAA,CAAA;AAsBL,SAAA,MAAA,CAAA;AAAA,EACIwkC,IAAAA;AAAAA,EACAC,WAAAA;AAAAA,CACY,EAAA;AAE7BppC,EAAAA,MAAAA,UAAUd,WAAhB,EAAA,CAAA;AAEMzS,EAAAA,MAAAA,oBAAoB0kB,aAA1B,EAAA,CAAA;AAEM,EAAA,MAAA;AAAA,IACF9gB,iBAAAA;AAAAA,IACAe,MAAAA;AAAAA,GACqBoM,GAAAA,OAAAA,CAAQ,MAAM0lC,oBAAqBz2C,CAAAA,iBAAAA,EAAmB,KAApB,CAA4B,EAAA,CAACA,iBAAD,CAAvD,CAAA,CAAA;AAEhC,EAAM48C,MAAAA,wBAAAA,GAA2B93C,OAAOC,MAAOnB,CAAAA,iBAAd,EAAiCc,MAAOM,CAAAA,CAAAA,CAAAA,KAAK,CAACA,CAAAA,CAAEb,KAAhD,CAAA,CAAA;AAEjC,EAAA,MAAM04C,2BAA2Bl2C,WAAY,CAAA,CAAC+Q,OAAevT,KAAejB,EAAAA,KAAAA,yBACvE,QAAD,EAAA;AAAA,IAEI,MAFJ,EAAA,IAAA;AAAA,IAII,SAAW45C,EAAAA,OAAAA;AAAAA,IACX,OAASH,EAAAA,WAAAA;AAAAA,IAET,OAAO,CAAC;AAAA,MAAEI,QAAAA;AAAAA,KAAgB,MAAA;AAAA,MACtB3kC,UAAAA,EAAY2kC,WAAW,KAAQ,GAAA,KAAA;AAAA,MAC/Bx3B,UAAAA,EAAYw3B,WAAW,uBAA0B,GAAA,SAAA;AAAA,KAF3B,CAAA;AAAA,IAI1B,IAAI75C,KAAMa,CAAAA,GAAAA;AAAAA,IAXd,QAAA,sBAaK,UAAD,EAAA;AAAA,MACI,OAAS,EAAA,WAAA;AAAA,MACT,EAAI,EAAA;AAAA,QACAqU,UAAY,EAAA,SAAA;AAAA,QACZ4kC,EAAI,EAAA,GAAA;AAAA,OAJZ;AAAA,MAAA,QAAA,EAMK95C,KAAMe,CAAAA,IAAAA,CAAKknB,WAAX,EAAA;AAAA,KANL,CAAA;AAAA,KAVM,CAAazT,WAAAA,EAAAA,KAAAA,CAAAA,CAHvB,CAqBa,EAAA,CAACilC,WAAD,CAtB2B,CAAA,CAAA;AAwB5C,EAAIM,IAAAA,aAAAA,CAAAA;AACJ,EAAA,IAAIP,IAAM,EAAA;AACNO,IAAAA,aAAAA,uBAAgB,KAAA,EAAA;AAAA,MAAK,WAAW1pC,OAAQmpC,CAAAA,IAAAA;AAAAA,MACnB,GAAKA,EAAAA,IAAAA;AAAAA,MACL,GAAK,EAAA,MAAA;AAAA,KAF1B,CAAA,CAAA;AAAA,GAGG,MAAA;AACHO,IAAAA,aAAAA,uBAAgB,KAAA,EAAA;AAAA,MAAK,WAAW1pC,OAAQmpC,CAAAA,IAAAA;AAAAA,MAAxB,QACZ,kBAAA98C,GAAA,CAAC,WAAD,EAAA,EAAA,CAAA;AAAA,KADJ,CAAA,CAAA;AAAA,GAGH;AAEM,EAAA,4BAAAyZ,QAAA,EAAA;AAAA,IAAA,QAAA,EAAA,iBAEHzZ,GAAA,CAAC,IAAD,EAAA;AAAA,MAEI,KAAM,EAAA,SAAA;AAAA,MACN,OAAS+8C,EAAAA,WAAAA;AAAAA,MACT,SAAWG,EAAAA,OAAAA;AAAAA,MAEX,IAAI98C,iBAAkBoO,CAAAA,OAAAA;AAAAA,MACrB6uC,QAAAA,EAAAA,aAAAA;AAAAA,KANI,EAAA,iBADT,CAUA,kBAAAt9C,IAAA,CAAC,IAAD,EAAA;AAAA,MAEKgF,UAAAA,CAAAA,MAAAA,CAAOd,IAAKM,CACT,KAAA,qBAAAxE,IAAA,CAACb,eAAM,QAAP,EAAA;AAAA,QAEI,QAAA,EAAA,iBAAAc,GAAA,CAAC,OAAc,EAAA,IAAA,CAAUuE,QAAAA,EAAAA,KAAAA,CAAAA,CAAzB,CACA,kBAAAvE,GAAA,CAAC,GAAD,EAAA;AAAA,UAAK,EAAI,EAAA,CAAA;AAAA,UAAG,EAAI,EAAA,CAAA;AAAA,UAAG,EAAI,EAAA,CAAA;AAAA,UAAG,EAAI,EAAA,GAAA;AAAA,UAA9B,QAAA,sBACK,UAAD,EAAA;AAAA,YAAY,OAAS,EAAA,SAAA;AAAA,YACT,KAAO,EAAA,eAAA;AAAA,YACP,SAAW,EAAA,YAAA;AAAA,YAClBuE,QAAAA,EAAAA,MAAMgnB,WAAN,EAAA;AAAA,WAHL,CAAA;AAAA,SADJ,GAOCrmB,MAAOC,CAAAA,MAAAA,CAAOnB,iBAAd,CACIc,CAAAA,MAAAA,CAAOM,OAAKA,CAAEb,CAAAA,KAAAA,KAAUA,KAD5B,CAEIN,CAAAA,GAAAA,CAAI,CAACQ,IAAMqT,EAAAA,KAAAA,KAAUmlC,yBAAyBnlC,KAAOvT,EAAAA,KAAAA,EAAOE,IAAf,CAFjD,CAVL,CAAA;AAAA,OAAA,EACU,CAAeF,aAAAA,EAAAA,KAAAA,CAAAA,CADzB,CADH,CAAA,EAiBAy4C,yBAAyBr6C,MAAS,GAAA,CAAA,oBAClC3C,GAAA,CAAA,OAAA,MAAa,mBAAd,CAECg9C,EAAAA,wBAAAA,CAAyB/4C,GAAI,CAAA,CAACQ,IAAMqT,EAAAA,KAAAA,KAAUmlC,yBAAyBnlC,KAAO,EAAA,MAAA,EAAQrT,IAAhB,CAAtE,CAtBL,CAAA;AAAA,KAZG,CAAA,CAAA;AAAA,GAAP,CAAA,CAAA;AAuCH;;ACzGD,MAAMoO,WAAYC,GAAAA,UAAAA,CAAW,CAACC,KAAAA,KAC1BC,YAAa,CAAA;AAAA,EACTsqC,QAAQ,EADC;AAAA,EAETC,UAAY,EAAA;AAAA,IACR96B,WAAAA,EAAa1P,KAAMO,CAAAA,OAAAA,CAAQ,CAAd,CAAA;AAAA,GAHR;AAAA,EAKTkqC,UAAY,EAAA;AAAA,IACRjlC,eAAAA,EAAiBxF,KAAMsI,CAAAA,OAAAA,CAAQykB,IAAK,CAAA,GAAA,CAAA;AAAA,IACpCxlB,MAAAA,EAAQvH,KAAMO,CAAAA,OAAAA,CAAQ,CAAd,CAAA;AAAA,IACR6B,KAAAA,EAAOpC,KAAMsI,CAAAA,OAAAA,CAAQykB,IAAK,CAAA,GAAA,CAAA;AAAA,IAC1BtnB,UAAAA,EAAYzF,MAAM0F,UAAW8J,CAAAA,gBAAAA;AAAAA,IACT,kBAAA,EAAA;AAAA,MAChByD,MAAQ,EAAA,SAAA;AAAA,MACRzN,eAAAA,EAAiBxF,KAAMsI,CAAAA,OAAAA,CAAQykB,IAAK,CAAA,GAAA,CAAA;AAAA,KAPhC;AAAA,IASI,UAAA,EAAA;AAAA,MACR/Z,SAAAA,EAAWhT,MAAM0qC,OAAQ,CAAA,CAAA,CAAA;AAAA,MACzBllC,eAAAA,EAAiBxF,KAAMsI,CAAAA,OAAAA,CAAQykB,IAAK,CAAA,GAAA,CAAA;AAAA,KAF5B;AAAA,GATJ;AALH,CAAD,CADY,CAAA,CAAA;AAkCE,SAAA,aAAA,CAAA;AAAA,EACItgC,KAAAA;AAAAA,EACAk+C,kBAAAA;AAAAA,EACAC,kBAAAA;AAAAA,CACe,EAAA;AAEvChqC,EAAAA,MAAAA,UAAUd,WAAhB,EAAA,CAAA;AAEMgqC,EAAAA,MAAAA,qBAAqBT,qBAA3B,EAAA,CAAA;AACM,EAAA,MAAA;AAAA,IAAEx7C,WAAAA;AAAAA,GAAgBi8C,GAAAA,kBAAAA,CAAAA;AAElBt8C,EAAAA,MAAAA,iBAAiB0rC,iBAAvB,EAAA,CAAA;AACM,EAAA,MAAA;AAAA,IAAE/qC,IAAAA;AAAAA,IAAME,UAAAA;AAAAA,GAAAA,GAAeof,YAA7B,EAAA,CAAA;AAEA,EAAA,MAAMo9B,UAAUr9C,cAAesO,CAAAA,IAAAA,EAAMgvC,cAC/Bt9C,cAAesO,CAAAA,IAAAA,CAAKgvC,YAAY,CAAGtyB,CAAAA,CAAAA,WAAAA,EAClChrB,GAAAA,cAAAA,CAAesO,MAAM0Y,KAAQhnB,GAAAA,cAAAA,CAAesO,KAAK0Y,KAAM,CAAA,CAAA,CAAA,CAAGgE,aAAgB,GAAA,GAAA,CAAA;AAEjF,EAAA,2BACK,KAAD,EAAA;AAAA,IACI,SAAU,EAAA,MAAA;AAAA,IAAO,EAAI,EAAA,IAAA;AAAA,IAAM,YAD/B,EAAA,IAAA;AAAA,IAC4C,aAD5C,EAAA,IAAA;AAAA,IAAA,QAAA,sBAEK,MAAD,EAAA;AAAA,MACI,WAAW5X,OAAQ2pC,CAAAA,MAAAA;AAAAA,MACnB,QAAU,EAAA,UAAA;AAAA,MACV,SAAW,EAAA,CAAA;AAAA,MAHf,QAAA,uBAIK,OAAD,EAAA;AAAA,QAAA,QAAA,EAAA,iBACIt9C,GAAA,CAAC,UAAD,EAAA;AAAA,UACI,KAAM,EAAA,SAAA;AAAA,UACN,YAAW,EAAA,aAAA;AAAA,UACX,IAAK,EAAA,OAAA;AAAA,UACL,OAAS09C,EAAAA,kBAAAA;AAAAA,UACT,WAAW/pC,OAAQ4pC,CAAAA,UAAAA;AAAAA,UACnB,IAAK,EAAA,OAAA;AAAA,UANT,QAOI,kBAAAv9C,GAAA,CAAC,QAAD,EAAA,EAAA,CAAA;AAAA,SARR,CAWI,kBAAAA,GAAA,CAAC,MAAD,EAAA;AAAA,UAAQ,MAAR,EAAA,IAAA;AAAA,UAAA,QAAA,sBACK,GAAD,EAAA;AAAA,YAAK,EAAI,EAAA,CAAA;AAAA,YAAT,QAAA,sBACK,IAAD,EAAA;AAAA,cACI,SAAW,EAAA,MAAA;AAAA,cAEX,KAAM,EAAA,SAAA;AAAA,cACN,SAAW+2C,EAAAA,MAAAA;AAAAA,cACX,EAAI,EAAA,GAAA;AAAA,cALR,QAAA,sBAMK,UAAD,EAAA;AAAA,gBAAY,OAAQ,EAAA,IAAA;AAAA,gBAAK,MAAzB,EAAA,IAAA;AAAA,gBACKv3C,QAAAA,EAAAA,KAAAA;AAAAA,eADL,CAAA;AAAA,eAJK,iBAFT,CAAA;AAAA,WADJ,CAAA;AAAA,SAZR,CA0BI,kBAAAQ,GAAA,CAAC,GAAD,EAAA;AAAA,UAAK,EAAI,EAAA,CAAA;AAAA,UAAT,QAAA,sBACK,WAAD,EAAA;AAAA,YACI,SAAA,sBAAY,gBAAD,EAAA;AAAA,cACP,SAAW,EAAA,iBAAA;AAAA,cACX,QAAS,EAAA,OAAA;AAAA,aAHjB,CAAA;AAAA,YAII,YAAW,EAAA,YAAA;AAAA,YACVY,UAAAA,WAAYqD,CAAAA,GAAAA,CAAI,CAACX,KAAOwU,EAAAA,KAAAA,yBACpB,IAAD,EAAA;AAAA,cACI,SAAW,EAAA,MAAA;AAAA,cAEX,KAAM,EAAA,SAAA;AAAA,cACN,SAAWi/B,EAAAA,MAAAA;AAAAA,cACX,IAAIzzC,KAAMa,CAAAA,GAAAA;AAAAA,cALd,QAAA,sBAMK,IAAD,EAAA;AAAA,gBACI,OAAS,EAAA;AAAA,kBAAEkU,MAAM1E,OAAQ6pC,CAAAA,UAAAA;AAAAA,iBAD7B;AAAA,gBAEI,OAAOl6C,KAAM9D,CAAAA,KAAAA;AAAAA,eAFjB,CAAA;AAAA,aAJM,EAAA,CAAasY,WAAAA,EAAAA,KAAAA,CAAAA,CAFvB,CADH,CAAA;AAAA,WALL,CAAA;AAAA,SA3BR,CAiDI,kBAAA9X,GAAA,CAAC,GAAD,EAAA;AAAA,UAAK,QAAU,EAAA,CAAA;AAAA,SAAf,CAAA,EAEC29C,kBACD,oBAAA39C,GAAA,CAAC,aAAD,EAAA;AAAA,UAEQ29C,QAAAA,EAAAA,kBAAAA;AAAAA,SAtDZ,CA2DI,kBAAA39C,GAAA,CAAC,GAAD,EAAA;AAAA,UAAK,CAAG,EAAA,CAAA;AAAA,UAAG,EAAI,EAAA,CAAA;AAAA,UAAf,QAAA,sBACK,UAAD,EAAA;AAAA,YACI,KAAM,EAAA,SAAA;AAAA,YACN,YAAW,EAAA,aAAA;AAAA,YACX,IAAK,EAAA,OAAA;AAAA,YACL,OAAA,EAAS,MAAMoB,UAJnB,EAAA;AAAA,YAKI,IAAK,EAAA,OAAA;AAAA,YACJF,QAAAA,EAAAA,IAAS,KAAA,MAAA,mBACHlB,GAAA,CAAA,eAAA,EAAD,EAAA,CACA,mBAAAA,GAAA,CAAC,eAAD,EAAA,EAAA,CAAA;AAAA,WARV,CAAA;AAAA,SA5DR,CAwEI,kBAAAA,GAAA,CAAC,GAAD,EAAA;AAAA,UAAK,CAAG,EAAA,CAAA;AAAA,UAAG,EAAI,EAAA,CAAA;AAAA,UACVO,UAAAA,cAAesO,CAAAA,IAAAA,IAAQtO,eAAesO,IAAKivC,CAAAA,QAAAA,uBACrC,MAAD,EAAA;AAAA,YACE,GAAA,EAAKv9C,eAAesO,IAAKivC,CAAAA,QAAAA;AAAAA,WAFhC,CAGK,mBAAA99C,GAAA,CAAC,MAAD,EAAA;AAAA,YAAS49C,QAAAA,EAAAA,OAAAA;AAAAA,WAAT,CAAA;AAAA,SA5Ed,CAgFI,kBAAA59C,GAAA,CAAC,MAAD,EAAA;AAAA,UAAQ,OAAQ,EAAA,MAAA;AAAA,UACR,KAAM,EAAA,SAAA;AAAA,UACN,SAASO,cAAe8Q,CAAAA,OAAAA;AAAAA,UAFhC,QAAA,EAAA,SAAA;AAAA,SAhFJ,CAAA,CAAA;AAAA,OAAA,CAAA;AAAA,KAJJ,CAAA;AAAA,GAHR,CAAA,CAAA;AAiGH;;AC5ID,MAAMwB,WAAYC,GAAAA,YAAAA,CAAW,CAACC,KAAAA,KAC1BC,cAAa,CAAA;AAAA,EACT6sB,IAAM,EAAA;AAAA,IACF3sB,OAAS,EAAA,MAAA;AAAA,IACTyG,aAAe,EAAA,QAAA;AAAA,IACf3R,KAAO,EAAA,OAAA;AAAA,IACPsS,MAAQ,EAAA,OAAA;AAAA,GALH;AAAA,EAOTsI,OAAS,EAAA;AAAA,IACLwC,QAAU,EAAA,CAAA;AAAA,IACVpd,KAAO,EAAA,MAAA;AAAA,IACPsS,MAAQ,EAAA,MAAA;AAAA,IACRgL,QAAU,EAAA,MAAA;AAAA,GAXL;AAAA,EAaTy4B,WAAa,EAAA;AAAA,IACT/1C,KAAO,EAAA,GAAA;AAAA,GADE;AAbJ,CAAD,CADY,CAAA,CAAA;AA+BrB,SAAA,QAAA,CAAkBhJ,KAAyC,EAAA;AAExD,EAAA,MAAA;AAAA,IACFK,QAAAA;AAAAA,IACAgF,IAAAA;AAAAA,IACAy4C,IAAAA;AAAAA,IACAa,kBAAAA;AAAAA,YACAK,QAAAA;AAAAA,GACAh/C,GAAAA,KAAAA,CAAAA;AAEE2U,EAAAA,MAAAA,UAAUd,WAAhB,EAAA,CAAA;AAEMzS,EAAAA,MAAAA,oBAAoB0kB,aAA1B,EAAA,CAAA;AACM,EAAA,MAAA,CAACm5B,UAAAA,EAAYC,aAAiBh/C,CAAAA,GAAAA,cAAAA,CAAMK,SAAS,KAAf,CAAA,CAAA;AAEpC,EAAA,MAAMm+C,kBAAqB,GAAA,MAAMQ,aAAc,CAAA,CAACD,UAAF,CAAA,CAAA;AAC9C,EAAMlB,MAAAA,WAAAA,GAAc,MAAMmB,aAAAA,CAAc,KAAD,CAAA,CAAA;AAEvC,EAAA,MAAMC,aAAaH,QAAUI,IAAAA,MAAAA,CAAAA;AAIzB,EAAA,4BAAA3kC,QAAA,EAAA;AAAA,IACI,QAAA,EAAA,iBAAAzZ,GAAA,CAAA,KAAA,EAAA;AAAA,MAAA,QAAA,sBACKq+C,QAAD,EAAA;AAAA,QACI,OAAQ,EAAA,WAAA;AAAA,QACR,MAAQ,EAAA,MAAA;AAAA,QACR,IAAMJ,EAAAA,UAAAA;AAAAA,QACN,OAASlB,EAAAA,WAAAA;AAAAA,QACT,OAAS,EAAA;AAAA,UACL/uB,OAAOra,OAAQoqC,CAAAA,WAAAA;AAAAA,SANvB;AAAA,QAQI,UAAY,EAAA;AAAA,UACRO,WAAa,EAAA,IAAA;AAAA,SATrB;AAAA,QAYK,QAAA,EAAA,CAACl+C,iBAAAA,CAAkB2D,UAAa,mBAAA/D,GAAA,CAAC,wBAAD,EAAA,CAA4B,mBAAAA,GAAA,CAAC,UAAD,EAAA;AAAA,UAAY,IAAA;AAAA,UAAY,WAAA;AAAA,SAAxB,CAAA;AAAA,OAZjE,CAAA;AAAA,KADJ,CAkBA,kBAAAD,IAAA,CAAA,KAAA,EAAA;AAAA,MAAK,WAAW4T,OAAQksB,CAAAA,IAAAA;AAAAA,MAAxB,QAAA,EAAA,iBAEI7/B,GAAA,CAAC,aAAD,EAAA;AAAA,QAAe,KAAOqE,EAAAA,IAAAA;AAAAA,QACP,kBAAA;AAAA,QACA,kBAAA;AAAA,OAFf,CAGA,kBAAArE,GAAA,CAAA,MAAA,EAAA;AAAA,QACI,WAAW2T,OAAQiP,CAAAA,OAAAA;AAAAA,QAClBvjB,QAAAA;AAAAA,OAPT,CAAA,CAAA;AAAA,KAnBJ,CAAA,CAAA;AAAA,GAFJ,CAAA,CAAA;AAoCH;;ACvHD,SAAA,iBAAA,CAA2Bk/C,IAAW,EAAA;AAClC,EAAMC,MAAAA,IAAAA,GAAOD,KAAKtuB,qBAAlB,EAAA,CAAA;AACA,EAAMwuB,MAAAA,eAAAA,GAAkBC,YAAYH,IAAD,CAAA,CAAA;AACnC,EAAIpd,IAAAA,SAAAA,CAAAA;AAEAod,EAAAA,IAAAA,KAAKI,aAAe,EAAA;AACpBxd,IAAAA,SAAAA,GAAYod,IAAKI,CAAAA,aAAAA,CAAAA;AAAAA,GACd,MAAA;AACH,IAAMC,MAAAA,aAAAA,GAAgBH,eAAgB/Y,CAAAA,gBAAAA,CAAiB6Y,IAAjC,CAAA,CAAA;AACtBpd,IAAAA,SAAAA,GACIyd,cAAcC,gBAAiB,CAAA,mBAA/B,CACAD,IAAAA,aAAAA,CAAcC,iBAAiB,WAA/B,CAAA,CAAA;AAAA,GACP;AAEGC,EAAAA,IAAAA,OAAU,GAAA,CAAA,CAAA;AAEV3d,EAAAA,IAAAA,SAAaA,IAAAA,SAAAA,KAAc,MAAU,IAAA,OAAOA,cAAc,QAAU,EAAA;AACpE,IAAM4d,MAAAA,eAAAA,GAAkB5d,SAAUz+B,CAAAA,KAAAA,CAAM,GAAhB,CAAA,CAAqB,CAAGA,CAAAA,CAAAA,KAAAA,CAAM,GAA9B,CAAA,CAAmC,CAAGA,CAAAA,CAAAA,KAAAA,CAAM,GAA5C,CAAA,CAAA;AACxBo8C,IAAUhH,OAAAA,GAAAA,QAAAA,CAASiH,eAAgB,CAAA,CAAA,CAAA,EAAI,EAArB,CAAA,CAAA;AAAA,GACrB;AAEO,EAAA,OAAA,CAAaN,WAAAA,EAAAA,eAAAA,CAAgB5hB,UAA4BiiB,CAAAA,eAAAA,EAAAA,OAAAA,GAAUN,IAAK/hB,CAAAA,IAAAA,CAAAA,GAAAA,CAAAA,CAAAA;AACnF,CAAA;AAEM,SAAA,iBAAA,CAA2B8hB,IAAW,EAAA;AACzC,EAAMpd,MAAAA,SAAAA,GAAY6d,kBAAkBT,IAAD,CAAA,CAAA;AAEnC,EAAA,IAAIpd,SAAW,EAAA;AACXod,IAAAA,IAAAA,CAAKnzB,MAAM6zB,eAAkB9d,GAAAA,SAAAA,CAAAA;AAC7Bod,IAAAA,IAAAA,CAAKnzB,MAAM+V,SAAYA,GAAAA,SAAAA,CAAAA;AAAAA,GAC1B;AACJ,CAAA;AAMM,MAAM+d,SAAYhgD,GAAAA,KAAAA,CAAMmiC,UAAW,CAAA,SAAA,UAAA,CAAmBriC,OAAmB8hB,GAAK,EAAA;AAC3E,EAAA,MAAA;AAAA,IACFzhB,QAAAA;AAAAA,IACA83C,EAAIgI,EAAAA,MAAAA;AAAAA,IACJC,OAAAA;AAAAA,IACAC,eAAAA;AAAAA,IACG1O,GAAAA,KAAAA;AAAAA,GACH3xC,GAAAA,KAAAA,CAAAA;AAEJ,EAAA,MAAM+T,QAAa0X,QAAnB,EAAA,CAAA;AACM60B,EAAAA,MAAAA,WAAAA,GAAcpgD,KAAMsH,CAAAA,MAAAA,CAAY,IAAlB,CAAA,CAAA;AACd+4C,EAAAA,MAAAA,qBAAwBC,GAAAA,UAAAA,CAAWngD,QAASyhB,CAAAA,GAAAA,EAAKw+B,WAAf,CAAA,CAAA;AACxC,EAAMG,MAAAA,SAAAA,GAAYD,UAAWD,CAAAA,qBAAAA,EAAuBz+B,GAAxB,CAAA,CAAA;AAEtB4+B,EAAAA,MAAAA,4BAA+B,GAAA,CAACC,QAAkB,KAAA,CAACC,WAAyB,KAAA;AAC9E,IAAA,IAAID,QAAU,EAAA;AAENC,MAAAA,IAAAA,gBAAgBlgD,KAAW,CAAA,EAAA;AAC3BigD,QAAAA,QAAAA,CAASL,YAAYl4C,OAAb,CAAA,CAAA;AAAA,OACL,MAAA;AACHu4C,QAASL,QAAAA,CAAAA,WAAAA,CAAYl4C,SAASw4C,WAAtB,CAAA,CAAA;AAAA,OACX;AAAA,KACJ;AAAA,GARL,CAAA;AAWMC,EAAAA,MAAAA,WAAAA,GAAcH,4BAA6B,CAAA,CAACnB,IAAc,KAAA;AAC5DuB,IAAAA,iBAAAA,CAAkBvB,IAAD,CAAA,CAAA;AACjBwB,IAAAA,MAAAA,CAAOxB,IAAD,CAAA,CAAA;AAAA,GAFsC,CAAA,CAAA;AAK1CyB,EAAAA,MAAAA,cAAAA,GAAiBN,4BAA6B,CAAA,CAACnB,IAAc,KAAA;AACzD0B,IAAAA,MAAAA,kBAAkBC,kBACpB,CAAA;AAAA,MAAEd,OAAAA;AAAAA,KACF,EAAA;AAAA,MACIl+C,IAAM,EAAA,OAAA;AAAA,KAH4B,CAAA,CAAA;AAM1Cq9C,IAAAA,IAAAA,CAAKnzB,KAAM+0B,CAAAA,gBAAAA,GAAmBptC,KAAMqW,CAAAA,WAAAA,CAAYC,OAAO,mBAAqB,EAAA;AAAA,MACrE42B,GAAAA,eAAAA;AAAAA,MACHG,MAAAA,EAAQrtC,KAAMqW,CAAAA,WAAAA,CAAYg3B,MAAOC,CAAAA,OAAAA;AAAAA,KAFP,CAAA,CAAA;AAK9B9B,IAAAA,IAAAA,CAAKnzB,KAAMtF,CAAAA,UAAAA,GAAa/S,KAAMqW,CAAAA,WAAAA,CAAYC,OAAO,WAAa,EAAA;AAAA,MACvD42B,GAAAA,eAAAA;AAAAA,MACHG,MAAAA,EAAQrtC,KAAMqW,CAAAA,WAAAA,CAAYg3B,MAAOC,CAAAA,OAAAA;AAAAA,KAFb,CAAA,CAAA;AAKxB9B,IAAAA,IAAAA,CAAKnzB,MAAM6zB,eAAkB,GAAA,MAAA,CAAA;AAC7BV,IAAAA,IAAAA,CAAKnzB,MAAM+V,SAAY,GAAA,MAAA,CAAA;AACvBod,IAAAA,IAAAA,CAAKnzB,MAAMoB,OAAU,GAAA,CAAA,CAAA;AAAA,GAnB0B,CAAA,CAAA;AAuB7C8zB,EAAAA,MAAAA,UAAAA,GAAkBZ,4BAA6B,CAAA,CAACnB,IAAc,KAAA;AAC1D0B,IAAAA,MAAAA,kBAAkBC,kBACpB,CAAA;AAAA,MAAEd,OAAAA;AAAAA,KACF,EAAA;AAAA,MACIl+C,IAAM,EAAA,MAAA;AAAA,KAH4B,CAAA,CAAA;AAO1Cq9C,IAAAA,IAAAA,CAAKnzB,MAAMoB,OAAU,GAAA,GAAA,CAAA;AACrB+xB,IAAKnzB,IAAAA,CAAAA,KAAAA,CAAM+0B,mBAAmBptC,KAAMqW,CAAAA,WAAAA,CAAYC,OAAO,CAAC,mBAAA,EAAqB,SAAtB,CAAkC,EAAA;AAAA,MAClF42B,GAAAA,eAAAA;AAAAA,MACHG,MAAAA,EAAQrtC,KAAMqW,CAAAA,WAAAA,CAAYg3B,MAAOG,CAAAA,KAAAA;AAAAA,KAFP,CAAA,CAAA;AAK9BhC,IAAKnzB,IAAAA,CAAAA,KAAAA,CAAMtF,aAAa/S,KAAMqW,CAAAA,WAAAA,CAAYC,OAAO,CAAC,WAAA,EAAa,SAAd,CAA0B,EAAA;AAAA,MACpE42B,GAAAA,eAAAA;AAAAA,MACHG,MAAAA,EAAQrtC,KAAMqW,CAAAA,WAAAA,CAAYg3B,MAAOG,CAAAA,KAAAA;AAAAA,KAFb,CAAA,CAAA;AAKxBT,IAAAA,iBAAAA,CAAkBvB,IAAD,CAAA,CAAA;AAAA,GAnB+B,CAAA,CAAA;AAsB9CiC,EAAAA,MAAAA,YAAAA,GAAoBd,4BAA6B,CAAA,CAACnB,IAAc,KAAA;AAElEA,IAAAA,IAAAA,CAAKnzB,MAAM+0B,gBAAmB,GAAA,EAAA,CAAA;AAC9B5B,IAAAA,IAAAA,CAAKnzB,MAAMtF,UAAa,GAAA,EAAA,CAAA;AAAA,GAH0B,CAAA,CAAA;AAOtD,EAAM26B,MAAAA,cAAAA,GAAiBvhD,KAAM6H,CAAAA,WAAAA,CAAY,MAAM;AACvCu4C,IAAAA,IAAAA,YAAYl4C,OAAS,EAAA;AACrB04C,MAAAA,iBAAAA,CAAkBR,YAAYl4C,OAAb,CAAA,CAAA;AAAA,KACpB;AAAA,GAHkB,EAIpB,EAJoB,CAAA,CAAA;AAMvBlI,EAAAA,KAAAA,CAAM2C,UAAU,MAAM;AAElB,IAAA,IAAIs9C,MAAQ,EAAA;AACR,MAAOz/C,OAAAA,KAAAA,CAAAA,CAAAA;AAAAA,KACV;AAED,IAAMghD,MAAAA,YAAAA,GAAeC,SAAS,MAAM;AAC5BrB,MAAAA,IAAAA,YAAYl4C,OAAS,EAAA;AACrB04C,QAAAA,iBAAAA,CAAkBR,YAAYl4C,OAAb,CAAA,CAAA;AAAA,OACpB;AAAA,KAHwB,CAAA,CAAA;AAM7B,IAAMq3C,MAAAA,eAAAA,GAAkBC,WAAYY,CAAAA,WAAAA,CAAYl4C,OAAb,CAAA,CAAA;AACnCq3C,IAAgBriB,eAAAA,CAAAA,gBAAAA,CAAiB,UAAUskB,YAA3C,CAAA,CAAA;AACA,IAAA,OAAO,MAAM;AACTA,MAAAA,YAAAA,CAAaE,KAAb,EAAA,CAAA;AACAnC,MAAgBliB,eAAAA,CAAAA,mBAAAA,CAAoB,UAAUmkB,YAA9C,CAAA,CAAA;AAAA,KAFJ,CAAA;AAAA,GAdJ,EAkBG,CAACvB,MAAD,CAlBH,CAAA,CAAA;AAoBAjgD,EAAAA,KAAAA,CAAM2C,UAAU,MAAM;AACd,IAAA,IAAA,CAACs9C,MAAQ,EAAA;AAGTsB,MAAc,cAAA,EAAA,CAAA;AAAA,KACjB;AAAA,GACF,EAAA,CAACtB,MAAQsB,EAAAA,cAAT,CANH,CAAA,CAAA;AAQA,EAAA,2BACK,UAAD,EAAA;AAAA,IACI,OAASnB,EAAAA,WAAAA;AAAAA,IACT,OAASO,EAAAA,WAAAA;AAAAA,IACT,UAAYG,EAAAA,cAAAA;AAAAA,IACZ,MAAQM,EAAAA,UAAAA;AAAAA,IACR,QAAUE,EAAAA,YAAAA;AAAAA,IACV,MAAQ,EAAA,IAAA;AAAA,IACR,EAAIrB,EAAAA,MAAAA;AAAAA,IACJ,OAAA;AAAA,IACIxO,GAAAA,KAAAA;AAAAA,IAEH,QAAA,EAAA,CAAChqC,KAAAA,EAAYk6C,UAAoB,KAAA;AAC9B,MAAO3hD,OAAAA,KAAAA,CAAM4hD,aAAazhD,QAAU,EAAA;AAAA,QAChCyhB,GAAK2+B,EAAAA,SAAAA;AAAAA,QACLr0B,KAAO,EAAA;AAAA,UACHye,UAAYljC,EAAAA,KAAAA,KAAU,QAAY,IAAA,CAACw4C,SAAS,QAAWz/C,GAAAA,KAAAA,CAAAA;AAAAA,UAAAA,GACpDL,SAASL,KAAMosB,CAAAA,KAAAA;AAAAA,SAJU;AAAA,QAM7By1B,GAAAA,UAAAA;AAAAA,OANA,CAAA,CAAA;AAAA,KAQV;AAAA,GArBT,CAAA,CAAA;AAwBH,CA5IwB,CAAA,CAAA;AAqKzB,MAAMd,MAAAA,GAAS,CAACxB,IAAAA,KAAcA,IAAKrZ,CAAAA,SAAAA,CAAAA;AAEnC,SAAA,kBAAA,CAA4BlmC,OAAY0hB,OAAc,EAAA;AAC5C,EAAA,MAAA;AAAA,IAAE0+B,OAAAA;AAAAA,GAAYpgD,GAAAA,KAAAA,CAAAA;AAEb,EAAA,OAAA;AAAA,IACH+hD,UACI,OAAO3B,OAAAA,KAAY,WACbA,OACAA,GAAAA,OAAAA,CAAQ1+B,QAAQxf,IAAS,CAAA,IAAA,CAAA;AAAA,GAJvC,CAAA;AAMH;;ACnLD,MAAM2R,WAAYC,GAAAA,UAAAA,CAA8B,CAACC,KAAAA,KAAiBC,YAAa,CAAA;AAAA,EAE3EqF,MAAM,EAFqE;AAAA,EAI3E2V,KAAO,EAAA;AAAA,IACH1T,MAAQ,EAAA,MAAA;AAAA,IACR0mC,uBAAyB,EAAA,OAAA;AAAA,IACzBnmC,QAAU,EAAA,OAAA;AAAA,IACV+Y,OAAS,EAAA,CAAA;AAAA,GAR8D;AAAA,EAU3EqtB,kBAAkB,CAAC;AAAA,IAAEC,cAAAA;AAAAA,GAAsB,MAAA;AAAA,IACvCzkB,IAAM,EAAA,MAAA;AAAA,IACNrhB,KAAO,EAAA,CAAA;AAAA,GAFgC,CAAA;AAAA,EAK3C+lC,OAAO,EAAA;AAfoE,CAAD,CAAlD,CAAA,CAAA;AAmB5B,MAAMC,yBAA4B,GAAA;AAAA,EAC9BC,KAAO,EAAA,GAAA;AAAA,EACPC,IAAM,EAAA,GAAA;AAFwB,CAAA,CAAA;AAS3B,MAAMC,gBAAmBriD,GAAAA,cAAAA,CAAMmiC,UAA8C,CAAA,SAAA,YAAA,CAAsBriC,OAAO8hB,GAAK,EAAA;AAE5G,EAAA,MAAA;AAAA,IACFzhB,QAAAA;AAAAA,IACAwiC,OAAAA;AAAAA,IACA9iC,IAAAA;AAAAA,IACAmiD,cAAAA;AAAAA,IACA7B,eAAAA;AAAAA,GACArgD,GAAAA,KAAAA,CAAAA;AAEE2U,EAAAA,MAAAA,UAAUd,WAAU,CAAA;AAAA,IAAEquC,cAAAA;AAAAA,GAAH,CAAA,CAAA;AAEnBM,EAAAA,MAAAA,MAAAA,uBACD,KAAD,EAAA;AAAA,IACI,SAAW,EAAA,CAAA;AAAA,IACX,MAFJ,EAAA,IAAA;AAAA,IAGI,KAAO,EAAA;AAAA,MACH17B,UAAY,EAAA,iDAAA;AAAA,MACZqb,SAAAA,EAAY,eAAe+f,cAAkB,GAAA,GAAA,CAAA,GAAA,CAAA;AAAA,KALrD;AAAA,IAOI,SAAWrtC,EAAAA,IAAAA,CACPF,OAAQqa,CAAAA,KAAAA,EACRra,QAAQstC,gBAFG,CAAA;AAAA,IAKd5hD,QAAAA;AAAAA,GAbT,CAAA,CAAA;AAkBMoiD,EAAAA,MAAAA,aAAAA,uBACD,SAAD,EAAA;AAAA,IACI,EAAI1iD,EAAAA,IAAAA;AAAAA,IACJ,OAASqiD,EAAAA,yBAAAA;AAAAA,IACT,eAAA;AAAA,IAECI,QAAAA,EAAAA,MAAAA;AAAAA,GANT,CAAA,CAAA;AAUA,EAAA,2BACK,KAAD,EAAA;AAAA,IACI,aAAe,EAAA;AAAA,MACXE,kBAAoBN,EAAAA,yBAAAA;AAAAA,KAF5B;AAAA,IAII,iBAAmBO,EAAAA,QAAAA;AAAAA,IACnB,SAAW9tC,EAAAA,IAAAA,CAAKF,OAAQ0E,CAAAA,IAAAA,EAAM1E,QAAQwtC,KAAvB,CAAA;AAAA,IACf,IAAA;AAAA,IACA,OAAA;AAAA,IACA,GAAA;AAAA,IACA,WAAa,EAAA,IAAA;AAAA,IAEb,mBAAqB,EAAA,IAAA;AAAA,IAEpBM,QAAAA,EAAAA,aAAAA;AAAAA,GAdT,CAAA,CAAA;AAiBH,CAzD+B,CAAA;;ACpEzB,MAAMG,eAAkB,GAAA,OAAA,CAAA;AACxB,MAAMC,oBAAuB,GAAA,OAAA,CAAA;AAE7B,MAAMC,SAAY,GAAA,MAAA;;ACgDzB,MAAM3M,oBAAuB4M,GAAAA,IAAAA,CAAK,MAAM,sEAAP,CAAA,CAAA;AACjC,MAAMnb,UAAamb,GAAAA,IAAAA,CAAK,MAAM,4DAAP,CAAA,CAAA;AACvB,MAAM36B,aAAgB26B,GAAAA,IAAAA,CAAK,MAAM,+DAAP,CAAA,CAAA;AAE1B,MAAMC,aAAgBlvC,GAAAA,UAAAA,CAA+C,CAACC,KAAAA,KAClEC,YAAa,CAAA;AAAA,EACT2zB,WAAW,CAAC;AAAA,IAAEsb,cAAAA;AAAAA,GAAsB,MAAA;AAAA,IAChC/uC,OAAS,EAAA,MAAA;AAAA,IACTyG,aAAe,EAAA,QAAA;AAAA,IACf3R,KAAOi6C,EAAAA,cAAAA;AAAAA,IACP3nC,MAAQ,EAAA,MAAA;AAAA,IAAA,CACPvH,KAAM8V,CAAAA,WAAAA,CAAYoB,IAAK,CAAA,IAAvB,CAA+B,GAAA;AAAA,MAC5BjiB,KAAO65C,EAAAA,oBAAAA;AAAAA,KANqB;AAAA,IAQhC/7B,UAAY,EAAA,yBAAA;AAAA,GARoB,CAAA;AAAA,EAUpCo8B,eAAe,CAAC;AAAA,IAAED,cAAAA;AAAAA,GAAsB,MAAA;AAAA,IACpCj6C,KAAAA,EAAQ,QAAO85C,SAAeG,CAAAA,GAAAA,EAAAA,cAAAA,CAAAA,CAAAA,CAAAA;AAAAA,IAAAA,CAC7BlvC,KAAM8V,CAAAA,WAAAA,CAAYoB,IAAK,CAAA,IAAvB,CAA+B,GAAA;AAAA,MAC5BjiB,KAAO65C,EAAAA,oBAAAA;AAAAA,KADqB;AAAA,GAFI,CAAA;AAAA,EAMxCM,kBAAoB,EAAA;AAAA,IAChBn6C,KAAO85C,EAAAA,SAAAA;AAAAA,IACPxnC,MAAQ,EAAA,MAAA;AAAA,IACRgL,QAAU,EAAA,MAAA;AAAA,IACV88B,UAAAA,EAAa,CAAYrvC,UAAAA,EAAAA,KAAAA,CAAMsI,OAAQ8O,CAAAA,OAAAA,CAAAA,CAAAA;AAAAA,IAAAA,CACtCpX,KAAM8V,CAAAA,WAAAA,CAAYoB,IAAK,CAAA,IAAvB,CAA+B,GAAA;AAAA,MAC5Bm4B,UAAY,EAAA,SAAA;AAAA,MACZp6C,KAAO65C,EAAAA,oBAAAA;AAAAA,KAFqB;AAAA,GAtB3B;AAAA,EA2BTQ,eAAe,CAAC;AAAA,IAAEJ,cAAAA;AAAAA,GAAsB,MAAA;AAAA,IACpC78B,QAAU,EAAA,CAAA;AAAA,IACV9K,MAAQ,EAAA,MAAA;AAAA,IACRtS,KAAAA,EAAQ,QAAO85C,SAAeG,CAAAA,GAAAA,EAAAA,cAAAA,CAAAA,CAAAA,CAAAA;AAAAA,IAAAA,CAC7BlvC,KAAM8V,CAAAA,WAAAA,CAAYoB,IAAK,CAAA,IAAvB,CAA+B,GAAA;AAAA,MAC5BjiB,KAAO65C,EAAAA,oBAAAA;AAAAA,KALyB;AAAA,IAOpC3uC,OAAS,EAAA,MAAA;AAAA,IACToS,QAAU,EAAA,MAAA;AAAA,IACV3L,aAAe,EAAA,KAAA;AAAA,GATqB,CAAA;AAAA,EAWxCgpB,MAAM,CAAC;AAAA,IAAEsf,cAAAA;AAAAA,GAAsB,MAAA;AAAA,IAC3Bj6C,KAAOi6C,EAAAA,cAAAA;AAAAA,IACP3pC,QAAU,EAAA,MAAA;AAAA,IACVgC,MAAQ,EAAA,MAAA;AAAA,IACRgL,QAAU,EAAA,MAAA;AAAA,IAAA,CACTvS,KAAM8V,CAAAA,WAAAA,CAAYoB,IAAK,CAAA,IAAvB,CAA+B,GAAA;AAAA,MAC5B3R,QAAUupC,EAAAA,oBAAAA;AAAAA,MACV75C,KAAO65C,EAAAA,oBAAAA;AAAAA,KAFqB;AAAA,GALL,CAAA;AAAA,EAU/BS,MAAQ,EAAA;AAAA,IACJ9uC,WAAAA,EAAaT,KAAMO,CAAAA,OAAAA,CAAQ,CAAd,CAAA;AAAA,IACb4W,YAAAA,EAAcnX,KAAMO,CAAAA,OAAAA,CAAQ,CAAd,CAAA;AAAA,IACd4T,UAAAA,EAAYnU,KAAMO,CAAAA,OAAAA,CAAQ,CAAd,CAAA;AAAA,GAnDP;AAAA,EAqDTivC,GAAK,EAAA;AAAA,IACDtoC,QAAU,EAAA,UAAA;AAAA,IACViS,QAAU,EAAA,OAAA;AAAA,GAFT;AArDI,CAAD,CADgB,CAAA,CAAA;AA4EuC,SAAA,UAAA,CAAA;AAAA,EACI5pB,IAAAA;AAAAA,EACAoD,QAAAA;AAAAA,EACA8C,SAAAA;AAAAA,EACAV,eAAAA;AAAAA,EACAC,IAAAA;AAAAA,EACAG,WAAAA;AAAAA,EACApC,MAAQqC,EAAAA,gBAAAA;AAAAA,EACR5E,cAAAA;AAAAA,EACAi/C,gBAAAA;AAAAA,EACAx6C,KAAAA;AAAAA,CAC6B,EAAA;AAEpG,EAAA,MAAMy6C,aAAoC,GAAA,OAAOz6C,KAAU,KAAA,QAAA,GAAY,GAAEA,KAAYA,CAAAA,EAAAA,CAAAA,GAAAA,KAAAA,CAAAA;AAC/E2L,EAAAA,MAAAA,UAAUquC,aAAc,CAAA;AAAA,IAAEC,gBAAgBQ,aAAiBb,IAAAA,eAAAA;AAAAA,GAApC,CAAA,CAAA;AAEvBvhD,EAAAA,MAAAA,aAAa0c,aAAnB,EAAA,CAAA;AACM5c,EAAAA,MAAAA,uBAAuB4kB,uBAA7B,EAAA,CAAA;AACMsV,EAAAA,MAAAA,kBAAkB9Z,qBAAxB,EAAA,CAAA;AACM7f,EAAAA,MAAAA,UAAU4b,iBAAhB,EAAA,CAAA;AACA,EAAA,MAAM/b,iBAAiB0rC,iBAAvB,EAAA,CAAA;AAEA,EAAM,MAAA,CAAC1/B,QAAQm2C,SAAanjD,CAAAA,GAAAA,QAAAA,CAAuBwI,OAAO,MAAUrC,GAAAA,QAAAA,GAAW,aAAa,KAAxD,CAAA,CAAA;AAC9B,EAAA,MAAA,CAACi9C,eAAAA,EAAiBC,kBAAsBrjD,CAAAA,GAAAA,QAAAA,CAA6BmG,QAArB,CAAA,CAAA;AAChD,EAAA,MAAA,CAAC0F,QAAAA,EAAUy3C,WAAetjD,CAAAA,GAAAA,QAAAA,CAAkB,KAAV,CAAA,CAAA;AAClC,EAAA,MAAA,CAACujD,YAAAA,EAAcC,eAAmB7jD,CAAAA,GAAAA,cAAAA,CAAMK,SAAS,CAAf,CAAA,CAAA,CAAA;AAExC,EAAM,MAAA,CAACyjD,cAAgBC,EAAAA,iBAAAA,CAAAA,GAAqB1jD,QAA5C,EAAA,CAAA;AAEM,EAAA,MAAA;AAAA,IACFwN,MAAAA;AAAAA,IACAmQ,WAAAA;AAAAA,IAEAE,gBAAAA;AAAAA,GAAAA,GACA6H,cAAe,CAAA;AAAA,IACf3iB,IAAAA;AAAAA,IACAoD,QAAUi9C,EAAAA,eAAAA;AAAAA,IACV78C,MAAQqC,EAAAA,gBAAAA;AAAAA,IACRmW,QAAU,EAAA,KAAA;AAAA,GAJI,CAAA,CAAA;AAOZW,EAAAA,MAAAA,cAAAA,GAAyC9N,OAAQ,CAAA,MAAM+N,aAAc,CAAA;AAAA,IACvE/W,gBAAAA;AAAAA,IACA7F,IAAAA;AAAAA,IACAoD,QAAAA;AAAAA,IACAP,MAAQ69C,EAAAA,cAAAA;AAAAA,IACRj4C,gBAAgBgC,MAAQ5H,EAAAA,MAAAA;AAAAA,GAL8C,CAMtE,EAAA,CAACgD,kBAAkB7F,IAAMoD,EAAAA,QAAAA,EAAUs9C,cAAnC,CANkD,CAAA,CAAA;AAQtDnhD,EAAAA,SAAAA,CAAU,MAAM;AACZ,IAAA,SAAA,YAAA,CAAsBuD,CAAQ,EAAA;AAC1B,MAAA,IAAI49C,cAAgB,EAAA;AAChB59C,QAAAA,CAAAA,CAAEod,cAAF,EAAA,CAAA;AACApd,QAAE89C,CAAAA,CAAAA,WAAAA,GAAe,oCAAmCjkC,cAAe5a,CAAAA,IAAAA,CAAAA,2CAAAA,CAAAA,CAAAA;AAAAA,OACtE;AAAA,KACJ;AAEG,IAAA,IAAA,OAAOu4B,MAAW,KAAA,WAAA;AAClBA,MAAOR,MAAAA,CAAAA,gBAAAA,CAAiB,gBAAgB+mB,YAAxC,CAAA,CAAA;AAEJ,IAAA,OAAO,MAAM;AACL,MAAA,IAAA,OAAOvmB,MAAW,KAAA,WAAA;AAClBA,QAAOL,MAAAA,CAAAA,mBAAAA,CAAoB,gBAAgB4mB,YAA3C,CAAA,CAAA;AAAA,KAFR,CAAA;AAAA,GAKD,EAAA,CAACH,cAAgBpmB,EAAAA,MAAjB,CAhBM,CAAA,CAAA;AAkBT,EAAA,MAAM/2B,cAAcoZ,cAAeza,CAAAA,KAAAA,CAAAA;AACnC,EAAM4+C,MAAAA,gBAAAA,GAAmBv9C,aAAalD,MAAU,IAAA,CAAA,CAAA;AAEhDd,EAAAA,SAAAA,CAAU,MAAM;AACZ,IAAIkL,IAAAA,MAAAA;AACA81C,MAAAA,WAAAA,CAAY,CAAC/M,OAAQ5tC,CAAAA,WAAAA,EAAa6E,QAAQxM,cAAgB+B,EAAAA,IAAAA,EAAM5B,OAA5C,CAAT,CAAA,CAAA;AAAA,GAChB,EAAA,CAACqM,MAAQ7E,EAAAA,WAAT,CAHM,CAAA,CAAA;AAKH6K,EAAAA,MAAAA,QAAQ0X,QAAd,EAAA,CAAA;AACA,EAAA,MAAMC,cAAclpB,aAAcuR,CAAAA,KAAAA,CAAM8V,WAAYC,CAAAA,EAAAA,CAAG,IAArB,CAAD,CAAA,CAAA;AAEjCjnB,EAAAA,SAAAA,CAAU,MAAM;AACZ,IAAA,IAAI,CAACiG,eAAAA;AACDi7C,MAAAA,eAAAA,CAAgB,CAAD,CAAA,CAAA,CAAA;AAEnB,IAAA,IAAIl9C,WAAa,EAAA;AACb,MAAMiS,MAAAA,KAAAA,GAAQjS,WACT5B,CAAAA,GAAAA,CAAKkkB,CAAMA,CAAAA,KAAAA,CAAAA,CAAE7lB,IADJ,CAET+gD,CAAAA,SAAAA,CAAWn7B,CAAMA,CAAAA,KAAAA,CAAAA,KAAMpgB,eAFd,CAAA,CAAA;AAGdi7C,MAAAA,eAAAA,CAAgBjrC,KAAD,CAAA,CAAA;AAAA,KAClB;AAEGvU,IAAAA,IAAAA,kBAAkBuE,eAAiB,EAAA;AACnC,MAAMgQ,MAAAA,KAAAA,GAAQvU,cACTU,CAAAA,GAAAA,CAAKkkB,CAAMA,CAAAA,KAAAA,CAAAA,CAAE7lB,IADJ,CAET+gD,CAAAA,SAAAA,CAAWn7B,CAAMA,CAAAA,KAAAA,CAAAA,KAAMpgB,eAFd,CAAA,CAAA;AAGdi7C,MAAAA,eAAAA,CAAgBjrC,QAAQsrC,gBAAT,CAAA,CAAA;AAAA,KAClB;AAAA,GACJ,EAAE,CAACt7C,eAAD,CAjBM,CAAA,CAAA;AAoBHgX,EAAAA,MAAAA,kBAAAA,GAAqB/X,WAAY,CAAA,CAAC3B,CAAa,KAAA;AACjDi1B,IAAAA,eAAAA,CAAgBt7B,IAAK,CAAA;AAAA,MACjBc,IAAM,EAAA,OAAA;AAAA,MACNL,KAAO,EAAA,qBAAA;AAAA,MACPG,SAASyF,CAAGzF,EAAAA,OAAAA;AAAAA,KAHhB,CAAA,CAAA;AAKAsL,IAAAA,OAAAA,CAAQwI,MAAMrO,CAAd,CAAA,CAAA;AAAA,GANkC,EAOnC,EAPmC,CAAA,CAAA;AAShC2Z,EAAAA,MAAAA,sBAAAA,GAAyBhY,WAAY,CAAA,CAAC3B,CAAa,KAAA;AACrDi1B,IAAAA,eAAAA,CAAgBt7B,IAAK,CAAA;AAAA,MACjBc,IAAM,EAAA,OAAA;AAAA,MACNL,KAAAA,EAAQ,GAAEyf,cAAe5a,CAAAA,IAAAA,CAAAA,sCAAAA,CAAAA;AAAAA,MACzB1E,SAASyF,CAAGzF,EAAAA,OAAAA;AAAAA,KAHhB,CAAA,CAAA;AAKAsL,IAAAA,OAAAA,CAAQwI,MAAMrO,CAAd,CAAA,CAAA;AAAA,GANsC,EAOvC,EAPuC,CAAA,CAAA;AASpCwZ,EAAAA,MAAAA,aAAAA,GAAgB7X,WAAY,CAAA,CAAC0X,aAA6B,KAAA;AAE5DmkC,IAAAA,kBAAAA,CAAmBnkC,cAAcxV,EAAf,CAAA,CAAA;AAElBoxB,IAAAA,eAAAA,CAAgBt7B,IAAK,CAAA;AAAA,MACjBc,IAAM,EAAA,SAAA;AAAA,MACNF,OAAAA,EAAU,GAAEsf,cAAe5a,CAAAA,IAAAA,CAAAA,iBAAAA,CAAAA;AAAAA,KAF/B,CAAA,CAAA;AAKAq+C,IAAAA,SAAAA,CAAU,UAAD,CAAA,CAAA;AACTF,IAAAA,gBAAAA,CAAiB,KAAD,CAAA,CAAA;AAEhB,IAAA,IAAIM,YAAiB,KAAA,CAAA,CAAA;AACjB3iD,MAAAA,oBAAAA,CAAqBrB,KAArB,EAAA,CAAA;AAAA,GAbyB,EAe9B,EAf8B,CAAA,CAAA;AAiB3B+f,EAAAA,MAAAA,aAAAA,GAAgB9X,WAAY,CAAA,CAAC3B,CAAa,KAAA;AAE5Ci1B,IAAAA,eAAAA,CAAgBt7B,IAAK,CAAA;AAAA,MACjBc,IAAM,EAAA,OAAA;AAAA,MACNL,KAAAA,EAAQ,GAAEyf,cAAe5a,CAAAA,IAAAA,CAAAA,cAAAA,CAAAA;AAAAA,MACzB1E,SAASyF,CAAGzF,EAAAA,OAAAA;AAAAA,KAHhB,CAAA,CAAA;AAMAsL,IAAQwI,OAAAA,CAAAA,KAAAA,CAAM,qBAAuBnR,EAAAA,IAAAA,EAAMoD,QAA3C,CAAA,CAAA;AACAuF,IAAAA,OAAAA,CAAQwI,MAAMrO,CAAd,CAAA,CAAA;AAAA,GAT6B,EAU9B,EAV8B,CAAA,CAAA;AAYjC,EAAMyhC,MAAAA,YAAAA,GAAe9/B,YAAY,OAAO;AAAA,IACIjB,MAAAA;AAAAA,IACAxD,IAAAA,EAAAA,KAAAA;AAAAA,IACAoD,QAAAA,EAAAA,SAAAA;AAAAA,IACAP,MAAAA;AAAAA,IACA4F,cAAAA;AAAAA,GAOvB,KAAA;AAEb,IAAA,IAAA,CAACwB,MAAAA;AACD,MAAA,OAAA;AAEJ,IAAA,OAAO0iC,uBAAwB,CAAA;AAAA,MAC3B3sC,IAAAA,EAAAA,KAAAA;AAAAA,MACAoD,QAAAA,EAAAA,SAAAA;AAAAA,MACA8C,SAAAA;AAAAA,MACArD,MAAAA;AAAAA,MACA4F,cAAAA;AAAAA,MACAjF,MAAAA;AAAAA,MACAyG,MAAAA;AAAAA,MACAlM,UAAAA;AAAAA,MACAK,OAAAA;AAAAA,MACAke,aAAAA;AAAAA,MACAC,aAAAA;AAAAA,MACAC,kBAAAA;AAAAA,MACAC,sBAAAA;AAAAA,KAb0B,CAAA,CAAA;AAAA,GAejC,EAAE,CAACxS,MAAAA,EAAQ/D,SAAWnI,EAAAA,UAAAA,EAAYK,SAASke,aAAeC,EAAAA,aAAAA,EAAeC,kBAAoBC,EAAAA,sBAA3F,CAhC6B,CAAA,CAAA;AAkChC,EAAM+nB,MAAAA,SAAAA,GAAY//B,YAAY,MAAM;AAChC,IAAA,IAAI+7C,YAAiB,KAAA,CAAA,CAAA;AACjB3iD,MAAAA,oBAAAA,CAAqBrB,KAArB,EAAA,CAAA;AAAA,GACL,EAAA,CAACqB,oBAAsB2iD,EAAAA,YAAvB,CAH0B,CAAA,CAAA;AAK7B,EAAA,MAAMlvC,IAAO,GAAA,CAACxI,QAEN,mBAAApL,GAAA,CAAC,QAAD,EAAA;AAAA,IAAU,QAAU,kBAAAA,GAAA,CAAC,sBAArB,EAAA,EAAA,CAAA;AAAA,IAAA,QAAA,sBACK,UAAD,EAAA;AAAA,MAEI,MAAA;AAAA,MACA,IAAA;AAAA,MACA,gBAAA;AAAA,MACA,YAAA;AAAA,MACA,SAAA;AAAA,MACA,eAAiBijD,EAAAA,iBAAAA;AAAAA,MACjB,UAAYT,EAAAA,gBAAAA;AAAAA,MACZ,MAAA;AAAA,KARM,EAAA,CAAA,KAAA,EAAOlgD,IAAQyK,CAAAA,CAAAA,EAAAA,MAAAA,EAAQ9D,MAAM,KADvC,CAAA,CAAA,CAAA;AAAA,GAHC,CAgBT,mBAAAjJ,GAAA,CAAC,QAAD,EAAA;AAAA,IAAU,QAAU,kBAAAA,GAAA,CAAC,sBAArB,EAAA,EAAA,CAAA;AAAA,IAAA,QAAA,sBACK,aAAD,EAAA;AAAA,MACI,MAAA;AAAA,MACA,IAAA;AAAA,MACA,MAAQif,EAAAA,cAAAA;AAAAA,KAHZ,CAAA;AAAA,GAjBR,CAAA,CAAA;AAwBA,EAAA,MAAMqkC,kBAA6Cz9C,WAAeA,IAAAA,WAAAA,CAAY5B,GAC1E,CAAA,CAAC8B,YAAYw9C,QAAa,KAAA;AACtB,IAAA,2BACK,GAAD,EAAA;AAAA,MACI,WAAW5vC,OAAQwuC,CAAAA,kBAAAA;AAAAA,MAEnB,IAAK,EAAA,UAAA;AAAA,MACL,QAAU,EAAA,CAAA;AAAA,MACV,MAAQ,EAAA,MAAA;AAAA,MACR,KAAO,EAAA,MAAA;AAAA,MACP,QAAQW,YAAiBS,KAAAA,QAAAA;AAAAA,MAP7B,QAAA,sBAQK,aAAD,EAAA;AAAA,QACKx9C,QAAAA,EAAAA,WAAW+N,OAAQ,CAAA;AAAA,UAChBhO,MAAQmZ,EAAAA,cAAAA;AAAAA,UACRlS,MAAAA;AAAAA,UACAi2C,cAAAA,EAAgBA,kBAAkBj2C,MAAQ5H,EAAAA,MAAAA;AAAAA,SAH7C,CAAA;AAAA,OADL,CAAA;AAAA,KANM,EAAA,CAAA,YAAA,EAAcY,UAAWzD,CAAAA,IAAAA,CAAAA,CAAAA,EAAQihD,QAF3C,CAAA,CAAA,CAAA,CAAA;AAAA,GAHsD,CAAA,CAAA;AAuBlE,EAAA,MAAMC,sBAAsBjgD,cAAkBA,IAAAA,cAAAA,CAAeU,GACzD,CAAA,CAAC2qC,eAAe2U,QAAa,KAAA;AACnBE,IAAAA,MAAAA,YAAAA,GAAe12C,MAAU,GAAA,CAAA,EAAEA,MAAQzK,EAAAA,IAAAA,CAAAA,CAAAA,EAAQyK,QAAQ9D,EAAMxG,CAAAA,CAAAA,EAAAA,+BAAAA,CAAgCmsC,aAActsC,CAAAA,IAAf,CAAyB5C,CAAAA,CAAAA,GAAAA,KAAAA,CAAAA,CAAAA;AAEvH,IAAA,2BACK,GAAD,EAAA;AAAA,MACI,WAAWiU,OAAQwuC,CAAAA,kBAAAA;AAAAA,MAEnB,IAAK,EAAA,UAAA;AAAA,MACL,QAAU,EAAA,CAAA;AAAA,MACV,MAAA,EAAQW,iBAAiBS,QAAWH,GAAAA,gBAAAA;AAAAA,MALxC,QAMKr2C,EAAAA,MAAAA,IAAU02C,YACL,mBAAAzjD,GAAA,CAAC,QAAD,EAAA;AAAA,QAAU,QAAU,kBAAAA,GAAA,CAAC,sBAArB,EAAA,EAAA,CAAA;AAAA,QAAA,QAAA,sBACG,oBAAD,EAAA;AAAA,UACI,IAAMyjD,EAAAA,YAAAA;AAAAA,UACN,UAAY7U,EAAAA,aAAAA;AAAAA,SAFhB,CAAA;AAAA,OAFP,CAMK,mBAAA5uC,GAAA,CAAC,GAAD,EAAA;AAAA,QAAK,CAAG,EAAA,CAAA;AAAA,QACL,OAAS,EAAA,MAAA;AAAA,QACT,UAAY,EAAA,QAAA;AAAA,QACZ,cAAgB,EAAA,QAAA;AAAA,QAHnB,QAAA,sBAIG,GAAD,EAAA;AAAA,UAAA,QAAA,EAAA,mEAAA;AAAA,SAAA,CAAA;AAAA,OAJF,CAAA;AAAA,KAVA,EAAA,CAAA,OAAA,EAAS4uC,aAAcvqC,CAAAA,IAAAA,CAAAA,CAAAA,EAAQk/C,QAFzC,CAAA,CAAA,CAAA,CAAA;AAAA,GALkC,CAAA,CAAA;AAgCxCG,EAAAA,MAAAA,kBAAAA,GAAqB38C,WAAY,CAAA,CAACmF,KAAkB,KAAA;AACtD,IAAA,IAAIA,KAAU,KAAA,CAAA,CAAA;AAAI,MAAOxM,OAAAA,KAAAA,CAAAA,CAAAA;AAEzB,IAAImG,IAAAA,WAAAA,IAAeqG,QAAQk3C,gBAAkB,EAAA;AACzC,MAAA,OAAOv9C,YAAYqG,KAAO5J,CAAAA,CAAAA,IAAAA,CAAAA;AAAAA,KAC7B;AAED,IAAA,IAAIiB,cAAgB,EAAA;AAChB,MAAOA,OAAAA,cAAAA,CAAe2I,QAAQk3C,gBAAkB9gD,CAAAA,CAAAA,IAAAA,CAAAA;AAAAA,KACnD;AAEKM,IAAAA,MAAAA,MAAM,0CAAD,CAAA,CAAA;AAAA,GACd,EAAE,CAACiD,WAAD,CAZmC,CAAA,CAAA;AAchC89C,EAAAA,MAAAA,cAAAA,GAAiB58C,WAAY,CAAA,CAACmF,KAAkB,KAAA;AAClD62C,IAAAA,eAAAA,CAAgB72C,KAAD,CAAA,CAAA;AACf,IAAA,IAAIxG,QAAU,EAAA;AACVvF,MAAAA,oBAAAA,CAAqBpB,IAAK,CAAA;AAAA,QACtBuD,IAAAA;AAAAA,QACAoD,QAAAA;AAAAA,QACAoC,eAAAA,EAAiB47C,mBAAmBx3C,KAAD,CAAA;AAAA,QACnC9D,sBAAwB,EAAA,KAAA;AAAA,OAJ5B,CAAA,CAAA;AAAA,KAMH;AAAA,GAT6B,EAU/B,EAV+B,CAAA,CAAA;AAY5BwjB,EAAAA,MAAAA,MAAAA,wBACD,GAAD,EAAA;AAAA,IAAK,EAAI,EAAA;AAAA,MACLpY,WAAa,EAAA,CAAA;AAAA,MACb0W,YAAc,EAAA,CAAA;AAAA,MACdhD,UAAY,EAAA,CAAA;AAAA,MACZhU,OAAS,EAAA,MAAA;AAAA,MACTC,UAAY,EAAA,QAAA;AAAA,MACZoF,eAAAA,EAAiBxF,KAAMsI,CAAAA,OAAAA,CAAQna,IAAS,KAAA,OAAA,GAAU6R,KAAMsI,CAAAA,OAAAA,CAAQsK,UAAWC,CAAAA,OAAAA,GAAU7S,KAAMsI,CAAAA,OAAAA,CAAQsK,UAAWqI,CAAAA,KAAAA;AAAAA,KANlH;AAAA,IAAA,QAAA,EAAA,iBAUIhuB,GAAA,CAAC,UAAD,EAAA;AAAA,MAAY,OAAA,EAAUoF,CAAMjF,CAAAA,KAAAA,oBAAAA,CAAqBrB,KAAjD,EAAA;AAAA,MACY,IAAK,EAAA,OAAA;AAAA,MADjB,QAEI,kBAAAkB,GAAA,CAAC,SAAD,EAAA,EAAA,CAAA;AAAA,KAZR,CAeI,kBAAAA,GAAA,CAAC,IAAD,EAAA;AAAA,MACI,KAAA,EAAO8iD,YAAiB,KAAA,CAAA,CAAA,GAAK,CAAI,GAAA,KAAA;AAAA,MACjC,cAAe,EAAA,WAAA;AAAA,MACf,SAAU,EAAA,SAAA;AAAA,MACV,aAAc,EAAA,MAAA;AAAA,MAJlB,QAAA,sBAMK,GAAD,EAAA;AAAA,QACI,OAAO7jC,cAAe5a,CAAAA,IAAAA;AAAAA,QACtB,OAAS,EAAA;AAAA,UACLgU,MAAM1E,OAAQ4uC,CAAAA,GAAAA;AAAAA,SAHtB;AAAA,QAKI,OAAS,EAAA,IAAA;AAAA,QACT,SAAS,MAAM;AACXoB,UAAAA,cAAAA,CAAe,CAAD,CAAA,CAAA,CAAA;AAAA,SACjB;AAAA,OARL,CAAA;AAAA,KArBR,CAgCI,kBAAA3jD,GAAA,CAAC,GAAD,EAAA;AAAA,MAAK,QAAU,EAAA,CAAA;AAAA,KAAf,CAAA,EAECkd,WACD,oBAAAld,GAAA,CAAC,gBAAD,EAAA;AAAA,MAAkB,IAAM,EAAA,EAAA;AAAA,MAAI,SAAW,EAAA,CAAA;AAAA,KAnC3C,CAqCI,kBAAAD,IAAA,CAAC,IAAD,EAAA;AAAA,MACI,KAAA,EAAO+iD,YAAgB,IAAA,CAAA,GAAIA,YAAe,GAAA,KAAA;AAAA,MAC1C,cAAe,EAAA,WAAA;AAAA,MACf,SAAU,EAAA,SAAA;AAAA,MACV,QAAA,EAAU,CAACc,EAAAA,EAAI13C,KAAU,KAAA;AACrBy3C,QAAAA,cAAAA,CAAez3C,KAAD,CAAA,CAAA;AAAA,OALtB;AAAA,MAOI,WAAWyH,OAAQ2uC,CAAAA,MAAAA;AAAAA,MACnB,OAAQ,EAAA,YAAA;AAAA,MACR,aAAc,EAAA,MAAA;AAAA,MAGbz8C,UAAAA,CAAAA,WAAAA,IAAeA,YAAY5B,GACvBQ,CAAAA,CAAAA,IAAAA,yBACI,GAAD,EAAA;AAAA,QACI,OAAS,EAAA;AAAA,UACL4T,MAAM1E,OAAQ4uC,CAAAA,GAAAA;AAAAA,SAFtB;AAAA,QAII,OAAS,EAAA,IAAA;AAAA,QAET,OAAO99C,IAAKJ,CAAAA,IAAAA;AAAAA,OANhB,EAKU,CAA2BI,yBAAAA,EAAAA,IAAAA,CAAKJ,IAL1C,CAAA,CAAA,CAFQ,CAWfd,EAAAA,cAAAA,IAAkBA,cAAeU,CAAAA,GAAAA,CAC7B2qC,CACG,aAAA,qBAAA5uC,GAAA,CAAC,GAAD,EAAA;AAAA,QACI,OAAS,EAAA;AAAA,UACLqY,MAAM1E,OAAQ4uC,CAAAA,GAAAA;AAAAA,SAFtB;AAAA,QAII,OAAS,EAAA,IAAA;AAAA,QAET,OAAO3T,aAAcvqC,CAAAA,IAAAA;AAAAA,OADf,EAAA,CAAA,6BAAA,EAA+BuqC,aAAcvqC,CAAAA,IAAAA,CAAAA,CALvD,CAFW,CAvBvB,CAAA;AAAA,KArCJ,CAAA,CAAA;AAAA,GADJ,CAAA,CAAA;AA6EO,EAAA,2BAAA,KAAA,EAAA;AAAA,IACH,SAAA,EAAWwP,IAAKF,CAAAA,OAAAA,CAAQgzB,SAAW,EAAA;AAAA,MAAGhzB,CAAAA,OAAAA,CAAQuuC,gBAAgBY,YAAiB,KAAA,CAAA,CAAA;AAAA,KAAhE,CAAA;AAAA,IADZ,QAAA,EAGC5lC,8BACOld,GAAA,CAAA,sBAAA,6BACDyZ,QAAA,EAAA;AAAA,MAAA,QAAA,EAAA,CAEGmS,MAED,kBAAA5rB,GAAA,CAAC,YAED,kBAAAD,IAAA,CAAA,KAAA,EAAA;AAAA,QAAK,WAAW4T,OAAQ0uC,CAAAA,aAAAA;AAAAA,QAAxB,QAAA,EAAA,iBAEIriD,GAAA,CAAC,GAAD,EAAA;AAAA,UACI,IAAK,EAAA,UAAA;AAAA,UACL,MAAA,EAAQ,CAAC0qB,WAAAA,IAAeo4B,YAAiB,KAAA,CAAA,CAAA;AAAA,UACzC,WAAWnvC,OAAQgvB,CAAAA,IAAAA;AAAAA,UAClB/uB,QAAAA,EAAAA,IAAAA;AAAAA,SANT,CASK0vC,EAAAA,eAAAA,EAEAE,mBAXL,CAAA;AAAA,OANF,CAAA,CAAA;AAAA,KAAA,CAAA;AAAA,GALd,CAAA,CAAA;AA8BH;;ACrgBM,SAAA,iCAAA,CAA2CK,MAAeljC,SAK3D,EAAA;AAEF,EAAA,MAAM,CAACmjC,YAAAA,EAAcC,eAAmB7kD,CAAAA,GAAAA,cAAAA,CAAMK,QAA9C,EAAA,CAAA;AACM,EAAA,MAAA;AAAA,IAAEsc,SAAAA;AAAAA,GAAc3c,GAAAA,cAAAA,CAAMqd,WAAWynC,wBAAjB,CAAA,CAAA;AAEhB39C,EAAAA,MAAAA,WAAWC,WAAjB,EAAA,CAAA;AAEM2qC,EAAAA,MAAAA,eAAe,MAAM;AACvB8S,IAAAA,eAAAA,CAAgBrkD,KAAD,CAAA,CAAA,CAAA;AAAA,GADnB,CAAA;AAIM0xC,EAAAA,MAAAA,WAAW,MAAM;AACnBzwB,IAAS,SAAA,EAAA,CAAA;AACTojC,IAAAA,eAAAA,CAAgBrkD,KAAD,CAAA,CAAA,CAAA;AACf2G,IAAAA,QAAAA,CAAS,CAAD,CAAA,CAAA,CAAA;AAAA,GAHZ,CAAA;AAMA,EAAM49C,MAAAA,OAAAA,GAAmBl9C,YAAY,CAAC;AAAA,IAAE0a,MAAAA;AAAAA,IAAQtb,QAAU29C,EAAAA,aAAAA;AAAAA,IAAcI,KAAAA;AAAAA,GAAY,KAAA;AAChF,IAAQziC,QAAAA,MAAAA;AAAAA,MAAAA,KACC,SAAW,EAAA;AACZyiC,QAAK,KAAA,EAAA,CAAA;AACL,QAAA,OAAA;AAAA,OACH;AAAA,MAAA,KACI,KAAO,EAAA;AACRH,QAAAA,eAAAA,CAAgBD,aAAD,CAAA,CAAA;AAAA,OAElB;AAAA,KAAA;AAAA,GAT2B,EAWjC,EAXiC,CAAA,CAAA;AAapC5kD,EAAAA,cAAAA,CAAM2C,UAAU,MAAM;AACd,IAAA,IAAA,CAACgiD,IAAAA;AAAM,MAAA,OAAA;AACX,IAAIC,IAAAA,YAAAA;AAAc,MAAA,OAAA;AAClB,IAAA,IAAI,EAAajoC,OAAAA,IAAAA,SAAAA,CAAAA;AAAY,MAAA,OAAA;AAC7B,IAAA,MAAMsoC,OAAWtoC,GAAAA,SAAAA,CAAkBuoC,KAAM,CAAA,CAACC,EAAmB,KAAA;AACzD,MAAA,MAAMC,gBAAmB,GAAA;AAAA,QAClBD,GAAAA,EAAAA;AAAAA,QACHH,KAAQ,GAAA;AACJC,UAAO,OAAA,EAAA,CAAA;AACPE,UAAAA,EAAAA,CAAGH,KAAH,EAAA,CAAA;AAAA,SACH;AAAA,OALL,CAAA;AAOAD,MAAAA,OAAAA,CAAQK,gBAAD,CAAA,CAAA;AAAA,KARK,CAAA,CAAA;AAWhB,IAAOH,OAAAA,OAAAA,CAAAA;AAAAA,KACR,CAACtoC,SAAAA,EAAWooC,OAASJ,EAAAA,IAAAA,EAAMC,YAA3B,CAhBH,CAAA,CAAA;AAkBO,EAAA,OAAA;AAAA,IAAES,oBAAAA,EAAsBl/C,QAAQy+C,YAAD,CAAA;AAAA,IAAgB7S,YAAAA;AAAAA,IAAcG,QAAAA;AAAAA,GAApE,CAAA;AACH,CAAA;AASoC,SAAA,oBAAA,CAAA;AAAA,EACIryC,IAAAA;AAAAA,EACAqyC,QAAAA;AAAAA,EACAH,YAAAA;AAAAA,EACAuT,UAAAA;AAAAA,CAC0B,EAAA;AAE/D,EAAA,4BACKC,QAAD,EAAA;AAAA,IACI,IAAA;AAAA,IACA,OAASxT,EAAAA,YAAAA;AAAAA,IACT,iBAAgB,EAAA,oBAAA;AAAA,IAChB,kBAAiB,EAAA,0BAAA;AAAA,IAJrB,QAAA,EAAA,iBAMIjxC,GAAA,CAAC0kD,aAAD,EAAA;AAAA,MAAa,EAAG,EAAA,oBAAA;AAAA,MACX,QAAA,EAAA,iBAAA;AAAA,KAPT,CASI,kBAAA3kD,IAAA,CAAC4kD,eAAD,EAAA;AAAA,MAAA,QAAA,EAAA,iBACI5kD,IAAA,CAAC6kD,mBAAD,EAAA;AAAA,QAAmB,EAAG,EAAA,0BAAA;AAAA,QACe,QAAA,EAAA,CAAA,mCAAA,kBAAA5kD,GAAA,CAAA,GAAA,EAAA;AAAA,UAAIwkD,QAAAA,EAAAA,UAAAA;AAAAA,SADzC,GAAA,GAAA,CAAA;AAAA,OADJ,CAII,kBAAAxkD,GAAA,CAAC4kD,mBAAD,EAAA;AAAA,QAAmB,EAAG,EAAA,0BAAA;AAAA,QAAtB,QAAA,EAAA,2CAAA;AAAA,OAJJ,CAAA,CAAA;AAAA,KATJ,CAiBI,kBAAA7kD,IAAA,CAAC8kD,eAAD,EAAA;AAAA,MAAA,QAAA,EAAA,iBACI7kD,GAAA,CAAC8kD,QAAD,EAAA;AAAA,QAAQ,OAAS7T,EAAAA,YAAAA;AAAAA,QAAc,SAA/B,EAAA,IAAA;AAAA,QAAA,QAAA,EAAA,UAAA;AAAA,OADJ,CAEI,kBAAAjxC,GAAA,CAAC8kD,QAAD,EAAA;AAAA,QAAQ,OAAS1T,EAAAA,QAAAA;AAAAA,QAAjB,QAAA,EAAA,MAAA;AAAA,OAFJ,CAAA,CAAA;AAAA,KAjBJ,CAAA,CAAA;AAAA,GADJ,CAAA,CAAA;AAwBH;;ACnFmC,SAAA,iBAAA,GAAA;AAE1BjxC,EAAAA,MAAAA,uBAAuB4kB,uBAA7B,EAAA,CAAA;AAEA,EAAA,MAAMte,aAAatG,oBAAqBsG,CAAAA,UAAAA,CAAAA;AAGxC,EAAA,MAAMs+C,SAAY,GAAA,CAAC,GAAGt+C,UAAAA,EAAY/G,KAAhB,CAAA,CAAA,CAAA;AAEX,EAAA,2BAAA+Z,QAAA,EAAA;AAAA,IAAA,UAECsrC,SAAU9gD,CAAAA,GAAAA,CAAI,CAAC+gD,KAAyCltC,EAAAA,KAAAA,yBAE/C,gBAAD,EAAA;AAAA,MAEI,KAAA;AAAA,MACA,cAAA,EAAgBrR,UAAW9D,CAAAA,MAAAA,GAASmV,KAAQ,GAAA,CAAA;AAAA,KAFtC,EAAA,CAAqBA,mBAAAA,EAAAA,KAAAA,CAAAA,CAD/B,CAFR,CAAA;AAAA,GAFR,CAAA,CAAA;AAYH,CAAA;AAED,SAA0B,gBAAA,CAAA;AAAA,EACIktC,KAAAA;AAAAA,EACA9D,cAAAA;AAAAA,CACyD,EAAA;AAG7E,EAAA,MAAA,CAAC8B,cAAAA,EAAgBC,iBAAqB1jD,CAAAA,GAAAA,QAAAA,CAAS,KAAD,CAAA,CAAA;AAE9C,EAAA,MAAA,CAAC0lD,oBAAAA,EAAsBC,uBAA2B3lD,CAAAA,GAAAA,QAAAA,CAAS,KAAD,CAAA,CAAA;AAE1D,EAAA,MAAA;AAAA,IACFglD,oBAAAA;AAAAA,IACAnT,QAAU+T,EAAAA,kBAAAA;AAAAA,IACVlU,YAAcmU,EAAAA,sBAAAA;AAAAA,GAAAA,GACdC,kCACArC,cAAkB,IAAA,CAACiC,sBACnB,MAAMhC,iBAAAA,CAAkB,KAAD,CAFU,CAAA,CAAA;AAK/BqC,EAAAA,MAAAA,sBAAsB,MAAM;AAC9BrC,IAAAA,iBAAAA,CAAkB,KAAD,CAAA,CAAA;AACjBiC,IAAAA,uBAAAA,CAAwB,KAAD,CAAA,CAAA;AACvB/kD,IAAAA,oBAAAA,CAAqBrB,KAArB,EAAA,CAAA;AAAA,GAHJ,CAAA;AAKMymD,EAAAA,MAAAA,0BAA0B,MAAM;AAClCL,IAAAA,uBAAAA,CAAwB,KAAD,CAAA,CAAA;AAAA,GAD3B,CAAA;AAIM/kD,EAAAA,MAAAA,uBAAuB4kB,uBAA7B,EAAA,CAAA;AACM3kB,EAAAA,MAAAA,oBAAoB0kB,aAA1B,EAAA,CAAA;AAGM7c,EAAAA,MAAAA,WAAAA,GAAoD,CAAC+8C,KAAQtlD,GAAAA,KAAAA,CAAAA,GAAYU,kBAAkBoP,qBAAsBw1C,CAAAA,KAAAA,CAAM1iD,IAAM0iD,EAAAA,KAAAA,CAAMt/C,QAA1D,CAAA,CAAA;AAC/E,EAAIs/C,IAAAA,KAAAA,IAAS,CAAC/8C,WAAa,EAAA;AACjBrF,IAAAA,MAAAA,MAAM,iEAAD,CAAA,CAAA;AAAA,GACd;AAED,EAAMkD,MAAAA,MAAAA,GAASqL,QAAQ,MAAM;AACzB,IAAA,IAAI,CAAC6zC,KAAAA;AAAO,MAAOtlD,OAAAA,KAAAA,CAAAA,CAAAA;AACnB,IAAA,OAAOwf,aAAc,CAAA;AAAA,MACjB/W,kBAAkBF,WAAaM,CAAAA,cAAAA;AAAAA,MAC/BjG,MAAM0iD,KAAM1iD,CAAAA,IAAAA;AAAAA,MACZoD,UAAUs/C,KAAMt/C,CAAAA,QAAAA;AAAAA,KAHA,CAAA,CAAA;AAAA,GAKrB,EAAA,CAACs/C,KAAO/8C,EAAAA,WAAR,CAPmB,CAAA,CAAA;AAUtB,EAAI,IAAA,CAAC+8C,KAAS,IAAA,CAACl/C,MAAQ,EAAA;AACnB,IAAA,2BAAQ,gBAAD,EAAA;AAAA,MACH,IAAM,EAAA,KAAA;AAAA,MACN,cAAA;AAAA,MACA,QAAA,sBAAA,KAAA,EAAA;AAAA,QAAK,KAAO,EAAA;AAAA,UAAEkC,KAAO45C,EAAAA,eAAAA;AAAAA,SAAT;AAAA,OAAZ,CAAA;AAAA,KAHJ,CAAA,CAAA;AAAA,GAKH;AAGG,EAAA,4BAAAnoC,QAAA,EAAA;AAAA,IAAA,QAAA,EAAA,iBAEIzZ,GAAA,CAAC,gBAAD,EAAA;AAAA,MACI,IAAA,EAAMqF,QAAQ2/C,KAAD,CAAA;AAAA,MACb,SAAS,MAAM;AACX,QAAA,IAAIhC,cAAgB,EAAA;AAChBkC,UAAAA,uBAAAA,CAAwB,IAAD,CAAA,CAAA;AAAA,SACpB,MAAA;AACH/kD,UAAAA,oBAAAA,CAAqBrB,KAArB,EAAA,CAAA;AAAA,SACH;AAAA,OAPT;AAAA,MASI,cAAA;AAAA,MATJ,QAAA,sBAWM,aAAD,EAAA;AAAA,QACG,QAAA,sBAAC,UAAD,EAAA;AAAA,UACQmJ,GAAAA,WAAAA;AAAAA,UACA+8C,GAAAA,KAAAA;AAAAA,UACJ,QAAQ/8C,WAAaM,CAAAA,cAAAA;AAAAA,UACrB,gBAAkB06C,EAAAA,iBAAAA;AAAAA,SAJtB,CAAA;AAAA,OADH,CAAA;AAAA,KAbT,CAuBI,kBAAAjjD,GAAA,CAAC,oBAAD,EAAA;AAAA,MACI,MAAMukD,oBAAwBU,IAAAA,oBAAAA;AAAAA,MAC9B,QAAA,EAAUA,uBAAuBK,mBAAsBH,GAAAA,kBAAAA;AAAAA,MACvD,YAAA,EAAcF,uBAAuBM,uBAA0BH,GAAAA,sBAAAA;AAAAA,MAC/D,YAAYt/C,MAAOzB,CAAAA,IAAAA;AAAAA,KA3B3B,CAAA,CAAA;AAAA,GADJ,CAAA,CAAA;AAgCH;;AC3HM,MAAMmhD,wBAAwB,CACjC;AAAA,EAAEtkD,IAAAA;AAAAA,EAAMukD,YAAAA;AAAAA,EAAcC,cAAAA;AAAAA,EAAgBvrC,UAAAA;AAAAA,CAKzB,KAAA;AAEPwrC,EAAAA,MAAAA,WAAWC,WAAY,CAAA;AAAA,IACzBvqC,OAAS,EAAA;AAAA,MACLna,IAAAA;AAAAA,MACAykB,UAAY,EAAA;AAAA,QACRC,OAAAA,EAAS1kB,IAAS,KAAA,MAAA,GAAS,SAAY,GAAA,SAAA;AAAA,OAHtC;AAAA,MAMLspB,OAAS,EAAA;AAAA,QACLqV,MAAM4lB,YAAgB,IAAA,SAAA;AAAA,OAPrB;AAAA,MASL55B,SAAW,EAAA;AAAA,QACPgU,IAAAA,EAAM6lB,kBAAkBG,IAAK,CAAA,KAAA,CAAA;AAAA,OAV5B;AAAA,MAYLpyC,KAAO,EAAA;AAAA,QACHosB,MAAMimB,GAAIC,CAAAA,IAAAA;AAAAA,OADP;AAAA,KAbc;AAAA,IAiBzBttC,UAAY,EAAA;AAAA,MACR0B,YAAYA,UAAc,IAAA,qDAAA;AAAA,MAC1BoI,gBAAkB,EAAA,GAAA;AAAA,MAClByjC,EAAI,EAAA;AAAA,QACAxtC,UAAY,EAAA,GAAA;AAAA,QACZyB,QAAU,EAAA,SAAA;AAAA,OAFV;AAAA,KApBiB;AAAA,IAyBzBgsC,UAAY,EAAA;AAAA,MACRC,SAAW,EAAA;AAAA,QACPC,cAAgB,EAAA;AAAA,UACZ9tC,IAAM,EAAA;AAAA,YACFgC,YAAc,EAAA,CAAA;AAAA,WADZ;AAAA,SADM;AAAA,OAFZ;AAAA,MAQR+rC,WAAa,EAAA;AAAA,QACTD,cAAgB,EAAA;AAAA,UACZ9tC,IAAM,EAAA;AAAA,YACiB,iBAAA,EAAA;AAAA,cACf8D,YAAc,EAAA,CAAA;AAAA,aADC;AAAA,WADjB;AAAA,SADM;AAAA,OATZ;AAAA,MAiBRkqC,aAAe,EAAA;AAAA,QACXF,cAAgB,EAAA;AAAA,UACZ9tC,IAAM,EAAA;AAAA,YACQ,QAAA,EAAA;AAAA,cACN8B,UAAY,EAAA,2CAAA;AAAA,aAFd;AAAA,YAIc,cAAA,EAAA;AAAA,cACZ3B,UAAY,EAAA,GAAA;AAAA,aADA;AAAA,WAJd;AAAA,SADM;AAAA,OAlBZ;AAAA,MA6BR8tC,YAAc,EAAA;AAAA,QACVH,cAAgB,EAAA;AAAA,UACZ9tC,IAAM,EAAA;AAAA,YACQ,QAAA,EAAA;AAAA,cACN8B,UAAY,EAAA,2CAAA;AAAA,aADN;AAAA,WADR;AAAA,SADM;AAAA,OADN;AAAA,KA7BN;AAAA,GAzBY,CAAA,CAAA;AAkErB,EAAA,OAAA;AAAA,IACAwrC,GAAAA,QAAAA;AAAAA,GADP,CAAA;AAOH;;ACzDM,SAAA,eAAA,CACH5hD,UACwC,EAAA;AACxC,EAAOA,OAAAA,UAAAA,CAAAA;AACV,CAAA;AAQM,SAAA,eAAA,CAEHwiD,cACkC,EAAA;AAClC,EAAOA,OAAAA,cAAAA,CAAAA;AACV,CAAA;AAQM,SAAA,WAAA,CACHzgD,MACe,EAAA;AACf,EAAOA,OAAAA,MAAAA,CAAAA;AACV,CAAA;AAQM,SAAA,aAAA,CACHqF,QAS8F,EAAA;AACvFA,EAAAA,OAAAA,QAAAA,CAAAA;AACV,CAAA;AAQM,SAAA,eAAA,CACHM,UACa,EAAA;AACb,EAAOA,OAAAA,UAAAA,CAAAA;AACV,CAAA;AAQM,SAAA,wBAAA,CACHE,mBACsB,EAAA;AACtB,EAAOA,OAAAA,mBAAAA,CAAAA;AACV,CAAA;AAQM,SAAA,eAAA,CACHoM,UACU,EAAA;AACV,EAAOA,OAAAA,UAAAA,CAAAA;AACV,CAAA;AAQM,SAAA,oBAAA,CACHyuC,eACe,EAAA;AACf,EAAOA,OAAAA,eAAAA,CAAAA;AACV,CAAA;AAQM,SAAA,oBAAA,CACHh+C,SACkB,EAAA;AAClB,EAAOA,OAAAA,SAAAA,CAAAA;AACV,CAAA;AAQM,SAAA,6BAAA,CACHi+C,wBACoD,EAAA;AACpD,EAAOA,OAAAA,wBAAAA,CAAAA;AACV;;ACnHM,MAAMC,0BAA0B,CACnC;AAAA,EACIC,WAAAA;AAAAA,EACAC,aAAAA;AAAAA,CACkD,KAAA;AAEtD,EAAA,MAAM,CAACC,UAAAA,EAAYC,aAAiBvnD,CAAAA,GAAAA,QAAAA,CAA0CG,KAAlC,CAAA,CAAA,CAAA;AACtC,EAAA,MAAA,CAACqnD,iBAAmBC,EAAAA,oBAAAA,CAAAA,GAAwBznD,QAAlD,EAAA,CAAA;AACM,EAAA,MAAA,CAAC6R,cAAAA,EAAgB61C,iBAAqB1nD,CAAAA,GAAAA,QAAAA,CAAS,IAAD,CAAA,CAAA;AAC9C,EAAA,MAAA,CAACoR,WAAAA,EAAaC,cAAkBrR,CAAAA,GAAAA,QAAAA,CAAS,IAAD,CAAA,CAAA;AACxC,EAAA,MAAA,CAAC0R,YAAAA,EAAci2C,eAAmB3nD,CAAAA,GAAAA,QAAAA,CAAkB,KAAV,CAAA,CAAA;AAEhD,EAAqB,SAAA,SAAA,GAAA;AACjB2nD,IAAAA,eAAAA,CAAgB,IAAD,CAAA,CAAA;AACfJ,IAAAA,aAAAA,CAAc,IAAD,CAAA,CAAA;AAAA,GAChB;AAEDjlD,EAAAA,SAAAA,CAAU,MAAM;AACR,IAAA,IAAA,CAAC8kD,WAAAA;AAAa,MAAA,OAAA;AAClB,IAAM3a,MAAAA,IAAAA,GAAOmb,QAAQR,WAAD,CAAA,CAAA;AACpBG,IAAAA,aAAAA,CAAc9a,KAAKob,WAAN,CAAA,CAAA;AACb,IAAA,OAAOC,mBACHrb,IACAsb,EAAAA,kBAAAA,EACA7zC,CAASuzC,KAAAA,KAAAA,oBAAAA,CAAqBvzC,KAAD,CAHR,CAAA,CAAA;AAAA,GAK5B,EAAE,CAACkzC,WAAD,CATM,CAAA,CAAA;AAWHW,EAAAA,MAAAA,kBAAAA,GAAqB,OAAOC,YAAsC,KAAA;AACpET,IAAAA,aAAAA,CAAcS,YAAD,CAAA,CAAA;AACbN,IAAAA,iBAAAA,CAAkB,KAAD,CAAA,CAAA;AACjBr2C,IAAAA,cAAAA,CAAe,KAAD,CAAA,CAAA;AAAA,GAHlB,CAAA;AAMA,EAAqB,SAAA,SAAA,GAAA;AACjB,IAAMo7B,MAAAA,IAAAA,GAAOmb,QAAQR,WAAD,CAAA,CAAA;AACpBt1C,IAAQ26B,OAAAA,CAAAA,IAAD,CACFl9B,CAAAA,IAAAA,CAAK7O,CAAK,CAAA,KAAA;AACP6mD,MAAAA,aAAAA,CAAc,IAAD,CAAA,CAAA;AACbE,MAAAA,oBAAAA,CAAqB,IAAD,CAAA,CAAA;AAAA,KAH5B,CAAA,CAAA;AAKAE,IAAAA,eAAAA,CAAgB,KAAD,CAAA,CAAA;AAAA,GAClB;AAEKM,EAAAA,MAAAA,kBAAAA,GAAqB,CAACC,UAAyE,KAAA;AACjG,IAAOb,OAAAA,aAAAA,CAAcvjD,KAAMqkD,CAAW,MAAA,KAAA;AAC9BA,MAAAA,IAAAA,MAAW,KAAA,IAAA;AAAM,QAAA,MAAM9kD,MAAM,yBAAD,CAAA,CAAA;AAChC,MAAA,IAAI,OAAO8kD,MAAAA,KAAW,QAAYA,IAAAA,MAAAA,CAAOC,QAAaF,KAAAA,UAAAA;AAClD,QAAOC,OAAAA,MAAAA,CAAAA;AACX,MAAOhoD,OAAAA,KAAAA,CAAAA,CAAAA;AAAAA,KAJJ,CAAA,CAAA;AAAA,GADX,CAAA;AASMkoD,EAAAA,MAAAA,cAAc,MAAM;AACtB,IAAMD,MAAAA,QAAAA,GAAW,IAAIE,kBAArB,EAAA,CAAA;AACA,IAAMnnC,MAAAA,OAAAA,GAAU8mC,mBAAmB,YAAD,CAAA,CAAA;AAClC,IAAA,IAAI9mC,OAASonC,EAAAA,MAAAA;AACTpnC,MAAAA,OAAAA,CAAQonC,OAAO19C,OAAS29C,CAAAA,CAAAA,KAAAA,KAAUJ,QAASK,CAAAA,QAAAA,CAASD,KAAlB,CAAlC,CAAA,CAAA;AACArnC,IAAAA,IAAAA,OAASunC,EAAAA,gBAAAA;AACTN,MAASO,QAAAA,CAAAA,mBAAAA,CAAoBxnC,QAAQunC,gBAArC,CAAA,CAAA;AACEjc,IAAAA,MAAAA,OAAOmb,OAAb,EAAA,CAAA;AACAgB,IAAAA,eAAAA,CAAgBnc,IAAM2b,EAAAA,QAAP,CAAiB54C,CAAAA,KAAAA,CAAMi4C,oBAAtC,CAAA,CAAA;AAAA,GARJ,CAAA;AAWA,EAAA,SAAA,YAAA,CAAsBhb,MAAY2b,QAA2F,EAAA;AACzH/2C,IAAAA,cAAAA,CAAe,IAAD,CAAA,CAAA;AACdu3C,IAAgBnc,eAAAA,CAAAA,IAAAA,EAAM2b,QAAP,CAAA,CACV54C,KAAMi4C,CAAAA,oBADX,EAEKl4C,IAAK,CAAA,MAAM8B,cAAe,CAAA,KAAD,CAF9B,CAAA,CAAA;AAAA,GAGH;AAEKw3C,EAAAA,MAAAA,iBAAiB,MAAM;AACnBpc,IAAAA,MAAAA,OAAOmb,OAAb,EAAA,CAAA;AACAv2C,IAAAA,cAAAA,CAAe,IAAD,CAAA,CAAA;AACdy3C,IAAkBrc,iBAAAA,CAAAA,IAAD,EACZj9B,KAAMi4C,CAAAA,oBADX,EAEKl4C,IAAK,CAAA,MAAM8B,cAAe,CAAA,KAAD,CAF9B,CAAA,CAAA;AAAA,GAHJ,CAAA;AAQM03C,EAAAA,MAAAA,aAAa,MAAM;AACrB,IAAMX,MAAAA,QAAAA,GAAW,IAAIY,aAAAA,CAAc,WAAlB,CAAA,CAAA;AACjB,IAAM7nC,MAAAA,OAAAA,GAAU8mC,mBAAmB,WAAD,CAAA,CAAA;AAClC,IAAA,IAAI9mC,OAASonC,EAAAA,MAAAA;AACTpnC,MAAAA,OAAAA,CAAQonC,OAAO19C,OAAS29C,CAAAA,CAAAA,KAAAA,KAAUJ,QAASK,CAAAA,QAAAA,CAASD,KAAlB,CAAlC,CAAA,CAAA;AACArnC,IAAAA,IAAAA,OAASunC,EAAAA,gBAAAA;AACTN,MAASO,QAAAA,CAAAA,mBAAAA,CAAoBxnC,QAAQunC,gBAArC,CAAA,CAAA;AACEjc,IAAAA,MAAAA,OAAOmb,OAAb,EAAA,CAAA;AACAqB,IAAAA,YAAAA,CAAaxc,MAAM2b,QAAP,CAAA,CAAA;AAAA,GARhB,CAAA;AAWMc,EAAAA,MAAAA,gBAAgB,MAAM;AACxB,IAAMd,MAAAA,QAAAA,GAAW,IAAIe,oBAArB,EAAA,CAAA;AACA,IAAMhoC,MAAAA,OAAAA,GAAU8mC,mBAAmB,cAAD,CAAA,CAAA;AAClC,IAAA,IAAI9mC,OAASonC,EAAAA,MAAAA;AACTpnC,MAAAA,OAAAA,CAAQonC,OAAO19C,OAAS29C,CAAAA,CAAAA,KAAAA,KAAUJ,QAASK,CAAAA,QAAAA,CAASD,KAAlB,CAAlC,CAAA,CAAA;AACArnC,IAAAA,IAAAA,OAASunC,EAAAA,gBAAAA;AACTN,MAASO,QAAAA,CAAAA,mBAAAA,CAAoBxnC,QAAQunC,gBAArC,CAAA,CAAA;AACEjc,IAAAA,MAAAA,OAAOmb,OAAb,EAAA,CAAA;AACAqB,IAAAA,YAAAA,CAAaxc,MAAM2b,QAAP,CAAA,CAAA;AAAA,GARhB,CAAA;AAWMgB,EAAAA,MAAAA,cAAc,MAAM;AACtB,IAAMhB,MAAAA,QAAAA,GAAW,IAAIiB,kBAArB,EAAA,CAAA;AACA,IAAMloC,MAAAA,OAAAA,GAAU8mC,mBAAmB,YAAD,CAAA,CAAA;AAClC,IAAA,IAAI9mC,OAASonC,EAAAA,MAAAA;AACTpnC,MAAAA,OAAAA,CAAQonC,OAAO19C,OAAS29C,CAAAA,CAAAA,KAAAA,KAAUJ,QAASK,CAAAA,QAAAA,CAASD,KAAlB,CAAlC,CAAA,CAAA;AACArnC,IAAAA,IAAAA,OAASunC,EAAAA,gBAAAA;AACTN,MAASO,QAAAA,CAAAA,mBAAAA,CAAoBxnC,QAAQunC,gBAArC,CAAA,CAAA;AACEjc,IAAAA,MAAAA,OAAOmb,OAAb,EAAA,CAAA;AACAqB,IAAAA,YAAAA,CAAaxc,MAAM2b,QAAP,CAAA,CAAA;AAAA,GARhB,CAAA;AAWMkB,EAAAA,MAAAA,iBAAiB,MAAM;AACzB,IAAMlB,MAAAA,QAAAA,GAAW,IAAIY,aAAAA,CAAc,eAAlB,CAAA,CAAA;AACjB,IAAM7nC,MAAAA,OAAAA,GAAU8mC,mBAAmB,eAAD,CAAA,CAAA;AAClC,IAAA,IAAI9mC,OAASonC,EAAAA,MAAAA;AACTpnC,MAAAA,OAAAA,CAAQonC,OAAO19C,OAAS29C,CAAAA,CAAAA,KAAAA,KAAUJ,QAASK,CAAAA,QAAAA,CAASD,KAAlB,CAAlC,CAAA,CAAA;AACArnC,IAAAA,IAAAA,OAASunC,EAAAA,gBAAAA;AACTN,MAASO,QAAAA,CAAAA,mBAAAA,CAAoBxnC,QAAQunC,gBAArC,CAAA,CAAA;AACEjc,IAAAA,MAAAA,OAAOmb,OAAb,EAAA,CAAA;AACAqB,IAAAA,YAAAA,CAAaxc,MAAM2b,QAAP,CAAA,CAAA;AAAA,GARhB,CAAA;AAWMmB,EAAAA,MAAAA,eAAe,MAAM;AACvB,IAAMnB,MAAAA,QAAAA,GAAW,IAAIoB,mBAArB,EAAA,CAAA;AACA,IAAMroC,MAAAA,OAAAA,GAAU8mC,mBAAmB,aAAD,CAAA,CAAA;AAC9B9mC,IAAAA,IAAAA,OAASunC,EAAAA,gBAAAA;AACTN,MAASO,QAAAA,CAAAA,mBAAAA,CAAoBxnC,QAAQunC,gBAArC,CAAA,CAAA;AACEjc,IAAAA,MAAAA,OAAOmb,OAAb,EAAA,CAAA;AACAqB,IAAAA,YAAAA,CAAaxc,MAAM2b,QAAP,CAAA,CAAA;AAAA,GANhB,CAAA;AASMqB,EAAAA,MAAAA,kBAAAA,GAAqB,CAACzhC,KAAAA,EAAe0hC,QAAqB,KAAA;AACtDjd,IAAAA,MAAAA,OAAOmb,OAAb,EAAA,CAAA;AACAv2C,IAAAA,cAAAA,CAAe,IAAD,CAAA,CAAA;AACds4C,IAA2Bld,0BAAAA,CAAAA,IAAAA,EAAMzkB,KAAO0hC,EAAAA,QAAd,CACrBl6C,CAAAA,KAAAA,CAAMi4C,oBADX,CAAA,CAEKl4C,IAAK,CAAA,MAAM8B,cAAe,CAAA,KAAD,CAF9B,CAAA,CAAA;AAAA,GAHJ,CAAA;AAQMu4C,EAAAA,MAAAA,yBAAAA,GAA4B,CAAC5hC,KAAAA,EAAe0hC,QAAqB,KAAA;AAC7Djd,IAAAA,MAAAA,OAAOmb,OAAb,EAAA,CAAA;AACAv2C,IAAAA,cAAAA,CAAe,IAAD,CAAA,CAAA;AACdw4C,IAA+Bpd,8BAAAA,CAAAA,IAAAA,EAAMzkB,KAAO0hC,EAAAA,QAAd,CACzBl6C,CAAAA,KAAAA,CAAMi4C,oBADX,CAAA,CAEKl4C,IAAK,CAAA,MAAM8B,cAAe,CAAA,KAAD,CAF9B,CAAA,CAAA;AAAA,GAHJ,CAAA;AAQA,EAAMy4C,MAAAA,wBAAAA,GAA2B,CAAC9hC,KAAqC,KAAA;AAC7DykB,IAAAA,MAAAA,OAAOmb,OAAb,EAAA,CAAA;AACAv2C,IAAAA,cAAAA,CAAe,IAAD,CAAA,CAAA;AACP04C,IAAAA,OAAAA,0BAA2Btd,CAAAA,IAAAA,EAAMzkB,KAAP,CAAA,CAC5BzY,KAAMnF,CAAQ,GAAA,KAAA;AACXiH,MAAAA,cAAAA,CAAe,KAAD,CAAA,CAAA;AACd,MAAOjH,OAAAA,GAAAA,CAAAA;AAAAA,KAHR,CAAA,CAAA;AAAA,GAHX,CAAA;AAUO,EAAA,OAAA;AAAA,IACHkF,MAAMg4C,UAAc,IAAA,IAAA;AAAA,IACpB0C,SAAWxC,EAAAA,iBAAAA;AAAAA,IACXp2C,WAAAA;AAAAA,IACAS,cAAAA;AAAAA,IACAC,OAASm4C,EAAAA,SAAAA;AAAAA,IACTv4C,YAAAA;AAAAA,IACAw4C,SAAAA;AAAAA,IACA7B,WAAAA;AAAAA,IACAQ,cAAAA;AAAAA,IACAE,UAAAA;AAAAA,IACAG,aAAAA;AAAAA,IACAE,WAAAA;AAAAA,IACAE,cAAAA;AAAAA,IACAC,YAAAA;AAAAA,IACAE,kBAAAA;AAAAA,IACAM,0BAA4BD,EAAAA,wBAAAA;AAAAA,IAC5BD,8BAAgCD,EAAAA,yBAAAA;AAAAA,GAjBpC,CAAA;AAmBH;;ACrJsC,SAAA,sBAAA,CAAA;AAAA,EACIxC,WAAAA;AAAAA,EACA+C,oBAAAA;AAAAA,CACqC,EAAA;AAE5E,EAAA,MAAMC,eAAenjD,MAArB,EAAA,CAAA;AACA,EAAA,MAAMojD,YAAYD,YAAaviD,CAAAA,OAAAA,CAAAA;AAE/BvF,EAAAA,SAAAA,CAAU,MAAM;AACR,IAAA,IAAA,CAAC8kD,WAAAA;AAAa,MAAA,OAAA;AAClBgD,IAAaviD,YAAAA,CAAAA,OAAAA,GAAUyiD,aAAalD,WAAD,CAAA,CAAA;AAAA,GACtC,EAAE,CAACA,WAAD,CAHM,CAAA,CAAA;AAaAmD,EAELC,SAAAA,sBAAAA,CAAAA,IAAAA,EACAznD,MACA2c,cACS,EAAA;AAEH9Z,IAAAA,MAAAA,MAAS6kD,GAAAA,mBAAAA,CAAoBD,IAAIr4C,CAAAA,IAAAA,EAAL,CAAA,CAAA;AAClC,IAAA,MAAMA,IAAOq4C,GAAAA,IAAAA,CAAIr4C,IAAJ,EAAA,GACPuN,cAAexT,CAAAA,UAAAA,GACXw+C,YAAa9kD,CAAAA,MAAAA,EAA2B8Z,cAAexT,CAAAA,UAA3C,CACZs+C,GAAAA,IAAAA,CAAIr4C,MACRhS,GAAAA,KAAAA,CAAAA,CAAAA;AACC,IAAA,OAAA;AAAA,MACHuJ,IAAI8gD,IAAI9gD,CAAAA,EAAAA;AAAAA,MACR3G,IAAM4nD,EAAAA,2BAAAA,CAA4BH,IAAIjpC,CAAAA,GAAAA,CAAIxe,IAAT,CAAA;AAAA,MACjC6C,MAAQuM,EAAAA,IAAAA;AAAAA,KAHZ,CAAA;AAAA,GAKH;AAED,EAAA,SAAA,UAAA,CAAuBpP,IAAcwC,EAAAA,MAAAA,EAAqCoZ,SAA6BC,EAAAA,KAAAA,EAAmCF,cAA+BD,OAA2B,EAAA;AAEhM,IAAA,IAAI,CAAC4rC,SAAAA;AAAW,MAAA,MAAMhnD,MAAM,kDAAD,CAAA,CAAA;AAErBunD,IAAAA,MAAAA,mBAAAA,GAA6BjmD,UAAW0lD,CAAAA,SAAAA,EAAWtnD,IAAZ,CAAA,CAAA;AAEvC8nD,IAAAA,MAAAA,cAAc,EAApB,CAAA;AACA,IAAA,IAAItlD,MAAQ,EAAA;AACRI,MAAAA,MAAAA,CAAOvB,QAAQmB,MAAf,CAAA,CACKA,MAAO,CAAA,CAAC,CAAC7E,CAAGqD,EAAAA,KAAAA,CAAAA,KAAW,CAAC,CAACA,KAD9B,CAEK8G,CAAAA,OAAAA,CAAQ,CAAC,CAACR,KAAKygD,eAAqB,CAAA,KAAA;AACjC,QAAM,MAAA,CAAC7S,IAAItrC,KAASm+C,CAAAA,GAAAA,eAAAA,CAAAA;AACpBD,QAAYvmD,WAAAA,CAAAA,IAAAA,CAAKymD,MAAY1gD,GAAK4tC,EAAAA,EAAAA,EAAI+S,oBAAoBr+C,KAAO09C,EAAAA,SAAR,CAA7B,CAA5B,CAAA,CAAA;AAAA,OAJR,CAAA,CAAA;AAAA,KAMH;AAED,IAAI9kD,IAAAA,MAAAA,IAAUoZ,aAAWC,KAAO,EAAA;AAC5BjZ,MAAAA,MAAAA,CAAOvB,QAAQmB,MAAf,CAAA,CAAuBsF,QAAQ,CAAC,CAACR,KAAKsC,KAAW,CAAA,KAAA;AACzCtC,QAAAA,IAAAA,QAAQsU,SAAS,EAAA;AACjBksC,UAAAA,WAAAA,CAAYvmD,IAAK2mD,CAAAA,OAAAA,CAAc5gD,GAAK,EAAA,KAAN,CAA9B,CAAA,CAAA;AAAA,SACH;AAAA,OAHL,CAAA,CAAA;AAAA,KAKH;AAEGsU,IAAAA,IAAAA,aAAWC,KAAO,EAAA;AAClBisC,MAAAA,WAAAA,CAAYvmD,IAAK2mD,CAAAA,OAAAA,CAActsC,SAASC,EAAAA,KAAV,CAA9B,CAAA,CAAA;AAAA,KACH;AAED,IAAA,IAAIF,YAAY,EAAA;AACZmsC,MAAYvmD,WAAAA,CAAAA,IAAAA,CAAK4mD,UAAiBxsC,CAAAA,YAAD,CAAjC,CAAA,CAAA;AAAA,KACH;AAED,IAAA,IAAID,OAAO,EAAA;AACPosC,MAAYvmD,WAAAA,CAAAA,IAAAA,CAAK6mD,KAAY1sC,CAAAA,OAAD,CAA5B,CAAA,CAAA;AAAA,KACH;AAED,IAAO2sC,OAAAA,KAAAA,CAAMR,mBAAqB,EAAA,GAAGC,WAAzB,CAAA,CAAA;AAAA,GACf;AAEQQ,EAAqBtoD,SAAAA,iBAAAA,CAAAA,IAAAA,EACAoD,UACAI,MAAmD,EAAA;AAC7E,IAAA,IAAI,CAAC8jD,SAAAA;AAAW,MAAA,MAAMhnD,MAAM,kDAAD,CAAA,CAAA;AAE3B,IAAOioD,OAAAA,MAAAA,CAAOd,IAAIH,SAAWtnD,EAAAA,IAAAA,EAAMoD,QAAlB,CAAJ,CAAA,CACRoJ,KAAMg8C,CAAgB,WAAA,KAAA;AACb7rC,MAAAA,MAAAA,iBAAiBC,aAAc,CAAA;AAAA,QACjC/W,gBAAkBrC,EAAAA,MAAAA;AAAAA,QAClBJ,UAAUolD,WAAY7hD,CAAAA,EAAAA;AAAAA,QACtB3G,IAAAA;AAAAA,OAHgC,CAAA,CAAA;AAKpC,MAAOwnD,OAAAA,sBAAAA,CAAuBgB,WAAaxoD,EAAAA,IAAAA,EAAM2c,cAApB,CAAA,CAAA;AAAA,KAP9B,CAAA,CAAA;AAAA,GASV;AAED,EAAoC3c,eAAAA,iBAAAA,CAAAA,IAAAA,EACAqa,cACA7W,MAAyE,EAAA;AACzG,IAAA,IAAI,CAAC4jD,oBAAAA;AACD,MAAA,MAAM9mD,MAAM,+EAAD,CAAA,CAAA;AACf,IAAMmoD,MAAAA,GAAAA,GAAM,MAAMrB,oBAAqB,CAAA;AAAA,MAAEpnD,IAAAA;AAAAA,MAAMqa,YAAAA;AAAAA,KAAT,CAAA,CAAA;AAClCouC,IAAAA,IAAAA,GAAQrrD,KAAAA,KAAAA,CAAAA;AACR,MAAA,MAAMkD,MAAM,kFAAD,CAAA,CAAA;AACf,IAAA,MAAMooD,QAAwCD,GAAAA,GAAAA,CACzC9mD,GAAI,CAAA,OAAOyB,QAAa,KAAA;AACb,MAAA,IAAA;AACO,QAAA,OAAA,MAAMklD,iBAAAA,CAAkBtoD,IAAMoD,EAAAA,QAAAA,EAAUI,MAAjB,CAAA,CAAA;AAAA,eACzBV,CAAP,EAAA;AACE6F,QAAAA,OAAAA,CAAQwI,MAAMrO,CAAd,CAAA,CAAA;AACA,QAAO,OAAA,IAAA,CAAA;AAAA,OACV;AAAA,KAPiC,CAAA,CAAA;AAU9C,IAAA,OAAO6a,OAAQG,CAAAA,GAAAA,CAAI4qC,QAAZ,CAAA,CACFl8C,IAAMnF,CAAAA,CAAAA,GAAAA,KAAQA,GAAI7E,CAAAA,MAAAA,CAAQM,CAAMA,CAAAA,KAAAA,CAAAA,KAAM,IAAQA,IAAAA,CAAAA,CAAED,MAAlC,CADZ,CAAA,CAAA;AAAA,GAEV;AAEM,EAAA,OAAA;AAAA,IAgBHiZ,eAAkD,CAAA;AAAA,MACI9b,IAAAA;AAAAA,MACAwD,MAAAA;AAAAA,MACAhB,MAAAA;AAAAA,MACAkZ,KAAAA;AAAAA,MACAC,UAAAA;AAAAA,MACAtB,YAAAA;AAAAA,MACAuB,OAAAA;AAAAA,MACAC,KAAAA;AAAAA,KAE9B,EAAA;AAEpB,MAAA,IAAIxB,YAAc,EAAA;AACd,QAAOsuC,OAAAA,iBAAAA,CAAkB3oD,IAAMqa,EAAAA,YAAAA,EAAc7W,MAArB,CAAA,CAAA;AAAA,OAC3B;AAEDmF,MAAAA,OAAAA,CAAQC,MAAM,qBAAuB5I,EAAAA,IAAAA,EAAM0b,OAAOlZ,MAAQmZ,EAAAA,UAAAA,EAAYC,SAASC,KAA/E,CAAA,CAAA;AACA,MAAA,MAAMwsC,SAAQO,UAAW5oD,CAAAA,IAAAA,EAAMwC,QAAQoZ,OAASC,EAAAA,KAAAA,EAAOF,YAAYD,KAA3C,CAAA,CAAA;AAElBiB,MAAAA,MAAAA,iBAAiBC,aAAc,CAAA;AAAA,QACjC/W,gBAAkBrC,EAAAA,MAAAA;AAAAA,QAClBxD,IAAAA;AAAAA,OAFgC,CAAA,CAAA;AAI7B6oD,MAAAA,OAAAA,OAAQR,CAAAA,MAAD,CACT77C,CAAAA,IAAAA,CAAM6vB,cACHA,QAASysB,CAAAA,IAAAA,CAAKnnD,GAAK8lD,CAAAA,CAAAA,IAAAA,KAAQD,sBAAuBC,CAAAA,IAAAA,EAAKznD,IAAM2c,EAAAA,cAAZ,CAAjD,CAFD,CAAA,CAAA;AAAA,KAvCR;AAAA,IA4DHnB,gBACI,CAAA;AAAA,MACIxb,IAAAA;AAAAA,MACAwD,MAAAA;AAAAA,MACAhB,MAAAA;AAAAA,MACAkZ,KAAAA;AAAAA,MACAC,UAAAA;AAAAA,MACAtB,YAAAA;AAAAA,MACAuB,OAAAA;AAAAA,MACAC,KAAAA;AAAAA,MACAJ,QAAAA;AAAAA,MACAF,OAAAA;AAAAA,KAEM,EAAA;AAEV5S,MAAAA,OAAAA,CAAQC,MAAM,sBAAwB5I,EAAAA,IAAAA,EAAM0b,OAAOlZ,MAAQmZ,EAAAA,UAAAA,EAAYC,SAASC,KAAhF,CAAA,CAAA;AAEA,MAAA,MAAMwsC,SAAQO,UAAW5oD,CAAAA,IAAAA,EAAMwC,QAAQoZ,OAASC,EAAAA,KAAAA,EAAOF,YAAYD,KAA3C,CAAA,CAAA;AAExB,MAAA,IAAIrB,YAAc,EAAA;AACdsuC,QAAkB3oD,iBAAAA,CAAAA,IAAAA,EAAMqa,cAAc7W,MAArB,CAAA,CACZgJ,KAAKiP,QADV,CAAA,CAEKhP,MAAO3J,CAAM,CAAA,KAAA;AACV,UAAIyY,IAAAA,OAAAA;AAASA,YAAAA,OAAAA,CAAQzY,CAAD,CAAA,CAAA;AAAA,SAH5B,CAAA,CAAA;AAKO,QAAA,OAAA,MAAM;AAAA,SACZ,CAAA;AAAA,OACJ;AAEK6Z,MAAAA,MAAAA,iBAAiBC,aAAc,CAAA;AAAA,QACjC/W,gBAAkBrC,EAAAA,MAAAA;AAAAA,QAClBxD,IAAAA;AAAAA,OAFgC,CAAA,CAAA;AAK7B+oD,MAAAA,OAAAA,WAAWV,MACd,EAAA;AAAA,QACIW,MAAO3sB,CAAa,QAAA,KAAA;AAChB5gB,UAAS4gB,QAAAA,CAAAA,QAAAA,CAASysB,KAAKnnD,GAAK8lD,CAAAA,CAAAA,IAAAA,KAAQD,uBAAuBC,IAAKznD,EAAAA,IAAAA,EAAM2c,cAAZ,CAAjD,CAAD,CAAA,CAAA;AAAA,SAFhB;AAAA,QAIIxL,KAAOoK,EAAAA,OAAAA;AAAAA,OALE,CAAA,CAAA;AAAA,KA9FlB;AAAA,IAgHHc,WAA8C,CAAA;AAAA,MACIrc,IAAAA;AAAAA,MACAoD,QAAAA;AAAAA,MACAI,MAAAA;AAAAA,KAE5B,EAAA;AAClB,MAAO8kD,OAAAA,iBAAAA,CAAkBtoD,IAAMoD,EAAAA,QAAAA,EAAUI,MAAjB,CAAA,CAAA;AAAA,KAtHzB;AAAA,IAmIH4Y,YACI,CAAA;AAAA,MACIpc,IAAAA;AAAAA,MACAoD,QAAAA;AAAAA,MACAI,MAAAA;AAAAA,MACAiY,QAAAA;AAAAA,MACAF,OAAAA;AAAAA,KACiC,EAAA;AACjC,MAAA,IAAA,CAAC+rC,SAAAA;AAAW,QAAA,MAAMhnD,MAAM,kDAAD,CAAA,CAAA;AAEpByoD,MAAAA,OAAAA,UACHtB,CAAAA,GAAAA,CAAIH,SAAWtnD,EAAAA,IAAAA,EAAMoD,QAAlB,CACH,EAAA;AAAA,QACI4lD,MAAOR,CAAgB,WAAA,KAAA;AACb7rC,UAAAA,MAAAA,iBAAiBC,aAAc,CAAA;AAAA,YACjC/W,gBAAkBrC,EAAAA,MAAAA;AAAAA,YAClBJ,UAAUolD,WAAY7hD,CAAAA,EAAAA;AAAAA,YACtB3G,IAAAA;AAAAA,WAHgC,CAAA,CAAA;AAKpCyb,UAAAA,QAAAA,CAAS+rC,sBAAuBgB,CAAAA,WAAAA,EAAaxoD,IAAM2c,EAAAA,cAApB,CAAvB,CAAA,CAAA;AAAA,SAPhB;AAAA,QASIxL,KAAOoK,EAAAA,OAAAA;AAAAA,OAXE,CAAA,CAAA;AAAA,KA7IlB;AAAA,IAwKHsB,YAAY,eACR;AAAA,MACI7c,IAAAA;AAAAA,MACAoD,QAAAA;AAAAA,MACAP,MAAAA;AAAAA,MACAW,MAAAA;AAAAA,MACAyG,MAAAA;AAAAA,KACuC,EAAA;AAE3C,MAAA,IAAI,CAACq9C,SAAAA;AAAW,QAAA,MAAMhnD,MAAM,kDAAD,CAAA,CAAA;AACrBqc,MAAAA,MAAAA,iBAAiBC,aAAc,CAAA;AAAA,QACjC/W,gBAAkBrC,EAAAA,MAAAA;AAAAA,QAClBJ,QAAAA;AAAAA,QACApD,IAAAA;AAAAA,OAHgC,CAAA,CAAA;AAK9BmJ,MAAAA,MAAAA,aAA4BwT,cAAexT,CAAAA,UAAAA,CAAAA;AAC3C0+C,MAAAA,MAAAA,mBAAAA,GAA2CjmD,UAAW0lD,CAAAA,SAAAA,EAAWtnD,IAAZ,CAAA,CAAA;AAErDipD,MAAAA,MAAAA,yBAA0CC,gBAC5C,CAAA;AAAA,QACIl/C,WAAanH,EAAAA,MAAAA;AAAAA,QACbsG,UAAAA;AAAAA,QACAc,MAAAA;AAAAA,QACAC,mBAAmBi/C,eAJvB,EAAA;AAAA,QAKIh/C,kBAAAA,EAAoB,CAACP,KAA2B69C,KAAAA,GAAAA,CAAIH,WAAW19C,KAAM5J,CAAAA,IAAAA,EAAM4J,MAAMjD,EAA9B,CAAA;AAAA,QACnDyD,iBAAAA,EAAmB,CAACR,KAAoB,KAAA,IAAIw/C,WAAkBx/C,KAAM7C,CAAAA,QAAAA,EAAU6C,MAAM5C,SAA5C,CAAA;AAAA,OAPgB,CAAA,CAAA;AAUhE2B,MAAAA,OAAAA,CAAQC,KAAM,CAAA,eAAA,EAAiB5I,IAAMoD,EAAAA,QAAAA,EAAU6lD,sBAA/C,CAAA,CAAA;AAEII,MAAAA,IAAAA,iBAAAA,CAAAA;AACJ,MAAIjmD,IAAAA,QAAAA;AACAimD,QAAoB5B,iBAAAA,GAAAA,GAAAA,CAAII,qBAAqBzkD,QAAtB,CAAA,CAAA;AAAA;AAEvBimD,QAAAA,iBAAAA,GAAoB5B,IAAII,mBAAD,CAAA,CAAA;AAE3B,MAAOyB,OAAAA,MAAAA,CAAOD,mBAAmBJ,sBAAwB,EAAA;AAAA,QAAEM,KAAO,EAAA,IAAA;AAAA,OAArD,CAA6D/8C,CAAAA,IAAAA,CAAK,OAAO;AAAA,QAClF7F,IAAI0iD,iBAAkB1iD,CAAAA,EAAAA;AAAAA,QACtB3G,MAAMqpD,iBAAkBrpD,CAAAA,IAAAA;AAAAA,QACxB6C,MAAAA,EAAQ6kD,oBAAoBuB,sBAAD,CAAA;AAAA,OAHxB,CAAA,CAAA,CAAA;AAAA,KA5MR;AAAA,IAAA,MAyNG7rC,YACF,CAAA;AAAA,MACI3S,MAAAA;AAAAA,KAES,EAAA;AACb,MAAA,IAAI,CAAC68C,SAAAA;AAAW,QAAA,MAAMhnD,MAAM,kDAAD,CAAA,CAAA;AAC3B,MAAA,OAAOkpD,UAAU/B,GAAIH,CAAAA,SAAAA,EAAW78C,OAAOzK,IAAMyK,EAAAA,MAAAA,CAAO9D,EAAhC,CAAJ,CAAA,CAAA;AAAA,KA/NjB;AAAA,IA4OHm/B,gBACI9lC,CAAAA,IAAAA,EACA+B,IACA6H,EAAAA,KAAAA,EACAf,UACAzF,QACgB,EAAA;AAEhB,MAAA,IAAI,CAACkkD,SAAAA;AAAW,QAAA,MAAMhnD,MAAM,kDAAD,CAAA,CAAA;AAE3BqI,MAAAA,OAAAA,CAAQC,KAAM,CAAA,2BAAA,EAA6B5I,IAAM+B,EAAAA,IAAAA,EAAM6H,OAAOxG,QAA9D,CAAA,CAAA;AAEA,MAAIyF,IAAAA,QAAAA,CAASE,aAAa,OAAS,EAAA;AAC/BJ,QAAAA,OAAAA,CAAQwI,MAAM,oCAAd,CAAA,CAAA;AAAA,OACH;AAED,MAAIvH,IAAAA,KAAAA,KAAUxM,KAAawM,CAAAA,IAAAA,KAAAA,KAAU,IAAM,EAAA;AACvC,QAAO+T,OAAAA,OAAAA,CAAQC,QAAQ,IAAhB,CAAA,CAAA;AAAA,OACV;AACD,MAAM6rC,MAAAA,CAAAA,GAAIpB,KAAMzmD,CAAAA,UAAAA,CAAW0lD,SAAWtnD,EAAAA,IAAZ,GAAmBgoD,KAAYjmD,CAAAA,IAAAA,EAAM,IAAM6H,EAAAA,KAAb,CAAzC,CAAA,CAAA;AACRi/C,MAAAA,OAAAA,OAAQY,CAAAA,CAAD,CACTj9C,CAAAA,IAAAA,CAAMk9C,eACHA,SAAUZ,CAAAA,IAAAA,CAAKtmD,MAAOilD,CAAAA,CAAAA,IAAAA,KAAOA,IAAI9gD,CAAAA,EAAAA,KAAOvD,QAAxC,CAAA,CAAkD/C,WAAW,CAF9D,CAAA,CAAA;AAAA,KAKV;AAAA,GArQL,CAAA;AAwQH,CAAA;AAaM,SAAA,mBAAA,CAAgC+O,IAAgB,EAAA;AAC7Cu6C,EAAAA,MAAAA,QAAAA,GAAW,CAACnqC,KAAoB,KAAA;AAClC,IAAA,IAAIA,KAAS,IAAA,IAAA;AAAM,MAAOA,OAAAA,KAAAA,CAAAA;AAC1B,IAAA,IAAI2pC,eAAkB76B,EAAAA,CAAAA,OAAQ9O,CAAAA,KAA1B,CAAkC,EAAA;AAClC,MAAO,OAAA,IAAA,CAAA;AAAA,KACV;AACGA,IAAAA,IAAAA,iBAAiBoqC,SAAW,EAAA;AACrBpqC,MAAAA,OAAAA,MAAMqqC,MAAb,EAAA,CAAA;AAAA,KACH;AACGrqC,IAAAA,IAAAA,iBAAiB1Y,QAAU,EAAA;AACpB,MAAA,OAAA,IAAIA,QAAAA,CAAS0Y,KAAMzY,CAAAA,QAAAA,EAAUyY,MAAMxY,SAAnC,CAAA,CAAA;AAAA,KACV;AACGwY,IAAAA,IAAAA,iBAAiBsqC,iBAAmB,EAAA;AACpC,MAAA,OAAO,IAAIpjD,eAAgB8Y,CAAAA,KAAAA,CAAM7Y,IAAIihD,2BAA4BpoC,CAAAA,KAAAA,CAAMxf,IAAP,CAAzD,CAAA,CAAA;AAAA,KACV;AACD,IAAIsC,IAAAA,KAAAA,CAAMC,OAAQid,CAAAA,KAAd,CAAsB,EAAA;AACtB,MAAOA,OAAAA,KAAAA,CAAM7d,IAAIgoD,QAAV,CAAA,CAAA;AAAA,KACV;AACD,IAAI,IAAA,OAAOnqC,UAAU,QAAU,EAAA;AACrB7e,MAAAA,MAAAA,SAAS,EAAf,CAAA;AACK,MAAA,KAAA,MAAM2G,GAAO1E,IAAAA,MAAAA,CAAOiF,IAAK2X,CAAAA,KAAZ,CAAoB,EAAA;AAClC7e,QAAO2G,MAAAA,CAAAA,GAAAA,CAAAA,GAAOqiD,QAASnqC,CAAAA,KAAAA,CAAMlY,GAAP,CAAA,CAAA,CAAA;AAAA,OACzB;AACD,MAAO3G,OAAAA,MAAAA,CAAAA;AAAAA,KACV;AACD,IAAO6e,OAAAA,KAAAA,CAAAA;AAAAA,GAxBX,CAAA;AA0BOmqC,EAAAA,OAAAA,SAASv6C,IAAD,CAAA,CAAA;AAClB,CAAA;AAEM,SAAA,mBAAA,CAA6BA,MAAWk4C,SAA2B,EAAA;AACtE,EAAIhlD,IAAAA,KAAAA,CAAMC,OAAQ6M,CAAAA,IAAd,CAAqB,EAAA;AACrB,IAAA,OAAOA,KAAKzN,GAAIyG,CAAAA,CAAAA,CAAAA,KAAK6/C,mBAAoB7/C,CAAAA,CAAAA,EAAGk/C,SAAJ,CAAjC,CAAA,CAAA;AAAA,GACV,MAAA,IAAUl4C,gBAAgB1I,eAAiB,EAAA;AACjC+gD,IAAAA,OAAAA,GAAIH,CAAAA,SAAAA,EAAWl4C,IAAKpP,CAAAA,IAAAA,EAAMoP,KAAKzI,EAA5B,CAAA,CAAA;AAAA,GACb,MAAA,IAAUyI,gBAAgBtI,QAAU,EAAA;AAC1B,IAAA,OAAA,IAAIsiD,UAAAA,CAAkBh6C,IAAKrI,CAAAA,QAAAA,EAAUqI,KAAKpI,SAA1C,CAAA,CAAA;AAAA,GACV,MAAA,IAAU,OAAOoI,IAAAA,KAAS,QAAU,EAAA;AACjC,IAAOxM,OAAAA,MAAAA,CAAOvB,QAAQ+N,IAAf,CAAA,CACFzN,IAAI,CAAC,CAAC2F,KAAKc,CAAQ,CAAA,MAAA;AAAA,MAAGd,CAAAA,GAAAA,GAAM2gD,mBAAoB7/C,CAAAA,CAAAA,EAAGk/C,SAAJ,CAAA;AAAA,KAD7C,CAAA,CAAA,CAEFlgD,MAAO,CAAA,CAACoC,GAAGC,CAAO,MAAA;AAAA,MAAKD,GAAAA,CAAAA;AAAAA,MAAMC,GAAAA,CAAAA;AAAAA,KAAtB,CAAA,EAA4B,EAFjC,CAAA,CAAA;AAAA,GAGV;AACD,EAAO2F,OAAAA,IAAAA,CAAAA;AACV,CAAA;AAMD,SAAA,2BAAA,CAAqC26C,MAAwB,EAAA;AACzD,EAAIC,IAAAA,EAAAA,GAAKD,MAAOE,CAAAA,WAAAA,CAAY,GAAnB,CAAA,CAAA;AACTD,EAAKA,EAAAA,GAAAA,EAAAA,KAAO,CAAKD,CAAAA,GAAAA,MAAAA,CAAO1pD,MAAS2pD,GAAAA,EAAAA,CAAAA;AACjC,EAAOD,OAAAA,MAAAA,CAAOG,SAAU,CAAA,CAAA,EAAGF,EAApB,CAAA,CAAA;AACV;;AC5ewC,SAAA,wBAAA,CAAA;AAAA,EAAE3F,WAAAA;AAAAA,CAA0D,EAAA;AAE3F,EAAA,MAAA,CAACziC,OAASuoC,EAAAA,UAAAA,CAAAA,GAAcltD,QAA9B,EAAA,CAAA;AAEAsC,EAAAA,SAAAA,CAAU,MAAM;AACR,IAAA,IAAA,CAAC8kD,WAAAA;AAAa,MAAA,OAAA;AAClB8F,IAAWC,UAAAA,CAAAA,UAAAA,CAAW/F,WAAD,CAAX,CAAA,CAAA;AAAA,GACb,EAAE,CAACA,WAAD,CAHM,CAAA,CAAA;AAKT,EAAA,MAAMgG,YAAiB,EAAvB,CAAA;AAEO,EAAA,OAAA;AAAA,IACHlyB,UAAW,CAAA;AAAA,MAAEnD,IAAAA;AAAAA,MAAMC,QAAAA;AAAAA,MAAUj1B,IAAAA;AAAAA,MAAMy1B,QAAAA;AAAAA,KAChB,EAAA;AACf,MAAA,IAAI,CAAC7T,OAAAA;AAAS,QAAA,MAAMthB,MAAM,mDAAD,CAAA,CAAA;AACzB,MAAMgqD,MAAAA,YAAAA,GAAer1B,YAAYD,IAAKjzB,CAAAA,IAAAA,CAAAA;AACtC4G,MAAAA,OAAAA,CAAQC,KAAM,CAAA,gBAAA,EAAkB0hD,YAAct1B,EAAAA,IAAAA,EAAMh1B,MAAMy1B,QAA1D,CAAA,CAAA;AACO80B,MAAAA,OAAAA,WAAAA,CAAY/rC,GAAIoD,CAAAA,OAAAA,EAAU,CAAE5hB,EAAAA,IAAAA,CAAAA,CAAAA,EAAQsqD,YAArB,CAAA,CAAA,CAAA,EAAsCt1B,IAAMS,EAAAA,QAAhD,CAA0DjpB,CAAAA,IAAAA,CAAK6vB,CAAa,QAAA,MAAA;AAAA,QAC1Fr8B,IAAAA,EAAMq8B,SAAS7d,GAAInb,CAAAA,QAAAA;AAAAA,OADhB,CAAA,CAAA,CAAA;AAAA,KANR;AAAA,IAWH4e,eAAekT,WAAsC,EAAA;AACjD,MAAA,IAAI,CAACvT,OAAAA;AAAS,QAAA,MAAMthB,MAAM,mDAAD,CAAA,CAAA;AACrB+pD,MAAAA,IAAAA,SAAUl1B,CAAAA,WAAAA,CAAAA;AACV,QAAA,OAAOk1B,SAAUl1B,CAAAA,WAAAA,CAAAA,CAAAA;AACfjT,MAAAA,MAAAA,WAAcD,GAAAA,cAAAA,CAAezD,GAAIoD,CAAAA,OAAAA,EAASuT,WAAV,CAAJ,CAAA,CAAA;AAClCk1B,MAAAA,SAAAA,CAAUl1B,WAAejT,CAAAA,GAAAA,WAAAA,CAAAA;AACzB,MAAOA,OAAAA,WAAAA,CAAAA;AAAAA,KACV;AAAA,GAlBL,CAAA;AAoBH;;ACxBqC,SAAA,qBAAA,CAAA;AAAA,EAAEsoC,cAAAA;AAAAA,EAAgBC,cAAAA;AAAAA,CAG3B,EAAA;AAEzB,EAAA,MAAM,CAACpG,WAAAA,EAAaqG,cAAkB9tD,CAAAA,GAAAA,cAAAA,CAAMK,QAA5C,EAAA,CAAA;AACA,EAAA,MAAM,CAAC0tD,qBAAAA,EAAuBC,wBAA4BhuD,CAAAA,GAAAA,cAAAA,CAAMK,SAAkB,KAAxB,CAAA,CAAA;AACpD,EAAA,MAAA,CAAC4tD,WAAAA,EAAaC,cAAkBluD,CAAAA,GAAAA,cAAAA,CAAMK,QAA5C,EAAA,CAAA;AACA,EAAA,MAAM,CAAC8tD,mBAAAA,EAAqBC,sBAA0BpuD,CAAAA,GAAAA,cAAAA,CAAMK,QAA5D,EAAA,CAAA;AAEMguD,EAAAA,MAAAA,YAAAA,GAAexmD,WAAY,CAAA,CAACwS,MAAmB,KAAA;AAC7C,IAAA,IAAA;AACA,MAAMi0C,MAAAA,sBAAAA,GAAyBC,cAAcl0C,MAAD,CAAA,CAAA;AAC5C+zC,MAAAA,sBAAAA,CAAuB5tD,KAAD,CAAA,CAAA,CAAA;AACtBwtD,MAAAA,wBAAAA,CAAyB,KAAD,CAAA,CAAA;AACxB,MAAIH,IAAAA,cAAAA;AACAA,QAAAA,cAAAA,CAAexzC,MAAD,CAAA,CAAA;AAClByzC,MAAAA,cAAAA,CAAeQ,sBAAD,CAAA,CAAA;AAAA,aACTpoD,CAAP,EAAA;AACE6F,MAAAA,OAAAA,CAAQwI,MAAMrO,CAAd,CAAA,CAAA;AACAkoD,MAAAA,sBAAAA,CAAuBloD,CAAD,CAAA,CAAA;AAAA,KACzB;AAAA,GACJ,EAAE,CAAC2nD,cAAD,CAZ6B,CAAA,CAAA;AAchClrD,EAAAA,SAAAA,CAAU,MAAM;AAEZqrD,IAAAA,wBAAAA,CAAyB,IAAD,CAAA,CAAA;AAExB,IAAA,IAAIJ,cAAgB,EAAA;AAChB7hD,MAAQqmB,OAAAA,CAAAA,GAAAA,CAAI,0BAA0Bw7B,cAAtC,CAAA,CAAA;AACAS,MAAAA,YAAAA,CAAaT,cAAD,CAAA,CAAA;AAAA,KACLY,MAAuC;AAC9CC,MAAAA,KAAAA,CAAM,wBAAD,CAAA,CACA7+C,IAAK,CAAA,OAAM8+C,QAAY,KAAA;AACpB3iD,QAAQC,OAAAA,CAAAA,KAAAA,CAAM,wBAA0B0iD,EAAAA,QAAAA,CAASrhD,MAAjD,CAAA,CAAA;AACA,QAAIqhD,IAAAA,QAAAA,IAAYA,QAASrhD,CAAAA,MAAAA,GAAS,GAAK,EAAA;AACnC,UAAMgN,MAAAA,MAAAA,GAAS,MAAMq0C,QAAAA,CAASC,IAA9B,EAAA,CAAA;AACA5iD,UAAQqmB,OAAAA,CAAAA,GAAAA,CAAI,qDAAqD/X,MAAjE,CAAA,CAAA;AACAg0C,UAAAA,YAAAA,CAAah0C,MAAD,CAAA,CAAA;AAAA,SACf;AAAA,OAPT,CASKxK,CAAAA,KAAAA,CAAM3J,CAAK,CAAA,KAAA;AACJ8nD,QAAAA,wBAAAA,CAAyB,KAAD,CAAA,CAAA;AACxBE,QACI,cAAA,CAAA,6JAAA,GAEAhoD,CAAE0T,CAAAA,QAAAA,EAHQ,CAAA,CAAA;AAAA,OAX1B,CAAA,CAAA;AAAA,KAuBH;AAAA,GACF,EAAA,CAACg0C,cAAgBS,EAAAA,YAAjB,CAhCM,CAAA,CAAA;AAkCF,EAAA,OAAA;AAAA,IACH5G,WAAAA;AAAAA,IACAsG,qBAAAA;AAAAA,IACAE,WAAAA;AAAAA,IACAE,mBAAAA;AAAAA,GAJJ,CAAA;AAMH;;AC7FM,MAAMS,UAAa,GAAA,CAAC5sD,IAA2B,qBAAAlB,GAAA,CAAAyZ,QAAA,EAAA;AAAA,EAClD,QAAA,uBAAA,KAAA,EAAA;AAAA,IACI,KAAM,EAAA,4BAAA;AAAA,IACN,OAAQ,EAAA,WAAA;AAAA,IACR,KAAO,EAAA,EAAA;AAAA,IACP,MAAQ,EAAA,EAAA;AAAA,IAER,QAAA,EAAA,iBAAA1Z,IAAA,CAAA,gBAAA,EAAA;AAAA,MACI,EAAG,EAAA,wBAAA;AAAA,MACH,EAAG,EAAA,QAAA;AAAA,MACH,EAAG,EAAA,QAAA;AAAA,MACH,EAAG,EAAA,OAAA;AAAA,MACH,EAAG,EAAA,SAAA;AAAA,MACH,iBAAkB,EAAA,uBAAA;AAAA,MAClB,aAAc,EAAA,gBAAA;AAAA,MAEd,QAAA,EAAA,iBAAAC,GAAA,CAAA,MAAA,EAAA;AAAA,QAAM,MAAO,EAAA,GAAA;AAAA,QAAI,SAAU,EAAA,SAAA;AAAA,OAA3B,CACA,kBAAAA,GAAA,CAAA,MAAA,EAAA;AAAA,QAAM,MAAO,EAAA,MAAA;AAAA,QAAO,SAAU,EAAA,SAAA;AAAA,OAA9B,CACA,kBAAAA,GAAA,CAAA,MAAA,EAAA;AAAA,QAAM,MAAO,EAAA,MAAA;AAAA,QAAO,SAAU,EAAA,SAAA;AAAA,OAA9B,CACA,kBAAAA,GAAA,CAAA,MAAA,EAAA;AAAA,QAAM,MAAO,EAAA,GAAA;AAAA,QAAI,SAAU,EAAA,SAAA;AAAA,OAZ/B,CAAA,CAAA;AAAA,KAAA,CAcA,kBAAAA,GAAA,CAAA,MAAA,EAAA;AAAA,MACI,IAAK,EAAA,8BAAA;AAAA,MACL,CAAE,EAAA,sNAAA;AAAA,KAFN,CAIA,kBAAAD,IAAA,CAAA,gBAAA,EAAA;AAAA,MACI,EAAG,EAAA,wBAAA;AAAA,MACH,EAAG,EAAA,QAAA;AAAA,MACH,EAAG,EAAA,QAAA;AAAA,MACH,EAAG,EAAA,MAAA;AAAA,MACH,EAAG,EAAA,QAAA;AAAA,MACH,iBAAkB,EAAA,uBAAA;AAAA,MAClB,aAAc,EAAA,gBAAA;AAAA,MAEd,QAAA,EAAA,iBAAAC,GAAA,CAAA,MAAA,EAAA;AAAA,QAAM,MAAO,EAAA,GAAA;AAAA,QAAI,SAAU,EAAA,SAAA;AAAA,OAA3B,CACA,kBAAAA,GAAA,CAAA,MAAA,EAAA;AAAA,QAAM,MAAO,EAAA,MAAA;AAAA,QAAO,SAAU,EAAA,SAAA;AAAA,OAA9B,CACA,kBAAAA,GAAA,CAAA,MAAA,EAAA;AAAA,QAAM,MAAO,EAAA,GAAA;AAAA,QAAI,SAAU,EAAA,SAAA;AAAA,OAX/B,CAAA,CAAA;AAAA,KAAA,CAaA,kBAAAA,GAAA,CAAA,MAAA,EAAA;AAAA,MACI,IAAK,EAAA,8BAAA;AAAA,MACL,CAAE,EAAA,sKAAA;AAAA,KAFN,CAIA,kBAAAD,IAAA,CAAA,gBAAA,EAAA;AAAA,MACI,EAAG,EAAA,wBAAA;AAAA,MACH,EAAG,EAAA,OAAA;AAAA,MACH,EAAG,EAAA,OAAA;AAAA,MACH,EAAG,EAAA,QAAA;AAAA,MACH,EAAG,EAAA,QAAA;AAAA,MACH,iBAAkB,EAAA,uBAAA;AAAA,MAClB,aAAc,EAAA,gBAAA;AAAA,MAEd,QAAA,EAAA,iBAAAC,GAAA,CAAA,MAAA,EAAA;AAAA,QAAM,MAAO,EAAA,GAAA;AAAA,QAAI,SAAU,EAAA,SAAA;AAAA,OAA3B,CACA,kBAAAA,GAAA,CAAA,MAAA,EAAA;AAAA,QAAM,MAAO,EAAA,MAAA;AAAA,QAAO,SAAU,EAAA,SAAA;AAAA,OAA9B,CACA,kBAAAA,GAAA,CAAA,MAAA,EAAA;AAAA,QAAM,MAAO,EAAA,GAAA;AAAA,QAAI,SAAU,EAAA,SAAA;AAAA,OAX/B,CAAA,CAAA;AAAA,KAAA,CAaA,kBAAAA,GAAA,CAAA,MAAA,EAAA;AAAA,MACI,IAAK,EAAA,8BAAA;AAAA,MACL,CAAE,EAAA,mKAAA;AAAA,KAFN,CAIA,kBAAAD,IAAA,CAAA,gBAAA,EAAA;AAAA,MACI,EAAG,EAAA,wBAAA;AAAA,MACH,EAAG,EAAA,IAAA;AAAA,MACH,EAAG,EAAA,IAAA;AAAA,MACH,EAAG,EAAA,OAAA;AAAA,MACH,EAAG,EAAA,QAAA;AAAA,MACH,iBAAkB,EAAA,uBAAA;AAAA,MAClB,aAAc,EAAA,gBAAA;AAAA,MAEd,QAAA,EAAA,iBAAAC,GAAA,CAAA,MAAA,EAAA;AAAA,QAAM,MAAO,EAAA,GAAA;AAAA,QAAI,SAAU,EAAA,SAAA;AAAA,OAA3B,CACA,kBAAAA,GAAA,CAAA,MAAA,EAAA;AAAA,QAAM,MAAO,EAAA,MAAA;AAAA,QAAO,SAAU,EAAA,SAAA;AAAA,OAA9B,CACA,kBAAAA,GAAA,CAAA,MAAA,EAAA;AAAA,QAAM,MAAO,EAAA,MAAA;AAAA,QAAO,SAAU,EAAA,SAAA;AAAA,OAA9B,CACA,kBAAAA,GAAA,CAAA,MAAA,EAAA;AAAA,QAAM,MAAO,EAAA,KAAA;AAAA,QAAM,SAAU,EAAA,SAAA;AAAA,OAA7B,CACA,kBAAAA,GAAA,CAAA,MAAA,EAAA;AAAA,QAAM,MAAO,EAAA,GAAA;AAAA,QAAI,SAAU,EAAA,SAAA;AAAA,OAb/B,CAAA,CAAA;AAAA,KAAA,CAeA,kBAAAA,GAAA,CAAA,MAAA,EAAA;AAAA,MACI,IAAK,EAAA,8BAAA;AAAA,MACL,CAAE,EAAA,2LAAA;AAAA,KA3EV,CAAA,CAAA;AAAA,GAAA,CAAA;AADkD,CAA/C,CAAA,CAAA;AAkFA,MAAM+tD,SAAY,GAAA,CAAC7sD,IAA2B,qBAAAlB,GAAA,CAAA,KAAA,EAAA;AAAA,EAAK,KAAO,EAAA,EAAA;AAAA,EAAI,MAAQ,EAAA,EAAA;AAAA,EACnB,OAAQ,EAAA,WAAA;AAAA,EACR,KAAO,EAAA;AAAA,IAAEmhC,SAAW,EAAA,YAAA;AAAA,GAFzB;AAAA,EAGK,OAAQ,EAAA,KAAA;AAAA,EACR,KAAM,EAAA,4BAAA;AAAA,EAC5D,QAAA,sBAAA,GAAA,EAAA;AAAA,IAAG,MAAA,EAAQjgC,IAAS,KAAA,OAAA,GAAU,SAAY,GAAA,OAAA;AAAA,IAAS,WAAY,EAAA,KAAA;AAAA,IAC5D,QAAS,EAAA,SAAA;AAAA,IACR,QAAA,sBAAA,MAAA,EAAA;AAAA,MACI,CAAE,EAAA,8sCAAA;AAAA,MACF,IAAA,EAAMA,IAAS,KAAA,OAAA,GAAU,SAAY,GAAA,OAAA;AAAA,MAAS,QAAS,EAAA,SAAA;AAAA,KAF3D,CAAA;AAAA,GAFJ,CAAA;AALiD,CAA9C,CAAA,CAAA;AAaA,MAAM8sD,UAAa,GAAA,CAAC9sD,IAA2B,qBAAAlB,GAAA,CAAA,KAAA,EAAA;AAAA,EAClD,IAAA,EAAMkB,IAAS,KAAA,OAAA,GAAU,SAAY,GAAA,OAAA;AAAA,EACrC,IAAK,EAAA,KAAA;AAAA,EACL,OAAQ,EAAA,WAAA;AAAA,EACR,KAAO,EAAA,EAAA;AAAA,EACP,MAAQ,EAAA,EAAA;AAAA,EACR,KAAM,EAAA,4BAAA;AAAA,EACN,QAAA,sBAAA,MAAA,EAAA;AAAA,IACI,CAAE,EAAA,0sBAAA;AAAA,GADN,CAAA;AAPkD,CAA/C,CAAA,CAAA;AAYA,MAAM+sD,YAAe,GAAA,CAAC/sD,IAA2B,qBAAAlB,GAAA,CAAA,KAAA,EAAA;AAAA,EACpD,KAAM,EAAA,4BAAA;AAAA,EACN,KAAO,EAAA,EAAA;AAAA,EAAI,MAAQ,EAAA,EAAA;AAAA,EACnB,OAAQ,EAAA,WAAA;AAAA,EACR,QAAA,sBAAA,GAAA,EAAA;AAAA,IACI,QAAA,sBAAA,MAAA,EAAA;AAAA,MACI,CAAE,EAAA,4PAAA;AAAA,MACF,IAAA,EAAMkB,IAAS,KAAA,OAAA,GAAU,SAAY,GAAA,OAAA;AAAA,KAFzC,CAAA;AAAA,GADJ,CAAA;AAJoD,CAAjD,CAAA,CAAA;AAWA,MAAMgtD,aAAgB,GAAA,CAAChtD,IAA2B,qBAAAlB,GAAA,CAAA,KAAA,EAAA;AAAA,EACrD,KAAM,EAAA,4BAAA;AAAA,EAA6B,KAAO,EAAA,EAAA;AAAA,EAAI,MAAQ,EAAA,EAAA;AAAA,EACtD,OAAQ,EAAA,aAAA;AAAA,EACR,QAAA,sBAAA,GAAA,EAAA;AAAA,IACI,QAAA,sBAAA,MAAA,EAAA;AAAA,MACI,CAAE,EAAA,+MAAA;AAAA,MACF,IAAA,EAAMkB,IAAS,KAAA,OAAA,GAAU,SAAY,GAAA,OAAA;AAAA,KAFzC,CAAA;AAAA,GADJ,CAAA;AAHqD,CAAlD,CAAA,CAAA;AAUA,MAAMitD,WAAc,GAAA,CAACjtD,IAA2B,qBAAAlB,GAAA,CAAA,KAAA,EAAA;AAAA,EACnD,KAAM,EAAA,4BAAA;AAAA,EAA6B,KAAO,EAAA,EAAA;AAAA,EAAI,MAAQ,EAAA,EAAA;AAAA,EACtD,OAAQ,EAAA,WAAA;AAAA,EACR,QAAA,sBAAA,MAAA,EAAA;AAAA,IAAM,IAAA,EAAMkB,IAAS,KAAA,OAAA,GAAU,SAAY,GAAA,OAAA;AAAA,IACrC,CAAE,EAAA,4fAAA;AAAA,GADR,CAAA;AAHmD,CAAhD,CAAA;;AC1FP,MAAM2R,SAAYC,GAAAA,UAAAA,CAAW,CAACC,KAAAA,KAC1BC,YAAa,CAAA;AAAA,EACT8pC,IAAM,EAAA;AAAA,IACF72B,OAAAA,EAASlT,KAAMO,CAAAA,OAAAA,CAAQ,CAAd,CAAA;AAAA,IACTtL,KAAO,EAAA,GAAA;AAAA,IACPsS,MAAQ,EAAA,GAAA;AAAA,GAHN;AADG,CAAD,CADY,CAAA,CAAA;AAqCM,SAAA,iBAAA,CAAA;AAAA,EACI8zC,cAAAA;AAAAA,EACAtR,IAAAA;AAAAA,EACA8J,aAAAA;AAAAA,EACAD,WAAAA;AAAAA,EACAn2C,YAAAA;AAAAA,EACA69C,eAAAA;AAAAA,EACAC,mBAAsB,GAAA,KAAA;AAAA,CACC,EAAA;AACnD36C,EAAAA,MAAAA,UAAUd,SAAhB,EAAA,CAAA;AACMtS,EAAAA,MAAAA,iBAAiB0rC,iBAAvB,EAAA,CAAA;AACMsiB,EAAAA,MAAAA,YAAY/tC,YAAlB,EAAA,CAAA;AAEM,EAAA,MAAA,CAACguC,qBAAAA,EAAuBC,wBAA4BlvD,CAAAA,GAAAA,QAAAA,CAAS,KAAD,CAAA,CAAA;AAE5DmvD,EAAAA,MAAAA,qBAAAA,GAAkD9H,aAAc3iD,CAAAA,GAAAA,CAAKqG,CAAM,CAAA,KAAA;AAC7E,IAAI,IAAA,OAAOA,MAAM,QAAU,EAAA;AAChBA,MAAAA,OAAAA,CAAEq9C,CAAAA,QAAAA,CAAAA;AAAAA,KACZ;AAAM,MAAOr9C,OAAAA,CAAAA,CAAAA;AAAAA,GAHsC,CAAA,CAAA;AAMxD,EAA0B,SAAA,cAAA,GAAA;AAClBqkD,IAAAA,IAAAA,SAAAA,CAAAA;AACJ,IAAMC,MAAAA,YAAAA,GAAe,CAAC,2BAAA,EAA6B,8BAA9B,CAAA,CAAA;AACjBp+C,IAAAA,IAAAA,aAAa+4C,SAAW,EAAA;AACxB,MAAI/4C,IAAAA,YAAAA,CAAa+4C,SAAUsF,CAAAA,IAAAA,KAAS,4BAA8B,EAAA;AAC9DF,QAAAA,SAAAA,wBACIl1C,QAAA,EAAA;AAAA,UAAA,QAAA,EAAA,iBACIzZ,GAAA,CAAC,GAAD,EAAA;AAAA,YAAK,CAAG,EAAA,CAAA;AAAA,YAAR,QAAA,sBACK,SAAD,EAAA;AAAA,cACI,KAAO,EAAA,8EAAA;AAAA,aADX,CAAA;AAAA,WADJ,CAAA,EAKC2mD,WACD,oBAAA3mD,GAAA,CAAC,GAAD,EAAA;AAAA,YAAK,CAAG,EAAA,CAAA;AAAA,YACJ,QAAA,sBAAA,GAAA,EAAA;AAAA,cAAG,IAAA,EAAO,CAA8C2mD,4CAAAA,EAAAA,WAAAA,CAAYjmC,OAAQouC,CAAAA,SAAAA,CAAAA,yBAAAA,CAAAA;AAAAA,cACzE,GAAI,EAAA,qBAAA;AAAA,cACJ,MAAO,EAAA,QAAA;AAAA,cAFV,QAAA,sBAGK,MAAD,EAAA;AAAA,gBAAQ,OAAQ,EAAA,MAAA;AAAA,gBACR,KAAM,EAAA,SAAA;AAAA,gBADd,QAAA,EAAA,6BAAA;AAAA,eAAA,CAAA;AAAA,aAHJ,CAAA;AAAA,WARR,CAAA,CAAA;AAAA,SADJ,CAAA,CAAA;AAAA,iBAmBO,CAACF,YAAAA,CAAarkD,SAASiG,YAAa+4C,CAAAA,SAAAA,CAAUsF,IAA7C,CAAoD,EAAA;AAC5D5jD,QAAQwI,OAAAA,CAAAA,KAAAA,CAAMjD,aAAa+4C,SAA3B,CAAA,CAAA;AACAoF,QAAAA,SAAAA,uBACK,GAAD,EAAA;AAAA,UAAK,CAAG,EAAA,CAAA;AAAA,UAAR,QAAA,sBACK,SAAD,EAAA;AAAA,YAAW,KAAA,EAAOn+C,aAAa+4C,SAAU5pD,CAAAA,OAAAA;AAAAA,WAAzC,CAAA;AAAA,SAFR,CAAA,CAAA;AAAA,OAIH;AAAA,KACJ;AACD,IAAOgvD,OAAAA,SAAAA,CAAAA;AAAAA,GACV;AAED,EAAItR,IAAAA,aAAAA,CAAAA;AACJ,EAAA,IAAIP,IAAM,EAAA;AACNO,IAAAA,aAAAA,uBAAgB,KAAA,EAAA;AAAA,MAAK,WAAW1pC,OAAQmpC,CAAAA,IAAAA;AAAAA,MACnB,GAAKA,EAAAA,IAAAA;AAAAA,MACL,GAAK,EAAA,MAAA;AAAA,KAF1B,CAAA,CAAA;AAAA,GAGG,MAAA;AACHO,IAAAA,aAAAA,uBAAgB,KAAA,EAAA;AAAA,MAAK,WAAW1pC,OAAQmpC,CAAAA,IAAAA;AAAAA,MAAxB,QACZ,kBAAA98C,GAAA,CAAC,WAAD,EAAA,EAAA,CAAA;AAAA,KADJ,CAAA,CAAA;AAAA,GAGH;AAEG+uD,EAAAA,IAAAA,iBAAAA,CAAAA;AACAxuD,EAAAA,IAAAA,eAAesQ,eAAiB,EAAA;AAChC,IAAI,IAAA,OAAOtQ,cAAesQ,CAAAA,eAAAA,KAAoB,QAAU,EAAA;AACpDk+C,MAAAA,iBAAAA,GAAoBxuD,cAAesQ,CAAAA,eAAAA,CAAAA;AAAAA,KACtC,MAAA,IAAUtQ,cAAesQ,CAAAA,eAAAA,YAA2BjO,KAAO,EAAA;AACxDmsD,MAAAA,iBAAAA,GAAoBxuD,eAAesQ,eAAgBlR,CAAAA,OAAAA,CAAAA;AAAAA,KAChD,MAAA;AACHovD,MAAoB,iBAAA,GAAA,oGAAA,CAAA;AAAA,KACvB;AAAA,GACJ;AAGD,EAAA,2BACK,IAAD,EAAA;AAAA,IACI,EAAI,EAAA,IAAA;AAAA,IACJ,OAAS,EAAA,GAAA;AAAA,IACT,YAHJ,EAAA,IAAA;AAAA,IAII,aAJJ,EAAA,IAAA;AAAA,IAAA,QAAA,sBAKK,GAAD,EAAA;AAAA,MAAK,EAAI,EAAA;AAAA,QACL77C,OAAS,EAAA,MAAA;AAAA,QACTyG,aAAe,EAAA,QAAA;AAAA,QACfmB,cAAgB,EAAA,QAAA;AAAA,QAChB3H,UAAY,EAAA,QAAA;AAAA,QACZ+V,SAAW,EAAA,OAAA;AAAA,QACXhB,CAAG,EAAA,CAAA;AAAA,OANP;AAAA,MAAA,QAAA,uBAQK,GAAD,EAAA;AAAA,QAAK,EAAI,EAAA;AAAA,UACLhV,OAAS,EAAA,MAAA;AAAA,UACTyG,aAAe,EAAA,QAAA;AAAA,UACfxG,UAAY,EAAA,QAAA;AAAA,UACZnL,KAAO,EAAA,MAAA;AAAA,UACPsQ,QAAU,EAAA,GAAA;AAAA,SALd;AAAA,QAAA,QAAA,EAAA,iBAQItY,GAAA,CAAC,GAAD,EAAA;AAAA,UAAK,CAAG,EAAA,CAAA;AAAA,UACHq9C,QAAAA,EAAAA,aAAAA;AAAAA,SADL,CAAA,EAIC0R,iBACD,oBAAA/uD,GAAA,CAAC,GAAD,EAAA;AAAA,UAAK,CAAG,EAAA,CAAA;AAAA,UAAR,QAAA,sBACK,SAAD,EAAA;AAAA,YACI,KAAO+uD,EAAAA,iBAAAA;AAAAA,WADX,CAAA;AAAA,SADJ,CAKChT,EAAAA,cAAAA,IAEA,CAACyS,qBAAAA,yBAAyB/0C,QAAA,EAAA;AAAA,UAAA,QAAA,EAAA,CAEtBu1C,sBAAuBx+C,CAAAA,YAAAA,EAAck+C,qBAAuBH,EAAAA,SAAAA,CAAUrtD,IAAhD,CAAA,EAEtBwtD,qBAAsBnkD,CAAAA,QAAAA,CAAS,UAA/B,CAAA,wBACA,WAAD,EAAA;AAAA,YACI,IAAM,EAAA,gBAAA;AAAA,YACN,IAAA,sBAAO,SAAD,EAAA;AAAA,cAAW,QAAU,EAAA,OAAA;AAAA,aAF/B,CAAA;AAAA,YAGI,OAAA,EAAS,MAAMkkD,wBAAAA,CAAyB,IAAD,CAAA;AAAA,WARpB,CAWtBC,EAAAA,qBAAAA,CAAsBnkD,SAAS,WAA/B,CAAA,wBACA,WAAD,EAAA;AAAA,YACI,IAAM,EAAA,oBAAA;AAAA,YACN,IAAA,sBAAO,iBAAD,EAAA;AAAA,cAAmB,QAAU,EAAA,OAAA;AAAA,aAFvC,CAAA;AAAA,YAGI,SAASiG,YAAa43C,CAAAA,cAAAA;AAAAA,WAH1B,CAAA,EAKCgG,cACD,oBAAApuD,GAAA,CAAC,GAAD,EAAA;AAAA,YAAK,CAAG,EAAA,CAAA;AAAA,YAAR,QAAA,sBACK,MAAD,EAAA;AAAA,cAAQ,SAASwQ,YAAai5C,CAAAA,SAAAA;AAAAA,cAA9B,QAAA,EAAA,YAAA;AAAA,aAAA,CAAA;AAAA,WAnBmB,CAAA,CAAA;AAAA,SAAA,CAAA,EA2B1B+E,qBAAyB,oBAAAxuD,GAAA,CAAC,SAAD,EAAA;AAAA,UACtB,YAAA;AAAA,UACA,OAAA,EAAS,MAAMyuD,wBAAAA,CAAyB,KAAD,CAAA;AAAA,UACvC,MAAMF,SAAUrtD,CAAAA,IAAAA;AAAAA,UAChB,eAAA;AAAA,UACA,mBAAA;AAAA,SApDR,CAAA,CAAA;AAAA,OAAA,CAAA;AAAA,KARJ,CAAA;AAAA,GANR,CAAA,CAAA;AAyEH,CAAA;AAED,SAAqB,WAAA,CAAA;AAAA,EACIisC,IAAAA;AAAAA,EACAvoB,OAAAA;AAAAA,EACArR,IAAAA;AAAAA,CAC6D,EAAA;AAClF,EAAA,2BACK,GAAD,EAAA;AAAA,IAAK,CAAG,EAAA,GAAA;AAAA,IAAK,KAAO,EAAA,MAAA;AAAA,IAApB,QAAA,sBACK,MAAD,EAAA;AAAA,MAAQ,SAAR,EAAA,IAAA;AAAA,MACQ,OAAQ,EAAA,UAAA;AAAA,MACR,OAAA;AAAA,MAFR,QAAA,uBAGK,GAAD,EAAA;AAAA,QAAK,EAAI,EAAA;AAAA,UACL2U,CAAG,EAAA,GAAA;AAAA,UACHhV,OAAS,EAAA,MAAA;AAAA,UACTlL,KAAO,EAAA,OAAA;AAAA,UACPsS,MAAQ,EAAA,MAAA;AAAA,UACRnH,UAAY,EAAA,QAAA;AAAA,UACZ87C,YAAc,EAAA,QAAA;AAAA,SANlB;AAAA,QAAA,QAAA,EAAA,iBAQIjvD,GAAA,CAAC,GAAD,EAAA;AAAA,UAAK,EAAI,EAAA;AAAA,YACLkT,OAAS,EAAA,MAAA;AAAA,YACTyG,aAAe,EAAA,QAAA;AAAA,YACf3R,KAAO,EAAA,MAAA;AAAA,YACPmL,UAAY,EAAA,QAAA;AAAA,YACZ87C,YAAc,EAAA,QAAA;AAAA,WALlB;AAAA,UAOK9hB,QAAAA,EAAAA,IAAAA;AAAAA,SAfT,CAiBI,kBAAAntC,GAAA,CAAC,GAAD,EAAA;AAAA,UAAK,EAAI,EAAA;AAAA,YACLolB,QAAU,EAAA,CAAA;AAAA,YACV8pC,EAAI,EAAA,CAAA;AAAA,YACJ9iC,SAAW,EAAA,QAAA;AAAA,WAHf;AAAA,UAII7Y,QAAAA,EAAAA,IAAAA;AAAAA,SArBR,CAAA,CAAA;AAAA,OAAA,CAAA;AAAA,KAHJ,CAAA;AAAA,GAFR,CAAA,CAAA;AA+BH,CAAA;AAED,SAAmB,SAAA,CAAA;AAAA,EACIsuB,OAAAA;AAAAA,EACArxB,YAAAA;AAAAA,EACAtP,IAAAA;AAAAA,EACAmtD,eAAAA;AAAAA,EACAC,mBAAAA;AAAAA,CAOpB,EAAA;AAEOa,EAAAA,MAAAA,WAAAA,GAAc3oD,OAAgC,IAA1B,CAAA,CAAA;AAEpB,EAAA,MAAA,CAAC+gB,KAAO6nC,EAAAA,QAAAA,CAAAA,GAAY7vD,QAA1B,EAAA,CAAA;AACM,EAAA,MAAA,CAAC8vD,kBAAoBC,EAAAA,qBAAAA,CAAAA,GAAyB/vD,QAApD,EAAA,CAAA;AACM,EAAA,MAAA,CAAC0pD,QAAUsG,EAAAA,WAAAA,CAAAA,GAAehwD,QAAhC,EAAA,CAAA;AAEA,EAAA,MAAMiwD,kBAAkBH,kBAAuB3vD,KAAAA,KAAAA,CAAAA,CAAAA;AACzC+vD,EAAAA,MAAAA,SAAYJ,GAAAA,kBAAAA,IAAsBA,kBAAmB9kD,CAAAA,QAAAA,CAAS,UAA5B,CAAA,CAAA;AACxC,EAAMmlD,MAAAA,kBAAAA,GAAqBL,sBAAsB,CAACA,kBAAAA,CAAmB9kD,SAAS,UAA5B,CAAA,IAA2C8kD,mBAAmB1sD,MAAS,GAAA,CAAA,CAAA;AACnHgtD,EAAAA,MAAAA,gBAAmBN,GAAAA,kBAAAA,IAAsB,CAACA,kBAAAA,CAAmB9kD,SAAS,UAA5B,CAAA,CAAA;AAEhD1I,EAAAA,SAAAA,CAAU,MAAM;AACZoJ,IAAQqmB,OAAAA,CAAAA,GAAAA,CAAI,aAAam+B,SAAzB,CAAA,CAAA;AACI,IAACA,IAAAA,CAAAA,SAAAA,IAAaE,gBAAqBR,KAAAA,WAAAA,CAAY/nD,OAAS,EAAA;AACxD+nD,MAAAA,WAAAA,CAAY/nD,QAAQwoB,KAApB,EAAA,CAAA;AAAA,KACH;AAAA,GACF,EAAA,CAAC6/B,SAAWE,EAAAA,gBAAZ,CALM,CAAA,CAAA;AAOT9tD,EAAAA,SAAAA,CAAU,MAAM;AACR,IAAA,IAAA,CAACs6B,QAAAA;AAAU,MAAA,OAAA;AACf,IAAMsP,MAAAA,WAAAA,GAAc,CAAC1hB,KAAe,KAAA;AAChC,MAAIA,IAAAA,KAAAA,CAAM2hB,YAAY,EAAI,EAAA;AACtB7J,QAAO,OAAA,EAAA,CAAA;AAAA,OACV;AAAA,KAHL,CAAA;AAKA1F,IAASC,QAAAA,CAAAA,gBAAAA,CAAiB,SAAWqP,EAAAA,WAAAA,EAAa,KAAlD,CAAA,CAAA;AACA,IAAA,OAAO,MAAM;AACTtP,MAASI,QAAAA,CAAAA,mBAAAA,CAAoB,SAAWkP,EAAAA,WAAAA,EAAa,KAArD,CAAA,CAAA;AAAA,KADJ,CAAA;AAAA,GAGH,EAAE,CAACtP,QAAD,CAXM,CAAA,CAAA;AAaT,EAA4B,SAAA,gBAAA,GAAA;AACxB,IAAA,IAAI5U,KAAO,EAAA;AACP/W,MAAAA,YAAAA,CAAa84C,0BAA2B/hC,CAAAA,KAAxC,CAA+CzY,CAAAA,IAAAA,CAAMugD,CAAuB,mBAAA,KAAA;AACxEpkD,QAAAA,OAAAA,CAAQqmB,IAAI+9B,mBAAZ,CAAA,CAAA;AACAC,QAAAA,qBAAAA,CAAsBD,mBAAD,CAAA,CAAA;AAAA,OAFzB,CAAA,CAAA;AAAA,KAIH;AAAA,GACJ;AAED,EAA+B,SAAA,mBAAA,GAAA;AACvB9nC,IAAAA,IAAAA,SAAS0hC,QAAU,EAAA;AACnBz4C,MAAaw4C,YAAAA,CAAAA,kBAAAA,CAAmBzhC,OAAO0hC,QAAvC,CAAA,CAAA;AAAA,KACH;AAAA,GACJ;AAED,EAA8B,SAAA,kBAAA,GAAA;AACtB1hC,IAAAA,IAAAA,SAAS0hC,QAAU,EAAA;AACnBz4C,MAAa44C,YAAAA,CAAAA,8BAAAA,CAA+B7hC,OAAO0hC,QAAnD,CAAA,CAAA;AAAA,KACH;AAAA,GACJ;AAEK2G,EAAAA,MAAAA,gBAAgB,MAAM;AACxB,IAAA,IAAIJ,eAAiB,EAAA;AACjB3tB,MAAO,OAAA,EAAA,CAAA;AAAA,KACJ,MAAA;AACHytB,MAAAA,qBAAAA,CAAsB5vD,KAAD,CAAA,CAAA,CAAA;AAAA,KACxB;AAAA,GALL,CAAA;AAQA,EAAM6oC,MAAAA,YAAAA,GAAe,CAACxe,KAAe,KAAA;AACjCA,IAAAA,KAAAA,CAAMvH,cAAN,EAAA,CAAA;AACA,IAAA,IAAIgtC,eAAiB,EAAA;AACjBK,MAAgB,gBAAA,EAAA,CAAA;AAAA,eACTJ,SAAW,EAAA;AAClBK,MAAmB,mBAAA,EAAA,CAAA;AAAA,eACZH,gBAAkB,EAAA;AACzBI,MAAkB,kBAAA,EAAA,CAAA;AAAA,KACrB;AAAA,GARL,CAAA;AAWM33C,EAAAA,MAAAA,KAAQu3C,GAAAA,gBAAAA,GACR,wEACCF,GAAAA,SAAAA,GAAY,4BAA+B,GAAA,yBAAA,CAAA;AAC5CzzB,EAAAA,MAAAA,MAAS2zB,GAAAA,gBAAAA,GAAmB,gBAAoBF,GAAAA,SAAAA,GAAY,OAAU,GAAA,IAAA,CAAA;AAE5E,EAAA,IAAIC,kBAAoB,EAAA;AACpB,IAAA,4BACK,IAAD,EAAA;AAAA,MAAM,SAAN,EAAA,IAAA;AAAA,MAAgB,OAAS,EAAA,CAAA;AAAA,MAAzB,QAAA,EAAA,iBACI1vD,GAAA,CAAC,IAAD,EAAA;AAAA,QAAM,IAAN,EAAA,IAAA;AAAA,QAAW,EAAI,EAAA,EAAA;AAAA,QAAf,QAAA,sBACK,UAAD,EAAA;AAAA,UACI,OAAS4vD,EAAAA,aAAAA;AAAAA,UADb,QAAA,sBAEK,aAAD,EAAA;AAAA,YAAe,EAAI,EAAA;AAAA,cAAE5nD,KAAO,EAAA,EAAA;AAAA,cAAIsS,MAAQ,EAAA,EAAA;AAAA,aAArB;AAAA,WAAnB,CAAA;AAAA,SAFJ,CAAA;AAAA,OAFR,CAQI,kBAAAva,IAAA,CAAC,IAAD,EAAA;AAAA,QAAM,IAAN,EAAA,IAAA;AAAA,QAAW,EAAI,EAAA,EAAA;AAAA,QAAI,EAAI,EAAA;AAAA,UAAEmoB,CAAG,EAAA,CAAA;AAAA,SAA5B;AAAA,QAAA,QAAA,EAAA,iBACIloB,GAAA,CAAC,UAAD,EAAA;AAAA,UAAY,KAAO,EAAA,QAAA;AAAA,UAAU,OAAS,EAAA,WAAA;AAAA,UAAtC,QAAA,EAAA,6BAAA;AAAA,SADJ,CAII,kBAAAD,IAAA,CAAC,UAAD,EAAA;AAAA,UAAY,KAAO,EAAA,QAAA;AAAA,UAAU,OAAS,EAAA,OAAA;AAAA,UAAtC,QAAA,EAAA,CAAA,iDAAA,EAE2BwnB,KAF3B,CAAA;AAAA,SAJJ,CAAA,CAAA;AAAA,OARJ,CAkBI,kBAAAvnB,GAAA,CAAC,IAAD,EAAA;AAAA,QAAM,IAAN,EAAA,IAAA;AAAA,QAAW,EAAI,EAAA,EAAA;AAAA,QACVqvD,QAAAA,EAAAA,kBAAAA,IAAsBL,sBAAuBx+C,CAAAA,YAAAA,EAAc6+C,oBAAoBnuD,IAAnC,CAAA;AAAA,OAnBrD,CAAA,CAAA;AAAA,KADJ,CAAA,CAAA;AAAA,GAwBH;AAED,EAAA,2BACK,KAAD,EAAA;AAAA,IACI,SAAU,EAAA,IAAA;AAAA,IACV,EAAI,EAAA,IAAA;AAAA,IACJ,YAHJ,EAAA,IAAA;AAAA,IAII,aAJJ,EAAA,IAAA;AAAA,IAKI,QAAA,sBAAA,MAAA,EAAA;AAAA,MAAM,QAAUqnC,EAAAA,YAAAA;AAAAA,MAAhB,QAAA,uBACK,IAAD,EAAA;AAAA,QAAM,SAAN,EAAA,IAAA;AAAA,QAAgB,OAAS,EAAA,CAAA;AAAA,QAAzB,QAAA,EAAA,iBACIvoC,GAAA,CAAC,IAAD,EAAA;AAAA,UAAM,IAAN,EAAA,IAAA;AAAA,UAAW,EAAI,EAAA,EAAA;AAAA,UAAf,QAAA,sBACK,UAAD,EAAA;AAAA,YACI,OAAS4vD,EAAAA,aAAAA;AAAAA,YADb,QAAA,sBAEK,aAAD,EAAA;AAAA,cAAe,EAAI,EAAA;AAAA,gBAAE5nD,KAAO,EAAA,EAAA;AAAA,gBAAIsS,MAAQ,EAAA,EAAA;AAAA,eAArB;AAAA,aAAnB,CAAA;AAAA,WAFJ,CAAA;AAAA,SAFR,CAQI,kBAAAta,GAAA,CAAC,IAAD,EAAA;AAAA,UAAM,IAAN,EAAA,IAAA;AAAA,UAAW,EAAI,EAAA,EAAA;AAAA,UAAI,EAAI,EAAA;AAAA,YACnBkoB,CAAG,EAAA,CAAA;AAAA,YACHhV,OAAAA,EAAUy8C,gBAAoBrB,IAAAA,mBAAAA,GAAuB,MAAS,GAAA,MAAA;AAAA,WAFlE;AAAA,UAAA,QAAA,sBAIK,UAAD,EAAA;AAAA,YAAY,KAAO,EAAA,QAAA;AAAA,YACP,OAAS,EAAA,WAAA;AAAA,YAAcl2C,QAAAA,EAAAA,KAAAA;AAAAA,WADnC,CAAA;AAAA,SAZR,CAgBI,kBAAApY,GAAA,CAAC,IAAD,EAAA;AAAA,UAAM,IAAN,EAAA,IAAA;AAAA,UAAW,EAAI,EAAA,EAAA;AAAA,UACT,EAAI,EAAA;AAAA,YAAEkT,OAAAA,EAASs8C,kBAAkB,SAAY,GAAA,MAAA;AAAA,WADnD;AAAA,UAAA,QAAA,sBAEK9rB,WAAD,EAAA;AAAA,YAAW,WAAY,EAAA,OAAA;AAAA,YAAQ,SAA/B,EAAA,IAAA;AAAA,YAAyC,SAAzC,EAAA,IAAA;AAAA,YACW,KAAOnc,EAAAA,KAAAA;AAAAA,YACP,UAAU/W,YAAaG,CAAAA,WAAAA;AAAAA,YACvB,IAAK,EAAA,OAAA;AAAA,YACL,QAAWoZ,EAAAA,CAAAA,KAAAA,KAAUqlC,QAASrlC,CAAAA,KAAAA,CAAMjgB,OAAOoC,KAAd,CAAA;AAAA,WAJxC,CAAA;AAAA,SAlBR,CAyBI,kBAAAlM,GAAA,CAAC,IAAD,EAAA;AAAA,UAAM,IAAN,EAAA,IAAA;AAAA,UAAW,EAAI,EAAA,EAAA;AAAA,UAAf,UACK2vD,gBAAoBtB,IAAAA,eAAAA;AAAAA,SA1B7B,CA6BI,kBAAAruD,GAAA,CAAC,IAAD,EAAA;AAAA,UAAM,IAAN,EAAA,IAAA;AAAA,UAAW,EAAI,EAAA,EAAA;AAAA,UACT,EAAI,EAAA;AAAA,YAAEkT,OAASu8C,EAAAA,SAAAA,IAAcE,gBAAoB,IAAA,CAACrB,sBAAuB,SAAY,GAAA,MAAA;AAAA,WAD3F;AAAA,UAAA,QAAA,sBAEK5qB,WAAD,EAAA;AAAA,YAAW,WAAY,EAAA,UAAA;AAAA,YAAW,SAAlC,EAAA,IAAA;AAAA,YACW,KAAOulB,EAAAA,QAAAA;AAAAA,YACP,UAAUz4C,YAAaG,CAAAA,WAAAA;AAAAA,YACvB,QAAUw+C,EAAAA,WAAAA;AAAAA,YACV,IAAK,EAAA,UAAA;AAAA,YACL,QAAWplC,EAAAA,CAAAA,KAAAA,KAAUwlC,WAAYxlC,CAAAA,KAAAA,CAAMjgB,OAAOoC,KAAd,CAAA;AAAA,WAL3C,CAAA;AAAA,SA/BR,CAuCI,kBAAAlM,GAAA,CAAC,IAAD,EAAA;AAAA,UAAM,IAAN,EAAA,IAAA;AAAA,UAAW,EAAI,EAAA,EAAA;AAAA,UAAf,QAAA,uBACK,GAAD,EAAA;AAAA,YAAK,EAAI,EAAA;AAAA,cACLkT,OAAAA,EAAUy8C,gBAAoBrB,IAAAA,mBAAAA,GAAuB,MAAS,GAAA,MAAA;AAAA,cAC9DxzC,cAAgB,EAAA,KAAA;AAAA,cAChB3H,UAAY,EAAA,QAAA;AAAA,cACZnL,KAAO,EAAA,MAAA;AAAA,aAJX;AAAA,YAAA,QAAA,EAAA,CAOKwI,YAAaG,CAAAA,WAAAA,wBACb,gBAAD,EAAA;AAAA,cAAkB,EAAI,EAAA;AAAA,gBAAEuX,CAAG,EAAA,CAAA;AAAA,eAA3B;AAAA,cAAgC,IAAM,EAAA,EAAA;AAAA,cACpB,SAAW,EAAA,CAAA;AAAA,aATjC,CAYI,kBAAAloB,GAAA,CAAC,MAAD,EAAA;AAAA,cAAQ,IAAK,EAAA,QAAA;AAAA,cACRg8B,QAAAA,EAAAA,MAAAA;AAAAA,aAbT,CAAA,CAAA;AAAA,WAAA,CAAA;AAAA,SAxCR,CAAA,CAAA;AAAA,OAAA,CAAA;AAAA,KADJ,CAAA;AAAA,GANR,CAAA,CAAA;AAqEH,CAAA;AAED,SAAgCxrB,sBAAAA,CAAAA,YAAAA,EAAoCw/C,WAAqB9uD,IAAwB,EAAA;AACtG,EAAA,4BAAAuY,QAAA,EAAA;AAAA,IAAA,UAAA,CACFu2C,SAAAA,CAAUzlD,SAAS,YAAnB,CAAA,wBAAqC,WAAD,EAAA;AAAA,MACjC,IAAM,EAAA,qBAAA;AAAA,MACN,IAAA,EAAMujD,WAAU,CAAA;AAAA,MAChB,SAASt9C,YAAao3C,CAAAA,WAAAA;AAAAA,KAJvB,CAMFoI,EAAAA,SAAAA,CAAUzlD,SAAS,eAAnB,CAAA,wBAAwC,WAAD,EAAA;AAAA,MACpC,IAAM,EAAA,wBAAA;AAAA,MACN,IAAA,EAAM2jD,cAAchtD,IAAD,CAAA;AAAA,MACnB,SAASsP,YAAaq4C,CAAAA,cAAAA;AAAAA,KATvB,CAWFmH,EAAAA,SAAAA,CAAUzlD,SAAS,WAAnB,CAAA,wBAAoC,WAAD,EAAA;AAAA,MAChC,IAAM,EAAA,oBAAA;AAAA,MACN,IAAA,EAAMwjD,UAAU7sD,IAAD,CAAA;AAAA,MACf,SAASsP,YAAa83C,CAAAA,UAAAA;AAAAA,KAdvB,CAgBF0H,EAAAA,SAAAA,CAAUzlD,SAAS,YAAnB,CAAA,wBAAqC,WAAD,EAAA;AAAA,MACjC,IAAM,EAAA,qBAAA;AAAA,MACN,IAAA,EAAMyjD,WAAW9sD,IAAD,CAAA;AAAA,MAChB,SAASsP,YAAam4C,CAAAA,WAAAA;AAAAA,KAnBvB,CAqBFqH,EAAAA,SAAAA,CAAUzlD,SAAS,cAAnB,CAAA,wBAAuC,WAAD,EAAA;AAAA,MACnC,IAAM,EAAA,uBAAA;AAAA,MACN,IAAA,EAAM0jD,aAAa/sD,IAAD,CAAA;AAAA,MAClB,SAASsP,YAAai4C,CAAAA,aAAAA;AAAAA,KAxBvB,CA0BFuH,EAAAA,SAAAA,CAAUzlD,SAAS,aAAnB,CAAA,wBAAsC,WAAD,EAAA;AAAA,MAClC,IAAM,EAAA,sBAAA;AAAA,MACN,IAAA,EAAM4jD,YAAYjtD,IAAD,CAAA;AAAA,MACjB,SAASsP,YAAas4C,CAAAA,YAAAA;AAAAA,KA7BvB,CAAA,CAAA;AAAA,GAAP,CAAA,CAAA;AA+BH;;AChdD,MAAMmH,uBAAAA,GAA0B,CAC5BpI,kBAAAA,CAAmBqI,WADS,CAAA,CAAA;AAqBD,SAAA,cAAA,CAAA;AAAA,EACI7rD,IAAAA;AAAAA,EACAy4C,IAAAA;AAAAA,EACAa,kBAAAA;AAAAA,EACAltC,cAAAA;AAAAA,EACA7C,qBAAAA;AAAAA,EACA7J,UAAAA;AAAAA,EACA2lD,oBAAAA;AAAAA,EACA0E,cAAAA;AAAAA,EACAxH,aAAgBqJ,GAAAA,uBAAAA;AAAAA,EAChBnD,cAAAA;AAAAA,EACAC,cAAAA;AAAAA,EACAtH,YAAAA;AAAAA,EACAC,cAAAA;AAAAA,EACAvrC,UAAAA;AAAAA,EACAtM,cAAAA;AAAAA,EACAC,MAAAA;AAAAA,EACAuuC,QAAAA;AAAAA,EACA5uC,QAAAA;AAAAA,EACAC,kBAAAA;AAAAA,EACAyiD,cAAAA;AAAAA,CACoB,EAAA;AAE7C,EAAA,MAAA;AAAA,IACFxJ,WAAAA;AAAAA,IACAsG,qBAAAA;AAAAA,IACAE,WAAAA;AAAAA,IACAE,mBAAAA;AAAAA,GAAAA,GACA+C,qBAAsB,CAAA;AAAA,IAAErD,cAAAA;AAAAA,IAAgBD,cAAAA;AAAAA,GAAnB,CAAA,CAAA;AAEzB,EAAA,MAAMt8C,eAAqCk2C,uBAAwB,CAAA;AAAA,IAC/DC,WAAAA;AAAAA,IACAC,aAAAA;AAAAA,GAF8D,CAAA,CAAA;AAK5DvmD,EAAAA,MAAAA,aAAagwD,sBAAuB,CAAA;AAAA,IACtC1J,WAAAA;AAAAA,IACA+C,oBAAAA;AAAAA,GAFqC,CAAA,CAAA;AAInCppD,EAAAA,MAAAA,gBAAgBgwD,wBAAyB,CAAA;AAAA,IAAE3J,WAAAA;AAAAA,GAAH,CAAA,CAAA;AAE9C,EAAA,IAAIwG,WAAa,EAAA;AACN,IAAA,4BAAA,KAAA,EAAA;AAAA,MAAA,QAAA,EAAA,CAAA,GAAOA,EAAAA,WAAAA,EAAP,GAAA,CAAA;AAAA,KAAP,CAAA,CAAA;AAAA,GACH;AAED,EAAA,IAAIE,mBAAqB,EAAA;AACd,IAAA,2BAAA,KAAA,EAAA;AAAA,MAAA,QAAA,EAAA,mMAAA;AAAA,KAAP,CAAA,CAAA;AAAA,GAMH;AAED,EAAIJ,IAAAA,qBAAAA,IAAyB,CAACtG,WAAa,EAAA;AACpC,IAAA,4BAAAltC,QAAA,EAAA;AAAA,MAAA,QAAA,EAAA,iBACHzZ,GAAA,CAAC,WAAD,EAAA,EAAA,CAAA,kBACCA,GAAA,CAAA,sBAAA,EAFE,EAAA,CAAA,CAAA;AAAA,KAAP,CAAA,CAAA;AAAA,GAIC;AAED,EAAA,2BACK,aAAD,EAAA;AAAA,IAAe,QAAUyN,EAAAA,QAAAA;AAAAA,IAAzB,QAAA,sBACK,OAAD,EAAA;AAAA,MAAS,UAAA;AAAA,MACA,YAAA;AAAA,MACA,cAAA;AAAA,MACA,qBAAA;AAAA,MACA,cAAA;AAAA,MACA,UAAA;AAAA,MACA,aAAA;AAAA,MACA,mBAAmB,CAAC;AAAA,QAAEV,MAAAA;AAAAA,OAAAA,KAAc,+CAA8C45C,WAAYjmC,CAAAA,OAAAA,CAAQouC,SAA4B/hD,CAAAA,gBAAAA,EAAAA,MAAAA,CAAOzK,QAAQyK,MAAO9D,CAAAA,EAAAA,CAAAA,CAAAA;AAAAA,MACxJ,MAAA;AAAA,MACA,QAAA;AAAA,MACA,kBAAA;AAAA,MAVT,UAWK,CAAC;AAAA,QAAEvI,OAAAA;AAAAA,QAASQ,IAAAA;AAAAA,QAAMqP,OAAAA;AAAAA,OAAc,KAAA;AAEvBwC,QAAAA,MAAAA,QAAQyyC,qBAAsB,CAAA;AAAA,UAChCtkD,IAAAA;AAAAA,UACAukD,YAAAA;AAAAA,UACAC,cAAAA;AAAAA,UACAvrC,UAAAA;AAAAA,SAJ+B,CAAA,CAAA;AAOnC,QAAI6oB,IAAAA,SAAAA,CAAAA;AACJ,QAAA,IAAIzyB,OAAS,EAAA;AACTyyB,UAAY,SAAA,mBAAAhjC,GAAA,CAAC,sBAAb,EAAA,EAAA,CAAA,CAAA;AAAA,SACO,MAAA,IAAA,CAACU,OAAQH,CAAAA,cAAAA,CAAemO,iBAAmB,EAAA;AAClDs0B,UAAAA,SAAAA,uBACK,iBAAD,EAAA;AAAA,YACI,IAAA;AAAA,YACA,cAAA;AAAA,YACA,eAAe4jB,aAAiBqJ,IAAAA,uBAAAA;AAAAA,YAChC,WAAA;AAAA,YACA,YAAA;AAAA,YACIE,GAAAA,cAAAA;AAAAA,WAPZ,CAAA,CAAA;AAAA,SAUG,MAAA;AACHntB,UAAAA,SAAAA,wBACK,QAAD,EAAA;AAAA,YAAU,IAAA;AAAA,YACA,IAAA;AAAA,YACA,kBAAA;AAAA,YAFV,QAAA,EAAA,iBAGIhjC,GAAA,CAAC,gBAAD,EAAA;AAAA,cAAkB,QAAA;AAAA,aAHtB,CAII,kBAAAA,GAAA,CAAC,iBAJL,EAAA,EAAA,CAAA,CAAA;AAAA,WADJ,CAAA,CAAA;AAAA,SAQH;AAED,QAAA,4BACK,aAAD,EAAA;AAAA,UAAe,KAAA;AAAA,UAAf,UAAA,iBACIA,GAAA,CAAC,aADL,EAAA,GAEKgjC,SAFL,CAAA;AAAA,SADJ,CAAA,CAAA;AAAA,OAMH;AAAA,KAnDL,CAAA;AAAA,GAFR,CAAA,CAAA;AAyDH;;AC7IM,SAAA,wBAAA,CAAkClrB,OAAoB6yC,KAA2C,EAAA;AAEpG1/C,EAAQqmB,OAAAA,CAAAA,GAAAA,CAAI,0BAA4BxZ,EAAAA,KAAAA,EAAO6yC,KAA/C,CAAA,CAAA;AACO7yC,EAAAA,OAAAA,KACF0Q,CAAAA,MAAAA,CAAOmiC,KADL,CAAA,CAEF77C,KAAK,CAAC;AAAA,IAAEyhD,IAAAA;AAAAA,GAAgB,KAAA;AACrB,IAAA,OAAOA,IAAKtsD,CAAAA,GAAAA,CAAI,CAACusD,GAAAA,KAAaA,IAAIC,QAA3B,CAAA,CAAA;AAAA,GAHR,CAAA,CAKF1hD,KAAM,CAAA,CAACwS,GAAa,KAAA;AACjBtW,IAAAA,OAAAA,CAAQqmB,IAAI/P,GAAZ,CAAA,CAAA;AACA,IAAA,OAAO,EAAP,CAAA;AAAA,GAPD,CAAA,CAAA;AASV;;;;"}